using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace ProductCrudAPI.Models
{
    public partial class FASTPRODContext : DbContext
    {
        public FASTPRODContext()
        {
        }

        public FASTPRODContext(DbContextOptions<FASTPRODContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Abawire> Abawires { get; set; } = null!;
        public virtual DbSet<AbawireLog> AbawireLogs { get; set; } = null!;
        public virtual DbSet<AccountingPrivacyEventLog> AccountingPrivacyEventLogs { get; set; } = null!;
        public virtual DbSet<AccountingSystem> AccountingSystems { get; set; } = null!;
        public virtual DbSet<Activity> Activities { get; set; } = null!;
        public virtual DbSet<ActivityGrp> ActivityGrps { get; set; } = null!;
        public virtual DbSet<ActivityGrpActivityXref> ActivityGrpActivityXrefs { get; set; } = null!;
        public virtual DbSet<AddrBookAddrXref> AddrBookAddrXrefs { get; set; } = null!;
        public virtual DbSet<AddrBookElecAddrXref> AddrBookElecAddrXrefs { get; set; } = null!;
        public virtual DbSet<AddrBookEntry> AddrBookEntries { get; set; } = null!;
        public virtual DbSet<AddrBookEntryGlobalSearch> AddrBookEntryGlobalSearches { get; set; } = null!;
        public virtual DbSet<AgentFile> AgentFiles { get; set; } = null!;
        public virtual DbSet<AgentNetJacketDailycopy> AgentNetJacketDailycopies { get; set; } = null!;
        public virtual DbSet<AgentNetPolicyNumber> AgentNetPolicyNumbers { get; set; } = null!;
        public virtual DbSet<AgentNetRemittance> AgentNetRemittances { get; set; } = null!;
        public virtual DbSet<AgentNetRemittanceCplFee> AgentNetRemittanceCplFees { get; set; } = null!;
        public virtual DbSet<AgentNetValidationRequestStatus> AgentNetValidationRequestStatuses { get; set; } = null!;
        public virtual DbSet<Akaname> Akanames { get; set; } = null!;
        public virtual DbSet<AlternateBankChangeHistory> AlternateBankChangeHistories { get; set; } = null!;
        public virtual DbSet<ApplSourceBusOrgInfo> ApplSourceBusOrgInfos { get; set; } = null!;
        public virtual DbSet<Application> Applications { get; set; } = null!;
        public virtual DbSet<ApplicationMaintAudit> ApplicationMaintAudits { get; set; } = null!;
        public virtual DbSet<ArbitraryNum> ArbitraryNums { get; set; } = null!;
        public virtual DbSet<ArchiveStatus> ArchiveStatuses { get; set; } = null!;
        public virtual DbSet<ArchiveTracking> ArchiveTrackings { get; set; } = null!;
        public virtual DbSet<AssociatedDocumentCloud> AssociatedDocumentClouds { get; set; } = null!;
        public virtual DbSet<AssociationInfo> AssociationInfos { get; set; } = null!;
        public virtual DbSet<AtpphraseMap> AtpphraseMaps { get; set; } = null!;
        public virtual DbSet<AtpproductTemplateMap> AtpproductTemplateMaps { get; set; } = null!;
        public virtual DbSet<AtpsearchRule> AtpsearchRules { get; set; } = null!;
        public virtual DbSet<AtptextElementMap> AtptextElementMaps { get; set; } = null!;
        public virtual DbSet<AttorneyInfo> AttorneyInfos { get; set; } = null!;
        public virtual DbSet<AttrepTruncationSafeguard> AttrepTruncationSafeguards { get; set; } = null!;
        public virtual DbSet<AuditLog> AuditLogs { get; set; } = null!;
        public virtual DbSet<AuditType> AuditTypes { get; set; } = null!;
        public virtual DbSet<AuditType1> AuditTypes1 { get; set; } = null!;
        public virtual DbSet<AuthSignature> AuthSignatures { get; set; } = null!;
        public virtual DbSet<AwsdmsTruncationSafeguard> AwsdmsTruncationSafeguards { get; set; } = null!;
        public virtual DbSet<BankAccount> BankAccounts { get; set; } = null!;
        public virtual DbSet<BankAccountAuthentication> BankAccountAuthentications { get; set; } = null!;
        public virtual DbSet<BankBranch> BankBranches { get; set; } = null!;
        public virtual DbSet<BatchDemandLoanInfo> BatchDemandLoanInfos { get; set; } = null!;
        public virtual DbSet<BatchDetailsBulkConversion> BatchDetailsBulkConversions { get; set; } = null!;
        public virtual DbSet<BatchDetailsCloud> BatchDetailsClouds { get; set; } = null!;
        public virtual DbSet<BigIntConvertedArchiveDb> BigIntConvertedArchiveDbs { get; set; } = null!;
        public virtual DbSet<BpfileBusOrgChangeHistory> BpfileBusOrgChangeHistories { get; set; } = null!;
        public virtual DbSet<BpfileContactChangeHistory> BpfileContactChangeHistories { get; set; } = null!;
        public virtual DbSet<BpfileOwningOfficeChangeHistory> BpfileOwningOfficeChangeHistories { get; set; } = null!;
        public virtual DbSet<BulletinBoard> BulletinBoards { get; set; } = null!;
        public virtual DbSet<BuproductionOfficeXref> BuproductionOfficeXrefs { get; set; } = null!;
        public virtual DbSet<BusOrg> BusOrgs { get; set; } = null!;
        public virtual DbSet<BusOrgAlternateName> BusOrgAlternateNames { get; set; } = null!;
        public virtual DbSet<BusOrgAndContactElectronicAddrXref> BusOrgAndContactElectronicAddrXrefs { get; set; } = null!;
        public virtual DbSet<BusOrgAndContactPhysicalAddrXref> BusOrgAndContactPhysicalAddrXrefs { get; set; } = null!;
        public virtual DbSet<BusOrgContact> BusOrgContacts { get; set; } = null!;
        public virtual DbSet<BusOrgContactNotificationPref> BusOrgContactNotificationPrefs { get; set; } = null!;
        public virtual DbSet<BusOrgContactRelationship> BusOrgContactRelationships { get; set; } = null!;
        public virtual DbSet<BusOrgContactRelationshipChangeHistory> BusOrgContactRelationshipChangeHistories { get; set; } = null!;
        public virtual DbSet<BusOrgContactRoleRelationshipXref> BusOrgContactRoleRelationshipXrefs { get; set; } = null!;
        public virtual DbSet<BusOrgContactRoleXref> BusOrgContactRoleXrefs { get; set; } = null!;
        public virtual DbSet<BusOrgContactWebCustomerXref> BusOrgContactWebCustomerXrefs { get; set; } = null!;
        public virtual DbSet<BusOrgCustomerOption> BusOrgCustomerOptions { get; set; } = null!;
        public virtual DbSet<BusOrgDocumentCopiesXref> BusOrgDocumentCopiesXrefs { get; set; } = null!;
        public virtual DbSet<BusOrgEsubscriptionXref> BusOrgEsubscriptionXrefs { get; set; } = null!;
        public virtual DbSet<BusOrgGlobalSearch> BusOrgGlobalSearches { get; set; } = null!;
        public virtual DbSet<BusOrgLicenseDetailsXref> BusOrgLicenseDetailsXrefs { get; set; } = null!;
        public virtual DbSet<BusOrgMortgageProduct> BusOrgMortgageProducts { get; set; } = null!;
        public virtual DbSet<BusOrgNotificationPref> BusOrgNotificationPrefs { get; set; } = null!;
        public virtual DbSet<BusOrgRefBusOrgXref> BusOrgRefBusOrgXrefs { get; set; } = null!;
        public virtual DbSet<BusOrgRelationship> BusOrgRelationships { get; set; } = null!;
        public virtual DbSet<BusOrgRelationshipChangeHistory> BusOrgRelationshipChangeHistories { get; set; } = null!;
        public virtual DbSet<BusOrgRoleRelationshipXref> BusOrgRoleRelationshipXrefs { get; set; } = null!;
        public virtual DbSet<BusOrgSalesForceXref> BusOrgSalesForceXrefs { get; set; } = null!;
        public virtual DbSet<BusOrgSecurityAgreement> BusOrgSecurityAgreements { get; set; } = null!;
        public virtual DbSet<BusOrgVersionLog> BusOrgVersionLogs { get; set; } = null!;
        public virtual DbSet<BusOrgWebCustomerXref> BusOrgWebCustomerXrefs { get; set; } = null!;
        public virtual DbSet<BusOrgWireInstruction> BusOrgWireInstructions { get; set; } = null!;
        public virtual DbSet<BusUnitAcctSystemXref> BusUnitAcctSystemXrefs { get; set; } = null!;
        public virtual DbSet<BusUnitAutoNumber> BusUnitAutoNumbers { get; set; } = null!;
        public virtual DbSet<BusUnitStampImage> BusUnitStampImages { get; set; } = null!;
        public virtual DbSet<BusinessProgram> BusinessPrograms { get; set; } = null!;
        public virtual DbSet<BusinessProgramBusOrgChangeHistory> BusinessProgramBusOrgChangeHistories { get; set; } = null!;
        public virtual DbSet<BusinessProgramBusOrgContactChangeHistory> BusinessProgramBusOrgContactChangeHistories { get; set; } = null!;
        public virtual DbSet<BusinessProgramBusUnitChangeHistory> BusinessProgramBusUnitChangeHistories { get; set; } = null!;
        public virtual DbSet<BusinessProgramFileChangeHistory> BusinessProgramFileChangeHistories { get; set; } = null!;
        public virtual DbSet<BusinessRule> BusinessRules { get; set; } = null!;
        public virtual DbSet<BusinessSourceType> BusinessSourceTypes { get; set; } = null!;
        public virtual DbSet<BusinessUnit> BusinessUnits { get; set; } = null!;
        public virtual DbSet<BusinessUnitAuditLog> BusinessUnitAuditLogs { get; set; } = null!;
        public virtual DbSet<BusinessUnitXref> BusinessUnitXrefs { get; set; } = null!;
        public virtual DbSet<BusinessunitsForDailyEmailstatus> BusinessunitsForDailyEmailstatuses { get; set; } = null!;
        public virtual DbSet<BusorgSearchVendor> BusorgSearchVendors { get; set; } = null!;
        public virtual DbSet<CdadjustableInterestRate> CdadjustableInterestRates { get; set; } = null!;
        public virtual DbSet<CdadjustablePayment> CdadjustablePayments { get; set; } = null!;
        public virtual DbSet<CdcalculatingCashToClose> CdcalculatingCashToCloses { get; set; } = null!;
        public virtual DbSet<CddeliveryOption> CddeliveryOptions { get; set; } = null!;
        public virtual DbSet<CdloanTermClause> CdloanTermClauses { get; set; } = null!;
        public virtual DbSet<CdpayoffsandPayment> CdpayoffsandPayments { get; set; } = null!;
        public virtual DbSet<CdprojectedPaymentRange> CdprojectedPaymentRanges { get; set; } = null!;
        public virtual DbSet<CdsplitOwnerPolicyAmt> CdsplitOwnerPolicyAmts { get; set; } = null!;
        public virtual DbSet<Cdtdsinfo> Cdtdsinfos { get; set; } = null!;
        public virtual DbSet<CertgoldenCopyFee> CertgoldenCopyFees { get; set; } = null!;
        public virtual DbSet<ChangeNotification> ChangeNotifications { get; set; } = null!;
        public virtual DbSet<ChangeOwningOfficeHistory> ChangeOwningOfficeHistories { get; set; } = null!;
        public virtual DbSet<ChangesForScheduler> ChangesForSchedulers { get; set; } = null!;
        public virtual DbSet<Charge> Charges { get; set; } = null!;
        public virtual DbSet<ChargeAdditionalInfoXref> ChargeAdditionalInfoXrefs { get; set; } = null!;
        public virtual DbSet<ChargeResequence> ChargeResequences { get; set; } = null!;
        public virtual DbSet<ChargeTpcxref> ChargeTpcxrefs { get; set; } = null!;
        public virtual DbSet<CheckDescriptionDetail> CheckDescriptionDetails { get; set; } = null!;
        public virtual DbSet<CheckDisbursement> CheckDisbursements { get; set; } = null!;
        public virtual DbSet<CheckTemplate> CheckTemplates { get; set; } = null!;
        public virtual DbSet<ClassType> ClassTypes { get; set; } = null!;
        public virtual DbSet<ClassTypeTypeCdXref> ClassTypeTypeCdXrefs { get; set; } = null!;
        public virtual DbSet<ClosingDisclosure> ClosingDisclosures { get; set; } = null!;
        public virtual DbSet<ClosingDisclosureEventLog> ClosingDisclosureEventLogs { get; set; } = null!;
        public virtual DbSet<ClosingDisclosureGroupDesc> ClosingDisclosureGroupDescs { get; set; } = null!;
        public virtual DbSet<ClosingDisclosureLenderInfo> ClosingDisclosureLenderInfos { get; set; } = null!;
        public virtual DbSet<ClosingDisclosureReSequencedDatum> ClosingDisclosureReSequencedData { get; set; } = null!;
        public virtual DbSet<ClosingDisclosureTransactionDatum> ClosingDisclosureTransactionData { get; set; } = null!;
        public virtual DbSet<CoInsuranceLiability> CoInsuranceLiabilities { get; set; } = null!;
        public virtual DbSet<CoInsurancePolicy> CoInsurancePolicies { get; set; } = null!;
        public virtual DbSet<CoInsurancePolicyDocXref> CoInsurancePolicyDocXrefs { get; set; } = null!;
        public virtual DbSet<CoInsurancePolicyDocXrefDocPrep> CoInsurancePolicyDocXrefDocPreps { get; set; } = null!;
        public virtual DbSet<CoInsurancePolicyEstimate> CoInsurancePolicyEstimates { get; set; } = null!;
        public virtual DbSet<CoInsurancePrincipalXref> CoInsurancePrincipalXrefs { get; set; } = null!;
        public virtual DbSet<CommentCode> CommentCodes { get; set; } = null!;
        public virtual DbSet<CompletedChangesIdforScheduler> CompletedChangesIdforSchedulers { get; set; } = null!;
        public virtual DbSet<ConfigurationSetting> ConfigurationSettings { get; set; } = null!;
        public virtual DbSet<ConfigurationSettingRepo> ConfigurationSettingRepos { get; set; } = null!;
        public virtual DbSet<ConnectionAuditLog> ConnectionAuditLogs { get; set; } = null!;
        public virtual DbSet<ConvertedArchiveFile> ConvertedArchiveFiles { get; set; } = null!;
        public virtual DbSet<CopyDocsRequest> CopyDocsRequests { get; set; } = null!;
        public virtual DbSet<CopyDocsRequestHistory> CopyDocsRequestHistories { get; set; } = null!;
        public virtual DbSet<CopyPhraseRequest> CopyPhraseRequests { get; set; } = null!;
        public virtual DbSet<CopyToDocPref> CopyToDocPrefs { get; set; } = null!;
        public virtual DbSet<CorpCounter> CorpCounters { get; set; } = null!;
        public virtual DbSet<CorpCpuproductionOffice> CorpCpuproductionOffices { get; set; } = null!;
        public virtual DbSet<CorpEbusInterfaceFormatXref> CorpEbusInterfaceFormatXrefs { get; set; } = null!;
        public virtual DbSet<CorpHudfileType> CorpHudfileTypes { get; set; } = null!;
        public virtual DbSet<CorporateBusOrg> CorporateBusOrgs { get; set; } = null!;
        public virtual DbSet<CountyFtpSiteXref> CountyFtpSiteXrefs { get; set; } = null!;
        public virtual DbSet<CountyInfo> CountyInfos { get; set; } = null!;
        public virtual DbSet<CountyInfoPhraseXrefDocPrep> CountyInfoPhraseXrefDocPreps { get; set; } = null!;
        public virtual DbSet<CustomDictionary> CustomDictionaries { get; set; } = null!;
        public virtual DbSet<CustomDictionaryRegionXref> CustomDictionaryRegionXrefs { get; set; } = null!;
        public virtual DbSet<CustomaryServiceFee> CustomaryServiceFees { get; set; } = null!;
        public virtual DbSet<CustomerOptionDocumentTemplate> CustomerOptionDocumentTemplates { get; set; } = null!;
        public virtual DbSet<CustomerOrder> CustomerOrders { get; set; } = null!;
        public virtual DbSet<CustomerPreference> CustomerPreferences { get; set; } = null!;
        public virtual DbSet<Dalmap> Dalmaps { get; set; } = null!;
        public virtual DbSet<DataElementDmt> DataElementDmts { get; set; } = null!;
        public virtual DbSet<DataElementGrp> DataElementGrps { get; set; } = null!;
        public virtual DbSet<DataElementIndexType> DataElementIndexTypes { get; set; } = null!;
        public virtual DbSet<DateDownAutoNumber> DateDownAutoNumbers { get; set; } = null!;
        public virtual DbSet<DbschemaVersion> DbschemaVersions { get; set; } = null!;
        public virtual DbSet<Dbversion> Dbversions { get; set; } = null!;
        public virtual DbSet<DebugLog> DebugLogs { get; set; } = null!;
        public virtual DbSet<DeliveryEventLog> DeliveryEventLogs { get; set; } = null!;
        public virtual DbSet<DepositAdjustmentComment> DepositAdjustmentComments { get; set; } = null!;
        public virtual DbSet<DepositList> DepositLists { get; set; } = null!;
        public virtual DbSet<DepositedReceipt> DepositedReceipts { get; set; } = null!;
        public virtual DbSet<DfssearchLog> DfssearchLogs { get; set; } = null!;
        public virtual DbSet<DfssearchLogProcessingSwitch> DfssearchLogProcessingSwitches { get; set; } = null!;
        public virtual DbSet<DipstatusFbpxref> DipstatusFbpxrefs { get; set; } = null!;
        public virtual DbSet<Disbursement> Disbursements { get; set; } = null!;
        public virtual DbSet<DisbursementAllocation> DisbursementAllocations { get; set; } = null!;
        public virtual DbSet<DisbursementAuditTrail> DisbursementAuditTrails { get; set; } = null!;
        public virtual DbSet<DisbursementDisplayOrder> DisbursementDisplayOrders { get; set; } = null!;
        public virtual DbSet<DisbursementService> DisbursementServices { get; set; } = null!;
        public virtual DbSet<DisbursementTrackInfo> DisbursementTrackInfos { get; set; } = null!;
        public virtual DbSet<DocDeliveryEventResponse> DocDeliveryEventResponses { get; set; } = null!;
        public virtual DbSet<DocDeliveryLog> DocDeliveryLogs { get; set; } = null!;
        public virtual DbSet<DocDetailsBulkConversion> DocDetailsBulkConversions { get; set; } = null!;
        public virtual DbSet<DocDetailsBulkconversionCloud> DocDetailsBulkconversionClouds { get; set; } = null!;
        public virtual DbSet<DocDetailsImageDocTool> DocDetailsImageDocTools { get; set; } = null!;
        public virtual DbSet<DocElementInfoTrack> DocElementInfoTracks { get; set; } = null!;
        public virtual DbSet<DocIdforPurge> DocIdforPurges { get; set; } = null!;
        public virtual DbSet<DocInheritDocXref> DocInheritDocXrefs { get; set; } = null!;
        public virtual DbSet<DocPhraseElementTextId> DocPhraseElementTextIds { get; set; } = null!;
        public virtual DbSet<DocPkgAssocDocXrefFile> DocPkgAssocDocXrefFiles { get; set; } = null!;
        public virtual DbSet<DocTypeDeliveryServer> DocTypeDeliveryServers { get; set; } = null!;
        public virtual DbSet<DocTypeDmt> DocTypeDmts { get; set; } = null!;
        public virtual DbSet<DocTypeExternalMap> DocTypeExternalMaps { get; set; } = null!;
        public virtual DbSet<Docphrase> Docphrases { get; set; } = null!;
        public virtual DbSet<Docphraseelement> Docphraseelements { get; set; } = null!;
        public virtual DbSet<Document> Documents { get; set; } = null!;
        public virtual DbSet<DocumentDelivery> DocumentDeliveries { get; set; } = null!;
        public virtual DbSet<DocumentDeliveryStatus> DocumentDeliveryStatuses { get; set; } = null!;
        public virtual DbSet<DocumentGridFileAndScreenGridFilter> DocumentGridFileAndScreenGridFilters { get; set; } = null!;
        public virtual DbSet<DocumentGuifilterMaster> DocumentGuifilterMasters { get; set; } = null!;
        public virtual DbSet<DocumentLicenseInfo> DocumentLicenseInfos { get; set; } = null!;
        public virtual DbSet<DocumentMap> DocumentMaps { get; set; } = null!;
        public virtual DbSet<DocumentPackage> DocumentPackages { get; set; } = null!;
        public virtual DbSet<DocumentPackageAssociatedDocumentXref> DocumentPackageAssociatedDocumentXrefs { get; set; } = null!;
        public virtual DbSet<DocumentPackageDocumentXref> DocumentPackageDocumentXrefs { get; set; } = null!;
        public virtual DbSet<DocumentRule> DocumentRules { get; set; } = null!;
        public virtual DbSet<DummyPublicationDonotdel> DummyPublicationDonotdels { get; set; } = null!;
        public virtual DbSet<EagleStatusAutoSubscription> EagleStatusAutoSubscriptions { get; set; } = null!;
        public virtual DbSet<EagleStatusNotificationLog> EagleStatusNotificationLogs { get; set; } = null!;
        public virtual DbSet<EarnestDeposit> EarnestDeposits { get; set; } = null!;
        public virtual DbSet<EbusinessRequest> EbusinessRequests { get; set; } = null!;
        public virtual DbSet<EcheckDetail> EcheckDetails { get; set; } = null!;
        public virtual DbSet<EcheckEmailList> EcheckEmailLists { get; set; } = null!;
        public virtual DbSet<EclipseDbversion> EclipseDbversions { get; set; } = null!;
        public virtual DbSet<EditFbpcontactAuthSignXref> EditFbpcontactAuthSignXrefs { get; set; } = null!;
        public virtual DbSet<EditFileBusinessPartyContact> EditFileBusinessPartyContacts { get; set; } = null!;
        public virtual DbSet<EditFileBusinessPartyContactOld> EditFileBusinessPartyContactOlds { get; set; } = null!;
        public virtual DbSet<EfileRoleTypeXref> EfileRoleTypeXrefs { get; set; } = null!;
        public virtual DbSet<ElectronicAddr> ElectronicAddrs { get; set; } = null!;
        public virtual DbSet<EmployedBy> EmployedBies { get; set; } = null!;
        public virtual DbSet<Employee> Employees { get; set; } = null!;
        public virtual DbSet<EmployeeApplicationUserXref> EmployeeApplicationUserXrefs { get; set; } = null!;
        public virtual DbSet<EmployeeCountyInfoXref> EmployeeCountyInfoXrefs { get; set; } = null!;
        public virtual DbSet<EmployeeFunctionXref> EmployeeFunctionXrefs { get; set; } = null!;
        public virtual DbSet<EmployeeNotificationPref> EmployeeNotificationPrefs { get; set; } = null!;
        public virtual DbSet<EmployeeOverdraftEmailOptOutList> EmployeeOverdraftEmailOptOutLists { get; set; } = null!;
        public virtual DbSet<EmployeeSecurityChangeHistory> EmployeeSecurityChangeHistories { get; set; } = null!;
        public virtual DbSet<EmployeeWorkgroupXref> EmployeeWorkgroupXrefs { get; set; } = null!;
        public virtual DbSet<EndChange> EndChanges { get; set; } = null!;
        public virtual DbSet<Endorsement> Endorsements { get; set; } = null!;
        public virtual DbSet<Environment> Environments { get; set; } = null!;
        public virtual DbSet<EnvironmentInformation> EnvironmentInformations { get; set; } = null!;
        public virtual DbSet<EscrowChargeTemplate> EscrowChargeTemplates { get; set; } = null!;
        public virtual DbSet<EscrowChargeTemplateRuleListXref> EscrowChargeTemplateRuleListXrefs { get; set; } = null!;
        public virtual DbSet<EsigningCredential> EsigningCredentials { get; set; } = null!;
        public virtual DbSet<EsigningDashboardDetail> EsigningDashboardDetails { get; set; } = null!;
        public virtual DbSet<EtitleBusinessUnit> EtitleBusinessUnits { get; set; } = null!;
        public virtual DbSet<EtitleDelivery> EtitleDeliveries { get; set; } = null!;
        public virtual DbSet<EtitleDeliveryAskfileDataLog> EtitleDeliveryAskfileDataLogs { get; set; } = null!;
        public virtual DbSet<EtitleDeliveryAskfileDatum> EtitleDeliveryAskfileData { get; set; } = null!;
        public virtual DbSet<EtitleDeliveryLog> EtitleDeliveryLogs { get; set; } = null!;
        public virtual DbSet<Etlsolr> Etlsolrs { get; set; } = null!;
        public virtual DbSet<EtlsolrfailQueue> EtlsolrfailQueues { get; set; } = null!;
        public virtual DbSet<Event> Events { get; set; } = null!;
        public virtual DbSet<EventLog> EventLogs { get; set; } = null!;
        public virtual DbSet<EventLogArchiveStatus> EventLogArchiveStatuses { get; set; } = null!;
        public virtual DbSet<EventLogEligibleFileId> EventLogEligibleFileIds { get; set; } = null!;
        public virtual DbSet<EventLogKey> EventLogKeys { get; set; } = null!;
        public virtual DbSet<EventLogOe> EventLogOes { get; set; } = null!;
        public virtual DbSet<EventLogTextDatum> EventLogTextData { get; set; } = null!;
        public virtual DbSet<Ewftemp> Ewftemps { get; set; } = null!;
        public virtual DbSet<ExchangeFirstCoedate> ExchangeFirstCoedates { get; set; } = null!;
        public virtual DbSet<ExchangeTdsinfo> ExchangeTdsinfos { get; set; } = null!;
        public virtual DbSet<ExportInfo> ExportInfos { get; set; } = null!;
        public virtual DbSet<ExternalBusinessUnitXref> ExternalBusinessUnitXrefs { get; set; } = null!;
        public virtual DbSet<ExternalFileService> ExternalFileServices { get; set; } = null!;
        public virtual DbSet<Facc2ndLevelParamMap> Facc2ndLevelParamMaps { get; set; } = null!;
        public virtual DbSet<FaccadditionalParam> FaccadditionalParams { get; set; } = null!;
        public virtual DbSet<FaccbusinessSegmentXref> FaccbusinessSegmentXrefs { get; set; } = null!;
        public virtual DbSet<FaccclosingCost> FaccclosingCosts { get; set; } = null!;
        public virtual DbSet<FaccclosingCostNote> FaccclosingCostNotes { get; set; } = null!;
        public virtual DbSet<Faccendorsement> Faccendorsements { get; set; } = null!;
        public virtual DbSet<FaccoverrideInfo> FaccoverrideInfos { get; set; } = null!;
        public virtual DbSet<FaccpolicyProductxref> FaccpolicyProductxrefs { get; set; } = null!;
        public virtual DbSet<FaccrecordingFee> FaccrecordingFees { get; set; } = null!;
        public virtual DbSet<Faccrequestlog> Faccrequestlogs { get; set; } = null!;
        public virtual DbSet<FacctitlePolicy> FacctitlePolicies { get; set; } = null!;
        public virtual DbSet<FacctransactionDetail> FacctransactionDetails { get; set; } = null!;
        public virtual DbSet<FacctransactionTypeXref> FacctransactionTypeXrefs { get; set; } = null!;
        public virtual DbSet<Faccunderwriter> Faccunderwriters { get; set; } = null!;
        public virtual DbSet<Fast1099sDetail> Fast1099sDetails { get; set; } = null!;
        public virtual DbSet<Fast1099sHeader> Fast1099sHeaders { get; set; } = null!;
        public virtual DbSet<Fast1099sextractDetail> Fast1099sextractDetails { get; set; } = null!;
        public virtual DbSet<FastAlert> FastAlerts { get; set; } = null!;
        public virtual DbSet<FastSceenGridScreenListXref> FastSceenGridScreenListXrefs { get; set; } = null!;
        public virtual DbSet<FastSearchLog> FastSearchLogs { get; set; } = null!;
        public virtual DbSet<FastSearchResult> FastSearchResults { get; set; } = null!;
        public virtual DbSet<FastprodCdcTable> FastprodCdcTables { get; set; } = null!;
        public virtual DbSet<FastresultCodeXref> FastresultCodeXrefs { get; set; } = null!;
        public virtual DbSet<FavoriteSearch> FavoriteSearches { get; set; } = null!;
        public virtual DbSet<FaxGroup> FaxGroups { get; set; } = null!;
        public virtual DbSet<FbpfilterDatum> FbpfilterData { get; set; } = null!;
        public virtual DbSet<Fbpinfo> Fbpinfos { get; set; } = null!;
        public virtual DbSet<FbpsearchVendorComment> FbpsearchVendorComments { get; set; } = null!;
        public virtual DbSet<FbpsearchVendorInfo> FbpsearchVendorInfos { get; set; } = null!;
        public virtual DbSet<FbpsearchVendorProblemLog> FbpsearchVendorProblemLogs { get; set; } = null!;
        public virtual DbSet<FbpserviceTypeXref> FbpserviceTypeXrefs { get; set; } = null!;
        public virtual DbSet<FctloanInfo> FctloanInfos { get; set; } = null!;
        public virtual DbSet<FedwireStg> FedwireStgs { get; set; } = null!;
        public virtual DbSet<Fee> Fees { get; set; } = null!;
        public virtual DbSet<FeeFilterTemplate> FeeFilterTemplates { get; set; } = null!;
        public virtual DbSet<FeeFilterTemplateFeeXref> FeeFilterTemplateFeeXrefs { get; set; } = null!;
        public virtual DbSet<FeeSetupChangeHistory> FeeSetupChangeHistories { get; set; } = null!;
        public virtual DbSet<FeeTransferAllocation> FeeTransferAllocations { get; set; } = null!;
        public virtual DbSet<FeeTransferExtract> FeeTransferExtracts { get; set; } = null!;
        public virtual DbSet<FftbusOrgXref> FftbusOrgXrefs { get; set; } = null!;
        public virtual DbSet<FftchangeHistory> FftchangeHistories { get; set; } = null!;
        public virtual DbSet<FftgeoRegionXref> FftgeoRegionXrefs { get; set; } = null!;
        public virtual DbSet<FftprogramTypeXref> FftprogramTypeXrefs { get; set; } = null!;
        public virtual DbSet<FftregionUnderwriterXref> FftregionUnderwriterXrefs { get; set; } = null!;
        public virtual DbSet<FftsearchTypeXref> FftsearchTypeXrefs { get; set; } = null!;
        public virtual DbSet<FfttypeCdDmtXref> FfttypeCdDmtXrefs { get; set; } = null!;
        public virtual DbSet<FieldElement> FieldElements { get; set; } = null!;
        public virtual DbSet<FieldTemplate> FieldTemplates { get; set; } = null!;
        public virtual DbSet<FileAccount> FileAccounts { get; set; } = null!;
        public virtual DbSet<FileBusinessParty> FileBusinessParties { get; set; } = null!;
        public virtual DbSet<FileBusinessPartyConsumerMessageBoxDetail> FileBusinessPartyConsumerMessageBoxDetails { get; set; } = null!;
        public virtual DbSet<FileBusinessPartyContactXref> FileBusinessPartyContactXrefs { get; set; } = null!;
        public virtual DbSet<FileBusinessPartyLicenseInformationXref> FileBusinessPartyLicenseInformationXrefs { get; set; } = null!;
        public virtual DbSet<FileDetailsBulkConversion> FileDetailsBulkConversions { get; set; } = null!;
        public virtual DbSet<FileDetailsBulkconversionCloud> FileDetailsBulkconversionClouds { get; set; } = null!;
        public virtual DbSet<FileDetailsForScheduler> FileDetailsForSchedulers { get; set; } = null!;
        public virtual DbSet<FileDetailsImageDocTool> FileDetailsImageDocTools { get; set; } = null!;
        public virtual DbSet<FileEntry> FileEntries { get; set; } = null!;
        public virtual DbSet<FileProcLock> FileProcLocks { get; set; } = null!;
        public virtual DbSet<FileProcess> FileProcesses { get; set; } = null!;
        public virtual DbSet<FileSearchEventMsgQueue> FileSearchEventMsgQueues { get; set; } = null!;
        public virtual DbSet<FileService> FileServices { get; set; } = null!;
        public virtual DbSet<FileServiceProductionOfficeXref> FileServiceProductionOfficeXrefs { get; set; } = null!;
        public virtual DbSet<FilesForScheduler> FilesForSchedulers { get; set; } = null!;
        public virtual DbSet<FixProdOfficeIssue> FixProdOfficeIssues { get; set; } = null!;
        public virtual DbSet<FloridaDisclosureOverrideName> FloridaDisclosureOverrideNames { get; set; } = null!;
        public virtual DbSet<FormDocument> FormDocuments { get; set; } = null!;
        public virtual DbSet<FormTemplate> FormTemplates { get; set; } = null!;
        public virtual DbSet<FractionalSettlementStatement> FractionalSettlementStatements { get; set; } = null!;
        public virtual DbSet<FractionalSsbuyerSellerAllocation> FractionalSsbuyerSellerAllocations { get; set; } = null!;
        public virtual DbSet<FtpSite> FtpSites { get; set; } = null!;
        public virtual DbSet<Gabemail> Gabemails { get; set; } = null!;
        public virtual DbSet<GabentryRequestQueue> GabentryRequestQueues { get; set; } = null!;
        public virtual DbSet<GabqueueContactHistory> GabqueueContactHistories { get; set; } = null!;
        public virtual DbSet<GabrefreshEventLog> GabrefreshEventLogs { get; set; } = null!;
        public virtual DbSet<GabrequestBusOrgReference> GabrequestBusOrgReferences { get; set; } = null!;
        public virtual DbSet<GeneratorInfo> GeneratorInfos { get; set; } = null!;
        public virtual DbSet<GenericEmail> GenericEmails { get; set; } = null!;
        public virtual DbSet<GeographicRegion> GeographicRegions { get; set; } = null!;
        public virtual DbSet<GfeagtUwsplitInfo> GfeagtUwsplitInfos { get; set; } = null!;
        public virtual DbSet<Gfeentry> Gfeentries { get; set; } = null!;
        public virtual DbSet<GfeimpoundDescription> GfeimpoundDescriptions { get; set; } = null!;
        public virtual DbSet<GfeloanTerm> GfeloanTerms { get; set; } = null!;
        public virtual DbSet<GlextractLog> GlextractLogs { get; set; } = null!;
        public virtual DbSet<Gllookup> Gllookups { get; set; } = null!;
        public virtual DbSet<GoBigRedRecord> GoBigRedRecords { get; set; } = null!;
        public virtual DbSet<GroupResequence> GroupResequences { get; set; } = null!;
        public virtual DbSet<Guinode> Guinodes { get; set; } = null!;
        public virtual DbSet<GuinodeCustomization> GuinodeCustomizations { get; set; } = null!;
        public virtual DbSet<HighAvailabilityHeartbeat> HighAvailabilityHeartbeats { get; set; } = null!;
        public virtual DbSet<HoldFundInfo> HoldFundInfos { get; set; } = null!;
        public virtual DbSet<HomeWarrantyInfo> HomeWarrantyInfos { get; set; } = null!;
        public virtual DbSet<HudDeliveryVersioning> HudDeliveryVersionings { get; set; } = null!;
        public virtual DbSet<HudLineAssignmentForChargesFee> HudLineAssignmentForChargesFees { get; set; } = null!;
        public virtual DbSet<IbabankAccount> IbabankAccounts { get; set; } = null!;
        public virtual DbSet<IbabankBranch> IbabankBranches { get; set; } = null!;
        public virtual DbSet<IbabankBranchAddrXref> IbabankBranchAddrXrefs { get; set; } = null!;
        public virtual DbSet<IbabankProduct> IbabankProducts { get; set; } = null!;
        public virtual DbSet<IbabankStatusChangeXref> IbabankStatusChangeXrefs { get; set; } = null!;
        public virtual DbSet<IbabankbranchBuxref> IbabankbranchBuxrefs { get; set; } = null!;
        public virtual DbSet<Ibadatum> Ibadata { get; set; } = null!;
        public virtual DbSet<IbanonAutomatedBank> IbanonAutomatedBanks { get; set; } = null!;
        public virtual DbSet<Ibarate> Ibarates { get; set; } = null!;
        public virtual DbSet<Ibatransaction> Ibatransactions { get; set; } = null!;
        public virtual DbSet<IbatransactionAdjustmentLog> IbatransactionAdjustmentLogs { get; set; } = null!;
        public virtual DbSet<IbatransactionLog> IbatransactionLogs { get; set; } = null!;
        public virtual DbSet<IbatransactionOldBankXref> IbatransactionOldBankXrefs { get; set; } = null!;
        public virtual DbSet<IbatransactionStatusLog> IbatransactionStatusLogs { get; set; } = null!;
        public virtual DbSet<ImageDocToolProcessState> ImageDocToolProcessStates { get; set; } = null!;
        public virtual DbSet<ImageRestriction> ImageRestrictions { get; set; } = null!;
        public virtual DbSet<ImageRestrictionAudit> ImageRestrictionAudits { get; set; } = null!;
        public virtual DbSet<ImagingPurgeRun> ImagingPurgeRuns { get; set; } = null!;
        public virtual DbSet<ImportLog> ImportLogs { get; set; } = null!;
        public virtual DbSet<InEscrowDeposit> InEscrowDeposits { get; set; } = null!;
        public virtual DbSet<IncomingWire> IncomingWires { get; set; } = null!;
        public virtual DbSet<IncomingWireDeposit> IncomingWireDeposits { get; set; } = null!;
        public virtual DbSet<IncomingWireDetail> IncomingWireDetails { get; set; } = null!;
        public virtual DbSet<IncomingWireDetailLog> IncomingWireDetailLogs { get; set; } = null!;
        public virtual DbSet<IncomingWireDisbursement> IncomingWireDisbursements { get; set; } = null!;
        public virtual DbSet<IncomingWireXpresswireUserIdxref> IncomingWireXpresswireUserIdxrefs { get; set; } = null!;
        public virtual DbSet<IndexType> IndexTypes { get; set; } = null!;
        public virtual DbSet<IngrianAudit> IngrianAudits { get; set; } = null!;
        public virtual DbSet<InspReprInfo> InspReprInfos { get; set; } = null!;
        public virtual DbSet<Instruction> Instructions { get; set; } = null!;
        public virtual DbSet<InstructionBusOrgXref> InstructionBusOrgXrefs { get; set; } = null!;
        public virtual DbSet<InstructionOptionBusUnitXref> InstructionOptionBusUnitXrefs { get; set; } = null!;
        public virtual DbSet<InsuranceInfo> InsuranceInfos { get; set; } = null!;
        public virtual DbSet<IntegrationServicesEventLog> IntegrationServicesEventLogs { get; set; } = null!;
        public virtual DbSet<InterOfficeFee> InterOfficeFees { get; set; } = null!;
        public virtual DbSet<InterOfficeFeeExtract> InterOfficeFeeExtracts { get; set; } = null!;
        public virtual DbSet<InterOfficeFeeExtractedBusinessUnit> InterOfficeFeeExtractedBusinessUnits { get; set; } = null!;
        public virtual DbSet<InterOfficeFeeStatusHistory> InterOfficeFeeStatusHistories { get; set; } = null!;
        public virtual DbSet<InterfaceDeliveryRequest> InterfaceDeliveryRequests { get; set; } = null!;
        public virtual DbSet<InterfaceTransaction> InterfaceTransactions { get; set; } = null!;
        public virtual DbSet<InterfaceTransactionLog> InterfaceTransactionLogs { get; set; } = null!;
        public virtual DbSet<InternalAuditLog> InternalAuditLogs { get; set; } = null!;
        public virtual DbSet<InvHistoryPhysicalAddrXref> InvHistoryPhysicalAddrXrefs { get; set; } = null!;
        public virtual DbSet<Invoice> Invoices { get; set; } = null!;
        public virtual DbSet<InvoiceExtractCharMapping> InvoiceExtractCharMappings { get; set; } = null!;
        public virtual DbSet<InvoiceExtractFee> InvoiceExtractFees { get; set; } = null!;
        public virtual DbSet<InvoiceExtractHeader> InvoiceExtractHeaders { get; set; } = null!;
        public virtual DbSet<InvoiceExtractInvoice> InvoiceExtractInvoices { get; set; } = null!;
        public virtual DbSet<InvoiceExtractOffice> InvoiceExtractOffices { get; set; } = null!;
        public virtual DbSet<InvoiceFeesSortOrder> InvoiceFeesSortOrders { get; set; } = null!;
        public virtual DbSet<InvoiceHistory> InvoiceHistories { get; set; } = null!;
        public virtual DbSet<InvoiceImportInfo> InvoiceImportInfos { get; set; } = null!;
        public virtual DbSet<InvoicePaymentInfo> InvoicePaymentInfos { get; set; } = null!;
        public virtual DbSet<InvoicePaymentInfoNoMatch> InvoicePaymentInfoNoMatches { get; set; } = null!;
        public virtual DbSet<LastNoteWorldExtract> LastNoteWorldExtracts { get; set; } = null!;
        public virtual DbSet<LeaseInfo> LeaseInfos { get; set; } = null!;
        public virtual DbSet<LegacyDocFileIdXref> LegacyDocFileIdXrefs { get; set; } = null!;
        public virtual DbSet<LicenseInformation> LicenseInformations { get; set; } = null!;
        public virtual DbSet<LicenseInformationLog> LicenseInformationLogs { get; set; } = null!;
        public virtual DbSet<LicenseType> LicenseTypes { get; set; } = null!;
        public virtual DbSet<LicenseTypeGeoRegionXref> LicenseTypeGeoRegionXrefs { get; set; } = null!;
        public virtual DbSet<Loan1LoanInvestor> Loan1LoanInvestors { get; set; } = null!;
        public virtual DbSet<Loan1LoanInvestorContact> Loan1LoanInvestorContacts { get; set; } = null!;
        public virtual DbSet<LoanInfo> LoanInfos { get; set; } = null!;
        public virtual DbSet<LoanInvestor> LoanInvestors { get; set; } = null!;
        public virtual DbSet<LoanInvestorContact> LoanInvestorContacts { get; set; } = null!;
        public virtual DbSet<LockedArchiveDb> LockedArchiveDbs { get; set; } = null!;
        public virtual DbSet<Log> Logs { get; set; } = null!;
        public virtual DbSet<LossRecoveryFee> LossRecoveryFees { get; set; } = null!;
        public virtual DbSet<LrhOrder> LrhOrders { get; set; } = null!;
        public virtual DbSet<MdmbusinessEventLog> MdmbusinessEventLogs { get; set; } = null!;
        public virtual DbSet<MdmbusinessEventLogHistory> MdmbusinessEventLogHistories { get; set; } = null!;
        public virtual DbSet<MdmdataTruncationLog> MdmdataTruncationLogs { get; set; } = null!;
        public virtual DbSet<Mdmetllog> Mdmetllogs { get; set; } = null!;
        public virtual DbSet<MdmetllogDetail> MdmetllogDetails { get; set; } = null!;
        public virtual DbSet<MdmtypeCodeMapping> MdmtypeCodeMappings { get; set; } = null!;
        public virtual DbSet<MoveNewTextToBottom> MoveNewTextToBottoms { get; set; } = null!;
        public virtual DbSet<MoveTextId> MoveTextIds { get; set; } = null!;
        public virtual DbSet<MoveTextIdFull> MoveTextIdFulls { get; set; } = null!;
        public virtual DbSet<MsmqTrace> MsmqTraces { get; set; } = null!;
        public virtual DbSet<NameValueSetting> NameValueSettings { get; set; } = null!;
        public virtual DbSet<NcsmigrateLog> NcsmigrateLogs { get; set; } = null!;
        public virtual DbSet<NextGenActiveRequest> NextGenActiveRequests { get; set; } = null!;
        public virtual DbSet<NonWorkStd> NonWorkStds { get; set; } = null!;
        public virtual DbSet<NotificationChangeEvent> NotificationChangeEvents { get; set; } = null!;
        public virtual DbSet<NotificationChangeEventTobeRemoved> NotificationChangeEventTobeRemoveds { get; set; } = null!;
        public virtual DbSet<NotificationChangeHistory> NotificationChangeHistories { get; set; } = null!;
        public virtual DbSet<NotificationDocGrp> NotificationDocGrps { get; set; } = null!;
        public virtual DbSet<NotificationDocGrpDetail> NotificationDocGrpDetails { get; set; } = null!;
        public virtual DbSet<NotificationDocumentTemplate> NotificationDocumentTemplates { get; set; } = null!;
        public virtual DbSet<NotificationEventLog> NotificationEventLogs { get; set; } = null!;
        public virtual DbSet<NotificationTemplate> NotificationTemplates { get; set; } = null!;
        public virtual DbSet<NotificationTemplateFbproleXref> NotificationTemplateFbproleXrefs { get; set; } = null!;
        public virtual DbSet<NotificationTemplateSenderInfoXref> NotificationTemplateSenderInfoXrefs { get; set; } = null!;
        public virtual DbSet<NotificationTemplateStaticEmailXref> NotificationTemplateStaticEmailXrefs { get; set; } = null!;
        public virtual DbSet<NpidataElement> NpidataElements { get; set; } = null!;
        public virtual DbSet<NpidataEncryption> NpidataEncryptions { get; set; } = null!;
        public virtual DbSet<NpidataEncryptionStatus> NpidataEncryptionStatuses { get; set; } = null!;
        public virtual DbSet<OfficeDetailsImageDocTool> OfficeDetailsImageDocTools { get; set; } = null!;
        public virtual DbSet<OfficeGroup> OfficeGroups { get; set; } = null!;
        public virtual DbSet<OfficePrinterPrefrence> OfficePrinterPrefrences { get; set; } = null!;
        public virtual DbSet<OfficeProductChangeHistory> OfficeProductChangeHistories { get; set; } = null!;
        public virtual DbSet<OfficeUnderwriter> OfficeUnderwriters { get; set; } = null!;
        public virtual DbSet<OfficeUnderwriterAutoNumber> OfficeUnderwriterAutoNumbers { get; set; } = null!;
        public virtual DbSet<OfficesForFastc> OfficesForFastcs { get; set; } = null!;
        public virtual DbSet<OtherBusOrg> OtherBusOrgs { get; set; } = null!;
        public virtual DbSet<OutOfEscrowDeposit> OutOfEscrowDeposits { get; set; } = null!;
        public virtual DbSet<OverDraftDepositFbpxref> OverDraftDepositFbpxrefs { get; set; } = null!;
        public virtual DbSet<OverDraftDisbursementFbpxref> OverDraftDisbursementFbpxrefs { get; set; } = null!;
        public virtual DbSet<OverDraftDisbursementXref> OverDraftDisbursementXrefs { get; set; } = null!;
        public virtual DbSet<OverDraftFbpxref> OverDraftFbpxrefs { get; set; } = null!;
        public virtual DbSet<OverDraftInEscrowDepositLink> OverDraftInEscrowDepositLinks { get; set; } = null!;
        public virtual DbSet<OverDraftInEscrowDepositXref> OverDraftInEscrowDepositXrefs { get; set; } = null!;
        public virtual DbSet<OverDraftMaster> OverDraftMasters { get; set; } = null!;
        public virtual DbSet<OverdraftDisbursement> OverdraftDisbursements { get; set; } = null!;
        public virtual DbSet<Package> Packages { get; set; } = null!;
        public virtual DbSet<PageBusOrgIdlist> PageBusOrgIdlists { get; set; } = null!;
        public virtual DbSet<PaidDisbursement> PaidDisbursements { get; set; } = null!;
        public virtual DbSet<PaidStatusBatch> PaidStatusBatches { get; set; } = null!;
        public virtual DbSet<PaidStatusLog> PaidStatusLogs { get; set; } = null!;
        public virtual DbSet<PartiesForFastc> PartiesForFastcs { get; set; } = null!;
        public virtual DbSet<PartnerLog> PartnerLogs { get; set; } = null!;
        public virtual DbSet<PayeeIdentification> PayeeIdentifications { get; set; } = null!;
        public virtual DbSet<Payment> Payments { get; set; } = null!;
        public virtual DbSet<PendingStarterDoc> PendingStarterDocs { get; set; } = null!;
        public virtual DbSet<PerformanceAudit> PerformanceAudits { get; set; } = null!;
        public virtual DbSet<Person> People { get; set; } = null!;
        public virtual DbSet<PersonBpchangeHistory> PersonBpchangeHistories { get; set; } = null!;
        public virtual DbSet<PersonNotificationPref> PersonNotificationPrefs { get; set; } = null!;
        public virtual DbSet<PersonRelationship> PersonRelationships { get; set; } = null!;
        public virtual DbSet<PersonRelationshipChangeHistory> PersonRelationshipChangeHistories { get; set; } = null!;
        public virtual DbSet<PersonRoleRelationshipXref> PersonRoleRelationshipXrefs { get; set; } = null!;
        public virtual DbSet<PersonWebCustomerXref> PersonWebCustomerXrefs { get; set; } = null!;
        public virtual DbSet<PersonalProperty> PersonalProperties { get; set; } = null!;
        public virtual DbSet<Phrase> Phrases { get; set; } = null!;
        public virtual DbSet<PhraseElement> PhraseElements { get; set; } = null!;
        public virtual DbSet<PhraseGeoRegionFilter> PhraseGeoRegionFilters { get; set; } = null!;
        public virtual DbSet<PhraseGeoRegionFilterDocprep> PhraseGeoRegionFilterDocpreps { get; set; } = null!;
        public virtual DbSet<PhraseGeoStateFilter> PhraseGeoStateFilters { get; set; } = null!;
        public virtual DbSet<PhraseGeoStateFilterDocprep> PhraseGeoStateFilterDocpreps { get; set; } = null!;
        public virtual DbSet<PhraseGrp> PhraseGrps { get; set; } = null!;
        public virtual DbSet<PhraseGrpGeoRegionfilter> PhraseGrpGeoRegionfilters { get; set; } = null!;
        public virtual DbSet<PhraseGrpGeoStateFilter> PhraseGrpGeoStateFilters { get; set; } = null!;
        public virtual DbSet<PhraseGrpGeoStateFilterDocprep> PhraseGrpGeoStateFilterDocpreps { get; set; } = null!;
        public virtual DbSet<PhraseGrpRegionFilterDocprep> PhraseGrpRegionFilterDocpreps { get; set; } = null!;
        public virtual DbSet<PhraseHistory> PhraseHistories { get; set; } = null!;
        public virtual DbSet<PhraseMarker> PhraseMarkers { get; set; } = null!;
        public virtual DbSet<PhraseMarkerCopyInfo> PhraseMarkerCopyInfos { get; set; } = null!;
        public virtual DbSet<PhraseMarkerDeleted> PhraseMarkerDeleteds { get; set; } = null!;
        public virtual DbSet<PhraseMarkerForm> PhraseMarkerForms { get; set; } = null!;
        public virtual DbSet<PhraseMarkerFormVersion> PhraseMarkerFormVersions { get; set; } = null!;
        public virtual DbSet<PhraseMarkerNotInUse> PhraseMarkerNotInUses { get; set; } = null!;
        public virtual DbSet<PhraseMarkerToKeep2> PhraseMarkerToKeep2s { get; set; } = null!;
        public virtual DbSet<PhysicalAddr> PhysicalAddrs { get; set; } = null!;
        public virtual DbSet<PolicyPhysicalAddrXref> PolicyPhysicalAddrXrefs { get; set; } = null!;
        public virtual DbSet<PolicyPhysicalAddrXrefDocPrepInsert> PolicyPhysicalAddrXrefDocPrepInserts { get; set; } = null!;
        public virtual DbSet<PolicyPrincipalXrefDocPrep> PolicyPrincipalXrefDocPreps { get; set; } = null!;
        public virtual DbSet<PolicyPrincipalXrefDocPrepInsert> PolicyPrincipalXrefDocPrepInserts { get; set; } = null!;
        public virtual DbSet<PolicyUnderWriterXrefDocprep> PolicyUnderWriterXrefDocpreps { get; set; } = null!;
        public virtual DbSet<PolicyUnderWriterXrefDocprepInsert> PolicyUnderWriterXrefDocprepInserts { get; set; } = null!;
        public virtual DbSet<PolicyUnderwriterXref> PolicyUnderwriterXrefs { get; set; } = null!;
        public virtual DbSet<PreferredBusOrgContactXref> PreferredBusOrgContactXrefs { get; set; } = null!;
        public virtual DbSet<PreferredDocList> PreferredDocLists { get; set; } = null!;
        public virtual DbSet<PreferredEmployeeContactXref> PreferredEmployeeContactXrefs { get; set; } = null!;
        public virtual DbSet<PreferredPersonXref> PreferredPersonXrefs { get; set; } = null!;
        public virtual DbSet<Principal> Principals { get; set; } = null!;
        public virtual DbSet<PrincipalAddInfo> PrincipalAddInfos { get; set; } = null!;
        public virtual DbSet<PrincipalBusEntity> PrincipalBusEntities { get; set; } = null!;
        public virtual DbSet<PrincipalNotification> PrincipalNotifications { get; set; } = null!;
        public virtual DbSet<PrincipalSignature> PrincipalSignatures { get; set; } = null!;
        public virtual DbSet<PrintParam> PrintParams { get; set; } = null!;
        public virtual DbSet<PrintPreference> PrintPreferences { get; set; } = null!;
        public virtual DbSet<ProcessSelectionEventXref> ProcessSelectionEventXrefs { get; set; } = null!;
        public virtual DbSet<ProcessTemplateWebCustomerXref> ProcessTemplateWebCustomerXrefs { get; set; } = null!;
        public virtual DbSet<ProcessType> ProcessTypes { get; set; } = null!;
        public virtual DbSet<ProcessTypeRoleTypeMap> ProcessTypeRoleTypeMaps { get; set; } = null!;
        public virtual DbSet<ProcessedInterfaceTask> ProcessedInterfaceTasks { get; set; } = null!;
        public virtual DbSet<ProcessedStarterDoc> ProcessedStarterDocs { get; set; } = null!;
        public virtual DbSet<ProductTypeBusUnitXref> ProductTypeBusUnitXrefs { get; set; } = null!;
        public virtual DbSet<Profile> Profiles { get; set; } = null!;
        public virtual DbSet<ProfileBusUnitXref> ProfileBusUnitXrefs { get; set; } = null!;
        public virtual DbSet<ProfileChangeHistory> ProfileChangeHistories { get; set; } = null!;
        public virtual DbSet<ProgramType> ProgramTypes { get; set; } = null!;
        public virtual DbSet<ProgramTypeBusOrgXref> ProgramTypeBusOrgXrefs { get; set; } = null!;
        public virtual DbSet<ProgramTypeGeographicXref> ProgramTypeGeographicXrefs { get; set; } = null!;
        public virtual DbSet<ProgramTypeProductTypeXref> ProgramTypeProductTypeXrefs { get; set; } = null!;
        public virtual DbSet<ProgramTypeSearchInstruction> ProgramTypeSearchInstructions { get; set; } = null!;
        public virtual DbSet<ProgramTypeSearchInstructionXref> ProgramTypeSearchInstructionXrefs { get; set; } = null!;
        public virtual DbSet<ProgramTypeSearchTypeXref> ProgramTypeSearchTypeXrefs { get; set; } = null!;
        public virtual DbSet<ProgramTypeTransTypeXref> ProgramTypeTransTypeXrefs { get; set; } = null!;
        public virtual DbSet<ProjectFilePwbfeatureXref> ProjectFilePwbfeatureXrefs { get; set; } = null!;
        public virtual DbSet<ProjectFileSalePriceLiabilityXref> ProjectFileSalePriceLiabilityXrefs { get; set; } = null!;
        public virtual DbSet<ProjectFileSiteFileChargeXref> ProjectFileSiteFileChargeXrefs { get; set; } = null!;
        public virtual DbSet<ProjectFileSiteFileDepositXref> ProjectFileSiteFileDepositXrefs { get; set; } = null!;
        public virtual DbSet<ProjectFileSiteFileFbpxref> ProjectFileSiteFileFbpxrefs { get; set; } = null!;
        public virtual DbSet<ProjectFileSiteFileProcessXref> ProjectFileSiteFileProcessXrefs { get; set; } = null!;
        public virtual DbSet<ProjectFileSiteFileServiceFileFeeXref> ProjectFileSiteFileServiceFileFeeXrefs { get; set; } = null!;
        public virtual DbSet<PropertyCollateral> PropertyCollaterals { get; set; } = null!;
        public virtual DbSet<PropertyFsresponseDatum> PropertyFsresponseData { get; set; } = null!;
        public virtual DbSet<PropertySearchEventLog> PropertySearchEventLogs { get; set; } = null!;
        public virtual DbSet<PurgeDetail> PurgeDetails { get; set; } = null!;
        public virtual DbSet<Pwbfaccgroup> Pwbfaccgroups { get; set; } = null!;
        public virtual DbSet<Pwbfeature> Pwbfeatures { get; set; } = null!;
        public virtual DbSet<Pwdchanger> Pwdchangers { get; set; } = null!;
        public virtual DbSet<QcclosingInfo> QcclosingInfos { get; set; } = null!;
        public virtual DbSet<Qcstaging> Qcstagings { get; set; } = null!;
        public virtual DbSet<QcstagingSectionCharge> QcstagingSectionCharges { get; set; } = null!;
        public virtual DbSet<QcstagingSectionXref> QcstagingSectionXrefs { get; set; } = null!;
        public virtual DbSet<QueueTransactionCoordinator> QueueTransactionCoordinators { get; set; } = null!;
        public virtual DbSet<RateType> RateTypes { get; set; } = null!;
        public virtual DbSet<RateTypeStateXref> RateTypeStateXrefs { get; set; } = null!;
        public virtual DbSet<RdarchivedFileTemp> RdarchivedFileTemps { get; set; } = null!;
        public virtual DbSet<RealEstateBrokerSummary> RealEstateBrokerSummaries { get; set; } = null!;
        public virtual DbSet<RealProperty> RealProperties { get; set; } = null!;
        public virtual DbSet<RealPropertyCloud> RealPropertyClouds { get; set; } = null!;
        public virtual DbSet<RealTimeMailDetail> RealTimeMailDetails { get; set; } = null!;
        public virtual DbSet<RebrokerInfo> RebrokerInfos { get; set; } = null!;
        public virtual DbSet<RecordDocument> RecordDocuments { get; set; } = null!;
        public virtual DbSet<RecordedDocDetail> RecordedDocDetails { get; set; } = null!;
        public virtual DbSet<RecordedDocEventLog> RecordedDocEventLogs { get; set; } = null!;
        public virtual DbSet<RecordingEventLog> RecordingEventLogs { get; set; } = null!;
        public virtual DbSet<RecordingInfo> RecordingInfos { get; set; } = null!;
        public virtual DbSet<RecordsToDelete> RecordsToDeletes { get; set; } = null!;
        public virtual DbSet<RegionFlag> RegionFlags { get; set; } = null!;
        public virtual DbSet<RegionIdforApplication> RegionIdforApplications { get; set; } = null!;
        public virtual DbSet<RegionProblemLogXref> RegionProblemLogXrefs { get; set; } = null!;
        public virtual DbSet<RegionUnderwriter> RegionUnderwriters { get; set; } = null!;
        public virtual DbSet<RegionalDeliveryDestination> RegionalDeliveryDestinations { get; set; } = null!;
        public virtual DbSet<RegionalSetting> RegionalSettings { get; set; } = null!;
        public virtual DbSet<RelsTitleDocsAllCopy> RelsTitleDocsAllCopies { get; set; } = null!;
        public virtual DbSet<RelsextractFileId> RelsextractFileIds { get; set; } = null!;
        public virtual DbSet<RemittanceRequestQueue> RemittanceRequestQueues { get; set; } = null!;
        public virtual DbSet<RemittanceSplitDetail> RemittanceSplitDetails { get; set; } = null!;
        public virtual DbSet<ReserveFile> ReserveFiles { get; set; } = null!;
        public virtual DbSet<ReserveFileUsed> ReserveFileUseds { get; set; } = null!;
        public virtual DbSet<RoadHomeLog> RoadHomeLogs { get; set; } = null!;
        public virtual DbSet<Role> Roles { get; set; } = null!;
        public virtual DbSet<RoleChangeHistory> RoleChangeHistories { get; set; } = null!;
        public virtual DbSet<RoleVisibilityXref> RoleVisibilityXrefs { get; set; } = null!;
        public virtual DbSet<Rtmaddress> Rtmaddresses { get; set; } = null!;
        public virtual DbSet<Rtmdocument> Rtmdocuments { get; set; } = null!;
        public virtual DbSet<RtmdocumentCloud> RtmdocumentClouds { get; set; } = null!;
        public virtual DbSet<RtmeventHistory> RtmeventHistories { get; set; } = null!;
        public virtual DbSet<RtmfileAddress> RtmfileAddresses { get; set; } = null!;
        public virtual DbSet<Rtmpackage> Rtmpackages { get; set; } = null!;
        public virtual DbSet<RuleList> RuleLists { get; set; } = null!;
        public virtual DbSet<RuleListBusUnitXref> RuleListBusUnitXrefs { get; set; } = null!;
        public virtual DbSet<SafeEscrowTransaction> SafeEscrowTransactions { get; set; } = null!;
        public virtual DbSet<SalesRepHistory> SalesRepHistories { get; set; } = null!;
        public virtual DbSet<ScreenActivityActivityGrpXref> ScreenActivityActivityGrpXrefs { get; set; } = null!;
        public virtual DbSet<ScreenList> ScreenLists { get; set; } = null!;
        public virtual DbSet<Sdn180daySearch> Sdn180daySearches { get; set; } = null!;
        public virtual DbSet<Sdnsearch> Sdnsearches { get; set; } = null!;
        public virtual DbSet<SdnsearchHit> SdnsearchHits { get; set; } = null!;
        public virtual DbSet<SdnsearchPending> SdnsearchPendings { get; set; } = null!;
        public virtual DbSet<SdnsearchQ> SdnsearchQs { get; set; } = null!;
        public virtual DbSet<SdnsearchRoleType> SdnsearchRoleTypes { get; set; } = null!;
        public virtual DbSet<Sdntracking> Sdntrackings { get; set; } = null!;
        public virtual DbSet<SearchChange> SearchChanges { get; set; } = null!;
        public virtual DbSet<SearchChange2> SearchChange2s { get; set; } = null!;
        public virtual DbSet<SearchChangeCompletedForFastc> SearchChangeCompletedForFastcs { get; set; } = null!;
        public virtual DbSet<SearchChangeCompletedForFastcsBakup> SearchChangeCompletedForFastcsBakups { get; set; } = null!;
        public virtual DbSet<SearchChangeName> SearchChangeNames { get; set; } = null!;
        public virtual DbSet<SearchDependency> SearchDependencies { get; set; } = null!;
        public virtual DbSet<SearchFactType> SearchFactTypes { get; set; } = null!;
        public virtual DbSet<SearchKeyword> SearchKeywords { get; set; } = null!;
        public virtual DbSet<SearchNameDependency> SearchNameDependencies { get; set; } = null!;
        public virtual DbSet<SearchNameOtherQuery> SearchNameOtherQueries { get; set; } = null!;
        public virtual DbSet<SearchNameQuery> SearchNameQueries { get; set; } = null!;
        public virtual DbSet<SearchOrderDatum> SearchOrderData { get; set; } = null!;
        public virtual DbSet<SearchOtherQuery> SearchOtherQueries { get; set; } = null!;
        public virtual DbSet<SearchPending> SearchPendings { get; set; } = null!;
        public virtual DbSet<SearchPendingFromNucleus> SearchPendingFromNuclei { get; set; } = null!;
        public virtual DbSet<SearchPendingName> SearchPendingNames { get; set; } = null!;
        public virtual DbSet<SearchPendingNamesFromNucleus> SearchPendingNamesFromNuclei { get; set; } = null!;
        public virtual DbSet<SearchProcessed> SearchProcesseds { get; set; } = null!;
        public virtual DbSet<SearchQuery> SearchQueries { get; set; } = null!;
        public virtual DbSet<SearchType> SearchTypes { get; set; } = null!;
        public virtual DbSet<SearchTypeTypeCdXref> SearchTypeTypeCdXrefs { get; set; } = null!;
        public virtual DbSet<SecOffcGrpChangeHistory> SecOffcGrpChangeHistories { get; set; } = null!;
        public virtual DbSet<SecOfficeGroup> SecOfficeGroups { get; set; } = null!;
        public virtual DbSet<Section> Sections { get; set; } = null!;
        public virtual DbSet<SectionResequence> SectionResequences { get; set; } = null!;
        public virtual DbSet<SecuredElement> SecuredElements { get; set; } = null!;
        public virtual DbSet<ServiceBehaviorLog> ServiceBehaviorLogs { get; set; } = null!;
        public virtual DbSet<ServiceFee> ServiceFees { get; set; } = null!;
        public virtual DbSet<ServiceFeeExtract> ServiceFeeExtracts { get; set; } = null!;
        public virtual DbSet<ServiceFeeExtractedBusinessUnit> ServiceFeeExtractedBusinessUnits { get; set; } = null!;
        public virtual DbSet<ServiceFeeStatusHistory> ServiceFeeStatusHistories { get; set; } = null!;
        public virtual DbSet<ServiceFile> ServiceFiles { get; set; } = null!;
        public virtual DbSet<ServiceFileAttribute> ServiceFileAttributes { get; set; } = null!;
        public virtual DbSet<ServiceFileCloud> ServiceFileClouds { get; set; } = null!;
        public virtual DbSet<ServiceFileDeliveryInstruction> ServiceFileDeliveryInstructions { get; set; } = null!;
        public virtual DbSet<ServiceFileDocumentXref> ServiceFileDocumentXrefs { get; set; } = null!;
        public virtual DbSet<ServiceFileDocumentXrefCloud> ServiceFileDocumentXrefClouds { get; set; } = null!;
        public virtual DbSet<ServiceFileDocumentXrefInsert> ServiceFileDocumentXrefInserts { get; set; } = null!;
        public virtual DbSet<ServiceFileEfileCpl> ServiceFileEfileCpls { get; set; } = null!;
        public virtual DbSet<ServiceFileEfileXref> ServiceFileEfileXrefs { get; set; } = null!;
        public virtual DbSet<ServiceFileEmployeeXref> ServiceFileEmployeeXrefs { get; set; } = null!;
        public virtual DbSet<ServiceFileFee> ServiceFileFees { get; set; } = null!;
        public virtual DbSet<ServiceFileFeePaymentDetail> ServiceFileFeePaymentDetails { get; set; } = null!;
        public virtual DbSet<ServiceFileFeePromulgatedRate> ServiceFileFeePromulgatedRates { get; set; } = null!;
        public virtual DbSet<ServiceFileFilterDatum> ServiceFileFilterData { get; set; } = null!;
        public virtual DbSet<ServiceFileGeoinfo> ServiceFileGeoinfos { get; set; } = null!;
        public virtual DbSet<ServiceFileLoanEstimateUnroundedXref> ServiceFileLoanEstimateUnroundedXrefs { get; set; } = null!;
        public virtual DbSet<ServiceFileLspflagXref> ServiceFileLspflagXrefs { get; set; } = null!;
        public virtual DbSet<ServiceFileMasterFileNumXref> ServiceFileMasterFileNumXrefs { get; set; } = null!;
        public virtual DbSet<ServiceFileNote> ServiceFileNotes { get; set; } = null!;
        public virtual DbSet<ServiceFileNoteComment> ServiceFileNoteComments { get; set; } = null!;
        public virtual DbSet<ServiceFileNoteTextId> ServiceFileNoteTextIds { get; set; } = null!;
        public virtual DbSet<ServiceFileProductTypeXref> ServiceFileProductTypeXrefs { get; set; } = null!;
        public virtual DbSet<ServiceFileProgInstrTypeXref> ServiceFileProgInstrTypeXrefs { get; set; } = null!;
        public virtual DbSet<ServiceFileReverseAccount> ServiceFileReverseAccounts { get; set; } = null!;
        public virtual DbSet<ServiceFileSpeciallAttentionXref> ServiceFileSpeciallAttentionXrefs { get; set; } = null!;
        public virtual DbSet<ServiceFileSplitLspflagXref> ServiceFileSplitLspflagXrefs { get; set; } = null!;
        public virtual DbSet<ServiceFileStarterRefXref> ServiceFileStarterRefXrefs { get; set; } = null!;
        public virtual DbSet<ServiceFileSubFee> ServiceFileSubFees { get; set; } = null!;
        public virtual DbSet<ServiceFileTagFileXref> ServiceFileTagFileXrefs { get; set; } = null!;
        public virtual DbSet<ServiceFileUnderwriterXref> ServiceFileUnderwriterXrefs { get; set; } = null!;
        public virtual DbSet<ServiceFileXref> ServiceFileXrefs { get; set; } = null!;
        public virtual DbSet<ServiceLog> ServiceLogs { get; set; } = null!;
        public virtual DbSet<ServiceOperation> ServiceOperations { get; set; } = null!;
        public virtual DbSet<ServiceOperationApplicationXref> ServiceOperationApplicationXrefs { get; set; } = null!;
        public virtual DbSet<ServiceOperationApplicationXrefBackup> ServiceOperationApplicationXrefBackups { get; set; } = null!;
        public virtual DbSet<ServiceOperationSecurityXref> ServiceOperationSecurityXrefs { get; set; } = null!;
        public virtual DbSet<ServiceOperationSecurityXrefBackup> ServiceOperationSecurityXrefBackups { get; set; } = null!;
        public virtual DbSet<ServiceUserAccount> ServiceUserAccounts { get; set; } = null!;
        public virtual DbSet<ServiceUserAccountApplicationXref> ServiceUserAccountApplicationXrefs { get; set; } = null!;
        public virtual DbSet<ServiceoperationBackup> ServiceoperationBackups { get; set; } = null!;
        public virtual DbSet<SettlementStatementHeaderDetail> SettlementStatementHeaderDetails { get; set; } = null!;
        public virtual DbSet<SffphysicalAddr> SffphysicalAddrs { get; set; } = null!;
        public virtual DbSet<SffphysicalAddrHistory> SffphysicalAddrHistories { get; set; } = null!;
        public virtual DbSet<Signing> Signings { get; set; } = null!;
        public virtual DbSet<SigningAddrXref> SigningAddrXrefs { get; set; } = null!;
        public virtual DbSet<SigningEventLog> SigningEventLogs { get; set; } = null!;
        public virtual DbSet<SigningLoan> SigningLoans { get; set; } = null!;
        public virtual DbSet<SigningParty> SigningParties { get; set; } = null!;
        public virtual DbSet<SigningPartyElecAddrXref> SigningPartyElecAddrXrefs { get; set; } = null!;
        public virtual DbSet<SimulatorFbpfilterDatum> SimulatorFbpfilterData { get; set; } = null!;
        public virtual DbSet<SimulatorServiceFileProcess> SimulatorServiceFileProcesses { get; set; } = null!;
        public virtual DbSet<SimulatorSffilterDatum> SimulatorSffilterData { get; set; } = null!;
        public virtual DbSet<SimulatorSfgeoinfo> SimulatorSfgeoinfos { get; set; } = null!;
        public virtual DbSet<SimulatorSfproductTypeXref> SimulatorSfproductTypeXrefs { get; set; } = null!;
        public virtual DbSet<SimulatorTask> SimulatorTasks { get; set; } = null!;
        public virtual DbSet<SimulatorWorkflow2> SimulatorWorkflow2s { get; set; } = null!;
        public virtual DbSet<SmstransLog> SmstransLogs { get; set; } = null!;
        public virtual DbSet<SmstransLogToBeRemoved> SmstransLogToBeRemoveds { get; set; } = null!;
        public virtual DbSet<SolrBatchNumber> SolrBatchNumbers { get; set; } = null!;
        public virtual DbSet<SolrBusOrgFileCreationLog> SolrBusOrgFileCreationLogs { get; set; } = null!;
        public virtual DbSet<SolrBusOrgsTobeProcessed> SolrBusOrgsTobeProcesseds { get; set; } = null!;
        public virtual DbSet<SolrIntermediateXmlDatum> SolrIntermediateXmlData { get; set; } = null!;
        public virtual DbSet<SolrUserFavoriteCustomer> SolrUserFavoriteCustomers { get; set; } = null!;
        public virtual DbSet<SolrXmlProcessLog> SolrXmlProcessLogs { get; set; } = null!;
        public virtual DbSet<SpecialInstructionServiceFileXref> SpecialInstructionServiceFileXrefs { get; set; } = null!;
        public virtual DbSet<SplitFee> SplitFees { get; set; } = null!;
        public virtual DbSet<SplitLspgfe4> SplitLspgfe4s { get; set; } = null!;
        public virtual DbSet<SsrolloutLogTobedeleted> SsrolloutLogTobedeleteds { get; set; } = null!;
        public virtual DbSet<StagingInvoicePaymentInfo> StagingInvoicePaymentInfos { get; set; } = null!;
        public virtual DbSet<StartChange> StartChanges { get; set; } = null!;
        public virtual DbSet<StateBusSegMapping> StateBusSegMappings { get; set; } = null!;
        public virtual DbSet<Subordination> Subordinations { get; set; } = null!;
        public virtual DbSet<SubordinationLenderDetail> SubordinationLenderDetails { get; set; } = null!;
        public virtual DbSet<SuccessorProcessEventXref> SuccessorProcessEventXrefs { get; set; } = null!;
        public virtual DbSet<SurveyInfo> SurveyInfos { get; set; } = null!;
        public virtual DbSet<Swiftcode> Swiftcodes { get; set; } = null!;
        public virtual DbSet<SwiftcodesCollection> SwiftcodesCollections { get; set; } = null!;
        public virtual DbSet<SymentecVipauditLog> SymentecVipauditLogs { get; set; } = null!;
        public virtual DbSet<T32processedRecord> T32processedRecords { get; set; } = null!;
        public virtual DbSet<TaskCategory> TaskCategories { get; set; } = null!;
        public virtual DbSet<TaskTemplate> TaskTemplates { get; set; } = null!;
        public virtual DbSet<TaskTemplateCommentCodeXref> TaskTemplateCommentCodeXrefs { get; set; } = null!;
        public virtual DbSet<TaskTemplateCustomerXref> TaskTemplateCustomerXrefs { get; set; } = null!;
        public virtual DbSet<TaskTemplateNightly> TaskTemplateNightlies { get; set; } = null!;
        public virtual DbSet<TaskTemplatePackage> TaskTemplatePackages { get; set; } = null!;
        public virtual DbSet<TaskTemplatePackageDetail> TaskTemplatePackageDetails { get; set; } = null!;
        public virtual DbSet<TaskTemplatePackageSuccessorProcess> TaskTemplatePackageSuccessorProcesses { get; set; } = null!;
        public virtual DbSet<TaskTemplateSuccessor> TaskTemplateSuccessors { get; set; } = null!;
        public virtual DbSet<TaskTemplateSuccessorProcessXref> TaskTemplateSuccessorProcessXrefs { get; set; } = null!;
        public virtual DbSet<TaskTemplateSuccessorStatus> TaskTemplateSuccessorStatuses { get; set; } = null!;
        public virtual DbSet<TaskTemplateTriggerEventRuleXref> TaskTemplateTriggerEventRuleXrefs { get; set; } = null!;
        public virtual DbSet<Tax> Taxes { get; set; } = null!;
        public virtual DbSet<TaxExemption> TaxExemptions { get; set; } = null!;
        public virtual DbSet<TaxInstallment> TaxInstallments { get; set; } = null!;
        public virtual DbSet<TaxRateInfo> TaxRateInfos { get; set; } = null!;
        public virtual DbSet<TaxpayerXref> TaxpayerXrefs { get; set; } = null!;
        public virtual DbSet<TblFile> TblFiles { get; set; } = null!;
        public virtual DbSet<TcautoPopulate> TcautoPopulates { get; set; } = null!;
        public virtual DbSet<TempChargeFile> TempChargeFiles { get; set; } = null!;
        public virtual DbSet<TempFileBalance> TempFileBalances { get; set; } = null!;
        public virtual DbSet<TempFileXref> TempFileXrefs { get; set; } = null!;
        public virtual DbSet<TempSearchchange> TempSearchchanges { get; set; } = null!;
        public virtual DbSet<TempServiceFileFeeId> TempServiceFileFeeIds { get; set; } = null!;
        public virtual DbSet<TempSsisNcsPostDocumentcopylog> TempSsisNcsPostDocumentcopylogs { get; set; } = null!;
        public virtual DbSet<TempSsisNcsPostDocumentcopylogdetail> TempSsisNcsPostDocumentcopylogdetails { get; set; } = null!;
        public virtual DbSet<Template> Templates { get; set; } = null!;
        public virtual DbSet<TemplateBusinessParty> TemplateBusinessParties { get; set; } = null!;
        public virtual DbSet<TemplateFilterByBusinessPartyId> TemplateFilterByBusinessPartyIds { get; set; } = null!;
        public virtual DbSet<TemplateFilterByBusinessPartyIdDocPrep> TemplateFilterByBusinessPartyIdDocPreps { get; set; } = null!;
        public virtual DbSet<TemplateFilterByOwningOfficeId> TemplateFilterByOwningOfficeIds { get; set; } = null!;
        public virtual DbSet<TemplateFilterByOwningOfficeIdDocPrep> TemplateFilterByOwningOfficeIdDocPreps { get; set; } = null!;
        public virtual DbSet<TemplateFilterByRegionUnderwriter> TemplateFilterByRegionUnderwriters { get; set; } = null!;
        public virtual DbSet<TemplateFilterByRegionUnderwriterDocPrep> TemplateFilterByRegionUnderwriterDocPreps { get; set; } = null!;
        public virtual DbSet<TemplateFilterByType> TemplateFilterByTypes { get; set; } = null!;
        public virtual DbSet<TemplateFilterByTypesDocPrep> TemplateFilterByTypesDocPreps { get; set; } = null!;
        public virtual DbSet<TemplateFilterGrp> TemplateFilterGrps { get; set; } = null!;
        public virtual DbSet<TemplateFilterGrpDocPrep> TemplateFilterGrpDocPreps { get; set; } = null!;
        public virtual DbSet<TemplateFilterGrpDocPrepMap> TemplateFilterGrpDocPrepMaps { get; set; } = null!;
        public virtual DbSet<TemplateFilterGrpGeoRegionXref> TemplateFilterGrpGeoRegionXrefs { get; set; } = null!;
        public virtual DbSet<TemplateFilterGrpGeoRegionXrefDocPrep> TemplateFilterGrpGeoRegionXrefDocPreps { get; set; } = null!;
        public virtual DbSet<TemplateFilterGrpHistoryDocprep> TemplateFilterGrpHistoryDocpreps { get; set; } = null!;
        public virtual DbSet<TemplateFilterOwningRegionXref> TemplateFilterOwningRegionXrefs { get; set; } = null!;
        public virtual DbSet<TemplateFilterOwningRegionXrefDocPrep> TemplateFilterOwningRegionXrefDocPreps { get; set; } = null!;
        public virtual DbSet<TemplateFilterProgramTypeXref> TemplateFilterProgramTypeXrefs { get; set; } = null!;
        public virtual DbSet<TemplateFilterProgramTypeXrefDocPrep> TemplateFilterProgramTypeXrefDocPreps { get; set; } = null!;
        public virtual DbSet<TemplateFilterSearchTypeXref> TemplateFilterSearchTypeXrefs { get; set; } = null!;
        public virtual DbSet<TemplateFilterSearchTypeXrefDocPrep> TemplateFilterSearchTypeXrefDocPreps { get; set; } = null!;
        public virtual DbSet<TemplateGeoRegionXref> TemplateGeoRegionXrefs { get; set; } = null!;
        public virtual DbSet<TemplateGeoRegionXrefDocPrep> TemplateGeoRegionXrefDocPreps { get; set; } = null!;
        public virtual DbSet<TemplateHistory> TemplateHistories { get; set; } = null!;
        public virtual DbSet<TemplateInfoXref> TemplateInfoXrefs { get; set; } = null!;
        public virtual DbSet<TemplateInfoXrefInsert> TemplateInfoXrefInserts { get; set; } = null!;
        public virtual DbSet<TemplateMap> TemplateMaps { get; set; } = null!;
        public virtual DbSet<TemplatePageLayout> TemplatePageLayouts { get; set; } = null!;
        public virtual DbSet<TemplatePhrase> TemplatePhrases { get; set; } = null!;
        public virtual DbSet<TemplatePhraseElement> TemplatePhraseElements { get; set; } = null!;
        public virtual DbSet<TemplateProductTypeXref> TemplateProductTypeXrefs { get; set; } = null!;
        public virtual DbSet<TemplateProductTypeXrefDocPrep> TemplateProductTypeXrefDocPreps { get; set; } = null!;
        public virtual DbSet<TemplateValidationByRegionDocprep> TemplateValidationByRegionDocpreps { get; set; } = null!;
        public virtual DbSet<TemplateValidationByStateDocprep> TemplateValidationByStateDocpreps { get; set; } = null!;
        public virtual DbSet<TemplateValidationByUnderWriterDocprep> TemplateValidationByUnderWriterDocpreps { get; set; } = null!;
        public virtual DbSet<TestingTable> TestingTables { get; set; } = null!;
        public virtual DbSet<TextDatum> TextData { get; set; } = null!;
        public virtual DbSet<ThresholdAmount> ThresholdAmounts { get; set; } = null!;
        public virtual DbSet<ThresholdAmountChangeHistory> ThresholdAmountChangeHistories { get; set; } = null!;
        public virtual DbSet<TimeDay> TimeDays { get; set; } = null!;
        public virtual DbSet<TitleAgentsService> TitleAgentsServices { get; set; } = null!;
        public virtual DbSet<TitleEscrowInfo> TitleEscrowInfos { get; set; } = null!;
        public virtual DbSet<TitleEscrowInfoEstLiabilityXref> TitleEscrowInfoEstLiabilityXrefs { get; set; } = null!;
        public virtual DbSet<TitleEscrowInfoLiabilityXref> TitleEscrowInfoLiabilityXrefs { get; set; } = null!;
        public virtual DbSet<TitleEscrowInfoSalesPriceXref> TitleEscrowInfoSalesPriceXrefs { get; set; } = null!;
        public virtual DbSet<TmpEventLogWfbcp> TmpEventLogWfbcps { get; set; } = null!;
        public virtual DbSet<TmpEventMsgQueue> TmpEventMsgQueues { get; set; } = null!;
        public virtual DbSet<TmpSourceApplQueueName> TmpSourceApplQueueNames { get; set; } = null!;
        public virtual DbSet<TmpTaskBcp> TmpTaskBcps { get; set; } = null!;
        public virtual DbSet<TmpTaskLegacyBcp> TmpTaskLegacyBcps { get; set; } = null!;
        public virtual DbSet<TmpTaskUnassignedBcp> TmpTaskUnassignedBcps { get; set; } = null!;
        public virtual DbSet<TmpTaskWorkGroupBcp> TmpTaskWorkGroupBcps { get; set; } = null!;
        public virtual DbSet<TmpTasksToCancel> TmpTasksToCancels { get; set; } = null!;
        public virtual DbSet<Tmpfbpcontact> Tmpfbpcontacts { get; set; } = null!;
        public virtual DbSet<ToleranceCure> ToleranceCures { get; set; } = null!;
        public virtual DbSet<TransactionType> TransactionTypes { get; set; } = null!;
        public virtual DbSet<TransactionTypeStateXref> TransactionTypeStateXrefs { get; set; } = null!;
        public virtual DbSet<TriggerEventMsgQueue> TriggerEventMsgQueues { get; set; } = null!;
        public virtual DbSet<TriggerEventMsgQueueFparchive> TriggerEventMsgQueueFparchives { get; set; } = null!;
        public virtual DbSet<TriggerEventMsgQueueToProcess> TriggerEventMsgQueueToProcesses { get; set; } = null!;
        public virtual DbSet<TriggerEventRule> TriggerEventRules { get; set; } = null!;
        public virtual DbSet<Trust32AutoExtractProcess> Trust32AutoExtractProcesses { get; set; } = null!;
        public virtual DbSet<Trust32Extract> Trust32Extracts { get; set; } = null!;
        public virtual DbSet<Trust32ExtractFile> Trust32ExtractFiles { get; set; } = null!;
        public virtual DbSet<Trust32ExtractParameter> Trust32ExtractParameters { get; set; } = null!;
        public virtual DbSet<Trust32ExtractSubmissionHistory> Trust32ExtractSubmissionHistories { get; set; } = null!;
        public virtual DbSet<Trust32Financial> Trust32Financials { get; set; } = null!;
        public virtual DbSet<Trust32FinancialNew> Trust32FinancialNews { get; set; } = null!;
        public virtual DbSet<Trust32NonFinancial> Trust32NonFinancials { get; set; } = null!;
        public virtual DbSet<Trust32PreProcess> Trust32PreProcesses { get; set; } = null!;
        public virtual DbSet<Tutemp> Tutemps { get; set; } = null!;
        public virtual DbSet<TypeCdDmt> TypeCdDmts { get; set; } = null!;
        public virtual DbSet<UndeliveredEmailDetail> UndeliveredEmailDetails { get; set; } = null!;
        public virtual DbSet<Us2054369Employee> Us2054369Employees { get; set; } = null!;
        public virtual DbSet<Us2061899Employee> Us2061899Employees { get; set; } = null!;
        public virtual DbSet<Us2064786Employee> Us2064786Employees { get; set; } = null!;
        public virtual DbSet<Us2071023Employee> Us2071023Employees { get; set; } = null!;
        public virtual DbSet<Us2112722Employee> Us2112722Employees { get; set; } = null!;
        public virtual DbSet<UserBusUnitXref> UserBusUnitXrefs { get; set; } = null!;
        public virtual DbSet<UserFavorite> UserFavorites { get; set; } = null!;
        public virtual DbSet<UserGuipreference> UserGuipreferences { get; set; } = null!;
        public virtual DbSet<UserLoginHistory> UserLoginHistories { get; set; } = null!;
        public virtual DbSet<UserOwningOfficeSecurityOld> UserOwningOfficeSecurityOlds { get; set; } = null!;
        public virtual DbSet<UserRegionActivity> UserRegionActivities { get; set; } = null!;
        public virtual DbSet<UserSecOffcGrpXref> UserSecOffcGrpXrefs { get; set; } = null!;
        public virtual DbSet<UserSecurityXrefOld> UserSecurityXrefOlds { get; set; } = null!;
        public virtual DbSet<UserSessionDatum> UserSessionData { get; set; } = null!;
        public virtual DbSet<VDw01loadApplication> VDw01loadApplications { get; set; } = null!;
        public virtual DbSet<VDw01loadAuthSignature> VDw01loadAuthSignatures { get; set; } = null!;
        public virtual DbSet<VDw01loadBankAccount> VDw01loadBankAccounts { get; set; } = null!;
        public virtual DbSet<VDw01loadBankBranch> VDw01loadBankBranches { get; set; } = null!;
        public virtual DbSet<VDw01loadBusOrg> VDw01loadBusOrgs { get; set; } = null!;
        public virtual DbSet<VDw01loadBusOrgSecurityAgreement> VDw01loadBusOrgSecurityAgreements { get; set; } = null!;
        public virtual DbSet<VDw01loadBusinessUnit> VDw01loadBusinessUnits { get; set; } = null!;
        public virtual DbSet<VDw01loadCharge> VDw01loadCharges { get; set; } = null!;
        public virtual DbSet<VDw01loadCheckDescriptionDetail> VDw01loadCheckDescriptionDetails { get; set; } = null!;
        public virtual DbSet<VDw01loadCheckDisbursement> VDw01loadCheckDisbursements { get; set; } = null!;
        public virtual DbSet<VDw01loadCountyInfo> VDw01loadCountyInfos { get; set; } = null!;
        public virtual DbSet<VDw01loadDisbursement> VDw01loadDisbursements { get; set; } = null!;
        public virtual DbSet<VDw01loadDisbursementAllocation> VDw01loadDisbursementAllocations { get; set; } = null!;
        public virtual DbSet<VDw01loadEarnestDeposit> VDw01loadEarnestDeposits { get; set; } = null!;
        public virtual DbSet<VDw01loadEmployee> VDw01loadEmployees { get; set; } = null!;
        public virtual DbSet<VDw01loadEmployeeCountyInfo> VDw01loadEmployeeCountyInfos { get; set; } = null!;
        public virtual DbSet<VDw01loadEscrowChargeTemplate> VDw01loadEscrowChargeTemplates { get; set; } = null!;
        public virtual DbSet<VDw01loadEvent> VDw01loadEvents { get; set; } = null!;
        public virtual DbSet<VDw01loadEventLog> VDw01loadEventLogs { get; set; } = null!;
        public virtual DbSet<VDw01loadFileBusinessParty> VDw01loadFileBusinessParties { get; set; } = null!;
        public virtual DbSet<VDw01loadFileProcess> VDw01loadFileProcesses { get; set; } = null!;
        public virtual DbSet<VDw01loadFileService> VDw01loadFileServices { get; set; } = null!;
        public virtual DbSet<VDw01loadGeographicRegion> VDw01loadGeographicRegions { get; set; } = null!;
        public virtual DbSet<VDw01loadInEscrowDeposit> VDw01loadInEscrowDeposits { get; set; } = null!;
        public virtual DbSet<VDw01loadInvoice> VDw01loadInvoices { get; set; } = null!;
        public virtual DbSet<VDw01loadLastEventLog> VDw01loadLastEventLogs { get; set; } = null!;
        public virtual DbSet<VDw01loadLoanInfo> VDw01loadLoanInfos { get; set; } = null!;
        public virtual DbSet<VDw01loadOtherBusOrg> VDw01loadOtherBusOrgs { get; set; } = null!;
        public virtual DbSet<VDw01loadOutOfEscrowDeposit> VDw01loadOutOfEscrowDeposits { get; set; } = null!;
        public virtual DbSet<VDw01loadPayment> VDw01loadPayments { get; set; } = null!;
        public virtual DbSet<VDw01loadPolicyPrincipalXref> VDw01loadPolicyPrincipalXrefs { get; set; } = null!;
        public virtual DbSet<VDw01loadRealProperty> VDw01loadRealProperties { get; set; } = null!;
        public virtual DbSet<VDw01loadRecordingInfo> VDw01loadRecordingInfos { get; set; } = null!;
        public virtual DbSet<VDw01loadServiceFile> VDw01loadServiceFiles { get; set; } = null!;
        public virtual DbSet<VDw01loadServiceFileEmployeeFunction> VDw01loadServiceFileEmployeeFunctions { get; set; } = null!;
        public virtual DbSet<VDw01loadServiceFileFee> VDw01loadServiceFileFees { get; set; } = null!;
        public virtual DbSet<VDw01loadServiceFileLoan> VDw01loadServiceFileLoans { get; set; } = null!;
        public virtual DbSet<VDw01loadServiceFileProductType> VDw01loadServiceFileProductTypes { get; set; } = null!;
        public virtual DbSet<VDw01loadServiceFileProductionOffice> VDw01loadServiceFileProductionOffices { get; set; } = null!;
        public virtual DbSet<VDw01loadServiceFileTransType> VDw01loadServiceFileTransTypes { get; set; } = null!;
        public virtual DbSet<VDw01loadServicefilePropertyInfo> VDw01loadServicefilePropertyInfos { get; set; } = null!;
        public virtual DbSet<VDw01loadTextDatum> VDw01loadTextData { get; set; } = null!;
        public virtual DbSet<VDw01loadTime> VDw01loadTimes { get; set; } = null!;
        public virtual DbSet<VDw01loadTypeCdDmt> VDw01loadTypeCdDmts { get; set; } = null!;
        public virtual DbSet<VDw01loadUserSecurity> VDw01loadUserSecurities { get; set; } = null!;
        public virtual DbSet<VDw01loadWireDisbursement> VDw01loadWireDisbursements { get; set; } = null!;
        public virtual DbSet<VDw01loadWorkflow> VDw01loadWorkflows { get; set; } = null!;
        public virtual DbSet<VDw01loadWorkflowSequence> VDw01loadWorkflowSequences { get; set; } = null!;
        public virtual DbSet<VDw01maxEventLog> VDw01maxEventLogs { get; set; } = null!;
        public virtual DbSet<VDw01textId> VDw01textIds { get; set; } = null!;
        public virtual DbSet<VDwMaxEventLog> VDwMaxEventLogs { get; set; } = null!;
        public virtual DbSet<VDwloadApplication> VDwloadApplications { get; set; } = null!;
        public virtual DbSet<VDwloadAuthSignature> VDwloadAuthSignatures { get; set; } = null!;
        public virtual DbSet<VDwloadBankAccount> VDwloadBankAccounts { get; set; } = null!;
        public virtual DbSet<VDwloadBankBranch> VDwloadBankBranches { get; set; } = null!;
        public virtual DbSet<VDwloadBusOrg> VDwloadBusOrgs { get; set; } = null!;
        public virtual DbSet<VDwloadBusOrgSecurityAgreement> VDwloadBusOrgSecurityAgreements { get; set; } = null!;
        public virtual DbSet<VDwloadBusinessUnit> VDwloadBusinessUnits { get; set; } = null!;
        public virtual DbSet<VDwloadCharge> VDwloadCharges { get; set; } = null!;
        public virtual DbSet<VDwloadCheckDescriptionDetail> VDwloadCheckDescriptionDetails { get; set; } = null!;
        public virtual DbSet<VDwloadCheckDisbursement> VDwloadCheckDisbursements { get; set; } = null!;
        public virtual DbSet<VDwloadCommitment> VDwloadCommitments { get; set; } = null!;
        public virtual DbSet<VDwloadCountyInfo> VDwloadCountyInfos { get; set; } = null!;
        public virtual DbSet<VDwloadDisbursement> VDwloadDisbursements { get; set; } = null!;
        public virtual DbSet<VDwloadDisbursementAllocation> VDwloadDisbursementAllocations { get; set; } = null!;
        public virtual DbSet<VDwloadEarnestDeposit> VDwloadEarnestDeposits { get; set; } = null!;
        public virtual DbSet<VDwloadEmployee> VDwloadEmployees { get; set; } = null!;
        public virtual DbSet<VDwloadEmployeeCountyInfo> VDwloadEmployeeCountyInfos { get; set; } = null!;
        public virtual DbSet<VDwloadEscrowChargeTemplate> VDwloadEscrowChargeTemplates { get; set; } = null!;
        public virtual DbSet<VDwloadEvent> VDwloadEvents { get; set; } = null!;
        public virtual DbSet<VDwloadEventLog> VDwloadEventLogs { get; set; } = null!;
        public virtual DbSet<VDwloadFileBusinessParty> VDwloadFileBusinessParties { get; set; } = null!;
        public virtual DbSet<VDwloadFileProcess> VDwloadFileProcesses { get; set; } = null!;
        public virtual DbSet<VDwloadFileService> VDwloadFileServices { get; set; } = null!;
        public virtual DbSet<VDwloadGeographicRegion> VDwloadGeographicRegions { get; set; } = null!;
        public virtual DbSet<VDwloadInEscrowDeposit> VDwloadInEscrowDeposits { get; set; } = null!;
        public virtual DbSet<VDwloadInvoice> VDwloadInvoices { get; set; } = null!;
        public virtual DbSet<VDwloadLastEventLog> VDwloadLastEventLogs { get; set; } = null!;
        public virtual DbSet<VDwloadLoanInfo> VDwloadLoanInfos { get; set; } = null!;
        public virtual DbSet<VDwloadOutOfEscrowDeposit> VDwloadOutOfEscrowDeposits { get; set; } = null!;
        public virtual DbSet<VDwloadPayment> VDwloadPayments { get; set; } = null!;
        public virtual DbSet<VDwloadPolicy> VDwloadPolicies { get; set; } = null!;
        public virtual DbSet<VDwloadPolicyPrincipalXref> VDwloadPolicyPrincipalXrefs { get; set; } = null!;
        public virtual DbSet<VDwloadPropertyCollateral> VDwloadPropertyCollaterals { get; set; } = null!;
        public virtual DbSet<VDwloadRealProperty> VDwloadRealProperties { get; set; } = null!;
        public virtual DbSet<VDwloadRecordingInfo> VDwloadRecordingInfos { get; set; } = null!;
        public virtual DbSet<VDwloadServiceFile> VDwloadServiceFiles { get; set; } = null!;
        public virtual DbSet<VDwloadServiceFileEmployeeFunction> VDwloadServiceFileEmployeeFunctions { get; set; } = null!;
        public virtual DbSet<VDwloadServiceFileFee> VDwloadServiceFileFees { get; set; } = null!;
        public virtual DbSet<VDwloadServiceFileLoan> VDwloadServiceFileLoans { get; set; } = null!;
        public virtual DbSet<VDwloadServiceFileProductType> VDwloadServiceFileProductTypes { get; set; } = null!;
        public virtual DbSet<VDwloadServiceFilePropertyInfo> VDwloadServiceFilePropertyInfos { get; set; } = null!;
        public virtual DbSet<VDwloadServiceFileTransType> VDwloadServiceFileTransTypes { get; set; } = null!;
        public virtual DbSet<VDwloadTextDatum> VDwloadTextData { get; set; } = null!;
        public virtual DbSet<VDwloadTime> VDwloadTimes { get; set; } = null!;
        public virtual DbSet<VDwloadTypeCdDmt> VDwloadTypeCdDmts { get; set; } = null!;
        public virtual DbSet<VDwloadUserSecurity> VDwloadUserSecurities { get; set; } = null!;
        public virtual DbSet<VDwloadWireDisbursement> VDwloadWireDisbursements { get; set; } = null!;
        public virtual DbSet<VDwtextId> VDwtextIds { get; set; } = null!;
        public virtual DbSet<VSmstranslogTbl> VSmstranslogTbls { get; set; } = null!;
        public virtual DbSet<VTextIdFileIdOnDocPhraseDocPhraseElement> VTextIdFileIdOnDocPhraseDocPhraseElements { get; set; } = null!;
        public virtual DbSet<VTextIdFileIdOnDocPhraseDocPhraseElementDirectly> VTextIdFileIdOnDocPhraseDocPhraseElementDirectlies { get; set; } = null!;
        public virtual DbSet<VTextIdreferencedInTable> VTextIdreferencedInTables { get; set; } = null!;
        public virtual DbSet<VWaddrBookEntryGlobalSearchIngrian> VWaddrBookEntryGlobalSearchIngrians { get; set; } = null!;
        public virtual DbSet<VWaddrBookEntryGlobalSearchIngrianSsnDecrypt> VWaddrBookEntryGlobalSearchIngrianSsnDecrypts { get; set; } = null!;
        public virtual DbSet<VWaddrBookEntryGlobalSearchIngrianTinDecrypt> VWaddrBookEntryGlobalSearchIngrianTinDecrypts { get; set; } = null!;
        public virtual DbSet<VWaddrBookEntryIngrian> VWaddrBookEntryIngrians { get; set; } = null!;
        public virtual DbSet<VWaddrBookEntryIngrianSsnDecrypt> VWaddrBookEntryIngrianSsnDecrypts { get; set; } = null!;
        public virtual DbSet<VWaddrBookEntryIngrianTinDecrypt> VWaddrBookEntryIngrianTinDecrypts { get; set; } = null!;
        public virtual DbSet<VWbusOrgWireInstructionIngrian> VWbusOrgWireInstructionIngrians { get; set; } = null!;
        public virtual DbSet<VWbusOrgWireInstructionIngrianDecrypt> VWbusOrgWireInstructionIngrianDecrypts { get; set; } = null!;
        public virtual DbSet<VWpaymentIngrian> VWpaymentIngrians { get; set; } = null!;
        public virtual DbSet<VWpaymentIngrianDecrypt> VWpaymentIngrianDecrypts { get; set; } = null!;
        public virtual DbSet<VWwireDisbursementDetailIngrian> VWwireDisbursementDetailIngrians { get; set; } = null!;
        public virtual DbSet<VWwireDisbursementDetailIngrianDecrypt> VWwireDisbursementDetailIngrianDecrypts { get; set; } = null!;
        public virtual DbSet<VdwLoadFileContactName> VdwLoadFileContactNames { get; set; } = null!;
        public virtual DbSet<VendorInfo> VendorInfos { get; set; } = null!;
        public virtual DbSet<VendorProblemLog> VendorProblemLogs { get; set; } = null!;
        public virtual DbSet<VwBankAccountIngrian> VwBankAccountIngrians { get; set; } = null!;
        public virtual DbSet<VwBankAccountIngrianAccountNum2Decrypt> VwBankAccountIngrianAccountNum2Decrypts { get; set; } = null!;
        public virtual DbSet<VwBankAccountIngrianAccountNumDecrypt> VwBankAccountIngrianAccountNumDecrypts { get; set; } = null!;
        public virtual DbSet<VwBankAccountIngrianFormattedAcctNumDecrypt> VwBankAccountIngrianFormattedAcctNumDecrypts { get; set; } = null!;
        public virtual DbSet<VwBusinessUnitIngrian> VwBusinessUnitIngrians { get; set; } = null!;
        public virtual DbSet<VwBusinessUnitIngrianDecrypt> VwBusinessUnitIngrianDecrypts { get; set; } = null!;
        public virtual DbSet<VwChargeAllocation> VwChargeAllocations { get; set; } = null!;
        public virtual DbSet<VwCopyDocInsertPhraseRequest> VwCopyDocInsertPhraseRequests { get; set; } = null!;
        public virtual DbSet<VwCopyDocRequestDoc> VwCopyDocRequestDocs { get; set; } = null!;
        public virtual DbSet<VwCpCreateDisbursementAdjRecord> VwCpCreateDisbursementAdjRecords { get; set; } = null!;
        public virtual DbSet<VwCpCreateDisbursementRecord> VwCpCreateDisbursementRecords { get; set; } = null!;
        public virtual DbSet<VwCpCreateDisbursementRepostRecord> VwCpCreateDisbursementRepostRecords { get; set; } = null!;
        public virtual DbSet<VwCpCreateFeeTransferDisbursementAdjRecord> VwCpCreateFeeTransferDisbursementAdjRecords { get; set; } = null!;
        public virtual DbSet<VwCpCreateFeeTransferDisbursementAdjRecordForR> VwCpCreateFeeTransferDisbursementAdjRecordForRs { get; set; } = null!;
        public virtual DbSet<VwCpCreateFeeTransferDisbursementAdjRecordForZ> VwCpCreateFeeTransferDisbursementAdjRecordForZs { get; set; } = null!;
        public virtual DbSet<VwCpCreateFeeTransferDisbursementRecord> VwCpCreateFeeTransferDisbursementRecords { get; set; } = null!;
        public virtual DbSet<VwCpCreateFeeTransferDisbursementRecordForR> VwCpCreateFeeTransferDisbursementRecordForRs { get; set; } = null!;
        public virtual DbSet<VwCpCreateFeeTransferDisbursementRecordForZ> VwCpCreateFeeTransferDisbursementRecordForZs { get; set; } = null!;
        public virtual DbSet<VwCpCreateFeeTransferDisbursementRepostRecord> VwCpCreateFeeTransferDisbursementRepostRecords { get; set; } = null!;
        public virtual DbSet<VwCpCreateFeeTransferDisbursementRepostRecordForR> VwCpCreateFeeTransferDisbursementRepostRecordForRs { get; set; } = null!;
        public virtual DbSet<VwCpCreateFeeTransferDisbursementRepostRecordForZ> VwCpCreateFeeTransferDisbursementRepostRecordForZs { get; set; } = null!;
        public virtual DbSet<VwCpCreateMemoAdjRecordDisb> VwCpCreateMemoAdjRecordDisbs { get; set; } = null!;
        public virtual DbSet<VwCpCreateMemoRecord> VwCpCreateMemoRecords { get; set; } = null!;
        public virtual DbSet<VwCpCreateWireTransferRecord> VwCpCreateWireTransferRecords { get; set; } = null!;
        public virtual DbSet<VwExchangeFeeTransferDisbFeeAlloc> VwExchangeFeeTransferDisbFeeAllocs { get; set; } = null!;
        public virtual DbSet<VwFast1099sDetail> VwFast1099sDetails { get; set; } = null!;
        public virtual DbSet<VwFast1099sDetailsIngrianDecrypt> VwFast1099sDetailsIngrianDecrypts { get; set; } = null!;
        public virtual DbSet<VwFbpsalesPerson> VwFbpsalesPeople { get; set; } = null!;
        public virtual DbSet<VwFeeTransferDisbFeeAlloc> VwFeeTransferDisbFeeAllocs { get; set; } = null!;
        public virtual DbSet<VwFileBusinessPartyName> VwFileBusinessPartyNames { get; set; } = null!;
        public virtual DbSet<VwIbaaccruedInterest> VwIbaaccruedInterests { get; set; } = null!;
        public virtual DbSet<VwIbadisbursementRecord> VwIbadisbursementRecords { get; set; } = null!;
        public virtual DbSet<VwIbainescrowDeposit> VwIbainescrowDeposits { get; set; } = null!;
        public virtual DbSet<VwIbatransaction> VwIbatransactions { get; set; } = null!;
        public virtual DbSet<VwInEscrowDepositForExchange> VwInEscrowDepositForExchanges { get; set; } = null!;
        public virtual DbSet<VwInescrowdeposit> VwInescrowdeposits { get; set; } = null!;
        public virtual DbSet<VwInescrowdepositRepost> VwInescrowdepositReposts { get; set; } = null!;
        public virtual DbSet<VwServiceFileFeePaymentDetail1> VwServiceFileFeePaymentDetail1s { get; set; } = null!;
        public virtual DbSet<VwServiceFileFeePaymentDetail2> VwServiceFileFeePaymentDetail2s { get; set; } = null!;
        public virtual DbSet<VwServiceFileFeePaymentDetail3> VwServiceFileFeePaymentDetail3s { get; set; } = null!;
        public virtual DbSet<VwServiceFileFeePaymentDetail4> VwServiceFileFeePaymentDetail4s { get; set; } = null!;
        public virtual DbSet<VwServiceFileFeePaymentDetailCd2> VwServiceFileFeePaymentDetailCd2s { get; set; } = null!;
        public virtual DbSet<VwServiceFileFeePaymentDetailCd3> VwServiceFileFeePaymentDetailCd3s { get; set; } = null!;
        public virtual DbSet<VwServiceFileFeePaymentDetailPocSupp> VwServiceFileFeePaymentDetailPocSupps { get; set; } = null!;
        public virtual DbSet<VwSsCdcharge> VwSsCdcharges { get; set; } = null!;
        public virtual DbSet<VwTemplateValidation> VwTemplateValidations { get; set; } = null!;
        public virtual DbSet<VwTrust32FinancialIngrian> VwTrust32FinancialIngrians { get; set; } = null!;
        public virtual DbSet<VwTrust32FinancialIngrianDecrypt> VwTrust32FinancialIngrianDecrypts { get; set; } = null!;
        public virtual DbSet<VwUserBusUnitXref> VwUserBusUnitXrefs { get; set; } = null!;
        public virtual DbSet<VwUserBusUnitXrefWithOoactivity> VwUserBusUnitXrefWithOoactivities { get; set; } = null!;
        public virtual DbSet<VwUserOwningOfficeSecurity> VwUserOwningOfficeSecurities { get; set; } = null!;
        public virtual DbSet<VwUserSecurityXref> VwUserSecurityXrefs { get; set; } = null!;
        public virtual DbSet<VwUserSecurityXrefEcheck> VwUserSecurityXrefEchecks { get; set; } = null!;
        public virtual DbSet<WffCountry> WffCountries { get; set; } = null!;
        public virtual DbSet<WffCounty> WffCounties { get; set; } = null!;
        public virtual DbSet<WffGeoFilter> WffGeoFilters { get; set; } = null!;
        public virtual DbSet<WffGeoLocation> WffGeoLocations { get; set; } = null!;
        public virtual DbSet<WffState> WffStates { get; set; } = null!;
        public virtual DbSet<WireDisbursementDetail> WireDisbursementDetails { get; set; } = null!;
        public virtual DbSet<WireHistory> WireHistories { get; set; } = null!;
        public virtual DbSet<WireInstructionValidation> WireInstructionValidations { get; set; } = null!;
        public virtual DbSet<WireReceipt> WireReceipts { get; set; } = null!;
        public virtual DbSet<WorkFlowTemplate> WorkFlowTemplates { get; set; } = null!;
        public virtual DbSet<WorkFlowTemplateAdditionalRoleTypeXref> WorkFlowTemplateAdditionalRoleTypeXrefs { get; set; } = null!;
        public virtual DbSet<WorkFlowTemplateApnxref> WorkFlowTemplateApnxrefs { get; set; } = null!;
        public virtual DbSet<WorkFlowTemplateApplicationXref> WorkFlowTemplateApplicationXrefs { get; set; } = null!;
        public virtual DbSet<WorkFlowTemplateBusOrgXref> WorkFlowTemplateBusOrgXrefs { get; set; } = null!;
        public virtual DbSet<WorkFlowTemplateBusSegXref> WorkFlowTemplateBusSegXrefs { get; set; } = null!;
        public virtual DbSet<WorkFlowTemplateChangeHistory> WorkFlowTemplateChangeHistories { get; set; } = null!;
        public virtual DbSet<WorkFlowTemplateGeographicXref> WorkFlowTemplateGeographicXrefs { get; set; } = null!;
        public virtual DbSet<WorkFlowTemplateNightly> WorkFlowTemplateNightlies { get; set; } = null!;
        public virtual DbSet<WorkFlowTemplateOfficeString> WorkFlowTemplateOfficeStrings { get; set; } = null!;
        public virtual DbSet<WorkFlowTemplateOfficesXref> WorkFlowTemplateOfficesXrefs { get; set; } = null!;
        public virtual DbSet<WorkFlowTemplateOriginatorXref> WorkFlowTemplateOriginatorXrefs { get; set; } = null!;
        public virtual DbSet<WorkFlowTemplateProductTypeXref> WorkFlowTemplateProductTypeXrefs { get; set; } = null!;
        public virtual DbSet<WorkFlowTemplateProgramTypeXref> WorkFlowTemplateProgramTypeXrefs { get; set; } = null!;
        public virtual DbSet<WorkFlowTemplatePropertyTypeXref> WorkFlowTemplatePropertyTypeXrefs { get; set; } = null!;
        public virtual DbSet<WorkFlowTemplateSearchTypeXref> WorkFlowTemplateSearchTypeXrefs { get; set; } = null!;
        public virtual DbSet<WorkFlowTemplateServiceTypeXref> WorkFlowTemplateServiceTypeXrefs { get; set; } = null!;
        public virtual DbSet<WorkFlowTemplateTransTypeXref> WorkFlowTemplateTransTypeXrefs { get; set; } = null!;
        public virtual DbSet<WorkFlowTime> WorkFlowTimes { get; set; } = null!;
        public virtual DbSet<WorkFlowTitleEscrowInfo> WorkFlowTitleEscrowInfos { get; set; } = null!;
        public virtual DbSet<WorkGroup> WorkGroups { get; set; } = null!;
        public virtual DbSet<WorkQueue> WorkQueues { get; set; } = null!;
        public virtual DbSet<WorkQueueCyberArk> WorkQueueCyberArks { get; set; } = null!;
        public virtual DbSet<WorkQueueCyberArkXref> WorkQueueCyberArkXrefs { get; set; } = null!;
        public virtual DbSet<WorkQueueEmailBody> WorkQueueEmailBodies { get; set; } = null!;
        public virtual DbSet<WorkQueueMessage> WorkQueueMessages { get; set; } = null!;
        public virtual DbSet<WorkQueueMessageHistory> WorkQueueMessageHistories { get; set; } = null!;
        public virtual DbSet<WorkQueueMessageLog> WorkQueueMessageLogs { get; set; } = null!;
        public virtual DbSet<WorkQueueMessageLogHistory> WorkQueueMessageLogHistories { get; set; } = null!;
        public virtual DbSet<WorkQueueMessageXmldatum> WorkQueueMessageXmldata { get; set; } = null!;
        public virtual DbSet<WorkQueueRfax> WorkQueueRfaxes { get; set; } = null!;
        public virtual DbSet<WorkQueueSummary> WorkQueueSummaries { get; set; } = null!;
        public virtual DbSet<WorkQueueTrigger> WorkQueueTriggers { get; set; } = null!;
        public virtual DbSet<WorkQueueTriggerXref> WorkQueueTriggerXrefs { get; set; } = null!;
        public virtual DbSet<WorkQueueType> WorkQueueTypes { get; set; } = null!;
        public virtual DbSet<WorkQueueUserXref> WorkQueueUserXrefs { get; set; } = null!;
        public virtual DbSet<Workflow> Workflows { get; set; } = null!;
        public virtual DbSet<Workflow2> Workflow2s { get; set; } = null!;
        public virtual DbSet<WorkflowSequence> WorkflowSequences { get; set; } = null!;

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Server=AWSVNSQLFASTF11;Database=FASTPROD;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Abawire>(entity =>
            {
                entity.ToTable("ABAWire");

                entity.HasIndex(e => new { e.Aba, e.AbaidentifierTypeCdid }, "idxABA_ABAIdentifierTypeCDID")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.AbawireId).HasColumnName("ABAWireID");

                entity.Property(e => e.Aba)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("ABA")
                    .IsFixedLength();

                entity.Property(e => e.Abaid).HasColumnName("ABAID");

                entity.Property(e => e.AbaidentifierTypeCdid).HasColumnName("ABAIdentifierTypeCDID");

                entity.Property(e => e.Book)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ChangedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Customer)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DataViewCode)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Frbnumber)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("FRBNumber")
                    .IsFixedLength();

                entity.Property(e => e.FundTransfer)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LastRevision).HasColumnType("datetime");

                entity.Property(e => e.NewRoutingNumber)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.OfficeCode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RecordTypeCode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.SettlementOnly)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TelegraphicName)
                    .HasMaxLength(18)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AbawireLog>(entity =>
            {
                entity.ToTable("ABAWireLog");

                entity.HasIndex(e => new { e.JobLastRun, e.JobStatus }, "nci_ABAWireLog_JobStatus")
                    .HasFillFactor(90);

                entity.Property(e => e.AbawireLogId).HasColumnName("ABAWireLogID");

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.JobLastRun).HasColumnType("date");
            });

            modelBuilder.Entity<AccountingPrivacyEventLog>(entity =>
            {
                entity.HasKey(e => new { e.AccountingPrivacyEventLogId, e.FileId })
                    .HasName("PK_AccountingPrivacyEventLogXKeyID");

                entity.ToTable("AccountingPrivacyEventLog");

                entity.HasIndex(e => new { e.FileId, e.EventId }, "EventId_IDX")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileId, "FileId_IDX")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.EventStartDate, "IX_AccountingPrivacyEventLog_EventStartDate_FileID")
                    .HasFillFactor(90);

                entity.Property(e => e.FileId)
                    .HasColumnName("FileID")
                    .HasDefaultValueSql("((1000))");

                entity.Property(e => e.ApplContext)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ApplContextTypeCdId).HasColumnName("ApplContextTypeCdID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryDocuments)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryServer)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.DocDeliveryId)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("DocDeliveryID");

                entity.Property(e => e.ErrorMsg)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.EventEndDate).HasColumnType("datetime");

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.EventStartDate).HasColumnType("datetime");

                entity.Property(e => e.Iisserver)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("IISServer");

                entity.Property(e => e.Recipients)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Sender)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.AccountingPrivacyEventLogs)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk1AccountingPrivacyEventLog");

                entity.HasOne(d => d.Event)
                    .WithMany(p => p.AccountingPrivacyEventLogs)
                    .HasForeignKey(d => d.EventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk3AccountingPrivacyEventLog");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.AccountingPrivacyEventLogs)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk2AccountingPrivacyEventLog");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AccountingPrivacyEventLogs)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("fk4AccountingPrivacyEventLog");
            });

            modelBuilder.Entity<AccountingSystem>(entity =>
            {
                entity.HasKey(e => e.AcctSystemId)
                    .HasName("conAcctSystem1Pk");

                entity.ToTable("AccountingSystem");

                entity.Property(e => e.AcctSystemId).HasColumnName("AcctSystemID");

                entity.Property(e => e.Name)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Path)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<Activity>(entity =>
            {
                entity.ToTable("Activity");

                entity.HasIndex(e => new { e.ClassTypeId, e.ObjectCd }, "indActivity3")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.ActivityId).HasColumnName("ActivityID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Descr)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.Activities)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conActivity2Fk");
            });

            modelBuilder.Entity<ActivityGrp>(entity =>
            {
                entity.ToTable("ActivityGrp");

                entity.HasIndex(e => new { e.ClassTypeId, e.ObjectCd }, "indActvGrp2")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.ActivityGrpId).HasColumnName("ActivityGrpID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Descr)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.ActivityGrps)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conActvGrp2Fk");
            });

            modelBuilder.Entity<ActivityGrpActivityXref>(entity =>
            {
                entity.HasKey(e => new { e.ActivityGrpId, e.ActivityId })
                    .HasName("conActvGrpActvXref1Pk");

                entity.ToTable("ActivityGrpActivityXref");

                entity.HasIndex(e => e.ActivityId, "indActvGrpActvXref3Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.ActivityGrpId).HasColumnName("ActivityGrpID");

                entity.Property(e => e.ActivityId).HasColumnName("ActivityID");

                entity.HasOne(d => d.ActivityGrp)
                    .WithMany(p => p.ActivityGrpActivityXrefs)
                    .HasForeignKey(d => d.ActivityGrpId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conActvGrpActvXref3Fk");

                entity.HasOne(d => d.Activity)
                    .WithMany(p => p.ActivityGrpActivityXrefs)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conActvGrpActvXref2Fk");
            });

            modelBuilder.Entity<AddrBookAddrXref>(entity =>
            {
                entity.HasKey(e => new { e.PhysicalAddrTypeCdId, e.AddrBookEntryId, e.PhysicalAddrId })
                    .HasName("conAddrBookAddrXref1Pk");

                entity.ToTable("AddrBookAddrXref");

                entity.HasIndex(e => e.AddrBookEntryId, "indAddrBookAddrXref3Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PhysicalAddrId, "indAddrBookAddrXref4Fk");

                entity.Property(e => e.PhysicalAddrTypeCdId).HasColumnName("PhysicalAddrTypeCdID");

                entity.Property(e => e.AddrBookEntryId).HasColumnName("AddrBookEntryID");

                entity.Property(e => e.PhysicalAddrId).HasColumnName("PhysicalAddrID");

                entity.Property(e => e.BuyerSellerAddressTypeCdId).HasDefaultValueSql("((80))");

                entity.HasOne(d => d.AddrBookEntry)
                    .WithMany(p => p.AddrBookAddrXrefs)
                    .HasForeignKey(d => d.AddrBookEntryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conAddrBookAddrXref3FK");

                entity.HasOne(d => d.PhysicalAddr)
                    .WithMany(p => p.AddrBookAddrXrefs)
                    .HasForeignKey(d => d.PhysicalAddrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conAddrBookAddrXref2FK");

                entity.HasOne(d => d.PhysicalAddrTypeCd)
                    .WithMany(p => p.AddrBookAddrXrefs)
                    .HasForeignKey(d => d.PhysicalAddrTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conAddrBookAddrXref4Fk");
            });

            modelBuilder.Entity<AddrBookElecAddrXref>(entity =>
            {
                entity.HasKey(e => new { e.ElectronicAddrTypeCdId, e.AddrBookEntryId, e.ElectronicAddrId })
                    .HasName("conAddrBookElecAddrXref1Pk");

                entity.ToTable("AddrBookElecAddrXref");

                entity.HasIndex(e => e.AddrBookEntryId, "indAddrBookElecAddrXref4Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ElectronicAddrId, "indAddrBookElecAddrXref5Fk");

                entity.Property(e => e.ElectronicAddrTypeCdId).HasColumnName("ElectronicAddrTypeCdID");

                entity.Property(e => e.AddrBookEntryId).HasColumnName("AddrBookEntryID");

                entity.Property(e => e.ElectronicAddrId).HasColumnName("ElectronicAddrID");

                entity.HasOne(d => d.AddrBookEntry)
                    .WithMany(p => p.AddrBookElecAddrXrefs)
                    .HasForeignKey(d => d.AddrBookEntryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conAddressBookElecAddrXref1FK");

                entity.HasOne(d => d.ElectronicAddr)
                    .WithMany(p => p.AddrBookElecAddrXrefs)
                    .HasForeignKey(d => d.ElectronicAddrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conAddressBookElecAddrXref2FK");

                entity.HasOne(d => d.ElectronicAddrTypeCd)
                    .WithMany(p => p.AddrBookElecAddrXrefs)
                    .HasForeignKey(d => d.ElectronicAddrTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conAddrBookElecAddrXref5Fk");
            });

            modelBuilder.Entity<AddrBookEntry>(entity =>
            {
                entity.ToTable("AddrBookEntry");

                entity.HasIndex(e => e.UpdTs, "DW_IXN01_AddrBookEntry_UpdTS")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.AddrBookEntryId, e.Name1, e.Name2, e.Descr, e.FirstName, e.AdHocFlg, e.RefNumber }, "IDXAddrBookNames1")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FirstName, e.AddrBookEntryId, e.Name1, e.Name2, e.Descr, e.AdHocFlg, e.RefNumber }, "IDXAddrBookNames2")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.Name1, e.FirstName, e.AddrBookEntryId, e.Name2, e.Descr, e.AdHocFlg, e.RefNumber }, "IDXAddrBookNames3")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.AddrBookEntryId, e.FirstName, e.LastName }, "IDXAddrBookNames9")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ClassTypeId, "IDX_AddrBookEntry_ClassTypeID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TaxIdnum, "idx_TaxIDNum")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.Ssn, "idx_ssn")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.Name1, "indAddrBookEntry2")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.LastName, e.FirstName }, "indAddrBookEntry6")
                    .HasFillFactor(90);

                entity.Property(e => e.AddrBookEntryId).HasColumnName("AddrBookEntryID");

                entity.Property(e => e.Aka)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("AKA");

                entity.Property(e => e.BirthDate).HasColumnType("datetime");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ConsumerMessageBoxId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ConsumerMessageBoxID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.DeactivationDate).HasColumnType("datetime");

                entity.Property(e => e.Descr)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Name1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Occupation)
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.ReactivationDate).HasColumnType("datetime");

                entity.Property(e => e.RefNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Salutation)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ssn)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("SSN");

                entity.Property(e => e.StatusChgComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StatusChgDate).HasColumnType("datetime");

                entity.Property(e => e.StatusChgEmployeeId).HasColumnName("StatusChgEmployeeID");

                entity.Property(e => e.Suffix)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TaxIdnum)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("TaxIDNum");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.AddrBookEntries)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conAddrBookEntry6Fk");

                entity.HasOne(d => d.CreationEmployee)
                    .WithMany(p => p.AddrBookEntryCreationEmployees)
                    .HasForeignKey(d => d.CreationEmployeeId)
                    .HasConstraintName("conAddressBookFK1");

                entity.HasOne(d => d.StatusChgEmployee)
                    .WithMany(p => p.AddrBookEntryStatusChgEmployees)
                    .HasForeignKey(d => d.StatusChgEmployeeId)
                    .HasConstraintName("conAddressBookEntryFK2");
            });

            modelBuilder.Entity<AddrBookEntryGlobalSearch>(entity =>
            {
                entity.HasKey(e => e.AddrBookEntryId)
                    .HasName("conAddrBookEntryGlobal1Pk");

                entity.ToTable("AddrBookEntryGlobalSearch");

                entity.HasIndex(e => new { e.Name1, e.FirstName, e.AddrBookEntryId, e.Name2, e.Descr, e.AdHocFlg, e.RefNumber }, "IDXAddrBookNames3")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.AddrBookEntryId, e.Name1, e.Name2, e.Descr, e.FirstName, e.RefNumber }, "IDXGlobalAddrBookNames1")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FirstName, e.AddrBookEntryId, e.Name1, e.Name2, e.Descr, e.AdHocFlg, e.RefNumber }, "IDXGlobalAddrBookNames2")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.RefNumber, "IX_AddrBookEntryGlobalSearch_RefNumber")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.Name1, "IndGlobalAddrBookEntry2")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.LastName, e.FirstName }, "indGlobalAddrBookEntry6")
                    .HasFillFactor(90);

                entity.Property(e => e.AddrBookEntryId)
                    .ValueGeneratedNever()
                    .HasColumnName("AddrBookEntryID");

                entity.Property(e => e.Aka)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("AKA");

                entity.Property(e => e.BirthDate).HasColumnType("datetime");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.DeactivationDate).HasColumnType("datetime");

                entity.Property(e => e.Descr)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Name1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Occupation)
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.ReactivationDate).HasColumnType("datetime");

                entity.Property(e => e.RefNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Salutation)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ssn)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("SSN");

                entity.Property(e => e.StatusChgComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StatusChgDate).HasColumnType("datetime");

                entity.Property(e => e.StatusChgEmployeeId).HasColumnName("StatusChgEmployeeID");

                entity.Property(e => e.Suffix)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TaxIdnum)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("TaxIDNum");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<AgentFile>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.FileId).HasColumnName("FileID");
            });

            modelBuilder.Entity<AgentNetJacketDailycopy>(entity =>
            {
                entity.ToTable("AgentNetJacketDailycopy");

                entity.Property(e => e.AgentNetJacketDailycopyId).HasColumnName("AgentNetJacketDailycopyID");

                entity.Property(e => e.FaccextendedProductId).HasColumnName("FACCExtendedProductId");

                entity.Property(e => e.FaccproductId).HasColumnName("FACCProductId");

                entity.Property(e => e.JacketDesc)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.JacketId).HasColumnName("JacketID");

                entity.Property(e => e.StarsunderwriterCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("STARSUnderwriterCode");

                entity.Property(e => e.StateCode)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.UnderwriterName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AgentNetPolicyNumber>(entity =>
            {
                entity.ToTable("AgentNetPolicyNumber");

                entity.HasIndex(e => e.FileId, "IDX_AgentNetPolicyNumber_FileID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.PolicyNumber, e.TypeCdId }, "IDX_PolicyNumber_TypeCdID")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FileId, e.ServiceFileFeeId }, "idx_AgentNetPolicyNumber_Fileid_ServiceFileFeeID")
                    .HasFillFactor(90);

                entity.Property(e => e.AgentNetPolicyNumberId).HasColumnName("AgentNetPolicyNumberID");

                entity.Property(e => e.AgentNetFirmId).HasColumnName("AgentNetFirmID");

                entity.Property(e => e.AgentNetJacketId).HasColumnName("AgentNetJacketID");

                entity.Property(e => e.AgentNetJacketType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AgentNetOfficeId).HasColumnName("AgentNetOfficeID");

                entity.Property(e => e.AgentNetProductId).HasColumnName("AgentNetProductID");

                entity.Property(e => e.AgentNetUnderWriterCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.PolicyNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductTypeCdId).HasColumnName("ProductTypeCdID");

                entity.Property(e => e.ServiceFileFeeId).HasColumnName("ServiceFileFeeID");

                entity.Property(e => e.TypeCdId)
                    .HasColumnName("TypeCdID")
                    .HasDefaultValueSql("((2146))");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.VoidComments)
                    .HasMaxLength(3000)
                    .IsUnicode(false);

                entity.HasOne(d => d.File)
                    .WithMany(p => p.AgentNetPolicyNumbers)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_AgentNetAgentNetPolicyNumber_FileID");

                entity.HasOne(d => d.ProductTypeCd)
                    .WithMany(p => p.AgentNetPolicyNumberProductTypeCds)
                    .HasForeignKey(d => d.ProductTypeCdId)
                    .HasConstraintName("FK_AgentNetPolicyNumber_FHPProductTypeCdID");

                entity.HasOne(d => d.ServiceFileFee)
                    .WithMany(p => p.AgentNetPolicyNumbers)
                    .HasForeignKey(d => d.ServiceFileFeeId)
                    .HasConstraintName("FK_AgentNetPolicyNumber_ServiceFileFeeID");

                entity.HasOne(d => d.TypeCd)
                    .WithMany(p => p.AgentNetPolicyNumberTypeCds)
                    .HasForeignKey(d => d.TypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_AgentNetAgentNetPolicyNumber_TypeCdID");
            });

            modelBuilder.Entity<AgentNetRemittance>(entity =>
            {
                entity.HasKey(e => e.FileId)
                    .HasName("PK_AgentNetRemittanceFileID");

                entity.ToTable("AgentNetRemittance");

                entity.HasIndex(e => new { e.FileEligibilityStatus, e.RemittanceStatus, e.AgentNetFileStatus }, "Idx_FileEligibilityStatus_RemittanceStatus_FileStatus")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.PolicyEffectiveDate, e.FileEligibilityStatus }, "Idx_PolicyEffectiveDate")
                    .HasFillFactor(90);

                entity.Property(e => e.FileId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileID");

                entity.Property(e => e.AgentNetFileId).HasColumnName("AgentNetFileID");

                entity.Property(e => e.AgentNetRemittanceId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AgentNetRemittanceID");

                entity.Property(e => e.AgentNetUnderWriterCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AgentNetUnderWriterFeePercentage).HasColumnType("decimal(10, 5)");

                entity.Property(e => e.GrossPremium).HasColumnType("decimal(10, 5)");

                entity.Property(e => e.NetPremium).HasColumnType("decimal(10, 5)");

                entity.Property(e => e.PolicyEffectiveDate).HasColumnType("datetime");

                entity.Property(e => e.RemitComments)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RemitResponseXml)
                    .IsUnicode(false)
                    .HasColumnName("RemitResponseXML");

                entity.Property(e => e.RemitXml)
                    .IsUnicode(false)
                    .HasColumnName("RemitXML");

                entity.Property(e => e.RemittedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.File)
                    .WithOne(p => p.AgentNetRemittance)
                    .HasForeignKey<AgentNetRemittance>(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AgentNetRemittance_FileId");

                entity.HasOne(d => d.RemitBatch)
                    .WithMany(p => p.AgentNetRemittances)
                    .HasForeignKey(d => d.RemitBatchId)
                    .HasConstraintName("FK_AgentNetRemittance_RemitBatchId");
            });

            modelBuilder.Entity<AgentNetRemittanceCplFee>(entity =>
            {
                entity.HasKey(e => e.AgentNetCplId)
                    .HasName("PK_AgentNetRemittanceCplFeesID");

                entity.HasIndex(e => e.CplCoveredPartyId, "Idx_AgentNetRemittanceCplFees_CplCoveredPartyId")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileId, "Idx_AgentNetRemittanceCplFees_FileID")
                    .HasFillFactor(90);

                entity.Property(e => e.CplCoveredPartyName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FeeDesc)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.LetterType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RequestedBy)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RequestedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.AgentNetRemittanceCplFees)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AgentNetRemittanceCplFees_FileId");
            });

            modelBuilder.Entity<AgentNetValidationRequestStatus>(entity =>
            {
                entity.HasKey(e => e.AgentNetValidationRequestId);

                entity.ToTable("AgentNetValidationRequestStatus");

                entity.HasIndex(e => e.FastemployeeId, "IDX_AgentNetValidationRequestStatus_FASTEmployeeID");

                entity.Property(e => e.AgentNetValidationRequestId).HasColumnName("AgentNetValidationRequestID");

                entity.Property(e => e.FastemployeeId).HasColumnName("FASTEmployeeID");

                entity.Property(e => e.RequestedDate).HasColumnType("datetime");

                entity.HasOne(d => d.Fastemployee)
                    .WithMany(p => p.AgentNetValidationRequestStatuses)
                    .HasForeignKey(d => d.FastemployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_conAgentNetValidationRequestStatusFASTEmployeeID");
            });

            modelBuilder.Entity<Akaname>(entity =>
            {
                entity.ToTable("AKAName");

                entity.HasIndex(e => e.AddrBookEntryId, "XIF62AKAName")
                    .HasFillFactor(90);

                entity.Property(e => e.AkanameId).HasColumnName("AKANameID");

                entity.Property(e => e.AddrBookEntryId).HasColumnName("AddrBookEntryID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.AddrBookEntry)
                    .WithMany(p => p.Akanames)
                    .HasForeignKey(d => d.AddrBookEntryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conAKAName1FK");
            });

            modelBuilder.Entity<AlternateBankChangeHistory>(entity =>
            {
                entity.HasKey(e => e.AbchangeHistoryId);

                entity.ToTable("AlternateBankChangeHistory");

                entity.HasIndex(e => new { e.BankId, e.IsApproved }, "IX_AlternateBankChangeHistory_BankID_IsApproved");

                entity.Property(e => e.AbchangeHistoryId).HasColumnName("ABChangeHistoryID");

                entity.Property(e => e.BankId).HasColumnName("BankID");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.EventDate).HasColumnType("datetime");

                entity.Property(e => e.EventDetails).IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.Bank)
                    .WithMany(p => p.AlternateBankChangeHistories)
                    .HasForeignKey(d => d.BankId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AlternateBankChangeHistory_BankID");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.AlternateBankChangeHistories)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_AlternateBankChangeHistory_EmployeeID");
            });

            modelBuilder.Entity<ApplSourceBusOrgInfo>(entity =>
            {
                entity.HasKey(e => new { e.BusOrgId, e.SourceApplId })
                    .HasName("conApplSourceBusOrgInfo1Pk");

                entity.ToTable("ApplSourceBusOrgInfo");

                entity.HasIndex(e => e.SourceApplId, "indApplSourceBusOrgInfo3Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.SourceApplId).HasColumnName("SourceApplID");

                entity.Property(e => e.SourceApplBusOrgId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SourceApplBusOrgID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.BusOrg)
                    .WithMany(p => p.ApplSourceBusOrgInfos)
                    .HasForeignKey(d => d.BusOrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conApplSourceBusOrgInfo3Fk");

                entity.HasOne(d => d.SourceAppl)
                    .WithMany(p => p.ApplSourceBusOrgInfos)
                    .HasForeignKey(d => d.SourceApplId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conApplSourceBusOrgInfo2Fk");
            });

            modelBuilder.Entity<Application>(entity =>
            {
                entity.HasKey(e => e.ApplId)
                    .HasName("conApplication1Pk");

                entity.ToTable("Application");

                entity.HasIndex(e => e.ObjectCd, "indApplication2")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.ApplId)
                    .ValueGeneratedNever()
                    .HasColumnName("ApplID");

                entity.Property(e => e.AlertTypeCdId).HasColumnName("AlertTypeCdID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ExternalQueueName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Rbsenabled)
                    .HasColumnName("RBSEnabled")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.Applications)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conApplication2Fk");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Applications)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Application_UserID");
            });

            modelBuilder.Entity<ApplicationMaintAudit>(entity =>
            {
                entity.HasKey(e => e.ApplMaintAuditId);

                entity.ToTable("ApplicationMaintAudit");

                entity.Property(e => e.ApplMaintAuditId).HasColumnName("ApplMaintAuditID");

                entity.Property(e => e.AuditDate).HasColumnType("datetime");

                entity.Property(e => e.AuditLog).HasMaxLength(100);

                entity.Property(e => e.LoginName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ArbitraryNum>(entity =>
            {
                entity.ToTable("ArbitraryNum");

                entity.HasIndex(e => e.PropertyId, "indArbitraryNum3Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.ArbitraryNumId).HasColumnName("ArbitraryNumID");

                entity.Property(e => e.ArbitraryNum1)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ArbitraryNum");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.PropertyId).HasColumnName("PropertyID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.ArbitraryNums)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conArbitraryNum3FK");

                entity.HasOne(d => d.Property)
                    .WithMany(p => p.ArbitraryNums)
                    .HasForeignKey(d => d.PropertyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conArbitraryNum2FK");
            });

            modelBuilder.Entity<ArchiveStatus>(entity =>
            {
                entity.HasKey(e => e.FileId);

                entity.ToTable("ArchiveStatus");

                entity.HasIndex(e => e.ArchiveDate, "IDX_ArchiveStatus_ArchiveDate")
                    .HasFillFactor(90);

                entity.Property(e => e.FileId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileID");

                entity.Property(e => e.ArchiveDate).HasColumnType("datetime");

                entity.Property(e => e.DearchiveDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousArchiveDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ArchiveTracking>(entity =>
            {
                entity.ToTable("ArchiveTracking");

                entity.HasIndex(e => e.ArchiveDatabase, "IDXAchiveTrackingDB")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileId, "IDXAchiveTrackingFileID")
                    .HasFillFactor(90);

                entity.Property(e => e.ArchiveTrackingId).HasColumnName("ArchiveTrackingID");

                entity.Property(e => e.ArchiveDatabase)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ArchiveDate).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.ArchiveTrackings)
                    .HasForeignKey(d => d.FileId)
                    .HasConstraintName("FKArchiveTrackingFileID");
            });

            modelBuilder.Entity<AssociatedDocumentCloud>(entity =>
            {
                entity.HasKey(e => e.DocId)
                    .HasName("PK__Associat__3EF1888D19C2D35B");

                entity.ToTable("AssociatedDocument_Cloud");

                entity.Property(e => e.DocId)
                    .ValueGeneratedNever()
                    .HasColumnName("DocID");

                entity.Property(e => e.NgDocId).HasColumnName("NG_DocID");
            });

            modelBuilder.Entity<AssociationInfo>(entity =>
            {
                entity.HasKey(e => e.FileProcessId)
                    .HasName("XPKAssociationInfo");

                entity.ToTable("AssociationInfo");

                entity.HasIndex(e => e.MgmtCoFileBusinessPartyId, "XIF338AssociationInfo")
                    .HasFillFactor(90);

                entity.Property(e => e.FileProcessId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileProcessID");

                entity.Property(e => e.AmtDue).HasColumnType("money");

                entity.Property(e => e.AmtDuePeriodTypeCdId).HasColumnName("AmtDuePeriodTypeCdID");

                entity.Property(e => e.MgmtCoFileBusinessPartyId).HasColumnName("MgmtCoFileBusinessPartyID");

                entity.HasOne(d => d.AmtDuePeriodTypeCd)
                    .WithMany(p => p.AssociationInfos)
                    .HasForeignKey(d => d.AmtDuePeriodTypeCdId)
                    .HasConstraintName("R_408");

                entity.HasOne(d => d.FileProcess)
                    .WithOne(p => p.AssociationInfo)
                    .HasForeignKey<AssociationInfo>(d => d.FileProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conAssociationInfo14FK");

                entity.HasOne(d => d.MgmtCoFileBusinessParty)
                    .WithMany(p => p.AssociationInfos)
                    .HasForeignKey(d => d.MgmtCoFileBusinessPartyId)
                    .HasConstraintName("conAssociationInfo1FK");
            });

            modelBuilder.Entity<AtpphraseMap>(entity =>
            {
                entity.ToTable("ATPPhraseMap");

                entity.HasIndex(e => new { e.DocType, e.DocSubType }, "IdxATPPhraseMap1")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.AtpphraseMapId).HasColumnName("ATPPhraseMapID");

                entity.Property(e => e.DocSubType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DocType)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PhraseCd)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AtpproductTemplateMap>(entity =>
            {
                entity.ToTable("ATPProductTemplateMap");

                entity.HasIndex(e => new { e.ProductCode, e.TemplateCode }, "IdxATPProductTemplateMap1")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.AtpproductTemplateMapId).HasColumnName("ATPProductTemplateMapID");

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TemplateCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AtpsearchRule>(entity =>
            {
                entity.HasKey(e => new { e.ClassTypeId, e.TypeValue });

                entity.ToTable("ATPSearchRule");

                entity.HasIndex(e => new { e.ClassTypeId, e.TypeValue }, "IdxATPSearchRule1")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.StatusCd).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.AtpsearchRules)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conATPSearchRule1FK");
            });

            modelBuilder.Entity<AtptextElementMap>(entity =>
            {
                entity.ToTable("ATPTextElementMap");

                entity.HasIndex(e => new { e.AtpphraseMapId, e.TextElementName }, "IdxATPTextElementMap1")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.AtptextElementMapId).HasColumnName("ATPTextElementMapID");

                entity.Property(e => e.AtpphraseMapId).HasColumnName("ATPPhraseMapID");

                entity.Property(e => e.Bpmelement)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("BPMElement");

                entity.Property(e => e.TextElementName)
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AttorneyInfo>(entity =>
            {
                entity.HasKey(e => e.FileProcessId)
                    .HasName("XPKAttorneyInfo");

                entity.ToTable("AttorneyInfo");

                entity.Property(e => e.FileProcessId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileProcessID");

                entity.Property(e => e.DisplayAggregateOnCd).HasColumnName("DisplayAggregateOnCD");

                entity.Property(e => e.RetainedAmtByAttorney).HasColumnType("money");

                entity.HasOne(d => d.FileProcess)
                    .WithOne(p => p.AttorneyInfo)
                    .HasForeignKey<AttorneyInfo>(d => d.FileProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFileProcess7FK");
            });

            modelBuilder.Entity<AttrepTruncationSafeguard>(entity =>
            {
                entity.HasKey(e => new { e.LatchTaskName, e.LatchMachineGuid, e.LatchKey })
                    .HasName("PK__attrep_t__65C99AC8D8027A2F");

                entity.ToTable("attrep_truncation_safeguard");

                entity.Property(e => e.LatchTaskName)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("latchTaskName");

                entity.Property(e => e.LatchMachineGuid)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("latchMachineGUID");

                entity.Property(e => e.LatchKey)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LatchLocker)
                    .HasColumnType("datetime")
                    .HasColumnName("latchLocker");
            });

            modelBuilder.Entity<AuditLog>(entity =>
            {
                entity.ToTable("AuditLog");

                entity.Property(e => e.AuditLogId).ValueGeneratedNever();

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.PrimaryKey).HasMaxLength(100);

                entity.Property(e => e.TableName).HasMaxLength(150);
            });

            modelBuilder.Entity<AuditType>(entity =>
            {
                entity.ToTable("AuditType");

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<AuditType1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AuditType", "EclipseSchema");

                entity.Property(e => e.AuditTypeId).ValueGeneratedOnAdd();

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<AuthSignature>(entity =>
            {
                entity.ToTable("AuthSignature");

                entity.HasIndex(e => new { e.PrincipalId, e.AuthSignatureName }, "indAuthSignature2")
                    .HasFillFactor(90);

                entity.Property(e => e.AuthSignatureId).HasColumnName("AuthSignatureID");

                entity.Property(e => e.AuthSignatureName)
                    .HasMaxLength(85)
                    .IsUnicode(false);

                entity.Property(e => e.AuthSignatureTypeCdId).HasColumnName("AuthSignatureTypeCdID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OtherTitle)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.PrincipalId).HasColumnName("PrincipalID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.AuthSignatureTypeCd)
                    .WithMany(p => p.AuthSignatures)
                    .HasForeignKey(d => d.AuthSignatureTypeCdId)
                    .HasConstraintName("conAuthSign4FK");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.AuthSignatures)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conAuthSign3Fk");

                entity.HasOne(d => d.Principal)
                    .WithMany(p => p.AuthSignatures)
                    .HasForeignKey(d => d.PrincipalId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conAuthSign2FK");
            });

            modelBuilder.Entity<AwsdmsTruncationSafeguard>(entity =>
            {
                entity.HasKey(e => new { e.LatchTaskName, e.LatchMachineGuid, e.LatchKey })
                    .HasName("PK__awsdms_t__65C99AC810E07633");

                entity.ToTable("awsdms_truncation_safeguard");

                entity.Property(e => e.LatchTaskName)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("latchTaskName");

                entity.Property(e => e.LatchMachineGuid)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("latchMachineGUID");

                entity.Property(e => e.LatchKey)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LatchLocker)
                    .HasColumnType("datetime")
                    .HasColumnName("latchLocker");
            });

            modelBuilder.Entity<BankAccount>(entity =>
            {
                entity.HasKey(e => e.BankAcctId)
                    .HasName("XPKBankAccount");

                entity.ToTable("BankAccount");

                entity.HasIndex(e => e.AccountNumHmac, "IX_BankAccount_AccountNumHMAC")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BusinessUnitId, "XIF369BankAccount")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BankId, "XIF370BankAccount")
                    .HasFillFactor(90);

                entity.Property(e => e.BankAcctId).HasColumnName("BankAcctID");

                entity.Property(e => e.AccountDescr)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNum2)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNumHmac)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("AccountNumHMAC");

                entity.Property(e => e.BankId).HasColumnName("BankID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.DeactivationDate).HasColumnType("datetime");

                entity.Property(e => e.FormattedAcctNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.ReactivationDate).HasColumnType("datetime");

                entity.Property(e => e.Signature1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Signature2)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SignatureText)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.SignatureText2)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.StatusChgComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StatusUpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.StatusUpdatedEmployeeId).HasColumnName("StatusUpdatedEmployeeID");

                entity.Property(e => e.TwoSignatureReqAmt).HasColumnType("money");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.HasOne(d => d.Bank)
                    .WithMany(p => p.BankAccounts)
                    .HasForeignKey(d => d.BankId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBankAccount1FK");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.BankAccounts)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBankAccount2FK");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.BankAccounts)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBankAccount3FK");
            });

            modelBuilder.Entity<BankAccountAuthentication>(entity =>
            {
                entity.ToTable("BankAccountAuthentication");

                entity.Property(e => e.BankAccountAuthenticationId).HasColumnName("BankAccountAuthenticationID");

                entity.Property(e => e.AccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNumHmac)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("AccountNumHMAC");

                entity.Property(e => e.Address)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.AgencyName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.BusinessName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FormattedAcctNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Payee)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RecommendedAction)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.RequestData)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.RequestDateTime).HasColumnType("datetime");

                entity.Property(e => e.ResponseData)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Resultcode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RoutingNumber)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.StatusCd).HasColumnName("StatusCD");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.ValidationMessage)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.HasOne(d => d.ResultcodeNavigation)
                    .WithMany(p => p.BankAccountAuthentications)
                    .HasPrincipalKey(p => p.Resultcode)
                    .HasForeignKey(d => d.Resultcode)
                    .HasConstraintName("FK_Resultcode_BankAccountAuthentication");
            });

            modelBuilder.Entity<BankBranch>(entity =>
            {
                entity.HasKey(e => e.BankId)
                    .HasName("XPKBankBranch");

                entity.ToTable("BankBranch");

                entity.HasIndex(e => new { e.BusinessUnitId, e.SmsbankCd }, "IX_BankBranch")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.BusinessUnitId, e.FastBankCd }, "XAK1BankBranch")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.AddrBookEntryId, "XIF365BankBranch")
                    .HasFillFactor(90);

                entity.Property(e => e.BankId).HasColumnName("BankID");

                entity.Property(e => e.AddrBookEntryId).HasColumnName("AddrBookEntryID");

                entity.Property(e => e.ApprovedDate).HasColumnType("datetime");

                entity.Property(e => e.BankBranchNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.CheckTemplateId)
                    .HasColumnName("CheckTemplateID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.FastBankCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PaperSizeTypeCdId).HasColumnName("PaperSizeTypeCdID");

                entity.Property(e => e.RoutingNum)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.SmsbankCd)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SMSBankCd");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.Property(e => e.WireInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.AddrBookEntry)
                    .WithMany(p => p.BankBranches)
                    .HasForeignKey(d => d.AddrBookEntryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBankBranch1FK");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.BankBranches)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBankBranch3FK");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.BankBranches)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBankBranch4FK");
            });

            modelBuilder.Entity<BatchDemandLoanInfo>(entity =>
            {
                entity.HasKey(e => e.FileProcessId)
                    .HasName("XPKBatchDemandLoanInfo");

                entity.ToTable("BatchDemandLoanInfo");

                entity.Property(e => e.FileProcessId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileProcessID");

                entity.Property(e => e.CorporateBusOrgId).HasColumnName("CorporateBusOrgID");

                entity.Property(e => e.LastReceivedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.CorporateBusOrg)
                    .WithMany(p => p.BatchDemandLoanInfos)
                    .HasForeignKey(d => d.CorporateBusOrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBatchDemandLoanInfo1FK");
            });

            modelBuilder.Entity<BatchDetailsBulkConversion>(entity =>
            {
                entity.HasKey(e => e.FileId)
                    .HasName("PK_FileID_BatchDetails_BulkConversion");

                entity.ToTable("BatchDetails_BulkConversion");

                entity.HasIndex(e => e.BatchId, "NC_BatchId_BatchDetails_BulkConversion");

                entity.Property(e => e.FileId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileID");

                entity.Property(e => e.IsUpdated).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.File)
                    .WithOne(p => p.BatchDetailsBulkConversion)
                    .HasForeignKey<BatchDetailsBulkConversion>(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FileID_BatchDetails_BulkConversion");
            });

            modelBuilder.Entity<BatchDetailsCloud>(entity =>
            {
                entity.HasKey(e => e.Fileid)
                    .HasName("PK__BatchDet__6F0C849777D9C84B");

                entity.ToTable("BatchDetails_Cloud");

                entity.Property(e => e.Fileid).ValueGeneratedNever();
            });

            modelBuilder.Entity<BigIntConvertedArchiveDb>(entity =>
            {
                entity.HasKey(e => new { e.Dbyear, e.Dbqtr });

                entity.ToTable("BigIntConvertedArchiveDB");

                entity.Property(e => e.Dbyear).HasColumnName("DBYear");

                entity.Property(e => e.Dbqtr).HasColumnName("DBQtr");

                entity.Property(e => e.DateConverted)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<BpfileBusOrgChangeHistory>(entity =>
            {
                entity.ToTable("BPFileBusOrgChangeHistory");

                entity.HasIndex(e => new { e.FileId, e.BusOrgId, e.BusinessProgramId }, "Ind_BPFileBusOrgChangeHistory_FileID_BusOrgID_BPID")
                    .HasFillFactor(90);

                entity.Property(e => e.BpfileBusOrgChangeHistoryId).HasColumnName("BPFileBusOrgChangeHistoryID");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.BusinessProgramId).HasColumnName("BusinessProgramID");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.EventTypeCdId).HasColumnName("EventTypeCdID");

                entity.Property(e => e.FileId).HasColumnName("FileID");
            });

            modelBuilder.Entity<BpfileContactChangeHistory>(entity =>
            {
                entity.ToTable("BPFileContactChangeHistory");

                entity.HasIndex(e => new { e.FileId, e.ContactId, e.BusinessProgramId }, "Ind_BPFileContactChangeHistory_FileID_ContactID_BPID")
                    .HasFillFactor(90);

                entity.Property(e => e.BpfileContactChangeHistoryId).HasColumnName("BPFileContactChangeHistoryID");

                entity.Property(e => e.BusinessProgramId).HasColumnName("BusinessProgramID");

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.EventTypeCdId).HasColumnName("EventTypeCdID");

                entity.Property(e => e.FileId).HasColumnName("FileID");
            });

            modelBuilder.Entity<BpfileOwningOfficeChangeHistory>(entity =>
            {
                entity.HasKey(e => e.BpfileOwngOfficeChangeHistoryId)
                    .HasName("PK_BPFileOwningOfficeChangeHistory_ID");

                entity.ToTable("BPFileOwningOfficeChangeHistory");

                entity.HasIndex(e => new { e.FileId, e.OwningOfficeId, e.BusinessProgramId }, "Ind_BPFileOwningOfficeChangeHistory_FileID_BUID_BPID")
                    .HasFillFactor(90);

                entity.Property(e => e.BpfileOwngOfficeChangeHistoryId).HasColumnName("BPFileOwngOfficeChangeHistoryID");

                entity.Property(e => e.BusinessProgramId).HasColumnName("BusinessProgramID");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.EventTypeCdId).HasColumnName("EventTypeCdID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.OwningOfficeId).HasColumnName("OwningOfficeID");
            });

            modelBuilder.Entity<BulletinBoard>(entity =>
            {
                entity.HasKey(e => e.FrameNumber);

                entity.ToTable("BulletinBoard");

                entity.Property(e => e.BulletinBoardDate).HasColumnType("datetime");

                entity.Property(e => e.ImageName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Message)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReleaseNotesDate).HasColumnType("datetime");

                entity.Property(e => e.ReleaseNotesUrl)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ReleaseNotesURL");
            });

            modelBuilder.Entity<BuproductionOfficeXref>(entity =>
            {
                entity.HasKey(e => new { e.BusinessUnitId, e.ServiceTypeCdId, e.ProductionOfficeId })
                    .HasName("CdxBUProductionOfficeXref");

                entity.ToTable("BUProductionOfficeXref");

                entity.Property(e => e.ServiceTypeCdId).HasColumnName("ServiceTypeCdID");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.BuproductionOfficeXrefBusinessUnits)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__BUProduct__Busin__1B1B1AD5");

                entity.HasOne(d => d.ProductionOffice)
                    .WithMany(p => p.BuproductionOfficeXrefProductionOffices)
                    .HasForeignKey(d => d.ProductionOfficeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__BUProduct__Produ__1D036347");

                entity.HasOne(d => d.ServiceTypeCd)
                    .WithMany(p => p.BuproductionOfficeXrefs)
                    .HasForeignKey(d => d.ServiceTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__BUProduct__Servi__5FB7FBE0");
            });

            modelBuilder.Entity<BusOrg>(entity =>
            {
                entity.ToTable("BusOrg");

                entity.HasIndex(e => e.EnterpriseId, "CLX_EnterpriseID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.EnterpriseNumber, "CLX_EnterpriseNumber")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.StatusCd, e.BusinessUnitId }, "DW_IDX_BusOrg_Composite")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.UpdTs, "DW_IXN01_BusOrg_UpdTS")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.BusinessUnitId, e.AddrBookEntryId, e.StatusCd, e.BusOrgId, e.ObjectCd, e.SuperBusOrgId }, "IDXAddrBookBU")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.AgentOfficeId, "IX_BusOrg_AgentOfficeId");

                entity.HasIndex(e => e.HazardInsLossPayeeTextId, "XIF431BusOrg")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TitleInsMortgageeClauseTextId, "XIF432BusOrg")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ObjectCd, e.BusinessUnitId }, "idxBusOrgidx")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.OriginalBusOrgId, e.NextVersionBusOrgId }, "idxNextVersionBusOrgID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ClassTypeId, "idx_busorg_classtypeid")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PrimaryContactId, "indBusOrg10Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.BusinessUnitId, e.OrgTypeCdId, e.ObjectCd, e.NextVersionBusOrgId }, "indBusOrg2")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PrimarySalesEmployeeId, "indBusOrg4Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.OrgTypeCdId, "indBusOrg5Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SuperBusOrgId, "indBusOrg7Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.AddrBookEntryId, "indBusOrg8Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BusinessUnitId, "indBusOrg9Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.AddrBookEntryId).HasColumnName("AddrBookEntryID");

                entity.Property(e => e.BillToBusOrgName1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BillToBusOrgName2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BillToPersonName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BusOrgCustomerOptionId).HasColumnName("BusOrgCustomerOptionID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.CorporateBusOrgId).HasColumnName("CorporateBusOrgID");

                entity.Property(e => e.CustomerPreference)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.EcdCertifiedFlag).HasColumnName("ECdCertifiedFlag");

                entity.Property(e => e.EnterpriseId).HasColumnName("EnterpriseID");

                entity.Property(e => e.EnterpriseNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EntryInstructions)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.FastStatCode)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.HazardInsLossPayeeTextId).HasColumnName("HazardInsLossPayeeTextID");

                entity.Property(e => e.NextVersionBusOrgId).HasColumnName("NextVersionBusOrgID");

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.OrgTypeCdId).HasColumnName("OrgTypeCdID");

                entity.Property(e => e.OriginalBusOrgId).HasColumnName("OriginalBusOrgID");

                entity.Property(e => e.PrimaryContactId).HasColumnName("PrimaryContactID");

                entity.Property(e => e.PrimarySalesEmployeeId).HasColumnName("PrimarySalesEmployeeID");

                entity.Property(e => e.ProposedInsuredTextId).HasColumnName("ProposedInsuredTextID");

                entity.Property(e => e.QcclosingClientFlag).HasColumnName("QCClosingClientFlag");

                entity.Property(e => e.ReferenceBusOrgId).HasColumnName("ReferenceBusOrgID");

                entity.Property(e => e.SuperBusOrgId).HasColumnName("SuperBusOrgID");

                entity.Property(e => e.TitleInsMortgageeClauseTextId).HasColumnName("TitleInsMortgageeClauseTextID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.AddrBookEntry)
                    .WithMany(p => p.BusOrgs)
                    .HasForeignKey(d => d.AddrBookEntryId)
                    .HasConstraintName("conBusOrg3Fk");

                entity.HasOne(d => d.AgentOffice)
                    .WithMany(p => p.BusOrgAgentOffices)
                    .HasForeignKey(d => d.AgentOfficeId)
                    .HasConstraintName("FK_BusOrg_AgentOfficeId");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.BusOrgBusinessUnits)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .HasConstraintName("conBusOrg8Fk");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.BusOrgClassTypes)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBusOrg5Fk");

                entity.HasOne(d => d.CorporateBusOrg)
                    .WithMany(p => p.BusOrgs)
                    .HasForeignKey(d => d.CorporateBusOrgId)
                    .HasConstraintName("conCorporateBusOrgFK");

                entity.HasOne(d => d.OrgTypeCd)
                    .WithMany(p => p.BusOrgOrgTypeCds)
                    .HasForeignKey(d => d.OrgTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBusOrg7Fk");

                entity.HasOne(d => d.PrimaryContact)
                    .WithMany(p => p.BusOrgs)
                    .HasForeignKey(d => d.PrimaryContactId)
                    .HasConstraintName("conBusOrg4Fk");

                entity.HasOne(d => d.PrimarySalesEmployee)
                    .WithMany(p => p.BusOrgs)
                    .HasForeignKey(d => d.PrimarySalesEmployeeId)
                    .HasConstraintName("conBusOrg6Fk");

                entity.HasOne(d => d.PrincipalType)
                    .WithMany(p => p.BusOrgPrincipalTypes)
                    .HasForeignKey(d => d.PrincipalTypeId)
                    .HasConstraintName("conBusOrg10FK");

                entity.HasOne(d => d.SuperBusOrg)
                    .WithMany(p => p.InverseSuperBusOrg)
                    .HasForeignKey(d => d.SuperBusOrgId)
                    .HasConstraintName("conBusOrg2R");

                entity.HasOne(d => d.TitleAgentTypeCd)
                    .WithMany(p => p.BusOrgTitleAgentTypeCds)
                    .HasForeignKey(d => d.TitleAgentTypeCdId)
                    .HasConstraintName("conBusOrg9FK");

                entity.HasOne(d => d.WireInst)
                    .WithMany(p => p.BusOrgs)
                    .HasForeignKey(d => d.WireInstId)
                    .HasConstraintName("BusOrg_Wireinstruction");

                entity.HasMany(d => d.BusinessPrograms)
                    .WithMany(p => p.BusOrgs)
                    .UsingEntity<Dictionary<string, object>>(
                        "BusinessProgramBusOrgXref",
                        l => l.HasOne<BusinessProgram>().WithMany().HasForeignKey("BusinessProgramId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_BusinessProgramBusOrgXref_BusinessProgram"),
                        r => r.HasOne<BusOrg>().WithMany().HasForeignKey("BusOrgId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_BusinessProgramBusOrgXref_BusOrg"),
                        j =>
                        {
                            j.HasKey("BusOrgId", "BusinessProgramId").HasName("Ind_BusinessProgramBusOrgXref_BusOrgID_BPID");

                            j.ToTable("BusinessProgramBusOrgXref");
                        });
            });

            modelBuilder.Entity<BusOrgAlternateName>(entity =>
            {
                entity.ToTable("BusOrgAlternateName");

                entity.HasIndex(e => e.EnterpriseId, "CLX_BAltNameEnterpriseID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BusorgId, "CLX_BOANBusOrgID")
                    .HasFillFactor(90);

                entity.Property(e => e.BusOrgAlternateNameId).HasColumnName("BusOrgAlternateNameID");

                entity.Property(e => e.BusorgId).HasColumnName("BusorgID");

                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");

                entity.Property(e => e.Descr)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.EnterpriseId).HasColumnName("EnterpriseID");

                entity.Property(e => e.NameTypecdId).HasColumnName("NameTypecdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdateDatetime).HasColumnType("datetime");

                entity.HasOne(d => d.Busorg)
                    .WithMany(p => p.BusOrgAlternateNames)
                    .HasForeignKey(d => d.BusorgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBusorgIDFK");

                entity.HasOne(d => d.NameTypecd)
                    .WithMany(p => p.BusOrgAlternateNames)
                    .HasForeignKey(d => d.NameTypecdId)
                    .HasConstraintName("conNameTypecdIDFK");
            });

            modelBuilder.Entity<BusOrgAndContactElectronicAddrXref>(entity =>
            {
                entity.HasKey(e => e.ElectronicAddrXrefId)
                    .HasName("PK_BusOrgAndContactElectronicAddrXRefElectronicAddrXRefID");

                entity.ToTable("BusOrgAndContactElectronicAddrXRef");

                entity.HasIndex(e => e.OriginalElectronicAddrId, "IdxBusOrgAndContactElectronicAddrXRefOriginalElectronicAddrID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ElectronicAddrId, e.OriginalElectronicAddrId }, "IdxBusOrgAndContactElectronicAddrXRef_ElectronicAddrIDOriginalElectronicAddrID")
                    .HasFillFactor(90);

                entity.Property(e => e.ElectronicAddrXrefId).HasColumnName("ElectronicAddrXRefID");

                entity.Property(e => e.ElectronicAddrId).HasColumnName("ElectronicAddrID");

                entity.Property(e => e.OriginalElectronicAddrId).HasColumnName("OriginalElectronicAddrID");

                entity.HasOne(d => d.ElectronicAddr)
                    .WithMany(p => p.BusOrgAndContactElectronicAddrXrefElectronicAddrs)
                    .HasForeignKey(d => d.ElectronicAddrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusOrgAndContactElectronicAddrXRefElectronicAddrID");

                entity.HasOne(d => d.OriginalElectronicAddr)
                    .WithMany(p => p.BusOrgAndContactElectronicAddrXrefOriginalElectronicAddrs)
                    .HasForeignKey(d => d.OriginalElectronicAddrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusOrgAndContactElectronicAddrXRefOriginalElectronicAddrID");
            });

            modelBuilder.Entity<BusOrgAndContactPhysicalAddrXref>(entity =>
            {
                entity.HasKey(e => e.PhysicalAddrXrefId)
                    .HasName("PK_BusOrgAndContactPhysicalAddrXRefPhysicalAddrXRefID");

                entity.ToTable("BusOrgAndContactPhysicalAddrXRef");

                entity.HasIndex(e => e.OriginalPhysicalAddrId, "IdxBusOrgAndContactPhysicalAddrXRefOriginalPhysicalAddrID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.PhysicalAddrId, e.OriginalPhysicalAddrId }, "IdxBusOrgAndContactPhysicalAddrXRef_PhysicalAddrIdOriginalPhysicalAddrID")
                    .HasFillFactor(90);

                entity.Property(e => e.PhysicalAddrXrefId).HasColumnName("PhysicalAddrXRefID");

                entity.Property(e => e.OriginalPhysicalAddrId).HasColumnName("OriginalPhysicalAddrID");

                entity.Property(e => e.PhysicalAddrId).HasColumnName("PhysicalAddrID");

                entity.HasOne(d => d.OriginalPhysicalAddr)
                    .WithMany(p => p.BusOrgAndContactPhysicalAddrXrefOriginalPhysicalAddrs)
                    .HasForeignKey(d => d.OriginalPhysicalAddrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusOrgAndContactPhysicalAddrXRefOriginalPhysicalAddrID");

                entity.HasOne(d => d.PhysicalAddr)
                    .WithMany(p => p.BusOrgAndContactPhysicalAddrXrefPhysicalAddrs)
                    .HasForeignKey(d => d.PhysicalAddrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusOrgAndContactPhysicalAddrXRefPhysicalAddrID");
            });

            modelBuilder.Entity<BusOrgContact>(entity =>
            {
                entity.HasKey(e => e.ContactId)
                    .HasName("conBusOrgContact1Pk");

                entity.ToTable("BusOrgContact");

                entity.HasIndex(e => e.EnterpriseId, "CLX_ContactEnterpriseID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.EnterpriseNumber, "CLX_ContactEnterpriseNumber")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.BusOrgId, e.AddrBookEntryId, e.StatusCd }, "idxBusOrgContact_BusOrgID_AddrBookEntryID_StatusCd")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.BusOrgId, e.AddrBookEntryId }, "indBusOrgContact2")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.AddrBookEntryId, "indBusOrgContact3Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PrimarySalesEmployeeId, "indBusOrgContact6Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.OriginalContactId, "ixn_BusOrgContact_OriginalContactID")
                    .HasFillFactor(90);

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.AddrBookEntryId).HasColumnName("AddrBookEntryID");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.CustomerPreference)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.DelegateName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.EnterpriseId).HasColumnName("EnterpriseID");

                entity.Property(e => e.EnterpriseNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LoginName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoginPassword)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OriginalContactId).HasColumnName("OriginalContactID");

                entity.Property(e => e.PrimarySalesEmployeeId).HasColumnName("PrimarySalesEmployeeID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.AddrBookEntry)
                    .WithMany(p => p.BusOrgContacts)
                    .HasForeignKey(d => d.AddrBookEntryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBusOrgContact3FK");

                entity.HasOne(d => d.BusOrg)
                    .WithMany(p => p.BusOrgContacts)
                    .HasForeignKey(d => d.BusOrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBusOrgContact2FK");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.BusOrgContacts)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBusOrgContact5Fk");

                entity.HasOne(d => d.PrimarySalesEmployee)
                    .WithMany(p => p.BusOrgContacts)
                    .HasForeignKey(d => d.PrimarySalesEmployeeId)
                    .HasConstraintName("conBusOrgContact4FK");

                entity.HasMany(d => d.BusinessPrograms)
                    .WithMany(p => p.Contacts)
                    .UsingEntity<Dictionary<string, object>>(
                        "BusinessProgramContactXref",
                        l => l.HasOne<BusinessProgram>().WithMany().HasForeignKey("BusinessProgramId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_BusinessProgramContactXref_BusinessProgram"),
                        r => r.HasOne<BusOrgContact>().WithMany().HasForeignKey("ContactId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_BusinessProgramContactXref_BusOrgContact"),
                        j =>
                        {
                            j.HasKey("ContactId", "BusinessProgramId").HasName("Unq_BusinessProgramContactXref_ContactID_BPID");

                            j.ToTable("BusinessProgramContactXref");
                        });
            });

            modelBuilder.Entity<BusOrgContactNotificationPref>(entity =>
            {
                entity.HasKey(e => e.BusOrgContactPrefId)
                    .HasName("conBusOrgContactNotificationPrefPk");

                entity.ToTable("BusOrgContactNotificationPref");

                entity.HasIndex(e => e.ContactId, "ixnBusOrgContactNotificationPrefContactID")
                    .HasFillFactor(90);

                entity.Property(e => e.BusOrgContactPrefId).HasColumnName("BusOrgContactPrefID");

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.ElectronicAddrId).HasColumnName("ElectronicAddrID");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.BusOrgContactNotificationPrefs)
                    .HasForeignKey(d => d.ContactId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBusOrgContactNotificationFK");

                entity.HasOne(d => d.ElectronicAddr)
                    .WithMany(p => p.BusOrgContactNotificationPrefs)
                    .HasForeignKey(d => d.ElectronicAddrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conNotification_ElecAddr2FK");
            });

            modelBuilder.Entity<BusOrgContactRelationship>(entity =>
            {
                entity.ToTable("BusOrgContactRelationship");

                entity.HasIndex(e => e.ParentContactId, "ixn_BusOrgContactRelationship_1")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ContactId, "ixn_BusOrgContactRelationship_2")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BusOrgId, "ixn_BusOrgContactRelationship_3")
                    .HasFillFactor(90);

                entity.Property(e => e.BusOrgContactRelationshipId).HasColumnName("BusOrgContactRelationshipID");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.Property(e => e.DeactivationDate).HasColumnType("datetime");

                entity.Property(e => e.DeactivationUserId).HasColumnName("DeactivationUserID");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.LastActivationDate).HasColumnType("datetime");

                entity.Property(e => e.LastActivationUserId).HasColumnName("LastActivationUserID");

                entity.Property(e => e.ParentContactId).HasColumnName("ParentContactID");

                entity.Property(e => e.PersonId).HasColumnName("PersonID");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StatusChgComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.BusOrg)
                    .WithMany(p => p.BusOrgContactRelationships)
                    .HasForeignKey(d => d.BusOrgId)
                    .HasConstraintName("conBusOrgContactRelationship_FK_2");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.BusOrgContactRelationshipContacts)
                    .HasForeignKey(d => d.ContactId)
                    .HasConstraintName("conBusOrgContactRelationship_FK_3");

                entity.HasOne(d => d.ParentContact)
                    .WithMany(p => p.BusOrgContactRelationshipParentContacts)
                    .HasForeignKey(d => d.ParentContactId)
                    .HasConstraintName("conBusOrgContactRelationship_FK_1");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.BusOrgContactRelationships)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("conBusOrgContactRelationship_FK_4");
            });

            modelBuilder.Entity<BusOrgContactRelationshipChangeHistory>(entity =>
            {
                entity.ToTable("BusOrgContactRelationshipChangeHistory");

                entity.Property(e => e.BusOrgContactRelationshipChangeHistoryId).HasColumnName("BusOrgContactRelationshipChangeHistoryID");

                entity.Property(e => e.BusOrgContactRelationshipId).HasColumnName("BusOrgContactRelationshipID");

                entity.Property(e => e.ChangeDate).HasColumnType("datetime");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.StatusId).HasColumnName("StatusID");

                entity.HasOne(d => d.BusOrgContactRelationship)
                    .WithMany(p => p.BusOrgContactRelationshipChangeHistories)
                    .HasForeignKey(d => d.BusOrgContactRelationshipId)
                    .HasConstraintName("conBusOrgContactRelationshipID_FK_1");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.BusOrgContactRelationshipChangeHistories)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("conBusOrgContactEmployeeID_FK_2");
            });

            modelBuilder.Entity<BusOrgContactRoleRelationshipXref>(entity =>
            {
                entity.HasKey(e => new { e.BusOrgContactRelationshipId, e.RoleTypeCdId })
                    .HasName("BusOrgContactRoleRelationshipXref1Pk");

                entity.ToTable("BusOrgContactRoleRelationshipXref");

                entity.Property(e => e.BusOrgContactRelationshipId).HasColumnName("BusOrgContactRelationshipID");

                entity.Property(e => e.RoleTypeCdId).HasColumnName("RoleTypeCdID");

                entity.HasOne(d => d.BusOrgContactRelationship)
                    .WithMany(p => p.BusOrgContactRoleRelationshipXrefs)
                    .HasForeignKey(d => d.BusOrgContactRelationshipId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBusOrgContactRoleRelationshipXref_FK_1");

                entity.HasOne(d => d.RoleTypeCd)
                    .WithMany(p => p.BusOrgContactRoleRelationshipXrefs)
                    .HasForeignKey(d => d.RoleTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBusOrgContactRoleRelationshipXref_FK_2");
            });

            modelBuilder.Entity<BusOrgContactRoleXref>(entity =>
            {
                entity.ToTable("BusOrgContactRoleXref");

                entity.HasIndex(e => e.ContactId, "ixn_BusOrgContactRoleXref_ContactID")
                    .HasFillFactor(90);

                entity.Property(e => e.BusOrgContactRoleXrefId).HasColumnName("BusOrgContactRoleXrefID");

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.RoleTypeCdId).HasColumnName("RoleTypeCdID");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.BusOrgContactRoleXrefs)
                    .HasForeignKey(d => d.ContactId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_BusOrgContactRoleXref_FK_1");

                entity.HasOne(d => d.RoleTypeCd)
                    .WithMany(p => p.BusOrgContactRoleXrefs)
                    .HasForeignKey(d => d.RoleTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_BusOrgContactRoleXref_FK_2");
            });

            modelBuilder.Entity<BusOrgContactWebCustomerXref>(entity =>
            {
                entity.HasKey(e => new { e.BusOrgContactId, e.WebCustomerTypeCdId });

                entity.ToTable("BusOrgContactWebCustomerXref");

                entity.Property(e => e.BusOrgContactId).HasColumnName("BusOrgContactID");

                entity.Property(e => e.WebCustomerTypeCdId).HasColumnName("WebCustomerTypeCdID");

                entity.Property(e => e.NotificationDeliveryTypeCdId).HasColumnName("NotificationDeliveryTypeCdID");

                entity.HasOne(d => d.BusOrgContact)
                    .WithMany(p => p.BusOrgContactWebCustomerXrefs)
                    .HasForeignKey(d => d.BusOrgContactId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusOrgContactWebCustomerXref_BusOrgContact");

                entity.HasOne(d => d.WebCustomerTypeCd)
                    .WithMany(p => p.BusOrgContactWebCustomerXrefs)
                    .HasForeignKey(d => d.WebCustomerTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusOrgContactWebCustomerXref_TypeCdDmt");
            });

            modelBuilder.Entity<BusOrgCustomerOption>(entity =>
            {
                entity.ToTable("BusOrgCustomerOption");

                entity.Property(e => e.BusOrgCustomerOptionId).HasColumnName("BusOrgCustomerOptionID");

                entity.Property(e => e.ClientWebCdId).HasColumnName("ClientWebCdID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.Property(e => e.FassnotaryIntegrate).HasColumnName("FASSNotaryIntegrate");

                entity.Property(e => e.PackageName)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BusOrgDocumentCopiesXref>(entity =>
            {
                entity.ToTable("BusOrgDocumentCopiesXref");

                entity.HasIndex(e => e.BusOrgId, "Ind_BusOrgDocumentCopiesXref_BOID_DocTypeCdID")
                    .HasFillFactor(90);

                entity.Property(e => e.BusOrgDocumentCopiesXrefId).HasColumnName("BusOrgDocumentCopiesXrefID");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.DocTypeCdId).HasColumnName("DocTypeCdID");

                entity.Property(e => e.PersonId).HasColumnName("PersonID");

                entity.HasOne(d => d.DocTypeCd)
                    .WithMany(p => p.BusOrgDocumentCopiesXrefs)
                    .HasForeignKey(d => d.DocTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusOrgDocumentCopiesXref_TypeCdID");
            });

            modelBuilder.Entity<BusOrgEsubscriptionXref>(entity =>
            {
                entity.ToTable("BusOrgESubscriptionXref");

                entity.HasIndex(e => e.BusOrgId, "idxBusOrgID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SubscriptionTypeId, "ixc_BusOrgESubscriptionXrefSubscriptionTypeID")
                    .HasFillFactor(90);

                entity.Property(e => e.BusOrgEsubscriptionXrefId).HasColumnName("BusOrgESubscriptionXref_ID");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.SubscriptionTypeId).HasColumnName("SubscriptionTypeID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.BusOrg)
                    .WithMany(p => p.BusOrgEsubscriptionXrefs)
                    .HasForeignKey(d => d.BusOrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBusOrgESub2BusOrgFK");
            });

            modelBuilder.Entity<BusOrgGlobalSearch>(entity =>
            {
                entity.HasKey(e => e.BusOrgId)
                    .HasName("conBusOrgGlobalSearch1Pk");

                entity.ToTable("BusOrgGlobalSearch");

                entity.HasIndex(e => new { e.BusinessUnitId, e.AddrBookEntryId, e.StatusCd, e.BusOrgId, e.ObjectCd, e.SuperBusOrgId }, "IDXAddrBookBUBusOrgGlobalSearch")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.BusOrgId, e.QcclosingClientFlag }, "IDX_BusOrgGlobalSearch_BusOrgID_QCClosingClientFlag")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.EnterpriseId, "Idx_EnterpriseID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.EnterpriseNumber, "Idx_EnterpriseNumber")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.BusinessUnitId, e.NextVersionBusOrgId, e.BusOrgId, e.AddrBookEntryId, e.StatusCd }, "idxBusOrgGlobalSearch_BusinessUnitID_NextVersionBusOrgID_BusOrgID_AddrBookEntryID_StatusCd")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ObjectCd, e.BusinessUnitId }, "idxBusOrgGlobalSearchidx")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.OriginalBusOrgId, e.NextVersionBusOrgId }, "idxNextVersionBusOrgID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.OrgTypeCdId, "indBusOrgGlobalSearch5Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SuperBusOrgId, "indBusOrgGlobalSearch7Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.AddrBookEntryId, "indBusOrgGlobalSearch8Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BusinessUnitId, "indBusOrgGlobalSearch9Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.BusOrgId)
                    .ValueGeneratedNever()
                    .HasColumnName("BusOrgID");

                entity.Property(e => e.AddrBookEntryId).HasColumnName("AddrBookEntryID");

                entity.Property(e => e.BillToBusOrgName1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BillToBusOrgName2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BillToPersonName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.CorporateBusOrgId).HasColumnName("CorporateBusOrgID");

                entity.Property(e => e.EcdCertifiedFlag).HasColumnName("ECdCertifiedFlag");

                entity.Property(e => e.EnterpriseId).HasColumnName("EnterpriseID");

                entity.Property(e => e.EnterpriseNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FastStatCode)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.HazardInsLossPayeeTextId).HasColumnName("HazardInsLossPayeeTextID");

                entity.Property(e => e.NextVersionBusOrgId).HasColumnName("NextVersionBusOrgID");

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.OrgTypeCdId).HasColumnName("OrgTypeCdID");

                entity.Property(e => e.OriginalBusOrgId).HasColumnName("OriginalBusOrgID");

                entity.Property(e => e.PrimaryContactId).HasColumnName("PrimaryContactID");

                entity.Property(e => e.PrimarySalesEmployeeId).HasColumnName("PrimarySalesEmployeeID");

                entity.Property(e => e.ProposedInsuredTextId).HasColumnName("ProposedInsuredTextID");

                entity.Property(e => e.QcclosingClientFlag).HasColumnName("QCClosingClientFlag");

                entity.Property(e => e.SuperBusOrgId).HasColumnName("SuperBusOrgID");

                entity.Property(e => e.TitleInsMortgageeClauseTextId).HasColumnName("TitleInsMortgageeClauseTextID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<BusOrgLicenseDetailsXref>(entity =>
            {
                entity.ToTable("BusOrgLicenseDetailsXref");

                entity.HasIndex(e => e.BusOrgId, "idx_BusorgID")
                    .HasFillFactor(90);

                entity.Property(e => e.BusOrgLicenseDetailsXrefId).HasColumnName("BusOrgLicenseDetailsXRefID");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.LicenseNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LicenseTypeCdid).HasColumnName("LicenseTypeCDID");

                entity.HasOne(d => d.BusOrg)
                    .WithMany(p => p.BusOrgLicenseDetailsXrefs)
                    .HasForeignKey(d => d.BusOrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBusOrgLicenseDetailsFK");

                entity.HasOne(d => d.LicenseTypeCd)
                    .WithMany(p => p.BusOrgLicenseDetailsXrefs)
                    .HasForeignKey(d => d.LicenseTypeCdid)
                    .HasConstraintName("FK_BusOrgLicenseDetailsXref_TypeCdID");
            });

            modelBuilder.Entity<BusOrgMortgageProduct>(entity =>
            {
                entity.ToTable("BusOrgMortgageProduct");

                entity.Property(e => e.BusOrgMortgageProductId).HasColumnName("BusOrgMortgageProductID");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.LoanTypeCdId).HasColumnName("LoanTypeCdID");

                entity.Property(e => e.MortgageProductTypeCdId).HasColumnName("MortgageProductTypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.BusOrg)
                    .WithMany(p => p.BusOrgMortgageProducts)
                    .HasForeignKey(d => d.BusOrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBusOrgMortgageProduct1FK");

                entity.HasOne(d => d.LoanTypeCd)
                    .WithMany(p => p.BusOrgMortgageProductLoanTypeCds)
                    .HasForeignKey(d => d.LoanTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBusOrgMortgageProduct3FK");

                entity.HasOne(d => d.MortgageProductTypeCd)
                    .WithMany(p => p.BusOrgMortgageProductMortgageProductTypeCds)
                    .HasForeignKey(d => d.MortgageProductTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBusOrgMortgageProduct2FK");
            });

            modelBuilder.Entity<BusOrgNotificationPref>(entity =>
            {
                entity.HasKey(e => e.BusOrgPrefId)
                    .HasName("conBusOrgNotificationPrefPk");

                entity.ToTable("BusOrgNotificationPref");

                entity.HasIndex(e => e.BusOrgId, "ixnBusOrgNotificationPrefBusOrgID")
                    .HasFillFactor(90);

                entity.Property(e => e.BusOrgPrefId).HasColumnName("BusOrgPrefID");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.ElectronicAddrId).HasColumnName("ElectronicAddrID");

                entity.HasOne(d => d.BusOrg)
                    .WithMany(p => p.BusOrgNotificationPrefs)
                    .HasForeignKey(d => d.BusOrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBusOrgNotificationFK");

                entity.HasOne(d => d.ElectronicAddr)
                    .WithMany(p => p.BusOrgNotificationPrefs)
                    .HasForeignKey(d => d.ElectronicAddrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conNotificationElecAddr1FK");
            });

            modelBuilder.Entity<BusOrgRefBusOrgXref>(entity =>
            {
                entity.ToTable("BusOrgRefBusOrgXref");

                entity.HasIndex(e => e.OriginalBusOrgId, "IdxBusOrgRefBusOrgXrefOriginalBusOrgID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ReferenceBusOrgId, "IdxBusOrgRefBusOrgXrefReferenceBusOrgID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.OriginalBusOrgId, e.ReferenceBusOrgId }, "IdxUQBusOrgRefBusOrgXrefOriginalBusOrgID")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.BusOrgRefBusOrgXrefId).HasColumnName("BusOrgRefBusOrgXrefID");

                entity.Property(e => e.OriginalBusOrgId).HasColumnName("OriginalBusOrgID");

                entity.Property(e => e.ReferenceBusOrgId).HasColumnName("ReferenceBusOrgID");

                entity.HasOne(d => d.OriginalBusOrg)
                    .WithMany(p => p.BusOrgRefBusOrgXrefOriginalBusOrgs)
                    .HasForeignKey(d => d.OriginalBusOrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusOrgRefBusOrgXrefOriginalBusOrgID");

                entity.HasOne(d => d.ReferenceBusOrg)
                    .WithMany(p => p.BusOrgRefBusOrgXrefReferenceBusOrgs)
                    .HasForeignKey(d => d.ReferenceBusOrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusOrgRefBusOrgXrefReferenceBusOrgID");
            });

            modelBuilder.Entity<BusOrgRelationship>(entity =>
            {
                entity.ToTable("BusOrgRelationship");

                entity.HasIndex(e => e.ParentBusOrgId, "ixn_BusOrgRelationship_1")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ContactId, "ixn_BusOrgRelationship_2")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BusOrgId, "ixn_BusOrgRelationship_3")
                    .HasFillFactor(90);

                entity.Property(e => e.BusOrgRelationshipId).HasColumnName("BusOrgRelationshipID");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.Property(e => e.DeactivationDate).HasColumnType("datetime");

                entity.Property(e => e.DeactivationUserId).HasColumnName("DeactivationUserID");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.LastActivationDate).HasColumnType("datetime");

                entity.Property(e => e.LastActivationUserId).HasColumnName("LastActivationUserID");

                entity.Property(e => e.ParentBusOrgId).HasColumnName("ParentBusOrgID");

                entity.Property(e => e.PersonId).HasColumnName("PersonID");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StatusChgComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.BusOrg)
                    .WithMany(p => p.BusOrgRelationshipBusOrgs)
                    .HasForeignKey(d => d.BusOrgId)
                    .HasConstraintName("conBusOrgRelationship_FK_2");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.BusOrgRelationships)
                    .HasForeignKey(d => d.ContactId)
                    .HasConstraintName("conBusOrgRelationship_FK_3");

                entity.HasOne(d => d.ParentBusOrg)
                    .WithMany(p => p.BusOrgRelationshipParentBusOrgs)
                    .HasForeignKey(d => d.ParentBusOrgId)
                    .HasConstraintName("conBusOrgRelationship_FK_1");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.BusOrgRelationships)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("conBusOrgRelationship_FK_4");
            });

            modelBuilder.Entity<BusOrgRelationshipChangeHistory>(entity =>
            {
                entity.ToTable("BusOrgRelationshipChangeHistory");

                entity.Property(e => e.BusOrgRelationshipChangeHistoryId).HasColumnName("BusOrgRelationshipChangeHistoryID");

                entity.Property(e => e.BusOrgRelationshipId).HasColumnName("BusOrgRelationshipID");

                entity.Property(e => e.ChangeDate).HasColumnType("datetime");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.StatusId).HasColumnName("StatusID");

                entity.HasOne(d => d.BusOrgRelationship)
                    .WithMany(p => p.BusOrgRelationshipChangeHistories)
                    .HasForeignKey(d => d.BusOrgRelationshipId)
                    .HasConstraintName("conBusOrgRelationshipID_FK_1");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.BusOrgRelationshipChangeHistories)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("conBusOrgEmployeeID_FK_2");
            });

            modelBuilder.Entity<BusOrgRoleRelationshipXref>(entity =>
            {
                entity.HasKey(e => new { e.BusOrgRelationshipId, e.RoleTypeCdId })
                    .HasName("BusOrgRoleRelationshipXref1Pk");

                entity.ToTable("BusOrgRoleRelationshipXref");

                entity.Property(e => e.BusOrgRelationshipId).HasColumnName("BusOrgRelationshipID");

                entity.Property(e => e.RoleTypeCdId).HasColumnName("RoleTypeCdID");

                entity.HasOne(d => d.BusOrgRelationship)
                    .WithMany(p => p.BusOrgRoleRelationshipXrefs)
                    .HasForeignKey(d => d.BusOrgRelationshipId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBusOrgRoleRelationshipXref_FK_1");

                entity.HasOne(d => d.RoleTypeCd)
                    .WithMany(p => p.BusOrgRoleRelationshipXrefs)
                    .HasForeignKey(d => d.RoleTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBusOrgRoleRelationshipXref_FK_2");
            });

            modelBuilder.Entity<BusOrgSalesForceXref>(entity =>
            {
                entity.ToTable("BusOrgSalesForceXref");

                entity.HasIndex(e => e.AccountId, "IX_BusOrgSalesForceXref_AccountID")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BusOrgId, "IX_BusOrgSalesForceXref_BusOrgID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ContactId, "IX_BusOrgSalesForceXref_ContactID")
                    .HasFillFactor(90);

                entity.Property(e => e.BusOrgSalesForceXrefId).HasColumnName("BusOrgSalesForceXrefID");

                entity.Property(e => e.AccountId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountID");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.BusOrg)
                    .WithMany(p => p.BusOrgSalesForceXrefs)
                    .HasForeignKey(d => d.BusOrgId)
                    .HasConstraintName("FK_BusOrgSalesForceXref_BusOrgID_BusOrg");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.BusOrgSalesForceXrefs)
                    .HasForeignKey(d => d.ContactId);
            });

            modelBuilder.Entity<BusOrgSecurityAgreement>(entity =>
            {
                entity.HasKey(e => e.AgreementId);

                entity.ToTable("BusOrgSecurityAgreement");

                entity.HasIndex(e => e.BusOrgId, "indBusOrgSecurityAgreement1FK")
                    .HasFillFactor(90);

                entity.Property(e => e.AgreementId).HasColumnName("AgreementID");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DeactivationDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ReactivationDate).HasColumnType("datetime");

                entity.Property(e => e.StatusChgComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.BusOrg)
                    .WithMany(p => p.BusOrgSecurityAgreements)
                    .HasForeignKey(d => d.BusOrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBusOrgSecurityAgreement1FK");
            });

            modelBuilder.Entity<BusOrgVersionLog>(entity =>
            {
                entity.ToTable("BusOrgVersionLog");

                entity.HasIndex(e => new { e.ClassTypeId, e.OldVersionId }, "idxClassTypeIDOldVersionID")
                    .HasFillFactor(90);

                entity.Property(e => e.BusOrgVersionLogId).HasColumnName("BusOrgVersionLogID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.NewVersionId).HasColumnName("NewVersionID");

                entity.Property(e => e.OldVersionId).HasColumnName("OldVersionID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<BusOrgWebCustomerXref>(entity =>
            {
                entity.HasKey(e => new { e.BusOrgId, e.WebCustomerTypeCdId });

                entity.ToTable("BusOrgWebCustomerXref");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.WebCustomerTypeCdId).HasColumnName("WebCustomerTypeCdID");

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.NotificationDeliveryTypeCdId).HasColumnName("NotificationDeliveryTypeCdID");

                entity.HasOne(d => d.BusOrg)
                    .WithMany(p => p.BusOrgWebCustomerXrefs)
                    .HasForeignKey(d => d.BusOrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusOrgWebCustomerXref_BusOrg");

                entity.HasOne(d => d.WebCustomerTypeCd)
                    .WithMany(p => p.BusOrgWebCustomerXrefs)
                    .HasForeignKey(d => d.WebCustomerTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusOrgWebCustomerXref_TypeCdDmt");
            });

            modelBuilder.Entity<BusOrgWireInstruction>(entity =>
            {
                entity.HasKey(e => e.WireInstId)
                    .HasName("PK__BusOrgWireInstru__2D99BDC3");

                entity.ToTable("BusOrgWireInstruction");

                entity.Property(e => e.Abanum)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ABANum");

                entity.Property(e => e.AcctNum)
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.BankAddr)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BankName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BranchTransitNum)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.DataGovernedByUserId).HasColumnName("DataGovernedByUserID");

                entity.Property(e => e.DataGovernedOn).HasColumnType("datetime");

                entity.Property(e => e.Ficode)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("FICode");

                entity.Property(e => e.TechExcelNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<BusUnitAcctSystemXref>(entity =>
            {
                entity.HasKey(e => e.BusinessUnitId)
                    .HasName("indBusUnitAcctSystemXref1");

                entity.ToTable("BusUnitAcctSystemXref");

                entity.Property(e => e.BusinessUnitId)
                    .ValueGeneratedNever()
                    .HasColumnName("BusinessUnitID");

                entity.Property(e => e.AcctSystemId).HasColumnName("AcctSystemID");

                entity.HasOne(d => d.AcctSystem)
                    .WithMany(p => p.BusUnitAcctSystemXrefs)
                    .HasForeignKey(d => d.AcctSystemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBusUnitAcctSystemXref2FK");

                entity.HasOne(d => d.BusinessUnit)
                    .WithOne(p => p.BusUnitAcctSystemXref)
                    .HasForeignKey<BusUnitAcctSystemXref>(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBusUnitAcctSystemXref1FK");
            });

            modelBuilder.Entity<BusUnitAutoNumber>(entity =>
            {
                entity.HasKey(e => e.BusUnitAutoNumId)
                    .HasName("conBusUnitAutoNum2Pk");

                entity.ToTable("BusUnitAutoNumber");

                entity.HasIndex(e => new { e.BusinessUnitId, e.TypeCdId, e.RefNumber }, "indBusUnitAutoNum2")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.BusUnitAutoNumId).HasColumnName("BusUnitAutoNumID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.NextNumber).HasColumnType("numeric(19, 0)");

                entity.Property(e => e.Prefix)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RefNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RevAcctNextNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.RevAcctStartNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Separator1)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Separator2)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.StartNumber).HasColumnType("numeric(19, 0)");

                entity.Property(e => e.Suffix)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TypeCdId).HasColumnName("TypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.BusUnitAutoNumbers)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBusUnitAutoNum3Fk");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.BusUnitAutoNumbers)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conOfficeAutoNum3Fk");

                entity.HasOne(d => d.TypeCd)
                    .WithMany(p => p.BusUnitAutoNumbers)
                    .HasForeignKey(d => d.TypeCdId)
                    .HasConstraintName("conBusUnitAutoNumber25FK");
            });

            modelBuilder.Entity<BusUnitStampImage>(entity =>
            {
                entity.HasKey(e => e.BusUnitOfficeStampId)
                    .HasName("PK_BusUnitStampImage_BusUnitOfficeStampID");

                entity.ToTable("BusUnitStampImage");

                entity.Property(e => e.BusUnitOfficeStampId).HasColumnName("BusUnitOfficeStampID");

                entity.Property(e => e.BusUnitId).HasColumnName("BusUnitID");

                entity.Property(e => e.OfficeImageName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.BusUnit)
                    .WithMany(p => p.BusUnitStampImages)
                    .HasForeignKey(d => d.BusUnitId)
                    .HasConstraintName("FK_BusUnitStampImage_BusUnitID");
            });

            modelBuilder.Entity<BusinessProgram>(entity =>
            {
                entity.ToTable("BusinessProgram");

                entity.HasIndex(e => e.Name, "Unq_BusinessProgram_Name")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<BusinessProgramBusOrgChangeHistory>(entity =>
            {
                entity.HasKey(e => e.BphistoryId);

                entity.ToTable("BusinessProgramBusOrgChangeHistory");

                entity.Property(e => e.BphistoryId).HasColumnName("BPHistoryID");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Notes)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.HasOne(d => d.BusOrg)
                    .WithMany(p => p.BusinessProgramBusOrgChangeHistories)
                    .HasForeignKey(d => d.BusOrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusinessProgramBusOrgChangeHistory_BusOrg");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.BusinessProgramBusOrgChangeHistories)
                    .HasForeignKey(d => d.CreatedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusinessProgramBusOrgChangeHistory_Employee");

                entity.HasOne(d => d.EventTypeCd)
                    .WithMany(p => p.BusinessProgramBusOrgChangeHistories)
                    .HasForeignKey(d => d.EventTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusinessProgramBusOrgChangeHistory_TypeCdDmt");
            });

            modelBuilder.Entity<BusinessProgramBusOrgContactChangeHistory>(entity =>
            {
                entity.HasKey(e => e.BphistoryId);

                entity.ToTable("BusinessProgramBusOrgContactChangeHistory");

                entity.Property(e => e.BphistoryId).HasColumnName("BPHistoryID");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Notes)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.BusinessProgramBusOrgContactChangeHistories)
                    .HasForeignKey(d => d.ContactId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusinessProgramBusOrgContactChangeHistory_BusOrgContact");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.BusinessProgramBusOrgContactChangeHistories)
                    .HasForeignKey(d => d.CreatedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusinessProgramBusOrgContactChangeHistory_Employee");

                entity.HasOne(d => d.EventTypeCd)
                    .WithMany(p => p.BusinessProgramBusOrgContactChangeHistories)
                    .HasForeignKey(d => d.EventTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusinessProgramBusOrgContactChangeHistory_TypeCdDmt");
            });

            modelBuilder.Entity<BusinessProgramBusUnitChangeHistory>(entity =>
            {
                entity.HasKey(e => e.BphistoryId);

                entity.ToTable("BusinessProgramBusUnitChangeHistory");

                entity.Property(e => e.BphistoryId).HasColumnName("BPHistoryID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.EventTypeCdId).HasColumnName("EventTypeCdID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.BusinessProgramBusUnitChangeHistories)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusinessProgramBusUnitChangeHistory_BusinessUnit");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.BusinessProgramBusUnitChangeHistories)
                    .HasForeignKey(d => d.CreatedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusinessProgramBusUnitChangeHistory_Employee");

                entity.HasOne(d => d.EventTypeCd)
                    .WithMany(p => p.BusinessProgramBusUnitChangeHistories)
                    .HasForeignKey(d => d.EventTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusinessProgramBusUnitChangeHistory_TypeCdDmt");
            });

            modelBuilder.Entity<BusinessProgramFileChangeHistory>(entity =>
            {
                entity.HasKey(e => e.BpfileChangeHistoryId)
                    .HasName("Pk_BPFileChangeHistoryID");

                entity.ToTable("BusinessProgramFileChangeHistory");

                entity.Property(e => e.BpfileChangeHistoryId).HasColumnName("BPFileChangeHistoryID");

                entity.Property(e => e.AssociatedClassTypeId).HasColumnName("AssociatedClassTypeID");

                entity.Property(e => e.BusinessProgramId).HasColumnName("BusinessProgramID");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.EventTypeCdId).HasColumnName("EventTypeCdID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.AssociatedClassType)
                    .WithMany(p => p.BusinessProgramFileChangeHistories)
                    .HasForeignKey(d => d.AssociatedClassTypeId)
                    .HasConstraintName("FK_BusinessProgramFileChangeHistory_AssociatedClassTypeID");
            });

            modelBuilder.Entity<BusinessRule>(entity =>
            {
                entity.ToTable("BusinessRule");

                entity.Property(e => e.BusinessRuleId).HasColumnName("BusinessRuleID");

                entity.Property(e => e.BusinessRuleDescr)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<BusinessSourceType>(entity =>
            {
                entity.ToTable("BusinessSourceType");

                entity.Property(e => e.BusinessSourceTypeName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DeactivationDate).HasColumnType("datetime");

                entity.Property(e => e.ReactivationDate).HasColumnType("datetime");

                entity.Property(e => e.StatusChgComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StatusChgUserId).HasColumnName("StatusChgUserID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.BusinessSourceTypes)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con2BusSourceTypeBusinessUnitFK");

                entity.HasOne(d => d.CreationEmployee)
                    .WithMany(p => p.BusinessSourceTypeCreationEmployees)
                    .HasForeignKey(d => d.CreationEmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con3BusSourceTypeEmployeeFK");

                entity.HasOne(d => d.StatusChgUser)
                    .WithMany(p => p.BusinessSourceTypeStatusChgUsers)
                    .HasForeignKey(d => d.StatusChgUserId)
                    .HasConstraintName("con5BusSourceTypeEmployeeFK");

                entity.HasOne(d => d.UpdatedEmployee)
                    .WithMany(p => p.BusinessSourceTypeUpdatedEmployees)
                    .HasForeignKey(d => d.UpdatedEmployeeId)
                    .HasConstraintName("con4BusSourceTypeEmployeeFK");
            });

            modelBuilder.Entity<BusinessUnit>(entity =>
            {
                entity.ToTable("BusinessUnit");

                entity.HasIndex(e => e.UpdTs, "DW_IXN01_BusinessUnit_UpdTS")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ClassTypeId, "IX_BusinessUnit_ClassTypeID_Inc")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.BusinessUnitId, e.DisplayInQfeflag }, "IdxName")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ClassTypeId, e.ObjectCd }, "XIF192BusinessUnit")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TitleProdOfficeId, "XIF194BusinessUnit")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.EscrowProdOfficeId, "XIF483BusinessUnit")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.SuperBusinessUnitId, e.ObjectCd }, "indBusUnit2")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SuperBusinessUnitId, "indBusUnit4R")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.AddrBookEntryId, "indBusUnit8Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.AccountServiceFlag).HasDefaultValueSql("((0))");

                entity.Property(e => e.AccountingFtpIp)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.AddrBookEntryId).HasColumnName("AddrBookEntryID");

                entity.Property(e => e.BusUnitTypeCdId).HasColumnName("BusUnitTypeCdID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.ClientIpaddress)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ClientIPAddress");

                entity.Property(e => e.ClientNetworkDomain)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CorpParentTypeCdId).HasColumnName("CorpParentTypeCdID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.Property(e => e.DeactivationDate).HasColumnType("datetime");

                entity.Property(e => e.DisplayInQfeflag).HasColumnName("DisplayInQFEFlag");

                entity.Property(e => e.DisplaySubordinationScreenFlag).HasDefaultValueSql("((0))");

                entity.Property(e => e.Division)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EnableCdflag).HasColumnName("EnableCDFlag");

                entity.Property(e => e.EscrowProdOfficeId).HasColumnName("EscrowProdOfficeID");

                entity.Property(e => e.EtitleDeliveryFlag)
                    .HasColumnName("ETitleDeliveryFlag")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ExchangeOfficeTypeCdId).HasColumnName("ExchangeOfficeTypeCdID");

                entity.Property(e => e.ExtractCutoffTime)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ExtractFailureAlertRecipientEmail)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FaccclosingCostFlag).HasColumnName("FACCClosingCostFlag");

                entity.Property(e => e.FastStatCode)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.FispayoffDemandFlag).HasColumnName("FISPayoffDemandFlag");

                entity.Property(e => e.GlclientCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("GLClientCode");

                entity.Property(e => e.GldivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("GLDivisionCode");

                entity.Property(e => e.InfodexUrl)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IsEmployeeOverdraftSelfApproval)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsMdmconverted).HasColumnName("IsMDMConverted");

                entity.Property(e => e.LineOfBus)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LogoFileName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.LogoFileName2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LogoFileName3)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Mfaflag).HasColumnName("MFAFlag");

                entity.Property(e => e.Name)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Ncsssflag).HasColumnName("NCSSSFlag");

                entity.Property(e => e.NextGenDocPrepLaunchDate).HasColumnType("datetime");

                entity.Property(e => e.NpsproductionOfficeFlag).HasColumnName("NPSProductionOfficeFlag");

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.OfficeCloseDate).HasColumnType("datetime");

                entity.Property(e => e.OfficeEffectiveDate).HasColumnType("datetime");

                entity.Property(e => e.OperationCloseTime)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.OperationOpenTime)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.OverDraftAmt).HasColumnType("money");

                entity.Property(e => e.OverDraftPwd)
                    .HasMaxLength(96)
                    .IsUnicode(false);

                entity.Property(e => e.Password)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Pdcflag).HasColumnName("PDCFlag");

                entity.Property(e => e.PolicyIssuedByTypeCdId).HasColumnName("PolicyIssuedByTypeCdID");

                entity.Property(e => e.ProdSystemTypeCdId).HasColumnName("ProdSystemTypeCdID");

                entity.Property(e => e.ReactivationDate).HasColumnType("datetime");

                entity.Property(e => e.RecFeeTemplateBusinessPartyId).HasColumnName("RecFeeTemplateBusinessPartyID");

                entity.Property(e => e.RecipientId)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("RecipientID");

                entity.Property(e => e.RecipientType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RemoteDirectory)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReportingOffTypeCdId).HasColumnName("ReportingOffTypeCdID");

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.Property(e => e.Sms1099sActivityDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SMS1099sActivityDate");

                entity.Property(e => e.SolrSearchTypeCdId).HasColumnName("SolrSearchTypeCdID");

                entity.Property(e => e.StatusChgComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StatusChgDate).HasColumnType("datetime");

                entity.Property(e => e.StatusChgUserId).HasColumnName("StatusChgUserID");

                entity.Property(e => e.SuperBusinessUnitId).HasColumnName("SuperBusinessUnitID");

                entity.Property(e => e.SystemDocumentLogoFile)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TitleProdOfficeId).HasColumnName("TitleProdOfficeID");

                entity.Property(e => e.TransferTaxesTemplateBusinessPartyId).HasColumnName("TransferTaxesTemplateBusinessPartyID");

                entity.Property(e => e.TrustNetOfficePrefix)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.TrustNetRegionCd)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UserName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.HasOne(d => d.AddrBookEntry)
                    .WithMany(p => p.BusinessUnits)
                    .HasForeignKey(d => d.AddrBookEntryId)
                    .HasConstraintName("conBusUnit5Fk");

                entity.HasOne(d => d.BusUnitTypeCd)
                    .WithMany(p => p.BusinessUnitBusUnitTypeCds)
                    .HasForeignKey(d => d.BusUnitTypeCdId)
                    .HasConstraintName("FK_BusinessUnitBusUnitTypeCdID");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.BusinessUnits)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBusUnit3Fk");

                entity.HasOne(d => d.CreationUser)
                    .WithMany(p => p.BusinessUnitCreationUsers)
                    .HasForeignKey(d => d.CreationUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBusUnit6FK");

                entity.HasOne(d => d.EscrowProdOffice)
                    .WithMany(p => p.InverseEscrowProdOffice)
                    .HasForeignKey(d => d.EscrowProdOfficeId)
                    .HasConstraintName("conBusinessUnit12FK");

                entity.HasOne(d => d.ExchangeOfficeTypeCd)
                    .WithMany(p => p.BusinessUnitExchangeOfficeTypeCds)
                    .HasForeignKey(d => d.ExchangeOfficeTypeCdId)
                    .HasConstraintName("conBusinessUnitExchangeOfficeTypeFK");

                entity.HasOne(d => d.PolicyIssuedByTypeCd)
                    .WithMany(p => p.BusinessUnitPolicyIssuedByTypeCds)
                    .HasForeignKey(d => d.PolicyIssuedByTypeCdId)
                    .HasConstraintName("FK_BusinessUnit_PolicyIssuedByTypeCdID");

                entity.HasOne(d => d.ProdSystemTypeCd)
                    .WithMany(p => p.BusinessUnitProdSystemTypeCds)
                    .HasForeignKey(d => d.ProdSystemTypeCdId)
                    .HasConstraintName("FK_BusinessUnit_ProdSystemTypeCdID");

                entity.HasOne(d => d.RecFeeTemplateBusinessParty)
                    .WithMany(p => p.BusinessUnitRecFeeTemplateBusinessParties)
                    .HasForeignKey(d => d.RecFeeTemplateBusinessPartyId)
                    .HasConstraintName("conBusinessUnit14Fk");

                entity.HasOne(d => d.ReportingOffTypeCd)
                    .WithMany(p => p.BusinessUnitReportingOffTypeCds)
                    .HasForeignKey(d => d.ReportingOffTypeCdId)
                    .HasConstraintName("FK_BusinessUnit_ReportingOffTypeCdID");

                entity.HasOne(d => d.SolrSearchTypeCd)
                    .WithMany(p => p.BusinessUnitSolrSearchTypeCds)
                    .HasForeignKey(d => d.SolrSearchTypeCdId)
                    .HasConstraintName("FK_BusinessUnitSolrSearchTypeCdID");

                entity.HasOne(d => d.StatusChgUser)
                    .WithMany(p => p.BusinessUnitStatusChgUsers)
                    .HasForeignKey(d => d.StatusChgUserId)
                    .HasConstraintName("conBusUnit4FK");

                entity.HasOne(d => d.SuperBusinessUnit)
                    .WithMany(p => p.InverseSuperBusinessUnit)
                    .HasForeignKey(d => d.SuperBusinessUnitId)
                    .HasConstraintName("conBusUnit2R");

                entity.HasOne(d => d.TitleAgentTypeCd)
                    .WithMany(p => p.BusinessUnitTitleAgentTypeCds)
                    .HasForeignKey(d => d.TitleAgentTypeCdId)
                    .HasConstraintName("conBusinessUnit16Fk");

                entity.HasOne(d => d.TitleProdOffice)
                    .WithMany(p => p.InverseTitleProdOffice)
                    .HasForeignKey(d => d.TitleProdOfficeId)
                    .HasConstraintName("conBusinessUnit13FK");

                entity.HasOne(d => d.TransferTaxesTemplateBusinessParty)
                    .WithMany(p => p.BusinessUnitTransferTaxesTemplateBusinessParties)
                    .HasForeignKey(d => d.TransferTaxesTemplateBusinessPartyId)
                    .HasConstraintName("conBusinessUnit15Fk");

                entity.HasMany(d => d.ActivityGrps)
                    .WithMany(p => p.BusinessUnits)
                    .UsingEntity<Dictionary<string, object>>(
                        "BusUnitActivityGrpXref",
                        l => l.HasOne<ActivityGrp>().WithMany().HasForeignKey("ActivityGrpId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conBusUnitActvGrpXref3Fk"),
                        r => r.HasOne<BusinessUnit>().WithMany().HasForeignKey("BusinessUnitId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conBusUnitActvGrpXref2Fk"),
                        j =>
                        {
                            j.HasKey("BusinessUnitId", "ActivityGrpId").HasName("conBusUnitActvGrpXref1Pk");

                            j.ToTable("BusUnitActivityGrpXref");

                            j.HasIndex(new[] { "ActivityGrpId" }, "indBusUnitActvGrpXref3Fk").HasFillFactor(90);

                            j.IndexerProperty<int>("BusinessUnitId").HasColumnName("BusinessUnitID");

                            j.IndexerProperty<int>("ActivityGrpId").HasColumnName("ActivityGrpID");
                        });

                entity.HasMany(d => d.Appls)
                    .WithMany(p => p.BusinessUnits)
                    .UsingEntity<Dictionary<string, object>>(
                        "ApplBusUnitXref",
                        l => l.HasOne<Application>().WithMany().HasForeignKey("ApplId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("R_353"),
                        r => r.HasOne<BusinessUnit>().WithMany().HasForeignKey("BusinessUnitId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("R_354"),
                        j =>
                        {
                            j.HasKey("BusinessUnitId", "ApplId").HasName("XPKApplBusUnitXref");

                            j.ToTable("ApplBusUnitXref");

                            j.HasIndex(new[] { "ApplId" }, "XIF360ApplBusUnitXref").HasFillFactor(90);

                            j.IndexerProperty<int>("BusinessUnitId").HasColumnName("BusinessUnitID");

                            j.IndexerProperty<int>("ApplId").HasColumnName("ApplID");
                        });

                entity.HasMany(d => d.BankAccts)
                    .WithMany(p => p.BusinessUnits)
                    .UsingEntity<Dictionary<string, object>>(
                        "BusUnitBankAcctXref",
                        l => l.HasOne<BankAccount>().WithMany().HasForeignKey("BankAcctId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conBusUnitBankAcctXref1FK"),
                        r => r.HasOne<BusinessUnit>().WithMany().HasForeignKey("BusinessUnitId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conBusUnitBankAcctXref4FK"),
                        j =>
                        {
                            j.HasKey("BusinessUnitId", "BankAcctId").HasName("XPKBusUnitBankAcctXref");

                            j.ToTable("BusUnitBankAcctXref");

                            j.HasIndex(new[] { "BankAcctId" }, "XIF362BusUnitBankAcctXref").HasFillFactor(90);

                            j.IndexerProperty<int>("BusinessUnitId").HasColumnName("BusinessUnitID");

                            j.IndexerProperty<int>("BankAcctId").HasColumnName("BankAcctID");
                        });

                entity.HasMany(d => d.BusinessPrograms)
                    .WithMany(p => p.BusinessUnits)
                    .UsingEntity<Dictionary<string, object>>(
                        "BusinessProgramBusUnitXref",
                        l => l.HasOne<BusinessProgram>().WithMany().HasForeignKey("BusinessProgramId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_BusinessProgramBusUnitXref_BusinessProgram"),
                        r => r.HasOne<BusinessUnit>().WithMany().HasForeignKey("BusinessUnitId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_BusinessProgramBusUnitXref_BusinessUnit"),
                        j =>
                        {
                            j.HasKey("BusinessUnitId", "BusinessProgramId").HasName("Unq_BusinessProgramBusUnitXref_BUID_BPID");

                            j.ToTable("BusinessProgramBusUnitXref");
                        });

                entity.HasMany(d => d.Workgroups)
                    .WithMany(p => p.Regions)
                    .UsingEntity<Dictionary<string, object>>(
                        "RegionWorkgroupXref",
                        l => l.HasOne<WorkGroup>().WithMany().HasForeignKey("WorkgroupId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FKRegionWorkGroupXRef2"),
                        r => r.HasOne<BusinessUnit>().WithMany().HasForeignKey("RegionId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FKRegionWorkGroupXRef1"),
                        j =>
                        {
                            j.HasKey("RegionId", "WorkgroupId").HasName("PKRegionWorkGroupXRef").IsClustered(false);

                            j.ToTable("RegionWorkgroupXref");

                            j.HasIndex(new[] { "RegionId" }, "CDXRegionWorkGroupXRef").IsClustered().HasFillFactor(90);

                            j.IndexerProperty<int>("RegionId").HasColumnName("RegionID");

                            j.IndexerProperty<int>("WorkgroupId").HasColumnName("WorkgroupID");
                        });
            });

            modelBuilder.Entity<BusinessUnitAuditLog>(entity =>
            {
                entity.ToTable("BusinessUnitAuditLog");

                entity.HasIndex(e => e.BusinessUnitId, "Idx_BusinessUnitAuditlog_BusinessUnitId")
                    .HasFillFactor(90);

                entity.Property(e => e.BusinessUnitAuditLogId).HasColumnName("BusinessUnitAuditLogID");

                entity.Property(e => e.EntryDate).HasColumnType("datetime");

                entity.Property(e => e.EntryStatus)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Flsenable).HasColumnName("FLSEnable");

                entity.Property(e => e.Updts)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<BusinessUnitXref>(entity =>
            {
                entity.ToTable("BusinessUnitXref");

                entity.HasIndex(e => e.BusinessUnitId, "Idx_BusinessUnitXrefBusinessUnitIDAttributeTypeCdID")
                    .HasFillFactor(90);

                entity.Property(e => e.BusinessUnitXrefId).HasColumnName("BusinessUnitXrefID");

                entity.Property(e => e.AttributeTypeCdId).HasColumnName("AttributeTypeCdID");

                entity.Property(e => e.AttributeValue)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.AttributeTypeCd)
                    .WithMany(p => p.BusinessUnitXrefs)
                    .HasForeignKey(d => d.AttributeTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusinessUnitXrefAttributeTypeCdID");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.BusinessUnitXrefs)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusinessUnitXrefBusinessUnitID");
            });

            modelBuilder.Entity<BusinessunitsForDailyEmailstatus>(entity =>
            {
                entity.HasKey(e => e.BusinessunitId)
                    .HasName("Idx1BusinessunitsForDailyEmailstatus");

                entity.ToTable("BusinessunitsForDailyEmailstatus");

                entity.Property(e => e.BusinessunitId)
                    .ValueGeneratedNever()
                    .HasColumnName("BusinessunitID");

                entity.HasOne(d => d.Businessunit)
                    .WithOne(p => p.BusinessunitsForDailyEmailstatus)
                    .HasForeignKey<BusinessunitsForDailyEmailstatus>(d => d.BusinessunitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("BusinessunitsForDailyEmailstatusFK");
            });

            modelBuilder.Entity<BusorgSearchVendor>(entity =>
            {
                entity.HasKey(e => e.BusOrgId)
                    .HasName("PK__BusorgSe__63B78DD72CA92A98");

                entity.ToTable("BusorgSearchVendor");

                entity.Property(e => e.BusOrgId)
                    .ValueGeneratedNever()
                    .HasColumnName("BusOrgID");

                entity.Property(e => e.Updts)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UPDTS");

                entity.HasOne(d => d.BusOrg)
                    .WithOne(p => p.BusorgSearchVendor)
                    .HasForeignKey<BusorgSearchVendor>(d => d.BusOrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__BusorgSearchVendor__BusOrgId");
            });

            modelBuilder.Entity<CdadjustableInterestRate>(entity =>
            {
                entity.ToTable("CDAdjustableInterestRate");

                entity.HasIndex(e => e.ClosingDisclosureId, "idx_CDAdjustableInterestRate_ClosingDisclosureID")
                    .HasFillFactor(90);

                entity.Property(e => e.CdadjustableInterestRateId).HasColumnName("CDAdjustableInterestRateID");

                entity.Property(e => e.Airamount)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("AIRAmount");

                entity.Property(e => e.AirtypeCdId).HasColumnName("AIRTypeCdID");

                entity.Property(e => e.ClosingDisclosureId).HasColumnName("ClosingDisclosureID");

                entity.Property(e => e.Updts)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.AirtypeCd)
                    .WithMany(p => p.CdadjustableInterestRates)
                    .HasForeignKey(d => d.AirtypeCdId)
                    .HasConstraintName("FK_CDAdjustableInterestRate_AIRTypeCdID");

                entity.HasOne(d => d.ClosingDisclosure)
                    .WithMany(p => p.CdadjustableInterestRates)
                    .HasForeignKey(d => d.ClosingDisclosureId)
                    .HasConstraintName("FK_CDAdjustableInterestRate_ClosingDisclosureID");
            });

            modelBuilder.Entity<CdadjustablePayment>(entity =>
            {
                entity.ToTable("CDAdjustablePayment");

                entity.HasIndex(e => e.ClosingDisclosureId, "idx_CDAdjustablePayment_ClosingDisclosureID")
                    .HasFillFactor(90);

                entity.Property(e => e.CdadjustablePaymentId).HasColumnName("CDAdjustablePaymentID");

                entity.Property(e => e.Apdescr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("APDescr");

                entity.Property(e => e.ApendDate)
                    .HasColumnType("datetime")
                    .HasColumnName("APEndDate");

                entity.Property(e => e.AppaymentScheduleTypeCdId).HasColumnName("APPaymentScheduleTypeCdID");

                entity.Property(e => e.ApstartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("APStartDate");

                entity.Property(e => e.Apstatus).HasColumnName("APStatus");

                entity.Property(e => e.AptypeCdId).HasColumnName("APTypeCdID");

                entity.Property(e => e.ClosingDisclosureId).HasColumnName("ClosingDisclosureID");

                entity.Property(e => e.Updts)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.AptypeCd)
                    .WithMany(p => p.CdadjustablePayments)
                    .HasForeignKey(d => d.AptypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClosingDisclosureID_APTypeCdID");

                entity.HasOne(d => d.ClosingDisclosure)
                    .WithMany(p => p.CdadjustablePayments)
                    .HasForeignKey(d => d.ClosingDisclosureId)
                    .HasConstraintName("FK_ClosingDisclosureID_ClosingDisclosureID");
            });

            modelBuilder.Entity<CdcalculatingCashToClose>(entity =>
            {
                entity.ToTable("CDCalculatingCashToClose");

                entity.HasIndex(e => new { e.ClosingDisclosureId, e.CashToCloseTypeId }, "IX_CDCalculatingCashToClose_ClosingDisclosureID_CashToCloseTypeID")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.CdcalculatingCashToCloseId).HasColumnName("CDCalculatingCashToCloseID");

                entity.Property(e => e.CashToCloseComments)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CashToCloseTypeId).HasColumnName("CashToCloseTypeID");

                entity.Property(e => e.ClosingDisclosureId).HasColumnName("ClosingDisclosureID");

                entity.Property(e => e.FinalAmount).HasColumnType("money");

                entity.Property(e => e.LoanEstimate).HasColumnType("money");

                entity.Property(e => e.UnRoundedLoanEstimate).HasColumnType("money");

                entity.Property(e => e.Updts)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CashToCloseType)
                    .WithMany(p => p.CdcalculatingCashToCloses)
                    .HasForeignKey(d => d.CashToCloseTypeId)
                    .HasConstraintName("FK_CDCalculatingCashToClose_CashToCloseTypeID");

                entity.HasOne(d => d.ClosingDisclosure)
                    .WithMany(p => p.CdcalculatingCashToCloses)
                    .HasForeignKey(d => d.ClosingDisclosureId)
                    .HasConstraintName("FK_CDCalculatingCashToClose_ClosingDisclosureID");
            });

            modelBuilder.Entity<CddeliveryOption>(entity =>
            {
                entity.HasKey(e => e.FileId)
                    .HasName("PK_CDDeliveryOptions_FileID");

                entity.ToTable("CDDeliveryOptions");

                entity.HasIndex(e => e.ClosingDisclosureId, "IDX_CDDeliveryOptions_ClosingDisclosureID")
                    .HasFillFactor(90);

                entity.Property(e => e.FileId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileID");

                entity.Property(e => e.CddeliveryComments)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("CDDeliveryComments");

                entity.Property(e => e.CddeliveryIsaddComments).HasColumnName("CDDeliveryISAddComments");

                entity.Property(e => e.ClosingDisclosureId).HasColumnName("ClosingDisclosureID");

                entity.Property(e => e.IsCdformDelivered).HasColumnName("IsCDFormDelivered");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.File)
                    .WithOne(p => p.CddeliveryOption)
                    .HasForeignKey<CddeliveryOption>(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CDDeliveryOptions_FileID");
            });

            modelBuilder.Entity<CdloanTermClause>(entity =>
            {
                entity.HasKey(e => e.CdloanTermClausesId)
                    .HasName("PK_CDLoanTermClauses_CDLoanTermClausesID");

                entity.ToTable("CDLoanTermClauses");

                entity.HasIndex(e => e.ClosingDisclosureId, "idx_CDLoanTermClauses_ClosingDisclosureID")
                    .HasFillFactor(90);

                entity.Property(e => e.CdloanTermClausesId).HasColumnName("CDLoanTermClausesID");

                entity.Property(e => e.ClosingDisclosureId).HasColumnName("ClosingDisclosureID");

                entity.Property(e => e.LoanTermClauses).IsUnicode(false);

                entity.Property(e => e.LoanTermClausesMismo)
                    .HasColumnType("xml")
                    .HasColumnName("LoanTermClausesMISMO");

                entity.Property(e => e.LoanTermTypeId).HasColumnName("LoanTermTypeID");

                entity.Property(e => e.PredefinedClauseIds)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PredefinedClauseIDs");

                entity.HasOne(d => d.ClosingDisclosure)
                    .WithMany(p => p.CdloanTermClauses)
                    .HasForeignKey(d => d.ClosingDisclosureId)
                    .HasConstraintName("FK_CDLoanTermClauses_ClosingDisclosureID");
            });

            modelBuilder.Entity<CdpayoffsandPayment>(entity =>
            {
                entity.HasKey(e => e.CdpayoffPaymentsId)
                    .HasName("PK_CDPayoffsandPayments_CDPayoffPaymentsID");

                entity.ToTable("CDPayoffsandPayments");

                entity.HasIndex(e => e.ClosingDisclosureId, "IDX_CDPayoffsandPayments_ClosingDisclosureID")
                    .HasFillFactor(90);

                entity.Property(e => e.CdpayoffPaymentsId).HasColumnName("CDPayoffPaymentsID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.ChargeDescr)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClosingDisclosureId).HasColumnName("ClosingDisclosureID");

                entity.HasOne(d => d.ClosingDisclosure)
                    .WithMany(p => p.CdpayoffsandPayments)
                    .HasForeignKey(d => d.ClosingDisclosureId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CDPayoffsandPayments_ClosingDisclosureID");
            });

            modelBuilder.Entity<CdprojectedPaymentRange>(entity =>
            {
                entity.ToTable("CDProjectedPaymentRange");

                entity.HasIndex(e => e.ClosingDisclosureId, "idxClosingDisclosureID")
                    .HasFillFactor(90);

                entity.Property(e => e.CdprojectedPaymentRangeId).HasColumnName("CDProjectedPaymentRangeID");

                entity.Property(e => e.ClosingDisclosureId).HasColumnName("ClosingDisclosureID");

                entity.Property(e => e.EstimatedEscrow)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Interest).HasColumnType("money");

                entity.Property(e => e.MaxPrincipal).HasColumnType("money");

                entity.Property(e => e.MinPrincipal).HasColumnType("money");

                entity.Property(e => e.MortgageInsurance)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.PricipalInterest).HasColumnType("money");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClosingDisclosure)
                    .WithMany(p => p.CdprojectedPaymentRanges)
                    .HasForeignKey(d => d.ClosingDisclosureId)
                    .HasConstraintName("conCDRangeClosingDisclosureIDFK");
            });

            modelBuilder.Entity<CdsplitOwnerPolicyAmt>(entity =>
            {
                entity.HasKey(e => e.CdsplitPolicyId)
                    .HasName("PK_CDSplitOwnerPolicyAmt_CDSplitPolicyId");

                entity.ToTable("CDSplitOwnerPolicyAmt");

                entity.HasIndex(e => new { e.PolicyId, e.TypeCdid }, "idx_CDSplitOwnerPolicyAmt_PolicyID_TypeCDID")
                    .HasFillFactor(90);

                entity.Property(e => e.CdsplitPolicyId).HasColumnName("CDSplitPolicyId");

                entity.Property(e => e.BuyerSplitAmt).HasColumnType("money");

                entity.Property(e => e.PolicyId).HasColumnName("PolicyID");

                entity.Property(e => e.SellerSplitAmt).HasColumnType("money");

                entity.Property(e => e.SplitPercent).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.TypeCdid).HasColumnName("TypeCDID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.TypeCd)
                    .WithMany(p => p.CdsplitOwnerPolicyAmts)
                    .HasForeignKey(d => d.TypeCdid)
                    .HasConstraintName("FK_FeeTypeCdId_TypeCddmt");
            });

            modelBuilder.Entity<Cdtdsinfo>(entity =>
            {
                entity.ToTable("CDTDSInfo");

                entity.HasIndex(e => e.TitleEscrowInfoId, "idx_CDTDSInfo_TitleEscrowInfoID")
                    .HasFillFactor(90);

                entity.Property(e => e.CdtdsinfoId).HasColumnName("CDTDSInfoID");

                entity.Property(e => e.ClosingDate).HasColumnType("datetime");

                entity.Property(e => e.DateIssued).HasColumnType("datetime");

                entity.Property(e => e.DateReceived).HasColumnType("datetime");

                entity.Property(e => e.DateReceivedAck).HasColumnName("DateReceivedACK");

                entity.Property(e => e.DisbursementDate).HasColumnType("datetime");

                entity.Property(e => e.StatementTypeCdId).HasColumnName("StatementTypeCdID");

                entity.Property(e => e.TitleEscrowInfoId).HasColumnName("TitleEscrowInfoID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.TitleEscrowInfo)
                    .WithMany(p => p.Cdtdsinfos)
                    .HasForeignKey(d => d.TitleEscrowInfoId)
                    .HasConstraintName("FK_CDTDSInfo_TitleEscrowInfoID");
            });

            modelBuilder.Entity<CertgoldenCopyFee>(entity =>
            {
                entity.HasKey(e => e.CertgoldenCopyFeesId);

                entity.ToTable("CERTGoldenCopyFees");

                entity.Property(e => e.CertgoldenCopyFeesId).HasColumnName("CERTGoldenCopyFeesID");

                entity.Property(e => e.EctAdHocEntryFlag).HasColumnName("ECT_AdHocEntryFlag");

                entity.Property(e => e.EctBasisDays).HasColumnName("ECT_BasisDays");

                entity.Property(e => e.EctBusinessUnitId).HasColumnName("ECT_BusinessUnitID");

                entity.Property(e => e.EctBuyerChargeFloatFlag).HasColumnName("ECT_BuyerChargeFloatFlag");

                entity.Property(e => e.EctBuyerChargeSection)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("ECT_BuyerChargeSection");

                entity.Property(e => e.EctBuyerChargeSeqNum).HasColumnName("ECT_BuyerChargeSeqNum");

                entity.Property(e => e.EctBuyerCreditFloatFlag).HasColumnName("ECT_BuyerCreditFloatFlag");

                entity.Property(e => e.EctBuyerCreditSection)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("ECT_BuyerCreditSection");

                entity.Property(e => e.EctBuyerCreditSeqNum).HasColumnName("ECT_BuyerCreditSeqNum");

                entity.Property(e => e.EctCalcBasePeriodTypeCdId).HasColumnName("ECT_CalcBasePeriodTypeCdID");

                entity.Property(e => e.EctChargeCategoryTypeCdId).HasColumnName("ECT_ChargeCategoryTypeCdID");

                entity.Property(e => e.EctChargeOnlyFlag).HasColumnName("ECT_ChargeOnlyFlag");

                entity.Property(e => e.EctChargeProcessTypeCdId).HasColumnName("ECT_ChargeProcessTypeCdID");

                entity.Property(e => e.EctClassTypeId).HasColumnName("ECT_ClassTypeID");

                entity.Property(e => e.EctCreationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ECT_CreationDate");

                entity.Property(e => e.EctCreationEmployeeId).HasColumnName("ECT_CreationEmployeeID");

                entity.Property(e => e.EctDefaultPaymentCategoryTypeCdId).HasColumnName("ECT_DefaultPaymentCategoryTypeCdID");

                entity.Property(e => e.EctDefaultPmtMethodTypeCdId).HasColumnName("ECT_DefaultPmtMethodTypeCdID");

                entity.Property(e => e.EctDescEditableFlag).HasColumnName("ECT_DescEditableFlag");

                entity.Property(e => e.EctDescr)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ECT_Descr");

                entity.Property(e => e.EctEditLenderRequiredFlag).HasColumnName("ECT_EditLenderRequiredFlag");

                entity.Property(e => e.EctEscrowChargeTemplateId).HasColumnName("ECT_EscrowChargeTemplateID");

                entity.Property(e => e.EctFromDateInclFlag).HasColumnName("ECT_FromDateInclFlag");

                entity.Property(e => e.EctGfeEntryEditableFlag).HasColumnName("ECT_GfeEntryEditableFlag");

                entity.Property(e => e.EctGfeEntryTypeCdId).HasColumnName("ECT_GfeEntryTypeCdID");

                entity.Property(e => e.EctGfeHudtypeCdId).HasColumnName("ECT_GfeHUDTypeCdID");

                entity.Property(e => e.EctGfeLenderDirEditableFlag).HasColumnName("ECT_GfeLenderDirEditableFlag");

                entity.Property(e => e.EctGfeLenderDirectedFlag).HasColumnName("ECT_GfeLenderDirectedFlag");

                entity.Property(e => e.EctGfeThirdPartyEditableFlag).HasColumnName("ECT_GfeThirdPartyEditableFlag");

                entity.Property(e => e.EctGfeThirdPartyNameDefault)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ECT_GfeThirdPartyNameDefault");

                entity.Property(e => e.EctHud1BuyerCharge).HasColumnName("ECT_Hud1BuyerCharge");

                entity.Property(e => e.EctHud1BuyerChargeForCd).HasColumnName("ECT_Hud1BuyerChargeForCD");

                entity.Property(e => e.EctHud1BuyerCredit).HasColumnName("ECT_Hud1BuyerCredit");

                entity.Property(e => e.EctHud1BuyerCreditForCd).HasColumnName("ECT_Hud1BuyerCreditForCD");

                entity.Property(e => e.EctHud1SellerCharge).HasColumnName("ECT_Hud1SellerCharge");

                entity.Property(e => e.EctHud1SellerChargeForCd).HasColumnName("ECT_Hud1SellerChargeForCD");

                entity.Property(e => e.EctHud1SellerCredit).HasColumnName("ECT_Hud1SellerCredit");

                entity.Property(e => e.EctHud1SellerCreditForCd).HasColumnName("ECT_Hud1SellerCreditForCD");

                entity.Property(e => e.EctLenderAffiliateFlag).HasColumnName("ECT_LenderAffiliateFlag");

                entity.Property(e => e.EctLenderChargeFlag).HasColumnName("ECT_LenderChargeFlag");

                entity.Property(e => e.EctLenderRequiredFlag).HasColumnName("ECT_LenderRequiredFlag");

                entity.Property(e => e.EctMismocategoryTypeCdId).HasColumnName("ECT_MISMOCategoryTypeCdID");

                entity.Property(e => e.EctMismotypeCdId).HasColumnName("ECT_MISMOTypeCdID");

                entity.Property(e => e.EctObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ECT_ObjectCd");

                entity.Property(e => e.EctPaidBySellerAtCloseFlag).HasColumnName("ECT_PaidBySellerAtCloseFlag");

                entity.Property(e => e.EctParentEscrowChargeTemplateId).HasColumnName("ECT_ParentEscrowChargeTemplateID");

                entity.Property(e => e.EctSellerChargeFloatFlag).HasColumnName("ECT_SellerChargeFloatFlag");

                entity.Property(e => e.EctSellerChargeSection)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("ECT_SellerChargeSection");

                entity.Property(e => e.EctSellerChargeSeqNum).HasColumnName("ECT_SellerChargeSeqNum");

                entity.Property(e => e.EctSellerCreditFloatFlag).HasColumnName("ECT_SellerCreditFloatFlag");

                entity.Property(e => e.EctSellerCreditSection)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("ECT_SellerCreditSection");

                entity.Property(e => e.EctSellerCreditSeqNum).HasColumnName("ECT_SellerCreditSeqNum");

                entity.Property(e => e.EctSeqNum).HasColumnName("ECT_SeqNum");

                entity.Property(e => e.EctStatusCd).HasColumnName("ECT_StatusCd");

                entity.Property(e => e.EctToDateInclFlag).HasColumnName("ECT_ToDateInclFlag");

                entity.Property(e => e.EctUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ECT_UpdatedDate");

                entity.Property(e => e.EctUpdatedEmployeeId).HasColumnName("ECT_UpdatedEmployeeID");

                entity.Property(e => e.FeeBusinessUnitId).HasColumnName("Fee_BusinessUnitID");

                entity.Property(e => e.FeeChargeToTypeCdId).HasColumnName("Fee_ChargeToTypeCdID");

                entity.Property(e => e.FeeClassTypeId).HasColumnName("Fee_ClassTypeID");

                entity.Property(e => e.FeeCompanyIncomeFee).HasColumnName("Fee_CompanyIncomeFee");

                entity.Property(e => e.FeeDefaultChargeAmt)
                    .HasColumnType("money")
                    .HasColumnName("Fee_DefaultChargeAmt");

                entity.Property(e => e.FeeDenyEditFlag).HasColumnName("Fee_DenyEditFlag");

                entity.Property(e => e.FeeDescr)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Fee_Descr");

                entity.Property(e => e.FeeEndorsementTypeCdId).HasColumnName("Fee_EndorsementTypeCdID");

                entity.Property(e => e.FeeEscrowChargeTemplateId).HasColumnName("Fee_EscrowChargeTemplateID");

                entity.Property(e => e.FeeEscrowOfficerFee).HasColumnName("Fee_EscrowOfficerFee");

                entity.Property(e => e.FeeFaccflag).HasColumnName("Fee_FACCFlag");

                entity.Property(e => e.FeeFeeId).HasColumnName("Fee_FeeID");

                entity.Property(e => e.FeeFeeOwningOfficeTypeCdId).HasColumnName("Fee_FeeOwningOfficeTypeCdID");

                entity.Property(e => e.FeeFeeToBucket).HasColumnName("Fee_FeeToBucket");

                entity.Property(e => e.FeeFeeTypeCdId).HasColumnName("Fee_FeeTypeCdID");

                entity.Property(e => e.FeeGeographicTypeCdId).HasColumnName("Fee_GeographicTypeCdID");

                entity.Property(e => e.FeeGfeHudtypeCdId).HasColumnName("Fee_GfeHUDTypeCdID");

                entity.Property(e => e.FeeGllookupId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Fee_GLLookupID");

                entity.Property(e => e.FeeGovernmentReportableFlag).HasColumnName("Fee_GovernmentReportableFlag");

                entity.Property(e => e.FeeInclBuyChrg1103).HasColumnName("Fee_InclBuyChrg1103");

                entity.Property(e => e.FeeLenderChargeFlag).HasColumnName("Fee_LenderChargeFlag");

                entity.Property(e => e.FeeLoanEstimateDescr)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Fee_LoanEstimateDescr");

                entity.Property(e => e.FeeObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Fee_ObjectCd");

                entity.Property(e => e.FeeOfficeIncomeFee).HasColumnName("Fee_OfficeIncomeFee");

                entity.Property(e => e.FeeOtherTaxTypeCdId).HasColumnName("Fee_OtherTaxTypeCdID");

                entity.Property(e => e.FeePremiumSalesTaxFlag).HasColumnName("Fee_PremiumSalesTaxFlag");

                entity.Property(e => e.FeePromulgatedFee).HasColumnName("Fee_PromulgatedFee");

                entity.Property(e => e.FeeRateTypeFlag).HasColumnName("Fee_RateTypeFlag");

                entity.Property(e => e.FeeRecipientType)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Fee_RecipientType");

                entity.Property(e => e.FeeRemittanceFee).HasColumnName("Fee_RemittanceFee");

                entity.Property(e => e.FeeSalesRepFee).HasColumnName("Fee_SalesRepFee");

                entity.Property(e => e.FeeSplitWithDirectOfficeFlag).HasColumnName("Fee_SplitWithDirectOfficeFlag");

                entity.Property(e => e.FeeStatusCd).HasColumnName("Fee_StatusCd");

                entity.Property(e => e.FeeTemplateId).HasColumnName("Fee_TemplateID");

                entity.Property(e => e.FeeTerritoryAllocationFlag).HasColumnName("Fee_TerritoryAllocationFlag");

                entity.Property(e => e.FeeTitleOfficerFee).HasColumnName("Fee_TitleOfficerFee");

                entity.Property(e => e.FeeTransactionCodeFlag).HasColumnName("Fee_TransactionCodeFlag");
            });

            modelBuilder.Entity<ChangeNotification>(entity =>
            {
                entity.ToTable("ChangeNotification");

                entity.HasIndex(e => e.ObjectCd, "ObjectCD_UdX")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.ChangeNotificationId).HasColumnName("ChangeNotificationID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(800)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Descr)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ObjectCD");

                entity.Property(e => e.SuperChangeNotificationId).HasColumnName("SuperChangeNotificationID");

                entity.HasMany(d => d.Applications)
                    .WithMany(p => p.ChangeNotifications)
                    .UsingEntity<Dictionary<string, object>>(
                        "ChangeNotificationApplicationXref",
                        l => l.HasOne<Application>().WithMany().HasForeignKey("ApplicationId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Application"),
                        r => r.HasOne<ChangeNotification>().WithMany().HasForeignKey("ChangeNotificationId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_ChangeNotificationID"),
                        j =>
                        {
                            j.HasKey("ChangeNotificationId", "ApplicationId");

                            j.ToTable("ChangeNotificationApplicationXref");

                            j.IndexerProperty<int>("ChangeNotificationId").HasColumnName("ChangeNotificationID");

                            j.IndexerProperty<int>("ApplicationId").HasColumnName("ApplicationID");
                        });
            });

            modelBuilder.Entity<ChangeOwningOfficeHistory>(entity =>
            {
                entity.ToTable("ChangeOwningOfficeHistory");

                entity.HasIndex(e => new { e.FileId, e.ChangeTypeCdId }, "IdxChangeOwningOfficeHistory3")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.NewOwnerOfficeId, "idxChangeOwningOfficeHistory1")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ExtractId, "idxChangeOwningOfficeHistory2")
                    .HasFillFactor(90);

                entity.Property(e => e.ChangeOwningOfficeHistoryId).HasColumnName("ChangeOwningOfficeHistoryID");

                entity.Property(e => e.ChangeDate).HasColumnType("datetime");

                entity.Property(e => e.ChangeTypeCdId).HasColumnName("ChangeTypeCdID");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.NewOwnerOfficeId).HasColumnName("NewOwnerOfficeID");

                entity.Property(e => e.OldOwnerOfficeId).HasColumnName("OldOwnerOfficeID");

                entity.HasOne(d => d.ChangeTypeCd)
                    .WithMany(p => p.ChangeOwningOfficeHistories)
                    .HasForeignKey(d => d.ChangeTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChangeOwningOfficeHistory_TypeCdDmt");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ChangeOwningOfficeHistories)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChangeOwningOfficeHistory_Employee");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.ChangeOwningOfficeHistories)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChangeOwningOfficeHistory_ServiceFile");

                entity.HasOne(d => d.NewOwnerOffice)
                    .WithMany(p => p.ChangeOwningOfficeHistoryNewOwnerOffices)
                    .HasForeignKey(d => d.NewOwnerOfficeId)
                    .HasConstraintName("FK_ChangeOwningOfficeHistory_BusinessUnit1");

                entity.HasOne(d => d.OldOwnerOffice)
                    .WithMany(p => p.ChangeOwningOfficeHistoryOldOwnerOffices)
                    .HasForeignKey(d => d.OldOwnerOfficeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChangeOwningOfficeHistory_BusinessUnit");
            });

            modelBuilder.Entity<ChangesForScheduler>(entity =>
            {
                entity.HasKey(e => new { e.ObjectPk, e.ObjectId })
                    .HasName("idxChangesForScheduler_1");

                entity.ToTable("ChangesForScheduler");

                entity.Property(e => e.ObjectPk).HasColumnName("ObjectPK");

                entity.Property(e => e.ObjectId).HasColumnName("ObjectID");
            });

            modelBuilder.Entity<Charge>(entity =>
            {
                entity.ToTable("Charge");

                entity.HasIndex(e => new { e.FileBusinessPartyId, e.Amount }, "IDX_ChargeAmount")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FileId, e.ChargeProcessTypeCdId, e.FileCreditAmount }, "IDX_ChargeFileCreditAmount")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileBusinessPartyId, "XIF342Charge")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileProcessId, "XIF349Charge")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileId, "XIF358Charge")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.EscrowChargeTemplateId, "esc_ix")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FileId, e.ClassTypeId }, "indCharge1IE")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PhysicalAddrId, "ixn_ChargePhysicalAddrID");

                entity.Property(e => e.ChargeId).HasColumnName("ChargeID");

                entity.Property(e => e.AdditionalDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.AnnualInterestRate).HasColumnType("decimal(9, 6)");

                entity.Property(e => e.BasisAmount).HasColumnType("money");

                entity.Property(e => e.BuyerChargeAmount).HasColumnType("money");

                entity.Property(e => e.BuyerChargeSection)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerCreditAmount).HasColumnType("money");

                entity.Property(e => e.BuyerCreditPaymentMethodTypeCdId).HasColumnName("BuyerCreditPaymentMethodTypeCdID");

                entity.Property(e => e.BuyerCreditSection)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerPaymentMethodTypeCdId).HasColumnName("BuyerPaymentMethodTypeCdID");

                entity.Property(e => e.ChargeCategoryTypeCdId).HasColumnName("ChargeCategoryTypeCdID");

                entity.Property(e => e.ChargeCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ChargeProcessTypeCdId).HasColumnName("ChargeProcessTypeCdID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.DefaultPaymentCategoryTypeCdId).HasColumnName("DefaultPaymentCategoryTypeCdID");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayLbuyer).HasColumnName("DisplayLBuyer");

                entity.Property(e => e.DisplayLseller).HasColumnName("DisplayLSeller");

                entity.Property(e => e.EscrowChargeTemplateId).HasColumnName("EscrowChargeTemplateID");

                entity.Property(e => e.ExchDisbTypeCdId).HasColumnName("ExchDisbTypeCdID");

                entity.Property(e => e.FileBusinessPartyId).HasColumnName("FileBusinessPartyID");

                entity.Property(e => e.FileChargeAmount).HasColumnType("money");

                entity.Property(e => e.FileCreditAmount).HasColumnType("money");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FilePaymentMethodTypeCdId).HasColumnName("FilePaymentMethodTypeCdID");

                entity.Property(e => e.FileProcessId).HasColumnName("FileProcessID");

                entity.Property(e => e.FromDate).HasColumnType("datetime");

                entity.Property(e => e.GfeAmount).HasColumnType("money");

                entity.Property(e => e.GfeEntryEditableFlag).HasDefaultValueSql("((0))");

                entity.Property(e => e.GfeEntryTypeCdId).HasColumnName("GfeEntryTypeCdID");

                entity.Property(e => e.GfeLenderDirEditableFlag).HasDefaultValueSql("((0))");

                entity.Property(e => e.GfeLenderDirectedFlag).HasDefaultValueSql("((1))");

                entity.Property(e => e.GfePobobflag)
                    .HasColumnName("GfePOBOBFlag")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InterestTypeCdId).HasColumnName("InterestTypeCdID");

                entity.Property(e => e.MonthlyChargeAmount).HasColumnType("money");

                entity.Property(e => e.PaidByBuyerAtClosing).HasColumnType("money");

                entity.Property(e => e.PaidByBuyerBeforeClosing).HasColumnType("money");

                entity.Property(e => e.PaidByOthersForBuyer).HasColumnType("money");

                entity.Property(e => e.PaidByOthersForBuyerPaymentMethodTypeCdId).HasColumnName("PaidByOthersForBuyerPaymentMethodTypeCdID");

                entity.Property(e => e.PaidByOthersForSeller).HasColumnType("money");

                entity.Property(e => e.PaidByOthersForSellerPaymentMethodTypeCdId).HasColumnName("PaidByOthersForSellerPaymentMethodTypeCdID");

                entity.Property(e => e.PaidBySellerAtClosing).HasColumnType("money");

                entity.Property(e => e.PaidBySellerBeforeClosing).HasColumnType("money");

                entity.Property(e => e.PartialPocamount)
                    .HasColumnType("money")
                    .HasColumnName("PartialPOCAmount");

                entity.Property(e => e.PartialPocflag)
                    .HasColumnName("PartialPOCFlag")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PartialPocpaymentMethodId).HasColumnName("PartialPOCPaymentMethodID");

                entity.Property(e => e.PayeeName)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentTermTypeCdId).HasColumnName("PaymentTermTypeCdID");

                entity.Property(e => e.PerDiemAmount).HasColumnType("decimal(19, 6)");

                entity.Property(e => e.PhysicalAddrId).HasColumnName("PhysicalAddrID");

                entity.Property(e => e.RoundedAmount).HasColumnType("money");

                entity.Property(e => e.SellerChargeAmount).HasColumnType("money");

                entity.Property(e => e.SellerChargeSection)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SellerCreditAmount).HasColumnType("money");

                entity.Property(e => e.SellerCreditPaymentMethodTypeCdId).HasColumnName("SellerCreditPaymentMethodTypeCdID");

                entity.Property(e => e.SellerCreditSection)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SellerPaymentMethodTypeCdId).HasColumnName("SellerPaymentMethodTypeCdID");

                entity.Property(e => e.SourceTypeCdId).HasColumnName("SourceTypeCdID");

                entity.Property(e => e.StatusTypeCdId).HasColumnName("StatusTypeCdID");

                entity.Property(e => e.ToDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.HasOne(d => d.ChargeCategoryTypeCd)
                    .WithMany(p => p.ChargeChargeCategoryTypeCds)
                    .HasForeignKey(d => d.ChargeCategoryTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conCharge21FK");

                entity.HasOne(d => d.ChargeProcessTypeCd)
                    .WithMany(p => p.ChargeChargeProcessTypeCds)
                    .HasForeignKey(d => d.ChargeProcessTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conCharge20FK");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.Charges)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conCharge8FK");

                entity.HasOne(d => d.CreationEmployee)
                    .WithMany(p => p.ChargeCreationEmployees)
                    .HasForeignKey(d => d.CreationEmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conCharge6FK");

                entity.HasOne(d => d.EscrowChargeTemplate)
                    .WithMany(p => p.Charges)
                    .HasForeignKey(d => d.EscrowChargeTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conCharge30FK");

                entity.HasOne(d => d.ExchDisbTypeCd)
                    .WithMany(p => p.ChargeExchDisbTypeCds)
                    .HasForeignKey(d => d.ExchDisbTypeCdId)
                    .HasConstraintName("conCharge2TypeCdDmtFK");

                entity.HasOne(d => d.FileBusinessParty)
                    .WithMany(p => p.Charges)
                    .HasForeignKey(d => d.FileBusinessPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conCharge4FK");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.Charges)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conCharge1FK");

                entity.HasOne(d => d.FileProcess)
                    .WithMany(p => p.Charges)
                    .HasForeignKey(d => d.FileProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conCharge31FK");

                entity.HasOne(d => d.InterestTypeCd)
                    .WithMany(p => p.ChargeInterestTypeCds)
                    .HasForeignKey(d => d.InterestTypeCdId)
                    .HasConstraintName("conCharge26FK");

                entity.HasOne(d => d.PaymentTermTypeCd)
                    .WithMany(p => p.ChargePaymentTermTypeCds)
                    .HasForeignKey(d => d.PaymentTermTypeCdId)
                    .HasConstraintName("conCharge28FK");

                entity.HasOne(d => d.PhysicalAddr)
                    .WithMany(p => p.Charges)
                    .HasForeignKey(d => d.PhysicalAddrId)
                    .HasConstraintName("conCharge2PhysicalAddrFK");

                entity.HasOne(d => d.SellerPaymentMethodTypeCd)
                    .WithMany(p => p.ChargeSellerPaymentMethodTypeCds)
                    .HasForeignKey(d => d.SellerPaymentMethodTypeCdId)
                    .HasConstraintName("conCharge23FK");

                entity.HasOne(d => d.SourceTypeCd)
                    .WithMany(p => p.ChargeSourceTypeCds)
                    .HasForeignKey(d => d.SourceTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conCharge29FK");

                entity.HasOne(d => d.StatusTypeCd)
                    .WithMany(p => p.ChargeStatusTypeCds)
                    .HasForeignKey(d => d.StatusTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conCharge27FK");

                entity.HasOne(d => d.TransactionTypeCd)
                    .WithMany(p => p.ChargeTransactionTypeCds)
                    .HasForeignKey(d => d.TransactionTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conCharge25FK");

                entity.HasOne(d => d.UpdatedEmployee)
                    .WithMany(p => p.ChargeUpdatedEmployees)
                    .HasForeignKey(d => d.UpdatedEmployeeId)
                    .HasConstraintName("conCharge7FK");
            });

            modelBuilder.Entity<ChargeAdditionalInfoXref>(entity =>
            {
                entity.HasKey(e => e.ChargeAdditionalInfoXrefId)
                    .IsClustered(false);

                entity.ToTable("ChargeAdditionalInfoXref");

                entity.HasIndex(e => e.ChargeId, "UK_ChargeAdditionalInfoXref")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor(90);

                entity.Property(e => e.ChargeAdditionalInfoXrefId).HasColumnName("ChargeAdditionalInfoXrefID");

                entity.Property(e => e.ChargeEntityTypeId).HasColumnName("ChargeEntityTypeID");

                entity.Property(e => e.ChargeId).HasColumnName("ChargeID");

                entity.Property(e => e.EntityFullName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ChargeEntityType)
                    .WithMany(p => p.ChargeAdditionalInfoXrefs)
                    .HasForeignKey(d => d.ChargeEntityTypeId)
                    .HasConstraintName("FK_ChargeAdditionalInfoXref_TypeCdId");

                entity.HasOne(d => d.Charge)
                    .WithOne(p => p.ChargeAdditionalInfoXref)
                    .HasForeignKey<ChargeAdditionalInfoXref>(d => d.ChargeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChargeAdditionalInfoXref_ChargeID");
            });

            modelBuilder.Entity<ChargeResequence>(entity =>
            {
                entity.ToTable("ChargeResequence");

                entity.HasIndex(e => e.ChargeId, "idxNCCResqChargeID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileId, "idxNCChrgReseqFileID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.GrpKeyField, "idxNCChrgReseqGrpKeyField")
                    .HasFillFactor(90);

                entity.Property(e => e.ChargeResequenceId).HasColumnName("ChargeResequenceID");

                entity.Property(e => e.ChargeId).HasColumnName("ChargeID");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.GrpKeyField)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastModifiedUserId).HasColumnName("LastModifiedUserID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.CreationUser)
                    .WithMany(p => p.ChargeResequenceCreationUsers)
                    .HasForeignKey(d => d.CreationUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conCrCResqCreationUserIDFK");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.ChargeResequences)
                    .HasForeignKey(d => d.FileId)
                    .HasConstraintName("FK_ChargeResequence_FileID");

                entity.HasOne(d => d.LastModifiedUser)
                    .WithMany(p => p.ChargeResequenceLastModifiedUsers)
                    .HasForeignKey(d => d.LastModifiedUserId)
                    .HasConstraintName("conCrCResqLastModifiedUserIDFK");
            });

            modelBuilder.Entity<ChargeTpcxref>(entity =>
            {
                entity.HasKey(e => e.ChargeTpcid)
                    .HasName("PK_Con_ChargeTPCXref");

                entity.ToTable("ChargeTPCXref");

                entity.HasIndex(e => e.ChargeId, "UQ__ChargeTPC_ChargId")
                    .IsUnique();

                entity.Property(e => e.ChargeTpcid).HasColumnName("ChargeTPCId");

                entity.Property(e => e.AdjustedAmount).HasColumnType("money");

                entity.Property(e => e.ChargeId).HasColumnName("ChargeID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.ShowOnCdpg3).HasColumnName("ShowOnCDPg3");

                entity.Property(e => e.TitlePremiumAmount).HasColumnType("money");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.HasOne(d => d.Charge)
                    .WithOne(p => p.ChargeTpcxref)
                    .HasForeignKey<ChargeTpcxref>(d => d.ChargeId)
                    .HasConstraintName("FK_Con_ChargeID");
            });

            modelBuilder.Entity<CheckDescriptionDetail>(entity =>
            {
                entity.ToTable("CheckDescriptionDetail");

                entity.Property(e => e.CheckDescriptionDetailId).HasColumnName("CheckDescriptionDetailID");

                entity.Property(e => e.CheckVoucherInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Description)
                    .HasMaxLength(45)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.CheckDescriptionDetails)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conCheckDetail1FK");
            });

            modelBuilder.Entity<CheckDisbursement>(entity =>
            {
                entity.ToTable("CheckDisbursement");

                entity.HasIndex(e => e.EventLogId, "XIF42CheckDisbursement")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DisbursementId, "XIF43CheckDisbursement")
                    .HasFillFactor(90);

                entity.Property(e => e.CheckDisbursementId).HasColumnName("CheckDisbursementID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.DisbursementId).HasColumnName("DisbursementID");

                entity.Property(e => e.ErrorMsg)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.EventLogId).HasColumnName("EventLogID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.CheckDisbursements)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("R_531");

                entity.HasOne(d => d.Disbursement)
                    .WithMany(p => p.CheckDisbursements)
                    .HasForeignKey(d => d.DisbursementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("R_272");
            });

            modelBuilder.Entity<CheckTemplate>(entity =>
            {
                entity.ToTable("CheckTemplate");

                entity.HasIndex(e => e.ObjectCd, "indCheckTemplate")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.CheckTemplateId).HasColumnName("CheckTemplateID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.LatexBodyFileName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.CheckTemplates)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conCheckTemplate1FK");
            });

            modelBuilder.Entity<ClassType>(entity =>
            {
                entity.ToTable("ClassType");

                entity.HasIndex(e => new { e.TableName, e.Name }, "indClassType2")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SuperClassTypeId, "indClassType3R")
                    .HasFillFactor(90);

                entity.Property(e => e.ClassTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("ClassTypeID");

                entity.Property(e => e.Name)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.SuperClassTypeId).HasColumnName("SuperClassTypeID");

                entity.Property(e => e.TableName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.SuperClassType)
                    .WithMany(p => p.InverseSuperClassType)
                    .HasForeignKey(d => d.SuperClassTypeId)
                    .HasConstraintName("conClassType2R");
            });

            modelBuilder.Entity<ClassTypeTypeCdXref>(entity =>
            {
                entity.HasKey(e => new { e.ClassTypeId, e.TypeCdId })
                    .HasName("XPKClassTypeTypeCdXref");

                entity.ToTable("ClassTypeTypeCdXref");

                entity.HasIndex(e => e.SeqNum, "IDXClassTypeTypeCdSeqNum")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TypeCdId, "XIF105ClassTypeTypeCdXref")
                    .HasFillFactor(90);

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.TypeCdId).HasColumnName("TypeCdID");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.ClassTypeTypeCdXrefs)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conClassTypeTypeCdXref1FK");

                entity.HasOne(d => d.TypeCd)
                    .WithMany(p => p.ClassTypeTypeCdXrefs)
                    .HasForeignKey(d => d.TypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conClassTypeTypeCdXref2FK");
            });

            modelBuilder.Entity<ClosingDisclosure>(entity =>
            {
                entity.ToTable("ClosingDisclosure");

                entity.HasIndex(e => e.FileId, "idxFileID")
                    .HasFillFactor(90);

                entity.Property(e => e.ClosingDisclosureId).HasColumnName("ClosingDisclosureID");

                entity.Property(e => e.AmountFinanced).HasColumnType("money");

                entity.Property(e => e.AnnualPercentageRate).HasColumnType("money");

                entity.Property(e => e.BalloonPayment).HasColumnType("money");

                entity.Property(e => e.CashToClose)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.CdloanTypeOtherDescr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CDLoanTypeOtherDescr");

                entity.Property(e => e.ClosingCosts)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.EscrowWaiverFee).HasColumnType("money");

                entity.Property(e => e.EscrowedItemName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.EscrowedPropertyCost).HasColumnType("money");

                entity.Property(e => e.EstimatedPropertyCostsOverFirstYear).HasColumnType("money");

                entity.Property(e => e.EstimatedTaxInsuranceAssesment).HasColumnType("money");

                entity.Property(e => e.FbproleTypeCdId).HasColumnName("FBPRoleTypeCdID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FinanceCharge).HasColumnType("money");

                entity.Property(e => e.InterestRate).HasColumnType("money");

                entity.Property(e => e.KeyFlagTypeCdIds)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("KeyFlagTypeCdIDs");

                entity.Property(e => e.LatePaymentAdditionalComment)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LatePaymentFeeDollar).HasColumnType("money");

                entity.Property(e => e.LatePaymentFeePercent).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.LatePaymentFeePercentTypeCdid).HasColumnName("LatePaymentFeePercentTypeCDID");

                entity.Property(e => e.LenderCreditsStatement)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.LoanProduct)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LoanProductTypeCdid).HasColumnName("LoanProductTypeCDID");

                entity.Property(e => e.LoanPurpose)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LoanPurposeTypeCdid).HasColumnName("LoanPurposeTypeCDID");

                entity.Property(e => e.LoanTermOther)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LoanTypeCdId).HasColumnName("LoanTypeCdID");

                entity.Property(e => e.MonthlyEscrowPayment)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NonEscrowedItemName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.NonEscrowedPropertyCost).HasColumnType("money");

                entity.Property(e => e.PrepaymentPenalty).HasColumnType("money");

                entity.Property(e => e.PrincipalAndInterest).HasColumnType("money");

                entity.Property(e => e.PrincipalAndInterestTermOther)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectedPaymentEstimateOther)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TotalInterestPercentage).HasColumnType("money");

                entity.Property(e => e.TotalPayments).HasColumnType("money");

                entity.Property(e => e.Tpadescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TPADescription");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.ClosingDisclosures)
                    .HasForeignKey(d => d.FileId)
                    .HasConstraintName("conClosingDisclosureFileIDFK");
            });

            modelBuilder.Entity<ClosingDisclosureEventLog>(entity =>
            {
                entity.ToTable("ClosingDisclosureEventLog");

                entity.HasIndex(e => new { e.FileId, e.EventId }, "IDX_ClosingDisclosureEventLog_FileID_EventID")
                    .HasFillFactor(90);

                entity.Property(e => e.ClosingDisclosureEventLogId)
                    .ValueGeneratedNever()
                    .HasColumnName("ClosingDisclosureEventLogID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.EventEndDate).HasColumnType("datetime");

                entity.Property(e => e.EventSourceClassTypeId).HasColumnName("EventSourceClassTypeID");

                entity.Property(e => e.EventSourceId).HasColumnName("EventSourceID");

                entity.Property(e => e.EventStartDate).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.UpdSourceClassTypeId).HasColumnName("UpdSourceClassTypeID");

                entity.Property(e => e.UpdSourceId).HasColumnName("UpdSourceID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.ClosingDisclosureEventLogClassTypes)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK2_ClosingDisclosureEventLog_ClassTypeID");

                entity.HasOne(d => d.ClosingDisclosureEventLogNavigation)
                    .WithOne(p => p.ClosingDisclosureEventLog)
                    .HasForeignKey<ClosingDisclosureEventLog>(d => d.ClosingDisclosureEventLogId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK1_ClosingDisclosureEventLog_EventLogKey");

                entity.HasOne(d => d.Event)
                    .WithMany(p => p.ClosingDisclosureEventLogs)
                    .HasForeignKey(d => d.EventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK4_ClosingDisclosureEventLog_EventId");

                entity.HasOne(d => d.EventSourceClassType)
                    .WithMany(p => p.ClosingDisclosureEventLogEventSourceClassTypes)
                    .HasForeignKey(d => d.EventSourceClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK5_ClosingDisclosureEventLog_EventSourceClassTypeID");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.ClosingDisclosureEventLogs)
                    .HasForeignKey(d => d.FileId)
                    .HasConstraintName("FK3_ClosingDisclosureEventLog_FileID");
            });

            modelBuilder.Entity<ClosingDisclosureGroupDesc>(entity =>
            {
                entity.ToTable("ClosingDisclosureGroupDesc");

                entity.HasIndex(e => new { e.ClosingDisclosureId, e.FileId }, "IDX_ClosingDisclosureGroupDesc_ClosingDisclosureID")
                    .HasFillFactor(90);

                entity.Property(e => e.ClosingDisclosureGroupDescId).HasColumnName("ClosingDisclosureGroupDescID");

                entity.Property(e => e.ChargeCategoryTypeCdId).HasColumnName("ChargeCategoryTypeCdID");

                entity.Property(e => e.ChargeProcessTypeCdId).HasColumnName("ChargeProcessTypeCdID");

                entity.Property(e => e.ClosingDisclosureId).HasColumnName("ClosingDisclosureID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.GroupDescr)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SectionType)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.HasOne(d => d.ClosingDisclosure)
                    .WithMany(p => p.ClosingDisclosureGroupDescs)
                    .HasForeignKey(d => d.ClosingDisclosureId)
                    .HasConstraintName("FK_ClosingDisclosureGroupDesc_ClosingDisclosureID");
            });

            modelBuilder.Entity<ClosingDisclosureLenderInfo>(entity =>
            {
                entity.HasKey(e => e.CdlenderInfoId)
                    .HasName("PK_ClosingDisclosureLenderInfo_CDLenderInfoID");

                entity.ToTable("ClosingDisclosureLenderInfo");

                entity.HasIndex(e => e.ClosingDisclosureId, "idx_ClosingDisclosureLenderInfo_ClosingDisclosureID")
                    .HasFillFactor(90);

                entity.Property(e => e.CdlenderInfoId).HasColumnName("CDLenderInfoID");

                entity.Property(e => e.Address)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ClosingDisclosureId).HasColumnName("ClosingDisclosureID");

                entity.Property(e => e.Contact)
                    .HasMaxLength(41)
                    .IsUnicode(false);

                entity.Property(e => e.ContactNmlsid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ContactNMLSID");

                entity.Property(e => e.ContactSlsid)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ContactSLSID");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Extension)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(41)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(81)
                    .IsUnicode(false);

                entity.Property(e => e.Nmlsid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NMLSID");

                entity.Property(e => e.Phone)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PhysicalAddrId).HasColumnName("PhysicalAddrID");

                entity.Property(e => e.RoleTypeCdId).HasColumnName("RoleTypeCdID");

                entity.Property(e => e.Slsid)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SLSID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClosingDisclosure)
                    .WithMany(p => p.ClosingDisclosureLenderInfos)
                    .HasForeignKey(d => d.ClosingDisclosureId)
                    .HasConstraintName("FK_ClosingDisclosureLenderInfo_ClosingDisclosureID");

                entity.HasOne(d => d.PhysicalAddr)
                    .WithMany(p => p.ClosingDisclosureLenderInfos)
                    .HasForeignKey(d => d.PhysicalAddrId)
                    .HasConstraintName("FK_ClosingDisclosureLenderInfo_PhysicalAddrID");

                entity.HasOne(d => d.RoleTypeCd)
                    .WithMany(p => p.ClosingDisclosureLenderInfos)
                    .HasForeignKey(d => d.RoleTypeCdId)
                    .HasConstraintName("FK_ClosingDisclosureLenderInfo_RoleTypeCdID");
            });

            modelBuilder.Entity<ClosingDisclosureReSequencedDatum>(entity =>
            {
                entity.HasKey(e => e.ClosingDisclosureReSequencedDataId)
                    .HasName("conClosingDisclosureReSequencedDataIDPk");

                entity.HasIndex(e => new { e.EntityTypeCdId, e.EntityId }, "idxCDReseqEntity")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ClosingDisclosureId, "idxClosingDisclosureID")
                    .HasFillFactor(90);

                entity.Property(e => e.ClosingDisclosureReSequencedDataId).HasColumnName("ClosingDisclosureReSequencedDataID");

                entity.Property(e => e.ClosingDisclosureId).HasColumnName("ClosingDisclosureID");

                entity.Property(e => e.EntityId).HasColumnName("EntityID");

                entity.Property(e => e.EntityTypeCdId).HasColumnName("EntityTypeCdID");

                entity.Property(e => e.LineNumber)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Section)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.SubSectionTypeCdId).HasColumnName("SubSectionTypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClosingDisclosure)
                    .WithMany(p => p.ClosingDisclosureReSequencedData)
                    .HasForeignKey(d => d.ClosingDisclosureId)
                    .HasConstraintName("conReSeqClosingDisclosureIDFK");
            });

            modelBuilder.Entity<ClosingDisclosureTransactionDatum>(entity =>
            {
                entity.HasKey(e => e.ClosingDisclosureTransactionDataId)
                    .HasName("conClosingDisclosureTransactionDataIDPk");

                entity.HasIndex(e => e.ClosingDisclosureId, "idxClosingDisclosureID")
                    .HasFillFactor(90);

                entity.Property(e => e.ClosingDisclosureTransactionDataId).HasColumnName("ClosingDisclosureTransactionDataID");

                entity.Property(e => e.AddrTypeCdId).HasColumnName("AddrTypeCdID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.ClosingDisclosureId).HasColumnName("ClosingDisclosureID");

                entity.Property(e => e.FileBusinessPartyId).HasColumnName("FileBusinessPartyID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClosingDisclosure)
                    .WithMany(p => p.ClosingDisclosureTransactionData)
                    .HasForeignKey(d => d.ClosingDisclosureId)
                    .HasConstraintName("conClosingDisclosureIDFK");

                entity.HasOne(d => d.FileBusinessParty)
                    .WithMany(p => p.ClosingDisclosureTransactionData)
                    .HasForeignKey(d => d.FileBusinessPartyId)
                    .HasConstraintName("conFileBusinessPartyIDFK");
            });

            modelBuilder.Entity<CoInsuranceLiability>(entity =>
            {
                entity.ToTable("CoInsuranceLiability");

                entity.Property(e => e.Faliability)
                    .HasColumnType("money")
                    .HasColumnName("FALiability");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.OverallLiability).HasColumnType("money");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.CoInsuranceLiabilities)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CoInsuranceLiabilityFileID");
            });

            modelBuilder.Entity<CoInsurancePolicy>(entity =>
            {
                entity.ToTable("CoInsurancePolicy");

                entity.HasIndex(e => e.FileId, "idx_CoInsurancePolicy_FileID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileProcessId, "idx_CoInsurancePolicy_FileProcessID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SeqNum, "idx_CoInsurancePolicy_SeqNum")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TitleEscrowInfoId, "idx_CoInsurancePolicy_TitleEscrowInfoID")
                    .HasFillFactor(90);

                entity.Property(e => e.CoInsurancePolicyId).HasColumnName("CoInsurancePolicyID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FileProcessId).HasColumnName("FileProcessID");

                entity.Property(e => e.TitleEscrowInfoId).HasColumnName("TitleEscrowInfoID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.FileProcess)
                    .WithMany(p => p.CoInsurancePolicies)
                    .HasForeignKey(d => d.FileProcessId)
                    .HasConstraintName("FK_conCoInsurancePolicyFileProcessID");

                entity.HasOne(d => d.TitleEscrowInfo)
                    .WithMany(p => p.CoInsurancePolicies)
                    .HasForeignKey(d => d.TitleEscrowInfoId)
                    .HasConstraintName("FK_conCoInsurancePolicyTitleEscrowInfoID");
            });

            modelBuilder.Entity<CoInsurancePolicyDocXref>(entity =>
            {
                entity.HasKey(e => e.CoInsurancePolicyId)
                    .HasName("PK_CoInsurancePolicyDocXrefPolicyID");

                entity.ToTable("CoInsurancePolicyDocXref");

                entity.Property(e => e.CoInsurancePolicyId)
                    .ValueGeneratedNever()
                    .HasColumnName("CoInsurancePolicyID");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.HasOne(d => d.CoInsurancePolicy)
                    .WithOne(p => p.CoInsurancePolicyDocXref)
                    .HasForeignKey<CoInsurancePolicyDocXref>(d => d.CoInsurancePolicyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CoInsurancePolicyDocXrefCoInsurancePolicyID");

                entity.HasOne(d => d.Document)
                    .WithMany(p => p.CoInsurancePolicyDocXrefs)
                    .HasForeignKey(d => new { d.DocId, d.FileId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CoInsurancePolicyDocXrefDocIDFileID");
            });

            modelBuilder.Entity<CoInsurancePolicyDocXrefDocPrep>(entity =>
            {
                entity.HasKey(e => e.CoInsurancePolicyId)
                    .HasName("PK_CoInsurancePolicyDocXref_DocPrepPolicyID");

                entity.ToTable("CoInsurancePolicyDocXref_DocPrep");

                entity.Property(e => e.CoInsurancePolicyId)
                    .ValueGeneratedNever()
                    .HasColumnName("CoInsurancePolicyID");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.HasOne(d => d.CoInsurancePolicy)
                    .WithOne(p => p.CoInsurancePolicyDocXrefDocPrep)
                    .HasForeignKey<CoInsurancePolicyDocXrefDocPrep>(d => d.CoInsurancePolicyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CoInsurancePolicyDocXref_DocPrepCoInsurancePolicyID");

                entity.HasOne(d => d.Doc)
                    .WithMany(p => p.CoInsurancePolicyDocXrefDocPreps)
                    .HasForeignKey(d => d.DocId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CoInsurancePolicyDocXref_DocPrepDocID");
            });

            modelBuilder.Entity<CoInsurancePolicyEstimate>(entity =>
            {
                entity.HasKey(e => e.CoInsuranceEstimateId);

                entity.ToTable("CoInsurancePolicyEstimate");

                entity.HasIndex(e => new { e.CoInsurancePolicyId, e.FileId }, "idx_CoInsurancePolicyEstimate_CoInsurancePolicyIDFileID")
                    .HasFillFactor(90);

                entity.Property(e => e.CoInsuranceEstimateId).HasColumnName("CoInsuranceEstimateID");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.CoInsurancePolicyId).HasColumnName("CoInsurancePolicyID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.Jsliability)
                    .HasColumnType("money")
                    .HasColumnName("JSLiability");

                entity.Property(e => e.LiabilityShare)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.PolicyLiability).HasColumnType("money");

                entity.Property(e => e.PolicyNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.BusOrg)
                    .WithMany(p => p.CoInsurancePolicyEstimates)
                    .HasForeignKey(d => d.BusOrgId)
                    .HasConstraintName("FK_conCoInsurancePolicyEstimateBusOrgID");

                entity.HasOne(d => d.CoInsurancePolicy)
                    .WithMany(p => p.CoInsurancePolicyEstimates)
                    .HasForeignKey(d => d.CoInsurancePolicyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_conCoInsurancePolicyEstimateCoInsurancePolicyID");
            });

            modelBuilder.Entity<CoInsurancePrincipalXref>(entity =>
            {
                entity.ToTable("CoInsurancePrincipalXref");

                entity.HasIndex(e => e.CoInsurancePolicyId, "idx_CoInsurancePrincipalXref_CoInsurancePolicyID")
                    .HasFillFactor(90);

                entity.Property(e => e.CoInsurancePolicyId).HasColumnName("CoInsurancePolicyID");

                entity.Property(e => e.PrincipalId).HasColumnName("PrincipalID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.CoInsurancePolicy)
                    .WithMany(p => p.CoInsurancePrincipalXrefs)
                    .HasForeignKey(d => d.CoInsurancePolicyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CoInsurancePrincipalXrefCoInsurancePolicyID");

                entity.HasOne(d => d.Principal)
                    .WithMany(p => p.CoInsurancePrincipalXrefs)
                    .HasForeignKey(d => d.PrincipalId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CoInsurancePrincipalXrefPrincipalID");
            });

            modelBuilder.Entity<CommentCode>(entity =>
            {
                entity.ToTable("CommentCode");

                entity.Property(e => e.CommentCodeId).HasColumnName("CommentCodeID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedUserId).HasColumnName("CreatedUserID");

                entity.Property(e => e.DeactivatedDate).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LastActivatedDate).HasColumnType("datetime");

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastModifiedUserId).HasColumnName("LastModifiedUserID");

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<CompletedChangesIdforScheduler>(entity =>
            {
                entity.HasKey(e => e.ChangeId)
                    .HasName("PK_CompletedChangesIDForScheduler_BigInt");

                entity.ToTable("CompletedChangesIDForScheduler");

                entity.Property(e => e.ChangeId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChangeID");
            });

            modelBuilder.Entity<ConfigurationSetting>(entity =>
            {
                entity.HasKey(e => new { e.Name, e.Section, e.Application })
                    .HasName("PK_ConfigurationSetting1");

                entity.ToTable("ConfigurationSetting");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Section)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Application)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Value).IsUnicode(false);
            });

            modelBuilder.Entity<ConfigurationSettingRepo>(entity =>
            {
                entity.HasKey(e => new { e.Name, e.Section, e.Application, e.Environment, e.Release })
                    .HasName("PK_ConfigurationSettingREPO1");

                entity.ToTable("ConfigurationSettingREPO");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Section)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Application)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Environment)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Release)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.Tfs)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TFS");

                entity.Property(e => e.Value).IsUnicode(false);
            });

            modelBuilder.Entity<ConnectionAuditLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ConnectionAuditLog");

                entity.HasIndex(e => e.CreatedDate, "IX_ConnectionAuditLog_CreatedDate")
                    .HasFillFactor(90);

                entity.Property(e => e.ConnectTime).HasColumnName("Connect_Time");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EncryptOption)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Encrypt_Option");

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Host_name");

                entity.Property(e => e.LoginName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Login_Name");

                entity.Property(e => e.ProgramName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Program_name");
            });

            modelBuilder.Entity<ConvertedArchiveFile>(entity =>
            {
                entity.HasIndex(e => e.FileId, "NCI_FileID_ConvertedArchiveFiles")
                    .HasFillFactor(90);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DearchiveDate).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");
            });

            modelBuilder.Entity<CopyDocsRequest>(entity =>
            {
                entity.ToTable("CopyDocsRequest");

                entity.HasIndex(e => new { e.StatusCd, e.DocTypeCdId }, "idxCopyDocsRequest2")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SourceFileId, "idxCopyDocsRequest3")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TargetFileId, "idxCopyDocsRequest4")
                    .HasFillFactor(90);

                entity.Property(e => e.CopyDocsRequestId).HasColumnName("CopyDocsRequestID");

                entity.Property(e => e.DocLine)
                    .HasMaxLength(7500)
                    .IsUnicode(false);

                entity.Property(e => e.DocTypeCdId).HasColumnName("DocTypeCdID");

                entity.Property(e => e.RequestedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SourceFileId).HasColumnName("SourceFileID");

                entity.Property(e => e.SourceFileNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.StatusCd).HasDefaultValueSql("((0))");

                entity.Property(e => e.TargetFileId).HasColumnName("TargetFileID");

                entity.Property(e => e.TargetFileNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.HasOne(d => d.DocTypeCd)
                    .WithMany(p => p.CopyDocsRequests)
                    .HasForeignKey(d => d.DocTypeCdId)
                    .HasConstraintName("FK_CopyDocsRequest_DocTypeCdID");

                entity.HasOne(d => d.SourceFile)
                    .WithMany(p => p.CopyDocsRequestSourceFiles)
                    .HasForeignKey(d => d.SourceFileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__CopyDocsR__Sourc__111A4D4A");

                entity.HasOne(d => d.TargetFile)
                    .WithMany(p => p.CopyDocsRequestTargetFiles)
                    .HasForeignKey(d => d.TargetFileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__CopyDocsR__Targe__120E7183");
            });

            modelBuilder.Entity<CopyDocsRequestHistory>(entity =>
            {
                entity.HasKey(e => e.CopyDocsRequestHistoryId)
                    .HasName("IDXCopyDocsRequestHistoryId")
                    .IsClustered(false);

                entity.ToTable("CopyDocsRequestHistory");

                entity.HasIndex(e => e.CopyDocsRequestId, "idxCopyDocsRequestHistory1")
                    .IsClustered();

                entity.Property(e => e.CopyDocsRequestHistoryId).HasColumnName("CopyDocsRequestHistoryID");

                entity.Property(e => e.CopyDocsRequestId).HasColumnName("CopyDocsRequestID");

                entity.Property(e => e.RequestEndTime).HasColumnType("datetime");

                entity.Property(e => e.RequestStartTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<CopyPhraseRequest>(entity =>
            {
                entity.ToTable("CopyPhraseRequest");

                entity.Property(e => e.CopyPhraseRequestId).HasColumnName("CopyPhraseRequestID");

                entity.Property(e => e.CopyDocsRequestId).HasColumnName("CopyDocsRequestID");

                entity.Property(e => e.RequestedTime).HasColumnType("datetime");

                entity.Property(e => e.SourceDocId).HasColumnName("SourceDocID");

                entity.Property(e => e.SourceDocPhrases).IsUnicode(false);

                entity.Property(e => e.SourceFileId).HasColumnName("SourceFileID");

                entity.Property(e => e.TargetDocId).HasColumnName("TargetDocID");

                entity.Property(e => e.TargetFileId).HasColumnName("TargetFileID");

                entity.HasOne(d => d.CopyDocsRequest)
                    .WithMany(p => p.CopyPhraseRequests)
                    .HasForeignKey(d => d.CopyDocsRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__CopyPhras__CopyD__13F6B9F5");
            });

            modelBuilder.Entity<CopyToDocPref>(entity =>
            {
                entity.ToTable("CopyToDocPref");

                entity.HasIndex(e => e.BusinessUnitId, "XIF98CopyToDocPref")
                    .HasFillFactor(90);

                entity.Property(e => e.CopyToDocPrefId).HasColumnName("CopyToDocPrefID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.DepositReceiptNote)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Other)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PrintOnSsflag).HasColumnName("PrintOnSSFlag");

                entity.Property(e => e.SettStmtDisclosure)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.TypeCdId).HasColumnName("TypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.CopyToDocPrefs)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("R_295");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.CopyToDocPrefs)
                    .HasForeignKey(d => d.ClassTypeId)
                    .HasConstraintName("conCopyToDocPref25FK");

                entity.HasOne(d => d.TypeCd)
                    .WithMany(p => p.CopyToDocPrefs)
                    .HasForeignKey(d => d.TypeCdId)
                    .HasConstraintName("conCopyToDocPref26FK");
            });

            modelBuilder.Entity<CorpCounter>(entity =>
            {
                entity.HasKey(e => e.CorpId)
                    .HasName("IDXCorpCounterCorpIdPK");

                entity.ToTable("CorpCounter");

                entity.Property(e => e.CorpId).ValueGeneratedNever();
            });

            modelBuilder.Entity<CorpCpuproductionOffice>(entity =>
            {
                entity.HasKey(e => e.CpuproductionOfficeId);

                entity.ToTable("CorpCPUProductionOffice");

                entity.Property(e => e.CpuproductionOfficeId)
                    .ValueGeneratedNever()
                    .HasColumnName("CPUProductionOfficeID");

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.CreatedUserId).HasColumnName("CreatedUserID");

                entity.Property(e => e.DeliveryAddress)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryMethodTypeCdId).HasColumnName("DeliveryMethodTypeCdID");

                entity.Property(e => e.ModifiedDateTime).HasColumnType("datetime");

                entity.Property(e => e.ModifiedUserId).HasColumnName("ModifiedUserID");

                entity.HasOne(d => d.CpuproductionOffice)
                    .WithOne(p => p.CorpCpuproductionOffice)
                    .HasForeignKey<CorpCpuproductionOffice>(d => d.CpuproductionOfficeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CorpCPUProductionOffice_BusinessUnit");

                entity.HasOne(d => d.CreatedUser)
                    .WithMany(p => p.CorpCpuproductionOfficeCreatedUsers)
                    .HasForeignKey(d => d.CreatedUserId)
                    .HasConstraintName("FK_CorpCPUProductionOffice_Employee1");

                entity.HasOne(d => d.DeliveryMethodTypeCd)
                    .WithMany(p => p.CorpCpuproductionOffices)
                    .HasForeignKey(d => d.DeliveryMethodTypeCdId)
                    .HasConstraintName("FK_CorpCPUProductionOffice_TypeCdDmt");

                entity.HasOne(d => d.ModifiedUser)
                    .WithMany(p => p.CorpCpuproductionOfficeModifiedUsers)
                    .HasForeignKey(d => d.ModifiedUserId)
                    .HasConstraintName("FK_CorpCPUProductionOffice_Employee2");
            });

            modelBuilder.Entity<CorpEbusInterfaceFormatXref>(entity =>
            {
                entity.HasKey(e => new { e.CorporateBusOrgId, e.EbusinessTypeCdId })
                    .HasName("XPKCorpEBusInterfaceFormatXref");

                entity.ToTable("CorpEBusInterfaceFormatXref");

                entity.Property(e => e.EbusinessTypeCdId).HasColumnName("EBusinessTypeCdId");

                entity.Property(e => e.EbusFormatTypeCdId).HasColumnName("EBusFormatTypeCdId");

                entity.Property(e => e.FeeAmount).HasColumnType("money");

                entity.HasOne(d => d.CorporateBusOrg)
                    .WithMany(p => p.CorpEbusInterfaceFormatXrefs)
                    .HasForeignKey(d => d.CorporateBusOrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conCorpEBusInterfaceFormatXref1FK");

                entity.HasOne(d => d.EbusinessTypeCd)
                    .WithMany(p => p.CorpEbusInterfaceFormatXrefs)
                    .HasForeignKey(d => d.EbusinessTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conCorpEBusInterfaceFormatXref2FK");
            });

            modelBuilder.Entity<CorpHudfileType>(entity =>
            {
                entity.HasKey(e => e.CorpId);

                entity.ToTable("CorpHUDFileType");

                entity.Property(e => e.CorpId)
                    .ValueGeneratedNever()
                    .HasColumnName("CorpID");

                entity.Property(e => e.HudfileType)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("HUDFileType");
            });

            modelBuilder.Entity<CorporateBusOrg>(entity =>
            {
                entity.ToTable("CorporateBusOrg");

                entity.Property(e => e.CorporateBusOrgId).HasColumnName("CorporateBusOrgID");

                entity.Property(e => e.AddressBookId).HasColumnName("AddressBookID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Name)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.StatusCd).HasColumnName("StatusCD");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.CorporateBusOrgs)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conCorporateBusOrg11FK");

                entity.HasMany(d => d.BusinessUnits)
                    .WithMany(p => p.CorporateBusOrgs)
                    .UsingEntity<Dictionary<string, object>>(
                        "CorporateBusOrgBusinessUnitXref",
                        l => l.HasOne<BusinessUnit>().WithMany().HasForeignKey("BusinessUnitId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conCorporateBusOrgBusinessUnitXref2FK"),
                        r => r.HasOne<CorporateBusOrg>().WithMany().HasForeignKey("CorporateBusOrgId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conCorporateBusOrgBusinessUnitXref1FK"),
                        j =>
                        {
                            j.HasKey("CorporateBusOrgId", "BusinessUnitId").HasName("idx_CorporateBusOrgBusinessUnitXref");

                            j.ToTable("CorporateBusOrgBusinessUnitXref");
                        });
            });

            modelBuilder.Entity<CountyFtpSiteXref>(entity =>
            {
                entity.HasKey(e => e.GeoRegionId);

                entity.ToTable("CountyFtpSiteXref");

                entity.HasIndex(e => new { e.State, e.County }, "indCountyFtpSiteXref2")
                    .IsUnique();

                entity.Property(e => e.GeoRegionId).ValueGeneratedNever();

                entity.Property(e => e.County)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FtpSubPath)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.FtpSite)
                    .WithMany(p => p.CountyFtpSiteXrefs)
                    .HasForeignKey(d => d.FtpSiteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conCountyFtpSiteXref1Fk");
            });

            modelBuilder.Entity<CountyInfo>(entity =>
            {
                entity.ToTable("CountyInfo");

                entity.HasIndex(e => new { e.ClassTypeId, e.GeoRegionId }, "indCountyInfo2")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.GeoRegionId, "indCountyInfo4Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DefaultOwnerOfficeId, "indCountyInfo5Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DefaultProductionOfficeId, "indCountyInfo6Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.CountyInfoId).HasColumnName("CountyInfoID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.DefaultOwnerOfficeId).HasColumnName("DefaultOwnerOfficeID");

                entity.Property(e => e.DefaultProductionOfficeId).HasColumnName("DefaultProductionOfficeID");

                entity.Property(e => e.GeoRegionId).HasColumnName("GeoRegionID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.CountyInfos)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conCountyInfo2Fk");

                entity.HasOne(d => d.DefaultOwnerOffice)
                    .WithMany(p => p.CountyInfoDefaultOwnerOffices)
                    .HasForeignKey(d => d.DefaultOwnerOfficeId)
                    .HasConstraintName("conCountyInfo5Fk");

                entity.HasOne(d => d.DefaultProductionOffice)
                    .WithMany(p => p.CountyInfoDefaultProductionOffices)
                    .HasForeignKey(d => d.DefaultProductionOfficeId)
                    .HasConstraintName("conCountyInfo4Fk");

                entity.HasOne(d => d.GeoRegion)
                    .WithMany(p => p.CountyInfos)
                    .HasForeignKey(d => d.GeoRegionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conCountyInfo3Fk");

                entity.HasMany(d => d.Phrases)
                    .WithMany(p => p.CountyInfos)
                    .UsingEntity<Dictionary<string, object>>(
                        "CountyInfoPhraseXref",
                        l => l.HasOne<Phrase>().WithMany().HasForeignKey("PhraseId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conCountyInfoPhraseInfo3Fk"),
                        r => r.HasOne<CountyInfo>().WithMany().HasForeignKey("CountyInfoId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conCountyInfoPhraseXref2FK"),
                        j =>
                        {
                            j.HasKey("CountyInfoId", "PhraseId").HasName("conCountyInfoPhraseXref1Pk");

                            j.ToTable("CountyInfoPhraseXref");

                            j.HasIndex(new[] { "PhraseId" }, "indCountyInfoPhraseXref2Fk").HasFillFactor(90);

                            j.IndexerProperty<int>("CountyInfoId").HasColumnName("CountyInfoID");

                            j.IndexerProperty<int>("PhraseId").HasColumnName("PhraseID");
                        });
            });

            modelBuilder.Entity<CountyInfoPhraseXrefDocPrep>(entity =>
            {
                entity.HasKey(e => new { e.CountyInfoId, e.PhraseId })
                    .HasName("conCountyInfoPhraseXref_DocPrep1Pk");

                entity.ToTable("CountyInfoPhraseXref_DocPrep");

                entity.HasIndex(e => e.PhraseId, "IDX_CountyInfoPhraseXref_DocPrep_Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.CountyInfoId).HasColumnName("CountyInfoID");

                entity.Property(e => e.PhraseId).HasColumnName("PhraseID");

                entity.HasOne(d => d.CountyInfo)
                    .WithMany(p => p.CountyInfoPhraseXrefDocPreps)
                    .HasForeignKey(d => d.CountyInfoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conCountyInfoPhraseXref_DocPrep2FK");
            });

            modelBuilder.Entity<CustomDictionary>(entity =>
            {
                entity.HasKey(e => e.WordId);

                entity.ToTable("CustomDictionary");

                entity.Property(e => e.WordId).HasColumnName("WordID");

                entity.Property(e => e.Word)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CustomDictionaryRegionXref>(entity =>
            {
                entity.HasKey(e => new { e.RegionId, e.WordId });

                entity.ToTable("CustomDictionaryRegionXref");

                entity.Property(e => e.RegionId).HasColumnName("RegionID");

                entity.Property(e => e.WordId).HasColumnName("WordID");
            });

            modelBuilder.Entity<CustomaryServiceFee>(entity =>
            {
                entity.ToTable("CustomaryServiceFee");

                entity.HasIndex(e => new { e.TypeCdId, e.FeeId }, "indCustServiceFee2")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FeeId, "indCustServiceFee4Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.CustomaryServiceFeeId).HasColumnName("CustomaryServiceFeeID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.FeeId).HasColumnName("FeeID");

                entity.Property(e => e.TypeCdId).HasColumnName("TypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.CustomaryServiceFees)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conCustServFee3Fk");

                entity.HasOne(d => d.Fee)
                    .WithMany(p => p.CustomaryServiceFees)
                    .HasForeignKey(d => d.FeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conCustServFee2Fk");

                entity.HasOne(d => d.TypeCd)
                    .WithMany(p => p.CustomaryServiceFees)
                    .HasForeignKey(d => d.TypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conCustSrvcFee4Fk");
            });

            modelBuilder.Entity<CustomerOptionDocumentTemplate>(entity =>
            {
                entity.ToTable("CustomerOptionDocumentTemplate");

                entity.Property(e => e.CustomerOptionDocumentTemplateId).HasColumnName("CustomerOptionDocumentTemplateID");

                entity.Property(e => e.BusOrgCustomerOptionId).HasColumnName("BusOrgCustomerOptionID");

                entity.Property(e => e.CustomerOptionDocTypeCdId).HasColumnName("CustomerOptionDocTypeCdID");

                entity.Property(e => e.StatusCdId).HasColumnName("StatusCdID");

                entity.Property(e => e.TemplateId).HasColumnName("TemplateID");

                entity.Property(e => e.WorkQueueTriggerId).HasColumnName("WorkQueueTriggerID");

                entity.HasOne(d => d.BusOrgCustomerOption)
                    .WithMany(p => p.CustomerOptionDocumentTemplates)
                    .HasForeignKey(d => d.BusOrgCustomerOptionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CustomerOptionDocumentTemplate_BusOrgCustomerOptionID");

                entity.HasOne(d => d.CustomerOptionDocTypeCd)
                    .WithMany(p => p.CustomerOptionDocumentTemplateCustomerOptionDocTypeCds)
                    .HasForeignKey(d => d.CustomerOptionDocTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CustomerOptionDocumentTemplate_CustomerOptionDocTypeCdID");

                entity.HasOne(d => d.StatusCd)
                    .WithMany(p => p.CustomerOptionDocumentTemplateStatusCds)
                    .HasForeignKey(d => d.StatusCdId)
                    .HasConstraintName("FK_CustomerOptionDocumentTemplate_StatusCdID");

                entity.HasOne(d => d.WorkQueueTrigger)
                    .WithMany(p => p.CustomerOptionDocumentTemplates)
                    .HasForeignKey(d => d.WorkQueueTriggerId)
                    .HasConstraintName("FK_CustomerOptionDocumentTemplate_WorkQueueTriggerID");
            });

            modelBuilder.Entity<CustomerOrder>(entity =>
            {
                entity.HasKey(e => e.OrderId)
                    .HasName("conCustomerOrder1Pk");

                entity.ToTable("CustomerOrder");

                entity.HasIndex(e => e.SourceApplId, "indCustomerOrder2Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.FirstSourceBusinessPartyName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OrderOriginatorId).HasColumnName("OrderOriginatorID");

                entity.Property(e => e.RefNum)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RelatedTransaction)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.ReverseEntity)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.SecondOrderOriginatorId).HasColumnName("SecondOrderOriginatorID");

                entity.Property(e => e.SecondSourceApplId).HasColumnName("SecondSourceApplID");

                entity.Property(e => e.SecondSourceApplQueueName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SecondSourceBusinessPartyName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SourceApplId).HasColumnName("SourceApplID");

                entity.Property(e => e.SourceApplQueueName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.CustomerOrders)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conCustOrder2Fk");

                entity.HasOne(d => d.OrderOriginator)
                    .WithMany(p => p.CustomerOrderOrderOriginators)
                    .HasForeignKey(d => d.OrderOriginatorId)
                    .HasConstraintName("conFKOOApplID");

                entity.HasOne(d => d.SecondSourceAppl)
                    .WithMany(p => p.CustomerOrderSecondSourceAppls)
                    .HasForeignKey(d => d.SecondSourceApplId)
                    .HasConstraintName("FK__CustomerO__Secon__31871CDC");

                entity.HasOne(d => d.SourceAppl)
                    .WithMany(p => p.CustomerOrderSourceAppls)
                    .HasForeignKey(d => d.SourceApplId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conCustOrder5Fk");
            });

            modelBuilder.Entity<CustomerPreference>(entity =>
            {
                entity.HasKey(e => e.PreferenceId)
                    .HasName("PK__Customer__E228496F32F1C0ED");

                entity.ToTable("CustomerPreference");

                entity.HasIndex(e => e.UserId, "UQ__Customer__1788CC4D08641BD0")
                    .IsUnique();

                entity.Property(e => e.AdvancedPreference).IsUnicode(false);

                entity.Property(e => e.BasicPreference).IsUnicode(false);

                entity.HasOne(d => d.User)
                    .WithOne(p => p.CustomerPreference)
                    .HasForeignKey<CustomerPreference>(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__CustomerP__UserI__327B4115");
            });

            modelBuilder.Entity<Dalmap>(entity =>
            {
                entity.HasKey(e => e.SpName)
                    .HasName("conDALMap1Pk");

                entity.ToTable("DALMap");

                entity.Property(e => e.SpName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SP_Name")
                    .IsFixedLength();

                entity.Property(e => e.Connection)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<DataElementDmt>(entity =>
            {
                entity.HasKey(e => e.DataElementId)
                    .HasName("conDataElementDmt1Pk");

                entity.ToTable("DataElementDmt");

                entity.HasIndex(e => e.ObjectCd, "UniqueObjectCds")
                    .IsUnique();

                entity.HasIndex(e => e.ObjectCd, "indDataElementDmt11")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ClassTypeId, e.DataElementGrpId, e.ObjectCd }, "indDataElementDmt2")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DataElementGrpId, "indDataElementDmt6Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.DataElementId).HasColumnName("DataElementID");

                entity.Property(e => e.AlignmentTypeCdId).HasColumnName("AlignmentTypeCdID");

                entity.Property(e => e.CatalogDescr)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DataElementGrpId).HasColumnName("DataElementGrpID");

                entity.Property(e => e.DataElementTypeCdId).HasColumnName("DataElementTypeCdID");

                entity.Property(e => e.Descr)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DomainTypeCdId).HasColumnName("DomainTypeCdID");

                entity.Property(e => e.ElementSeparatorTypeCdId).HasColumnName("ElementSeparatorTypeCdID");

                entity.Property(e => e.FieldName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FormatTypeCdId).HasColumnName("FormatTypeCdID");

                entity.Property(e => e.GridName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LinqDataCollectionType).IsUnicode(false);

                entity.Property(e => e.LinqDataType).IsUnicode(false);

                entity.Property(e => e.LinqExpression).IsUnicode(false);

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.PathName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PictureTypeCdId).HasColumnName("PictureTypeCdID");

                entity.Property(e => e.PrintCaseTypeCdId).HasColumnName("PrintCaseTypeCdID");

                entity.Property(e => e.ReadOnlyIndicator).HasDefaultValueSql("((0))");

                entity.Property(e => e.ScreenName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TabName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.ValueFormat)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.AlignmentTypeCd)
                    .WithMany(p => p.DataElementDmtAlignmentTypeCds)
                    .HasForeignKey(d => d.AlignmentTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conDataElement6Fk");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.DataElementDmts)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conDataElement4Fk");

                entity.HasOne(d => d.DataElementGrp)
                    .WithMany(p => p.DataElementDmts)
                    .HasForeignKey(d => d.DataElementGrpId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conDataElementDmt2Fk");

                entity.HasOne(d => d.DataElementTypeCd)
                    .WithMany(p => p.DataElementDmtDataElementTypeCds)
                    .HasForeignKey(d => d.DataElementTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conDataElementDmt3Fk");

                entity.HasOne(d => d.DomainTypeCd)
                    .WithMany(p => p.DataElementDmtDomainTypeCds)
                    .HasForeignKey(d => d.DomainTypeCdId)
                    .HasConstraintName("conDataElement11Fk");

                entity.HasOne(d => d.ElementSeparatorTypeCd)
                    .WithMany(p => p.DataElementDmtElementSeparatorTypeCds)
                    .HasForeignKey(d => d.ElementSeparatorTypeCdId)
                    .HasConstraintName("conDataElementDmt9Fk");

                entity.HasOne(d => d.FormatTypeCd)
                    .WithMany(p => p.DataElementDmtFormatTypeCds)
                    .HasForeignKey(d => d.FormatTypeCdId)
                    .HasConstraintName("conDataElementDmt7Fk");

                entity.HasOne(d => d.PictureTypeCd)
                    .WithMany(p => p.DataElementDmtPictureTypeCds)
                    .HasForeignKey(d => d.PictureTypeCdId)
                    .HasConstraintName("conDataElementDmt8Fk");

                entity.HasOne(d => d.PrintCaseTypeCd)
                    .WithMany(p => p.DataElementDmtPrintCaseTypeCds)
                    .HasForeignKey(d => d.PrintCaseTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conDataElement5Fk");
            });

            modelBuilder.Entity<DataElementGrp>(entity =>
            {
                entity.ToTable("DataElementGrp");

                entity.HasIndex(e => new { e.ClassTypeId, e.Name }, "indDataElementGrp2")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ClassTypeId, e.ObjectCd }, "indDataElementGrp4")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.DataElementGrpId).HasColumnName("DataElementGrpID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.DataElementGrps)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conDataElementGrp2Fk");
            });

            modelBuilder.Entity<DataElementIndexType>(entity =>
            {
                entity.ToTable("DataElementIndexType");

                entity.HasIndex(e => new { e.ClassTypeId, e.IndexTypeHeaderId, e.DataElementId, e.SeqNum }, "indDataElementIndexType2")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DataElementId, "indDataElementIndexType3Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.IndexTypeHeaderId, "indDataElementIndexType4Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.DataElementIndexTypeId).HasColumnName("DataElementIndexTypeID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.DataElementId).HasColumnName("DataElementID");

                entity.Property(e => e.IndexTypeHeaderId).HasColumnName("IndexTypeHeaderID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.DataElementIndexTypes)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conDataElementIndexType2Fk");

                entity.HasOne(d => d.DataElement)
                    .WithMany(p => p.DataElementIndexTypes)
                    .HasForeignKey(d => d.DataElementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conDataElemIndexType4Fk");

                entity.HasOne(d => d.IndexTypeHeader)
                    .WithMany(p => p.DataElementIndexTypes)
                    .HasForeignKey(d => d.IndexTypeHeaderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conDataElemIndexType3Fk");
            });

            modelBuilder.Entity<DateDownAutoNumber>(entity =>
            {
                entity.ToTable("DateDownAutoNumber");

                entity.Property(e => e.DateDownAutoNumberId).HasColumnName("DateDownAutoNumberID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<DbschemaVersion>(entity =>
            {
                entity.HasKey(e => new { e.Version, e.BuildDate });

                entity.ToTable("DBSchemaVersion");

                entity.Property(e => e.Version)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.BuildDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Dbversion>(entity =>
            {
                entity.HasKey(e => new { e.Version, e.BuildDate });

                entity.ToTable("DBVersion");

                entity.Property(e => e.Version)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.BuildDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<DebugLog>(entity =>
            {
                entity.HasKey(e => e.RowId);

                entity.ToTable("DebugLog");

                entity.HasIndex(e => e.StoredProcName, "idxDebugLog_1")
                    .HasFillFactor(90);

                entity.Property(e => e.RowId).HasColumnName("RowID");

                entity.Property(e => e.DebugInfo)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.SnapshotTime).HasColumnType("datetime");

                entity.Property(e => e.StoredProcName).HasMaxLength(128);
            });

            modelBuilder.Entity<DeliveryEventLog>(entity =>
            {
                entity.HasKey(e => new { e.DeliveryEventLogId, e.FileId })
                    .HasName("PK_DeliveryEventLogXKeyID");

                entity.ToTable("DeliveryEventLog");

                entity.HasIndex(e => new { e.FileId, e.EventId }, "IDXDeliveryEventLogFileId")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FileId, e.EventStartDate }, "IX_DeliveryEventLog")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.EventStartDate, "IX_DeliveryEventLog_EventStartDate")
                    .HasFillFactor(90);

                entity.Property(e => e.DeliveryEventLogId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DeliveryEventLogID");

                entity.Property(e => e.FileId)
                    .HasColumnName("FileID")
                    .HasDefaultValueSql("((1000))");

                entity.Property(e => e.ApplContext)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ApplContextTypeCdId).HasColumnName("ApplContextTypeCdID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(2500)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryDocuments)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryServer)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.DocDeliveryId)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("DocDeliveryID");

                entity.Property(e => e.ErrorMsg)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.EventEndDate).HasColumnType("datetime");

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.EventStartDate).HasColumnType("datetime");

                entity.Property(e => e.Iisserver)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("IISServer");

                entity.Property(e => e.Recipients)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Sender)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.DeliveryEventLogs)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk1DeliveryEventLog");

                entity.HasOne(d => d.Event)
                    .WithMany(p => p.DeliveryEventLogs)
                    .HasForeignKey(d => d.EventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk3DeliveryEventLog");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.DeliveryEventLogs)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk2DeliveryEventLog");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.DeliveryEventLogs)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk4DeliveryEventLog");
            });

            modelBuilder.Entity<DepositAdjustmentComment>(entity =>
            {
                entity.HasKey(e => e.InEscrowId)
                    .HasName("con_DepositAdjustmentComment_Pk");

                entity.ToTable("DepositAdjustmentComment");

                entity.Property(e => e.InEscrowId)
                    .ValueGeneratedNever()
                    .HasColumnName("InEscrowID");

                entity.Property(e => e.AmountRecoverable).HasColumnType("money");

                entity.Property(e => e.CauseLossTypeCdId).HasColumnName("CauseLossTypeCdID");

                entity.Property(e => e.CreatedUserId).HasColumnName("CreatedUserID");

                entity.Property(e => e.DepositAmount).HasColumnType("money");

                entity.Property(e => e.LossExplanation)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.LossNotRecoverExplanation)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.OtherCauseExplanation)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.OtherTypeExplanation)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessTypeCdId).HasColumnName("ProcessTypeCdID");

                entity.Property(e => e.PropertyTypeCdId).HasColumnName("PropertyTypeCdID");

                entity.Property(e => e.TypeLossTypeCdId).HasColumnName("TypeLossTypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.CauseLossTypeCd)
                    .WithMany(p => p.DepositAdjustmentCommentCauseLossTypeCds)
                    .HasForeignKey(d => d.CauseLossTypeCdId)
                    .HasConstraintName("FK_DepositAdjustmentCmt_CauseLossTypeCdID");

                entity.HasOne(d => d.InEscrow)
                    .WithOne(p => p.DepositAdjustmentComment)
                    .HasForeignKey<DepositAdjustmentComment>(d => d.InEscrowId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_InEscrowDeposit_FK");

                entity.HasOne(d => d.ProcessTypeCd)
                    .WithMany(p => p.DepositAdjustmentCommentProcessTypeCds)
                    .HasForeignKey(d => d.ProcessTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_DAC_TypeCdDMT_FK");

                entity.HasOne(d => d.TypeLossTypeCd)
                    .WithMany(p => p.DepositAdjustmentCommentTypeLossTypeCds)
                    .HasForeignKey(d => d.TypeLossTypeCdId)
                    .HasConstraintName("FK_DepositAdjustmentCmt_TypeLossTypeCdID");
            });

            modelBuilder.Entity<DepositList>(entity =>
            {
                entity.HasKey(e => e.DepositListId)
                    .HasName("DepositList_PK")
                    .IsClustered(false);

                entity.ToTable("DepositList");

                entity.HasIndex(e => new { e.BusinessUnitId, e.BankAcctId }, "CIDX_DepositList")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ExtractId, "idx_DepositList_ExtractID")
                    .HasFillFactor(90);

                entity.Property(e => e.DepositListId).HasColumnName("DepositListID");

                entity.Property(e => e.BankAcctId).HasColumnName("BankAcctID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DepositListNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DepositListStatusTypecdId).HasColumnName("DepositListStatusTypecdID");

                entity.Property(e => e.DepositTotal).HasColumnType("money");

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.StatusChangeDate).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.HasOne(d => d.BankAcct)
                    .WithMany(p => p.DepositLists)
                    .HasForeignKey(d => d.BankAcctId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conDepositListXref2FK");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.DepositLists)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conDepositListXref1FK");

                entity.HasOne(d => d.DepositListStatusTypecd)
                    .WithMany(p => p.DepositLists)
                    .HasForeignKey(d => d.DepositListStatusTypecdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conDepositListref4FK");

                entity.HasOne(d => d.Extract)
                    .WithMany(p => p.DepositLists)
                    .HasForeignKey(d => d.ExtractId)
                    .HasConstraintName("conDepositListref5FK");

                entity.HasOne(d => d.UpdatedEmployee)
                    .WithMany(p => p.DepositLists)
                    .HasForeignKey(d => d.UpdatedEmployeeId)
                    .HasConstraintName("conDepositListref3FK");
            });

            modelBuilder.Entity<DepositedReceipt>(entity =>
            {
                entity.HasKey(e => e.InEscrowId)
                    .HasName("PK_DepositedReceipt_InEscrowID");

                entity.ToTable("DepositedReceipt");

                entity.Property(e => e.InEscrowId)
                    .ValueGeneratedNever()
                    .HasColumnName("InEscrowID");

                entity.Property(e => e.ClearedSeqNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DepositAmount).HasColumnType("money");

                entity.Property(e => e.DepositStatusCdId).HasColumnName("DepositStatusCdID");

                entity.Property(e => e.DepositedDate).HasColumnType("datetime");

                entity.Property(e => e.Fsbflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FSBFlag")
                    .IsFixedLength();

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.DepositStatusCd)
                    .WithMany(p => p.DepositedReceipts)
                    .HasForeignKey(d => d.DepositStatusCdId)
                    .HasConstraintName("FK_DepositedReceipt_DepositStatusCdID");

                entity.HasOne(d => d.InEscrow)
                    .WithOne(p => p.DepositedReceipt)
                    .HasForeignKey<DepositedReceipt>(d => d.InEscrowId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DepositedReceipt_InEscrowID");
            });

            modelBuilder.Entity<DfssearchLog>(entity =>
            {
                entity.HasKey(e => e.SearchLogId)
                    .HasName("PK__DFSSearc__B5E65730EC0CD861");

                entity.ToTable("DFSSearchLog");

                entity.HasIndex(e => new { e.StatusCd, e.HostIp }, "IDX_DFS_SearchLog_2")
                    .HasFillFactor(90);

                entity.Property(e => e.SearchLogId).HasColumnName("SearchLogID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CompletedTime).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.HostIp)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("HostIP");

                entity.Property(e => e.ObjectName).HasMaxLength(128);

                entity.Property(e => e.ObjectUpdTs).HasColumnName("ObjectUpdTS");

                entity.Property(e => e.OtherInfo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OtherInfo1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RequestedTime).HasColumnType("datetime");

                entity.Property(e => e.StatusCd).HasDefaultValueSql("((0))");

                entity.Property(e => e.SubmittedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<DfssearchLogProcessingSwitch>(entity =>
            {
                entity.HasKey(e => e.IsSwitchOn)
                    .HasName("IDXDFSSearchLogProcessingSwitchPK");

                entity.ToTable("DFSSearchLogProcessingSwitch");

                entity.Property(e => e.IsSwitchOn).HasColumnName("IsSwitchON");
            });

            modelBuilder.Entity<DipstatusFbpxref>(entity =>
            {
                entity.HasKey(e => e.FileBusinessPartyId);

                entity.ToTable("DIPStatusFBPXRef");

                entity.HasIndex(e => e.FileBusinessPartyId, "Ind_FileBusinessPartyID_DIPStatusFBPXRef")
                    .HasFillFactor(90);

                entity.Property(e => e.FileBusinessPartyId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileBusinessPartyID");

                entity.Property(e => e.AgentLicNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Dipstatus).HasColumnName("DIPStatus");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.FileBusinessParty)
                    .WithOne(p => p.DipstatusFbpxref)
                    .HasForeignKey<DipstatusFbpxref>(d => d.FileBusinessPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DIPStatusFBPXRef_FileBusinessParty");
            });

            modelBuilder.Entity<Disbursement>(entity =>
            {
                entity.ToTable("Disbursement");

                entity.HasIndex(e => e.DisbursementMethodTypeCdId, "DIS_DisbursementMethodTypeCdID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DocumentNum, "DocumentNumIDX")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.DisbursementId, e.FileBusinessPartyId, e.StatusTypeCdId }, "IDX_Disbursement")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.OriginalDisbId, "IDX_DisbursementOriginalDisbID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.IssueDate, "IDX_Disbursement_Issuedate")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.AlternateBankActId, "IX_Disbursement_AlternateBankActID");

                entity.HasIndex(e => new { e.FileProcessId, e.DisbursementMethodTypeCdId, e.StatusTypeCdId }, "Idx_ibaDisbursement")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ExtractId, "XIF312Disbursement")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CorrectingTransactionId, "XIF314Disbursement")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.AdjustedTransactionId, "XIF315Disbursement")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileBusinessPartyId, "XIF316Disbursement")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SuperDisbursementId, "XIF325Disbursement")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.WireDisbursementDetailId, "XIF326Disbursement")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.BankAcctId, e.TransactionTypeCdId, e.IssueDate }, "XIF327Disbursement")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileId, "XIF330Disbursement")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileProcessId, "XIF61Disbursement")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.DocumentNum, e.DisbursementMethodTypeCdId, e.BankAcctId }, "idxDisbursementAutoNumberCheck")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.BankAcctId, e.WireDisbursementDetailId }, "idx_Disbursement_BankAcctID_WireDisbursementDetailID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.DocumentNum, e.DisbursementMethodTypeCdId, e.FileId }, "idx_disbursement_wire")
                    .HasFillFactor(90);

                entity.Property(e => e.DisbursementId).HasColumnName("DisbursementID");

                entity.Property(e => e.AdjustedTransactionId).HasColumnName("AdjustedTransactionID");

                entity.Property(e => e.AdjustmentDate).HasColumnType("datetime");

                entity.Property(e => e.AdjustmentReasonTypeCdId).HasColumnName("AdjustmentReasonTypeCdID");

                entity.Property(e => e.AdjustmentTypeCdId).HasColumnName("AdjustmentTypeCdID");

                entity.Property(e => e.AlternateBankActId).HasColumnName("AlternateBankActID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BankAcctId).HasColumnName("BankAcctID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CorrectingTransactionId).HasColumnName("CorrectingTransactionID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.DefaultVoucherChargeDetails)
                    .HasMaxLength(910)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DisbursementMethodTypeCdId).HasColumnName("DisbursementMethodTypeCdID");

                entity.Property(e => e.DocumentNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ExportedDate).HasColumnType("datetime");

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.FileBusinessPartyId).HasColumnName("FileBusinessPartyID");

                entity.Property(e => e.FileFeeDisbursementCauseTypeCdId).HasColumnName("FileFeeDisbursementCauseTypeCdID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FileProcessId).HasColumnName("FileProcessID");

                entity.Property(e => e.GlextractId).HasColumnName("GLExtractID");

                entity.Property(e => e.HeldByEmployeeId).HasColumnName("HeldByEmployeeID");

                entity.Property(e => e.HoldDate).HasColumnType("datetime");

                entity.Property(e => e.HoldPurpose)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.HoldUntilDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.IssuedByEmployeeId).HasColumnName("IssuedByEmployeeID");

                entity.Property(e => e.ManualCheckReason)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PayeeAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PayeeName)
                    .HasMaxLength(430)
                    .IsUnicode(false);

                entity.Property(e => e.PayeeNameOnly)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Reference)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReleaseDate).HasColumnType("datetime");

                entity.Property(e => e.ReleasedByEmployeeId).HasColumnName("ReleasedByEmployeeID");

                entity.Property(e => e.SourceTypeCdId).HasColumnName("SourceTypeCdID");

                entity.Property(e => e.SplitByEmployeeId).HasColumnName("SplitByEmployeeID");

                entity.Property(e => e.SplitDate).HasColumnType("datetime");

                entity.Property(e => e.StatusTypeCdId).HasColumnName("StatusTypeCdID");

                entity.Property(e => e.SuperDisbursementId).HasColumnName("SuperDisbursementID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.Property(e => e.VoucherChargeDetails)
                    .HasMaxLength(910)
                    .IsUnicode(false);

                entity.Property(e => e.VoucherDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.VoucherMemo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.WireDisbursementDetailId).HasColumnName("WireDisbursementDetailID");

                entity.HasOne(d => d.AdjustedTransaction)
                    .WithMany(p => p.InverseAdjustedTransaction)
                    .HasForeignKey(d => d.AdjustedTransactionId)
                    .HasConstraintName("conDisbursement13FK");

                entity.HasOne(d => d.AdjustmentReasonTypeCd)
                    .WithMany(p => p.DisbursementAdjustmentReasonTypeCds)
                    .HasForeignKey(d => d.AdjustmentReasonTypeCdId)
                    .HasConstraintName("conDisbursement3FK");

                entity.HasOne(d => d.BankAcct)
                    .WithMany(p => p.Disbursements)
                    .HasForeignKey(d => d.BankAcctId)
                    .HasConstraintName("conDisbursement15FK");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.Disbursements)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conDisbursement8FK");

                entity.HasOne(d => d.CorrectingTransaction)
                    .WithMany(p => p.InverseCorrectingTransaction)
                    .HasForeignKey(d => d.CorrectingTransactionId)
                    .HasConstraintName("conDisbursement14FK");

                entity.HasOne(d => d.Extract)
                    .WithMany(p => p.Disbursements)
                    .HasForeignKey(d => d.ExtractId)
                    .HasConstraintName("conDisbursement25FK");

                entity.HasOne(d => d.FileBusinessParty)
                    .WithMany(p => p.Disbursements)
                    .HasForeignKey(d => d.FileBusinessPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conDisbursement7FK");

                entity.HasOne(d => d.FileFeeDisbursementCauseTypeCd)
                    .WithMany(p => p.DisbursementFileFeeDisbursementCauseTypeCds)
                    .HasForeignKey(d => d.FileFeeDisbursementCauseTypeCdId)
                    .HasConstraintName("conDisbursement24FK");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.Disbursements)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conDisbursement10FK");

                entity.HasOne(d => d.FileProcess)
                    .WithMany(p => p.Disbursements)
                    .HasForeignKey(d => d.FileProcessId)
                    .HasConstraintName("conDisbursement17FK");

                entity.HasOne(d => d.Glextract)
                    .WithMany(p => p.Disbursements)
                    .HasForeignKey(d => d.GlextractId)
                    .HasConstraintName("conExportInfo_FK");

                entity.HasOne(d => d.HeldByEmployee)
                    .WithMany(p => p.DisbursementHeldByEmployees)
                    .HasForeignKey(d => d.HeldByEmployeeId)
                    .HasConstraintName("conDisbursement20FK");

                entity.HasOne(d => d.IssuedByEmployee)
                    .WithMany(p => p.DisbursementIssuedByEmployees)
                    .HasForeignKey(d => d.IssuedByEmployeeId)
                    .HasConstraintName("conDisbursement21FK");

                entity.HasOne(d => d.ReleasedByEmployee)
                    .WithMany(p => p.DisbursementReleasedByEmployees)
                    .HasForeignKey(d => d.ReleasedByEmployeeId)
                    .HasConstraintName("conDisbursement22FK");

                entity.HasOne(d => d.SourceTypeCd)
                    .WithMany(p => p.DisbursementSourceTypeCds)
                    .HasForeignKey(d => d.SourceTypeCdId)
                    .HasConstraintName("conDisbursement6FK");

                entity.HasOne(d => d.SplitByEmployee)
                    .WithMany(p => p.DisbursementSplitByEmployees)
                    .HasForeignKey(d => d.SplitByEmployeeId)
                    .HasConstraintName("conDisbursement23FK");

                entity.HasOne(d => d.StatusTypeCd)
                    .WithMany(p => p.DisbursementStatusTypeCds)
                    .HasForeignKey(d => d.StatusTypeCdId)
                    .HasConstraintName("conDisbursement4FK");

                entity.HasOne(d => d.SuperDisbursement)
                    .WithMany(p => p.InverseSuperDisbursement)
                    .HasForeignKey(d => d.SuperDisbursementId)
                    .HasConstraintName("conDisbursement5FK");

                entity.HasOne(d => d.TransactionTypeCd)
                    .WithMany(p => p.DisbursementTransactionTypeCds)
                    .HasForeignKey(d => d.TransactionTypeCdId)
                    .HasConstraintName("conDisbursement2FK");

                entity.HasOne(d => d.WireDisbursementDetail)
                    .WithMany(p => p.Disbursements)
                    .HasForeignKey(d => d.WireDisbursementDetailId)
                    .HasConstraintName("conDisbursement11FK");
            });

            modelBuilder.Entity<DisbursementAllocation>(entity =>
            {
                entity.ToTable("DisbursementAllocation");

                entity.HasIndex(e => new { e.TransactionId, e.TransactionTypeCdId, e.DisbursementId, e.AllocationAmount }, "DA2")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.DisbursementId, e.TransactionId }, "DW_DATransactionId")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DisbursementId, "XIF47DisbursementAllocation")
                    .HasFillFactor(90);

                entity.Property(e => e.DisbursementAllocationId).HasColumnName("DisbursementAllocationID");

                entity.Property(e => e.AllocationAmount).HasColumnType("money");

                entity.Property(e => e.CheckAmount).HasColumnType("money");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DisbursementId).HasColumnName("DisbursementID");

                entity.Property(e => e.SalesTaxAmt).HasColumnType("money");

                entity.Property(e => e.TransactionId).HasColumnName("TransactionID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.Disbursement)
                    .WithMany(p => p.DisbursementAllocations)
                    .HasForeignKey(d => d.DisbursementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("R_256");
            });

            modelBuilder.Entity<DisbursementAuditTrail>(entity =>
            {
                entity.HasKey(e => e.AuditTrailId)
                    .HasName("PK_AuditTrailID_DisbursementAuditTrail");

                entity.ToTable("DisbursementAuditTrail");

                entity.HasIndex(e => e.FileId, "NCIX_FileID_DisbursementAuditTrail")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.WireDisbursementDetailId, "NCIX_WireDisbursementDetailID_DisbursementAuditTrail")
                    .HasFillFactor(90);

                entity.Property(e => e.AuditTrailId).HasColumnName("AuditTrailID");

                entity.Property(e => e.ChangeHistory).IsUnicode(false);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.NewChangeHistory).IsUnicode(false);

                entity.Property(e => e.Office)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Region)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WireDisbursementDetailId).HasColumnName("WireDisbursementDetailID");
            });

            modelBuilder.Entity<DisbursementDisplayOrder>(entity =>
            {
                entity.HasKey(e => e.DisbursementDisplayId)
                    .HasName("XPKDisbursementDisplayOrder");

                entity.ToTable("DisbursementDisplayOrder");

                entity.HasIndex(e => new { e.RoleTypeCdId, e.ProcessTypeCdId, e.DisplayOrderSeqNum }, "XAK1DisbursementDisplayOrder")
                    .HasFillFactor(90);

                entity.Property(e => e.DisbursementDisplayId).HasColumnName("DisbursementDisplayID");

                entity.Property(e => e.ProcessTypeCdId).HasColumnName("ProcessTypeCdID");

                entity.Property(e => e.RoleTypeCdId).HasColumnName("RoleTypeCdID");

                entity.HasOne(d => d.ProcessTypeCd)
                    .WithMany(p => p.DisbursementDisplayOrderProcessTypeCds)
                    .HasForeignKey(d => d.ProcessTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("R_460");

                entity.HasOne(d => d.RoleTypeCd)
                    .WithMany(p => p.DisbursementDisplayOrderRoleTypeCds)
                    .HasForeignKey(d => d.RoleTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("R_461");
            });

            modelBuilder.Entity<DisbursementService>(entity =>
            {
                entity.ToTable("DisbursementService");

                entity.HasIndex(e => new { e.DisbursementId, e.ServiceTypeCdId }, "idx_DisbursementId")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.OwnerOfficeId, "idx_OwnerOfficeId")
                    .HasFillFactor(90);

                entity.Property(e => e.DisbursementServiceId).HasColumnName("DisbursementServiceID");

                entity.Property(e => e.DisbursementId).HasColumnName("DisbursementID");

                entity.Property(e => e.OwnerOfficeId).HasColumnName("OwnerOfficeID");

                entity.Property(e => e.ServiceTypeCdId).HasColumnName("ServiceTypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<DisbursementTrackInfo>(entity =>
            {
                entity.ToTable("DisbursementTrackInfo");

                entity.Property(e => e.DisbursementId).HasColumnName("DisbursementID");

                entity.Property(e => e.ServiceFileNoteId).HasColumnName("ServiceFileNoteID");

                entity.Property(e => e.Track)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TrackNote).IsUnicode(false);

                entity.HasOne(d => d.Disbursement)
                    .WithMany(p => p.DisbursementTrackInfos)
                    .HasForeignKey(d => d.DisbursementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DisbursementID_Trackinfo");

                entity.HasOne(d => d.ServiceFileNote)
                    .WithMany(p => p.DisbursementTrackInfos)
                    .HasForeignKey(d => d.ServiceFileNoteId)
                    .HasConstraintName("FK_SFNoteId_Trackinfo_TextID");

                entity.HasOne(d => d.StatusTypeCd)
                    .WithMany(p => p.DisbursementTrackInfos)
                    .HasForeignKey(d => d.StatusTypeCdId)
                    .HasConstraintName("FK_StatusTypeCdId_Trackinfo");
            });

            modelBuilder.Entity<DocDeliveryEventResponse>(entity =>
            {
                entity.HasKey(e => e.DeliveryEventLogId)
                    .HasName("PK_DeliveryEventLogID");

                entity.ToTable("DocDeliveryEventResponse");

                entity.HasIndex(e => e.FileId, "IX_DocDeliveryEventResponse_FileID");

                entity.Property(e => e.DeliveryEventLogId)
                    .ValueGeneratedNever()
                    .HasColumnName("DeliveryEventLogID");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.ResponseData).IsUnicode(false);
            });

            modelBuilder.Entity<DocDeliveryLog>(entity =>
            {
                entity.ToTable("DocDeliveryLog");

                entity.HasIndex(e => e.DeliveryEventLogId, "ixDocDeliveryLog")
                    .HasFillFactor(90);

                entity.Property(e => e.DocDeliveryLogId).HasColumnName("DocDeliveryLogID");

                entity.Property(e => e.DeliveryEventLogId).HasColumnName("DeliveryEventLogID");

                entity.Property(e => e.DrscopyTime).HasColumnName("DRSCopyTime");

                entity.Property(e => e.EndRenderTime).HasColumnType("datetime");

                entity.Property(e => e.ReceivedTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DocDetailsBulkConversion>(entity =>
            {
                entity.HasKey(e => e.DocId)
                    .HasName("PK_DocID_DocDetails_BulkConversion");

                entity.ToTable("DocDetails_BulkConversion");

                entity.HasIndex(e => new { e.FileId, e.DocId }, "NC_FileID_DocDetails_BulkConversion")
                    .HasFillFactor(90);

                entity.Property(e => e.DocId)
                    .ValueGeneratedNever()
                    .HasColumnName("DocID");

                entity.Property(e => e.ConversionDate).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");
            });

            modelBuilder.Entity<DocDetailsBulkconversionCloud>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DocDetails_Bulkconversion_Cloud");

                entity.Property(e => e.ConversionDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.IsConverted)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DocDetailsImageDocTool>(entity =>
            {
                entity.HasKey(e => e.DocId)
                    .HasName("PK_DocID_DocDetails_ImageDocTool");

                entity.ToTable("DocDetails_ImageDocTool");

                entity.Property(e => e.DocId)
                    .ValueGeneratedNever()
                    .HasColumnName("DocID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.ImageDocDate).HasColumnType("datetime");

                entity.Property(e => e.ImageDocStatus).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.DocDetailsImageDocTools)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FileID_DocDetails_ImageDocTool");
            });

            modelBuilder.Entity<DocElementInfoTrack>(entity =>
            {
                entity.ToTable("DocElementInfoTrack");

                entity.HasIndex(e => e.DocumentId, "IX_docelementInfoTrack_DocumentID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ModificationDate, "IX_docelementInfoTrack_ModificationDate")
                    .HasFillFactor(90);

                entity.Property(e => e.DocElementInfoTrackId).HasColumnName("DocElementInfoTrackID");

                entity.Property(e => e.DeobjectCode)
                    .IsUnicode(false)
                    .HasColumnName("DEObjectCode");

                entity.Property(e => e.DocPhraseElementId).HasColumnName("DocPhraseElementID");

                entity.Property(e => e.DocPhraseId).HasColumnName("DocPhraseID");

                entity.Property(e => e.DocumentId).HasColumnName("DocumentID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.ModificationDate).HasColumnType("datetime");

                entity.Property(e => e.NewTextData).IsUnicode(false);

                entity.Property(e => e.OldTextData).IsUnicode(false);

                entity.Property(e => e.PhraseElementId).HasColumnName("PhraseElementID");

                entity.Property(e => e.PhraseId).HasColumnName("PhraseID");

                entity.Property(e => e.PhraseObjectCode).IsUnicode(false);

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<DocIdforPurge>(entity =>
            {
                entity.HasKey(e => e.DocId)
                    .HasName("conDocIDForPurgePK");

                entity.ToTable("DocIDForPurge");

                entity.Property(e => e.DocId).ValueGeneratedNever();

                entity.Property(e => e.Comments)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DeploymentDate).HasColumnType("datetime");

                entity.Property(e => e.ElectronicFileId).HasColumnName("ElectronicFileID");
            });

            modelBuilder.Entity<DocInheritDocXref>(entity =>
            {
                entity.HasKey(e => new { e.DocId, e.InheritFromDocId })
                    .HasName("conDocInheritDocXref1Pk");

                entity.ToTable("DocInheritDocXref");

                entity.HasIndex(e => e.InheritFromDocId, "indDocInheritDocXref2Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.InheritFromDocId).HasColumnName("InheritFromDocID");
            });

            modelBuilder.Entity<DocPhraseElementTextId>(entity =>
            {
                entity.HasKey(e => e.DocPhraseElementTextIdsId)
                    .HasName("IDXDocPhraseElementTextIdsId");

                entity.HasIndex(e => e.NewValueTextId, "IdxNewValueTextId")
                    .HasFillFactor(90);

                entity.Property(e => e.DocPhraseElementTextIdsId).HasColumnName("DocPhraseElementTextIdsID");

                entity.Property(e => e.NewValueTextId).HasColumnName("NewValueTextID");

                entity.Property(e => e.ValueTextId).HasColumnName("ValueTextID");
            });

            modelBuilder.Entity<DocPkgAssocDocXrefFile>(entity =>
            {
                entity.HasKey(e => e.DocPkgAssocDocXrefFilesId)
                    .HasName("IDXDocPkgAssocDocXRefFilesId")
                    .IsClustered(false);

                entity.ToTable("DocPkgAssocDocXRefFiles");

                entity.HasIndex(e => e.Fileid, "IdxDocPkgAssocDocXRefFileId")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.Property(e => e.DocPkgAssocDocXrefFilesId).HasColumnName("DocPkgAssocDocXRefFilesId");

                entity.Property(e => e.Dts)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("dts");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<DocTypeDeliveryServer>(entity =>
            {
                entity.ToTable("DocTypeDeliveryServer");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DeliveryServerId).HasColumnName("DeliveryServerID");

                entity.Property(e => e.DeliveryServerName)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DoctypeCdId).HasColumnName("DoctypeCdID");
            });

            modelBuilder.Entity<DocTypeDmt>(entity =>
            {
                entity.HasKey(e => e.DocTypeCdId)
                    .HasName("conDocTypeCdDmt1Pk");

                entity.ToTable("DocTypeDmt");

                entity.HasIndex(e => e.UpdTs, "DW_IXN01_DocTypeDmt_UpdTS")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.DocTypeCdId, e.DocOriginTypeCdId }, "IDX_DocTypeDMT_DocTypeCdID_DocOriginTypeCdID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ClassTypeId, e.ObjectCd }, "indDocTypeCdDmt2")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.DocTypeCdId).HasColumnName("DocTypeCdID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Descr)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocOriginTypeCdId).HasColumnName("DocOriginTypeCdID");

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.DocTypeDmts)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conDocTypeDmt3Fk");

                entity.HasOne(d => d.DocOriginTypeCd)
                    .WithMany(p => p.DocTypeDmts)
                    .HasForeignKey(d => d.DocOriginTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conDocTypeDmt4Fk");

                entity.HasMany(d => d.ClassTypes)
                    .WithMany(p => p.DocTypeCds)
                    .UsingEntity<Dictionary<string, object>>(
                        "DocTypeClassTypeXref",
                        l => l.HasOne<ClassType>().WithMany().HasForeignKey("ClassTypeId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_DocTypeClassTypeXref_ClassTypeID"),
                        r => r.HasOne<DocTypeDmt>().WithMany().HasForeignKey("DocTypeCdId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_DocTypeClassTypeXref_TypeCdID"),
                        j =>
                        {
                            j.HasKey("DocTypeCdId", "ClassTypeId");

                            j.ToTable("DocTypeClassTypeXref");

                            j.HasIndex(new[] { "ClassTypeId" }, "idx_DocTypeClassTypeXref_ClassTypeID").HasFillFactor(90);

                            j.HasIndex(new[] { "DocTypeCdId" }, "idx_DocTypeClassTypeXref_DocTypeCdID").HasFillFactor(90);

                            j.IndexerProperty<int>("DocTypeCdId").HasColumnName("DocTypeCdID");

                            j.IndexerProperty<int>("ClassTypeId").HasColumnName("ClassTypeID");
                        });
            });

            modelBuilder.Entity<DocTypeExternalMap>(entity =>
            {
                entity.HasKey(e => e.DocTypeExternalMapId)
                    .HasName("DocTypeExternalMap_PK")
                    .IsClustered(false);

                entity.ToTable("DocTypeExternalMap");

                entity.HasIndex(e => new { e.TypeCdId, e.DocTypeCdId }, "Ind_DocTypeExternalMap")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.Property(e => e.DatabaseName)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DocTypeCdId).HasColumnName("DocTypeCdID");

                entity.Property(e => e.ExternalAppId).HasColumnName("ExternalAppID");

                entity.Property(e => e.ExternalDocTypeCdId).HasColumnName("ExternalDocTypeCdID");

                entity.Property(e => e.TableName)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TypeCdId).HasColumnName("TypeCdID");
            });

            modelBuilder.Entity<Docphrase>(entity =>
            {
                entity.HasKey(e => new { e.DocPhraseId, e.FileId })
                    .HasName("conDocPhrasePk");

                entity.ToTable("docphrase");

                entity.HasIndex(e => new { e.FileId, e.SeqNum }, "IDXDocPhraseSeqNum")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.PhraseMarkerId, e.FileId }, "XIF465DocPhrase")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FileId, e.PhraseId }, "indDocPhrase4Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.DocId, e.FileId }, "indDocPhrase5Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FileId, e.DocId, e.PhraseTextId }, "indDocPhrase6Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.PhraseTextId, e.FileId }, "indDocPhrase7Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.DocPhraseId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DocPhraseID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.BottomMarginValue).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.ExcludeComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.JustifyTextFlg).HasDefaultValueSql("((0))");

                entity.Property(e => e.LeftMarginValue).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.Name)
                    .HasMaxLength(58)
                    .IsUnicode(false);

                entity.Property(e => e.PhraseId).HasColumnName("PhraseID");

                entity.Property(e => e.PhraseMarkerId).HasColumnName("PhraseMarkerID");

                entity.Property(e => e.PhraseTextId).HasColumnName("PhraseTextID");

                entity.Property(e => e.RightMarginValue).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.TopMarginValue).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.Docphrases)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conDocPhrase4Fk");

                entity.HasOne(d => d.CreationUser)
                    .WithMany(p => p.Docphrases)
                    .HasForeignKey(d => d.CreationUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conDocCustomPhrase2Fk");

                entity.HasOne(d => d.Phrase)
                    .WithMany(p => p.Docphrases)
                    .HasForeignKey(d => d.PhraseId)
                    .HasConstraintName("conDocPhrase3Fk");

                entity.HasOne(d => d.Document)
                    .WithMany(p => p.Docphrases)
                    .HasForeignKey(d => new { d.DocId, d.FileId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conDocPhrase2Fk");

                entity.HasOne(d => d.PhraseMarker)
                    .WithMany(p => p.Docphrases)
                    .HasForeignKey(d => new { d.PhraseMarkerId, d.FileId })
                    .HasConstraintName("conDocPhrase1Fk");

                entity.HasOne(d => d.TextDatum)
                    .WithMany(p => p.Docphrases)
                    .HasForeignKey(d => new { d.PhraseTextId, d.FileId })
                    .HasConstraintName("conDocPhrase5Fk_2TD");
            });

            modelBuilder.Entity<Docphraseelement>(entity =>
            {
                entity.HasKey(e => new { e.DocPhraseElementId, e.FileId })
                    .HasName("conDocPhraseElementPk");

                entity.ToTable("docphraseelement");

                entity.HasIndex(e => new { e.FileId, e.DocId, e.HighlightIndicator }, "idxDocPhraseElement_11")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.DocPhraseId, e.FileId }, "idxDocphraseIDFIleID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FileId, e.DocPhraseId, e.ValueTextId }, "indDocPhrElem6Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ValueTextId, e.FileId }, "indDocPhrElem9Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.DocPhraseElementId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DocPhraseElementID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.AlignmentTypeCdId).HasColumnName("AlignmentTypeCdID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.DataElementId).HasColumnName("DataElementID");

                entity.Property(e => e.Descr)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.DocPhraseId).HasColumnName("DocPhraseID");

                entity.Property(e => e.ElementIndex)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ElementSeparatorTypeCdId).HasColumnName("ElementSeparatorTypeCdID");

                entity.Property(e => e.FormFieldName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FormatTypeCdId).HasColumnName("FormatTypeCdID");

                entity.Property(e => e.InitialValue)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PictureTypeCdId).HasColumnName("PictureTypeCdID");

                entity.Property(e => e.PrintCaseTypeCdId).HasColumnName("PrintCaseTypeCdID");

                entity.Property(e => e.ReadOnlyIndicator).HasDefaultValueSql("((0))");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.ValueTextId).HasColumnName("ValueTextID");

                entity.Property(e => e.Xcoordinate)
                    .HasColumnType("decimal(4, 2)")
                    .HasColumnName("XCoordinate");

                entity.Property(e => e.Ycoordinate)
                    .HasColumnType("decimal(4, 2)")
                    .HasColumnName("YCoordinate");

                entity.HasOne(d => d.AlignmentTypeCd)
                    .WithMany(p => p.DocphraseelementAlignmentTypeCds)
                    .HasForeignKey(d => d.AlignmentTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conDocPhraseElement6Fk");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.Docphraseelements)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conDocPhraseElement2Fk");

                entity.HasOne(d => d.DataElement)
                    .WithMany(p => p.Docphraseelements)
                    .HasForeignKey(d => d.DataElementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conDocPhraseElement11Fk");

                entity.HasOne(d => d.ElementSeparatorTypeCd)
                    .WithMany(p => p.DocphraseelementElementSeparatorTypeCds)
                    .HasForeignKey(d => d.ElementSeparatorTypeCdId)
                    .HasConstraintName("conDocPhraseElement9Fk");

                entity.HasOne(d => d.FormatTypeCd)
                    .WithMany(p => p.DocphraseelementFormatTypeCds)
                    .HasForeignKey(d => d.FormatTypeCdId)
                    .HasConstraintName("conDocPhraseElement7Fk");

                entity.HasOne(d => d.PictureTypeCd)
                    .WithMany(p => p.DocphraseelementPictureTypeCds)
                    .HasForeignKey(d => d.PictureTypeCdId)
                    .HasConstraintName("conDocPhraseElement8Fk");

                entity.HasOne(d => d.PrintCaseTypeCd)
                    .WithMany(p => p.DocphraseelementPrintCaseTypeCds)
                    .HasForeignKey(d => d.PrintCaseTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conDocPhraseElement5Fk");

                entity.HasOne(d => d.Docphrase)
                    .WithMany(p => p.Docphraseelements)
                    .HasForeignKey(d => new { d.DocPhraseId, d.FileId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conDocPhraseElement4Fk");

                entity.HasOne(d => d.TextDatum)
                    .WithMany(p => p.Docphraseelements)
                    .HasForeignKey(d => new { d.ValueTextId, d.FileId })
                    .HasConstraintName("conDocPhraseElement10Fk_2TD");
            });

            modelBuilder.Entity<Document>(entity =>
            {
                entity.HasKey(e => new { e.DocId, e.FileId })
                    .HasName("conDocumentPk");

                entity.ToTable("Document");

                entity.HasIndex(e => new { e.FileId, e.CommitDocIdforPolicy }, "CommitmentID_ix")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FileId, e.UpdTs }, "DW_IXN01_Document_UpdTS")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileId, "DocFileID_ix")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FileId, e.DocId, e.TemplateId, e.CreationDate, e.StatusChgDate, e.CommitDocIdforPolicy, e.Name, e.DraftFlag, e.StatusCd }, "IDXDocument_1")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FileId, e.DeliveryEventLogId }, "IX_Document_DeliveryEventLogID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.DeliveryEventLogId, e.FileId }, "IX_Document_DeliveryEventLogID_FileID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FileId, e.TemplateId }, "indDocument6Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.DocId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DocID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CommitApprovedChgById).HasColumnName("CommitApprovedChgByID");

                entity.Property(e => e.CommitApprovedChgDate).HasColumnType("datetime");

                entity.Property(e => e.CommitDocIdforPolicy).HasColumnName("CommitDocIDForPolicy");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.Property(e => e.DeliveryEventLogId).HasColumnName("DeliveryEventLogID");

                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

                entity.Property(e => e.LoanIdforPolicy).HasColumnName("LoanIDForPolicy");

                entity.Property(e => e.Name)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.StatusChgDate).HasColumnType("datetime");

                entity.Property(e => e.StatusChgUserId).HasColumnName("StatusChgUserID");

                entity.Property(e => e.TemplateId).HasColumnName("TemplateID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.Documents)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFileDoc3FK");

                entity.HasOne(d => d.CreationUser)
                    .WithMany(p => p.Documents)
                    .HasForeignKey(d => d.CreationUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conDoc5Fk");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.Documents)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Document_ServiceFileFK");

                entity.HasOne(d => d.Template)
                    .WithMany(p => p.Documents)
                    .HasForeignKey(d => d.TemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conDoc4Fk");

                entity.HasOne(d => d.DeliveryEventLog)
                    .WithMany(p => p.Documents)
                    .HasForeignKey(d => new { d.DeliveryEventLogId, d.FileId })
                    .HasConstraintName("FK__Document__Delive__7C72D13B");

                entity.HasMany(d => d.Principals)
                    .WithMany(p => p.Documents)
                    .UsingEntity<Dictionary<string, object>>(
                        "PolicyPrincipalXref",
                        l => l.HasOne<Principal>().WithMany().HasForeignKey("PrincipalId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conPolicyPrincipalXref3FK"),
                        r => r.HasOne<Document>().WithMany().HasForeignKey("PolicyId", "FileId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conPolicyPrincipalXref2FK"),
                        j =>
                        {
                            j.HasKey("PolicyId", "PrincipalId", "FileId").HasName("conPolicyPrincipalXrefPk");

                            j.ToTable("PolicyPrincipalXref");

                            j.HasIndex(new[] { "FileId", "PrincipalId" }, "indPolicyPrincipalXref2Fk").HasFillFactor(90);

                            j.IndexerProperty<int>("PolicyId").HasColumnName("PolicyID");

                            j.IndexerProperty<int>("PrincipalId").HasColumnName("PrincipalID");

                            j.IndexerProperty<int>("FileId").HasColumnName("FileID");
                        });
            });

            modelBuilder.Entity<DocumentDelivery>(entity =>
            {
                entity.HasKey(e => e.JobId);

                entity.ToTable("DocumentDelivery");

                entity.Property(e => e.JobId).HasColumnName("JobID");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DocDeliveryMessage).HasColumnType("xml");

                entity.Property(e => e.DocDeliveryMethod)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.DocDeliveryStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EnvironmentName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EventLogId).HasColumnName("EventLogID");

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<DocumentDeliveryStatus>(entity =>
            {
                entity.HasKey(e => new { e.DocId, e.FileTypeId });

                entity.ToTable("DocumentDeliveryStatus");
            });

            modelBuilder.Entity<DocumentGridFileAndScreenGridFilter>(entity =>
            {
                entity.HasKey(e => e.ScreenGridFilterId)
                    .HasName("ScreenGridFilterIDPk");

                entity.ToTable("DocumentGridFileAndScreenGridFilter");

                entity.Property(e => e.ScreenGridFilterId).HasColumnName("ScreenGridFilterID");

                entity.Property(e => e.DocumentGuifilterMasterId).HasColumnName("DocumentGUIFilterMasterID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FilterData).HasColumnType("xml");

                entity.Property(e => e.GridId).HasColumnName("GridID");

                entity.Property(e => e.ScreenId).HasColumnName("ScreenID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.DocumentGuifilterMaster)
                    .WithMany(p => p.DocumentGridFileAndScreenGridFilters)
                    .HasForeignKey(d => d.DocumentGuifilterMasterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conDocumentGUIFilterMasterIDFK");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.DocumentGridFileAndScreenGridFilters)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conServiceFileFileIDFK");

                entity.HasOne(d => d.Grid)
                    .WithMany(p => p.DocumentGridFileAndScreenGridFilters)
                    .HasForeignKey(d => d.GridId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conDocumentGridFileAndScreenGridFilterGridIDFK");

                entity.HasOne(d => d.Screen)
                    .WithMany(p => p.DocumentGridFileAndScreenGridFilters)
                    .HasForeignKey(d => d.ScreenId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conDocumentGridFileAndScreenGridFilterScreenIDFK");
            });

            modelBuilder.Entity<DocumentGuifilterMaster>(entity =>
            {
                entity.ToTable("DocumentGUIFilterMaster");

                entity.Property(e => e.DocumentGuifilterMasterId).HasColumnName("DocumentGUIFilterMasterID");

                entity.Property(e => e.DocTypeCdid).HasColumnName("DocTypeCDID");

                entity.Property(e => e.FilterName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FilterNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SuperDocumentGuifilterMasterId).HasColumnName("SuperDocumentGUIFilterMasterID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<DocumentLicenseInfo>(entity =>
            {
                entity.ToTable("DocumentLicenseInfo");

                entity.HasIndex(e => new { e.DocId, e.NextGenFlag }, "idxUQDLIDocIDNextgenFlag")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.DocumentLicenseInfoId).HasColumnName("DocumentLicenseInfoID");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.FinalizedDate).HasColumnType("datetime");

                entity.Property(e => e.FinalizedEmployeeId).HasColumnName("FinalizedEmployeeID");

                entity.Property(e => e.LicenseNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LicensedEmployeeId).HasColumnName("LicensedEmployeeID");

                entity.Property(e => e.ProcessId).HasColumnName("ProcessID");

                entity.Property(e => e.RequestedDate).HasColumnType("datetime");

                entity.Property(e => e.RequestedEmployeeId).HasColumnName("RequestedEmployeeID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.FinalizedEmployee)
                    .WithMany(p => p.DocumentLicenseInfoFinalizedEmployees)
                    .HasForeignKey(d => d.FinalizedEmployeeId)
                    .HasConstraintName("conDLIFinalizedEmployeeIDFK");

                entity.HasOne(d => d.LicensedEmployee)
                    .WithMany(p => p.DocumentLicenseInfoLicensedEmployees)
                    .HasForeignKey(d => d.LicensedEmployeeId)
                    .HasConstraintName("conDLILicensedEmployeeIDFK");

                entity.HasOne(d => d.RequestedEmployee)
                    .WithMany(p => p.DocumentLicenseInfoRequestedEmployees)
                    .HasForeignKey(d => d.RequestedEmployeeId)
                    .HasConstraintName("conDLIRequestedEmployeeIDFK");
            });

            modelBuilder.Entity<DocumentMap>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DocumentMap", "Migration");

                entity.Property(e => e.CommitDocIdforPolicy).HasColumnName("CommitDocIDForPolicy");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.LegacyDocId).HasColumnName("LegacyDocID");

                entity.Property(e => e.NextGenDocId).HasColumnName("NextGenDocID");

                entity.Property(e => e.StatusChgDate).HasColumnType("datetime");

                entity.Property(e => e.StatusChgUserId).HasColumnName("StatusChgUserID");
            });

            modelBuilder.Entity<DocumentPackage>(entity =>
            {
                entity.ToTable("DocumentPackage");

                entity.HasIndex(e => e.FileId, "IDXDocumentPackageFileId")
                    .HasFillFactor(90);

                entity.Property(e => e.DocumentPackageId).HasColumnName("DocumentPackageID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.File)
                    .WithMany(p => p.DocumentPackages)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_DocumentPackage_ServiceFile_FileID");
            });

            modelBuilder.Entity<DocumentPackageAssociatedDocumentXref>(entity =>
            {
                entity.HasKey(e => new { e.DocumentPackageId, e.AssociatedDocId, e.AssociatedDocTypeCdId })
                    .HasName("Pk_DocPakAssDocXRef_DocPakID_AssDocID")
                    .IsClustered(false);

                entity.ToTable("DocumentPackageAssociatedDocumentXRef");

                entity.HasIndex(e => new { e.DocumentPackageId, e.AssociatedDocId }, "IDXDocumentPackageDocId")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.AssociatedDocId, e.AssociatedDocTypeCdId }, "IDXDocumentPackageDocId_1")
                    .HasFillFactor(90);

                entity.Property(e => e.DocumentPackageId).HasColumnName("DocumentPackageID");

                entity.Property(e => e.AssociatedDocId).HasColumnName("AssociatedDocID");

                entity.Property(e => e.AssociatedDocTypeCdId).HasColumnName("AssociatedDocTypeCdID");

                entity.HasOne(d => d.AssociatedDocTypeCd)
                    .WithMany(p => p.DocumentPackageAssociatedDocumentXrefs)
                    .HasForeignKey(d => d.AssociatedDocTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_DocPakAssDocXRef_TypeCdDmt");

                entity.HasOne(d => d.DocumentPackage)
                    .WithMany(p => p.DocumentPackageAssociatedDocumentXrefs)
                    .HasForeignKey(d => d.DocumentPackageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_DocPakAssDocXRef_DocumentPackage");
            });

            modelBuilder.Entity<DocumentPackageDocumentXref>(entity =>
            {
                entity.HasKey(e => e.DocId)
                    .HasName("PK__Document__3EF1888D131DF7D7");

                entity.ToTable("DocumentPackageDocumentXref");

                entity.Property(e => e.DocId)
                    .ValueGeneratedNever()
                    .HasColumnName("DocID");
            });

            modelBuilder.Entity<DocumentRule>(entity =>
            {
                entity.ToTable("DocumentRule");

                entity.HasIndex(e => new { e.DocRuleTypeId, e.GeoRegionId, e.StatusCd }, "idxUQDL")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.DocumentRuleId)
                    .ValueGeneratedNever()
                    .HasColumnName("DocumentRuleID");

                entity.Property(e => e.DocRuleTypeId).HasColumnName("DocRuleTypeID");

                entity.Property(e => e.GeoRegionId).HasColumnName("GeoRegionID");

                entity.HasOne(d => d.DocRuleType)
                    .WithMany(p => p.DocumentRules)
                    .HasForeignKey(d => d.DocRuleTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conDRDocRuleTypeIDFK");

                entity.HasOne(d => d.GeoRegion)
                    .WithMany(p => p.DocumentRules)
                    .HasForeignKey(d => d.GeoRegionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conDRGeoRegionIDFK");
            });

            modelBuilder.Entity<DummyPublicationDonotdel>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_dummy_publication_DONOTDELID");

                entity.ToTable("dummy_publication_DONOTDEL");

                entity.Property(e => e.RecId).HasColumnName("recId");

                entity.Property(e => e.I).HasColumnName("i");
            });

            modelBuilder.Entity<EagleStatusAutoSubscription>(entity =>
            {
                entity.ToTable("EagleStatusAutoSubscription");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ExecutionTime).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");
            });

            modelBuilder.Entity<EagleStatusNotificationLog>(entity =>
            {
                entity.HasKey(e => e.NotificationLogId)
                    .HasName("PK_EagleStatusNotificationLog_NotificationLogID");

                entity.ToTable("EagleStatusNotificationLog");

                entity.Property(e => e.NotificationLogId).HasColumnName("NotificationLogID");

                entity.Property(e => e.Descr)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.JobLastRun).HasColumnType("datetime");
            });

            modelBuilder.Entity<EarnestDeposit>(entity =>
            {
                entity.HasKey(e => e.EarnestDepositHolderId)
                    .HasName("XPKEarnestDeposit");

                entity.ToTable("EarnestDeposit");

                entity.HasIndex(e => e.OutOfEscrowId, "XIF390EarnestDeposit")
                    .HasFillFactor(90);

                entity.Property(e => e.EarnestDepositHolderId).HasColumnName("EarnestDepositHolderID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.EarnestAmount).HasColumnType("money");

                entity.Property(e => e.HolderEntityTypeCdId).HasColumnName("HolderEntityTypeCdID");

                entity.Property(e => e.HolderName)
                    .HasMaxLength(72)
                    .IsUnicode(false);

                entity.Property(e => e.OutOfEscrowId).HasColumnName("OutOfEscrowID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.EarnestDeposits)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conEarnestDeposit2FK");

                entity.HasOne(d => d.HolderEntityTypeCd)
                    .WithMany(p => p.EarnestDeposits)
                    .HasForeignKey(d => d.HolderEntityTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conInEscrowDeposit21FK");

                entity.HasOne(d => d.OutOfEscrow)
                    .WithMany(p => p.EarnestDeposits)
                    .HasForeignKey(d => d.OutOfEscrowId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conEarnestDeposit1FK");
            });

            modelBuilder.Entity<EbusinessRequest>(entity =>
            {
                entity.HasKey(e => e.RequestId)
                    .HasName("XPKEBusinessRequest1");

                entity.ToTable("EBusinessRequest");

                entity.HasIndex(e => e.StatusCd, "IDX_EBusinessRequestStatusCD")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileId, "IDX_EBusinessRequest_1")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FileProcessId, e.EbusinessTypeCdId }, "IDX_FileProcessandEBusCDID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.RegionId, e.BusUnitId, e.ReferenceId }, "idx1EBusinessRequest")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.EbusinessTypeCdId, e.EbusInterfaceFormatCdId, e.ReferenceId }, "idx2EBusinessRequest")
                    .HasFillFactor(90);

                entity.Property(e => e.RequestId).HasColumnName("RequestID");

                entity.Property(e => e.BusUnitId).HasColumnName("BusUnitID");

                entity.Property(e => e.CustomerOrderId).HasColumnName("CustomerOrderID");

                entity.Property(e => e.EbusInterfaceFormatCdId).HasColumnName("EBusInterfaceFormatCdID");

                entity.Property(e => e.EbusinessPartyId).HasColumnName("EBusinessPartyID");

                entity.Property(e => e.EbusinessTypeCdId).HasColumnName("EBusinessTypeCdID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FileProcessId).HasColumnName("FileProcessID");

                entity.Property(e => e.LoggedOnUserId).HasColumnName("LoggedOnUserID");

                entity.Property(e => e.PayOffLoanNumber)
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.ReferenceId).HasColumnName("ReferenceID");

                entity.Property(e => e.RegionId).HasColumnName("RegionID");

                entity.Property(e => e.RequestData).IsUnicode(false);

                entity.Property(e => e.RequestDateTime).HasColumnType("datetime");

                entity.Property(e => e.ResponseData).IsUnicode(false);

                entity.Property(e => e.ResponseDateTime).HasColumnType("datetime");

                entity.Property(e => e.StatusCd).HasColumnName("StatusCD");

                entity.Property(e => e.TitleEscrowInfoId).HasColumnName("TitleEscrowInfoID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.EbusInterfaceFormatCd)
                    .WithMany(p => p.EbusinessRequestEbusInterfaceFormatCds)
                    .HasForeignKey(d => d.EbusInterfaceFormatCdId)
                    .HasConstraintName("conEBusinessRequest4FK");

                entity.HasOne(d => d.EbusinessParty)
                    .WithMany(p => p.EbusinessRequests)
                    .HasForeignKey(d => d.EbusinessPartyId)
                    .HasConstraintName("conEBusinessRequest1FK");

                entity.HasOne(d => d.EbusinessTypeCd)
                    .WithMany(p => p.EbusinessRequestEbusinessTypeCds)
                    .HasForeignKey(d => d.EbusinessTypeCdId)
                    .HasConstraintName("conEBusinessRequest3FK");

                entity.HasOne(d => d.LoggedOnUser)
                    .WithMany(p => p.EbusinessRequests)
                    .HasForeignKey(d => d.LoggedOnUserId)
                    .HasConstraintName("conEBusinessRequest2FK");
            });

            modelBuilder.Entity<EcheckDetail>(entity =>
            {
                entity.ToTable("ECheckDetail");

                entity.HasIndex(e => e.DeliveryEventLogId, "UK_DeliveryEventLogID")
                    .IsUnique();

                entity.Property(e => e.EcheckDetailId).HasColumnName("ECheckDetailID");

                entity.Property(e => e.CheckAmount).HasColumnType("money");

                entity.Property(e => e.CheckNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryEventLogId).HasColumnName("DeliveryEventLogID");

                entity.Property(e => e.DisbursementId).HasColumnName("DisbursementID");

                entity.Property(e => e.EcheckRefId)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ECheckRefID");

                entity.Property(e => e.EncryptionKey)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ImagePath)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.InterfacePartnerTypeCdId).HasColumnName("InterfacePartnerTypeCdID");

                entity.Property(e => e.PayeeEmailId)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PayeeName)
                    .HasMaxLength(430)
                    .IsUnicode(false);

                entity.Property(e => e.RequestedUserId).HasColumnName("RequestedUserID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.RequestedUser)
                    .WithMany(p => p.EcheckDetails)
                    .HasForeignKey(d => d.RequestedUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RequestedUserID");

                entity.HasOne(d => d.DeliveryEventLog)
                    .WithMany(p => p.EcheckDetails)
                    .HasForeignKey(d => new { d.DeliveryEventLogId, d.FileId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DeliveryEventLogID");
            });

            modelBuilder.Entity<EcheckEmailList>(entity =>
            {
                entity.HasKey(e => e.EcheckEmailListId)
                    .HasName("PK_ECheckEmailListID_ECheckEmailList2")
                    .IsClustered(false);

                entity.ToTable("ECheckEmailList");

                entity.Property(e => e.EcheckEmailListId).HasColumnName("ECheckEmailListID");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EclipseDbversion>(entity =>
            {
                entity.HasKey(e => new { e.Version, e.BuildDate });

                entity.ToTable("EclipseDBVersion");

                entity.Property(e => e.Version)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.BuildDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<EditFbpcontactAuthSignXref>(entity =>
            {
                entity.ToTable("EditFBPContactAuthSignXref");

                entity.HasIndex(e => e.AuthSignatureId, "IX_EditFBPContactAuthSignXref_AuthSignatureID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.EditFbpcontactId, "IX_EditFBPContactAuthSignXref_EditFBPContactID")
                    .HasFillFactor(90);

                entity.Property(e => e.EditFbpcontactAuthSignXrefId).HasColumnName("EditFBPContactAuthSignXrefID");

                entity.Property(e => e.AuthSignatureId).HasColumnName("AuthSignatureID");

                entity.Property(e => e.EditFbpcontactId).HasColumnName("EditFBPContactID");
            });

            modelBuilder.Entity<EditFileBusinessPartyContact>(entity =>
            {
                entity.HasKey(e => e.EditFileBusinessPartyContactId)
                    .HasName("PK_EditFileBusinessPartyContactKey")
                    .IsClustered(false);

                entity.ToTable("EditFileBusinessPartyContact");

                entity.HasIndex(e => e.FileBusinessPartyId, "idxEditFileBusinessPartyContact_FileBusinessPartyID")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.Property(e => e.EditFileBusinessPartyContactId).HasColumnName("EditFileBusinessPartyContactID");

                entity.Property(e => e.AddrLine1)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.AddrLine2)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.AddrLine3)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.AddrLine4)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.BusFax)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BusPhone)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Busextn)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BUSEXTN");

                entity.Property(e => e.CellPhone)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ConsumerMessageBoxId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ConsumerMessageBoxID");

                entity.Property(e => e.Country)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.County)
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileBusinessPartyId).HasColumnName("FileBusinessPartyID");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.GabcontactId).HasColumnName("GABContactID");

                entity.Property(e => e.HomePhone)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Pager)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RoleTypeCdId).HasColumnName("RoleTypeCdID");

                entity.Property(e => e.State)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Suffix)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.ZipCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.FileBusinessParty)
                    .WithMany(p => p.EditFileBusinessPartyContacts)
                    .HasForeignKey(d => d.FileBusinessPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EditFileBusinessPartyContact_FileBusinessPartyID");
            });

            modelBuilder.Entity<EditFileBusinessPartyContactOld>(entity =>
            {
                entity.HasKey(e => e.FileBusinessPartyId)
                    .HasName("PK__EditFile__267B358B2D830C96");

                entity.ToTable("EditFileBusinessPartyContact_old");

                entity.Property(e => e.FileBusinessPartyId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileBusinessPartyID");

                entity.Property(e => e.AddrLine1)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.AddrLine2)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.AddrLine3)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.AddrLine4)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.BusFax)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BusPhone)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Busextn)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BUSEXTN");

                entity.Property(e => e.CellPhone)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.County)
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Pager)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RoleTypeCdId).HasColumnName("RoleTypeCdID");

                entity.Property(e => e.State)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.ZipCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EfileRoleTypeXref>(entity =>
            {
                entity.ToTable("EFileRoleTypeXref");

                entity.HasIndex(e => e.ServiceFileEfileXrefId, "idx_EFileRoleTypeXref_ServiceFileEFileXrefID")
                    .HasFillFactor(90);

                entity.Property(e => e.EfileRoleTypeXrefId).HasColumnName("EFileRoleTypeXrefID");

                entity.Property(e => e.FileBusinessPartyId).HasColumnName("FileBusinessPartyID");

                entity.Property(e => e.RoleTypeCdId).HasColumnName("RoleTypeCdID");

                entity.Property(e => e.ServiceFileEfileXrefId).HasColumnName("ServiceFileEFileXrefID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ServiceFileEfileXref)
                    .WithMany(p => p.EfileRoleTypeXrefs)
                    .HasForeignKey(d => d.ServiceFileEfileXrefId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EFileRoleTypeXref");
            });

            modelBuilder.Entity<ElectronicAddr>(entity =>
            {
                entity.ToTable("ElectronicAddr");

                entity.HasIndex(e => e.EnterpriseId, "CLX_EAddrEnterpriseID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ContextTypeCdId, "Ind_ElectronicAddr_ContextTypeCdID")
                    .HasFillFactor(90);

                entity.Property(e => e.ElectronicAddrId).HasColumnName("ElectronicAddrID");

                entity.Property(e => e.AreaCode)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.CallOut)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ContextTypeCdId).HasColumnName("ContextTypeCdID");

                entity.Property(e => e.CountryCd)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EnterpriseId).HasColumnName("EnterpriseID");

                entity.Property(e => e.Extension)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.MdmprimaryByPurposeFlag).HasColumnName("MDMPrimaryByPurposeFlag");

                entity.Property(e => e.MdmprimaryFlag).HasColumnName("MDMPrimaryFlag");

                entity.Property(e => e.PhoneNum)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.ElectronicAddrs)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conElectronicAddr2Fk");
            });

            modelBuilder.Entity<EmployedBy>(entity =>
            {
                entity.ToTable("EmployedBy");

                entity.Property(e => e.EmployedById).HasColumnName("EmployedByID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.DeactivationDate).HasColumnType("datetime");

                entity.Property(e => e.EmployedByName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReactivationDate).HasColumnType("datetime");

                entity.Property(e => e.StatusChgComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StatusChgUserId).HasColumnName("StatusChgUserID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.EmployedBies)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con2EmployedByBusinessUnitFK");

                entity.HasOne(d => d.CreationEmployee)
                    .WithMany(p => p.EmployedByCreationEmployees)
                    .HasForeignKey(d => d.CreationEmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con3EmployedByEmployeeFK");

                entity.HasOne(d => d.StatusChgUser)
                    .WithMany(p => p.EmployedByStatusChgUsers)
                    .HasForeignKey(d => d.StatusChgUserId)
                    .HasConstraintName("con5EmployedByEmployeeFK");

                entity.HasOne(d => d.UpdatedEmployee)
                    .WithMany(p => p.EmployedByUpdatedEmployees)
                    .HasForeignKey(d => d.UpdatedEmployeeId)
                    .HasConstraintName("con4EmployedByEmployeeFK");
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.ToTable("Employee");

                entity.HasIndex(e => e.UpdTs, "DW_IXN01_Employee_UpdTS")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.LoginName, "EmployeeLogin")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.HomeOfficeId, e.StatusCd }, "IDX_Employee_HomeOfficeID_StatusCd")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.StatusCd, "IX_Employee_StatusCD")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ObjectCd, "Idx_Employee_objectcd")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.HomeOfficeId, "indEmployee4Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.AddrBookEntryId, "indEmployee5Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.AddrBookEntryId).HasColumnName("AddrBookEntryID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeOverDraftAmt).HasColumnType("money");

                entity.Property(e => e.FromDate).HasColumnType("datetime");

                entity.Property(e => e.HomeOfficeId).HasColumnName("HomeOfficeID");

                entity.Property(e => e.Initials)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.LoginName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PersonnelCd)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SignatureFile)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SymantecLoginName)
                    .HasMaxLength(45)
                    .IsUnicode(false);

                entity.Property(e => e.TitleLine1)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TitleLine2)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TitleLine3)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ToDate).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UwemailNotify).HasColumnName("UWEmailNotify");

                entity.Property(e => e.UwliabilityLimit)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("UWLiabilityLimit");

                entity.HasOne(d => d.AddrBookEntry)
                    .WithMany(p => p.Employees)
                    .HasForeignKey(d => d.AddrBookEntryId)
                    .HasConstraintName("conEmployee3Fk");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.Employees)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conEmployee2Fk");

                entity.HasOne(d => d.HomeOffice)
                    .WithMany(p => p.Employees)
                    .HasForeignKey(d => d.HomeOfficeId)
                    .HasConstraintName("conEmployee4Fk");

                entity.HasMany(d => d.Profiles)
                    .WithMany(p => p.Users)
                    .UsingEntity<Dictionary<string, object>>(
                        "UserProfileXref",
                        l => l.HasOne<Profile>().WithMany().HasForeignKey("ProfileId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conProfile_UserProfileXref_ProfileID_FK2"),
                        r => r.HasOne<Employee>().WithMany().HasForeignKey("UserId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conEmployee_UserProfileXref_EmployeID_FK1"),
                        j =>
                        {
                            j.HasKey("UserId", "ProfileId").HasName("conUserProfileXrefPK");

                            j.ToTable("UserProfileXref");

                            j.HasIndex(new[] { "ProfileId" }, "IdxUserProfileXref_ProfileID_Ix2").HasFillFactor(90);

                            j.HasIndex(new[] { "UserId" }, "IdxUserProfileXref_UserID_Ix1").HasFillFactor(90);

                            j.IndexerProperty<int>("UserId").HasColumnName("UserID");

                            j.IndexerProperty<int>("ProfileId").HasColumnName("ProfileID");
                        });
            });

            modelBuilder.Entity<EmployeeApplicationUserXref>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EmployeeApplicationUserXref");

                entity.HasIndex(e => new { e.FastemployeeId, e.SourceApplId, e.IsRemittanceScreen }, "conEmployeeApplicationUserXref")
                    .IsUnique();

                entity.Property(e => e.ApplicationUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ApplicationUserID");

                entity.Property(e => e.ApplicationUserPwd)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.FastemployeeId).HasColumnName("FASTEmployeeID");

                entity.Property(e => e.SourceApplId).HasColumnName("SourceApplID");

                entity.HasOne(d => d.SourceAppl)
                    .WithMany()
                    .HasForeignKey(d => d.SourceApplId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conEmployeeApplicationUserXrefFk");
            });

            modelBuilder.Entity<EmployeeCountyInfoXref>(entity =>
            {
                entity.HasKey(e => new { e.FunctionTypeCdId, e.CountyInfoId, e.EmployeeId, e.OfficeRoleTypeCdId })
                    .HasName("conEmplCountyInfoXref1Pk");

                entity.ToTable("EmployeeCountyInfoXref");

                entity.HasIndex(e => e.CountyInfoId, "indEmplCountyInfoXref2Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.EmployeeId, e.FunctionTypeCdId }, "indEmplCountyInfoXref3Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.FunctionTypeCdId).HasColumnName("FunctionTypeCdID");

                entity.Property(e => e.CountyInfoId).HasColumnName("CountyInfoID");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.OfficeRoleTypeCdId).HasColumnName("OfficeRoleTypeCdID");

                entity.HasOne(d => d.CountyInfo)
                    .WithMany(p => p.EmployeeCountyInfoXrefs)
                    .HasForeignKey(d => d.CountyInfoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conEmplCountyInfoXref2Fk");

                entity.HasOne(d => d.OfficeRoleTypeCd)
                    .WithMany(p => p.EmployeeCountyInfoXrefs)
                    .HasForeignKey(d => d.OfficeRoleTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conEmplCountyInfoXref4Fk");

                entity.HasOne(d => d.EmployeeFunctionXref)
                    .WithMany(p => p.EmployeeCountyInfoXrefs)
                    .HasForeignKey(d => new { d.EmployeeId, d.FunctionTypeCdId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conEmplCountyInfoXref3Fk");
            });

            modelBuilder.Entity<EmployeeFunctionXref>(entity =>
            {
                entity.HasKey(e => new { e.EmployeeId, e.FunctionTypeCdId })
                    .HasName("conEmployeeFunctionXref1Pk");

                entity.ToTable("EmployeeFunctionXref");

                entity.HasIndex(e => new { e.FunctionTypeCdId, e.EmployeeId }, "IDX_EmployeeFunctionXRef_FunctionTypeCdId_EmployeeId")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.EmployeeFunctionId, "IndEmployeeFunctionId")
                    .HasFillFactor(90);

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.FunctionTypeCdId).HasColumnName("FunctionTypeCdID");

                entity.Property(e => e.EmployeeFunctionId).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeFunctionXrefs)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conEmplFuncXref2Fk");

                entity.HasOne(d => d.FunctionTypeCd)
                    .WithMany(p => p.EmployeeFunctionXrefs)
                    .HasForeignKey(d => d.FunctionTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conEmplFuncXref3Fk");
            });

            modelBuilder.Entity<EmployeeNotificationPref>(entity =>
            {
                entity.HasKey(e => e.EmployeePrefId)
                    .HasName("conEmployeeNotificationPrefPk");

                entity.ToTable("EmployeeNotificationPref");

                entity.HasIndex(e => e.EmployeeId, "ixnEmployeeNotificationPrefEmployeeID")
                    .HasFillFactor(90);

                entity.Property(e => e.EmployeePrefId).HasColumnName("EmployeePrefID");

                entity.Property(e => e.ElectronicAddrId).HasColumnName("ElectronicAddrID");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.HasOne(d => d.ElectronicAddr)
                    .WithMany(p => p.EmployeeNotificationPrefs)
                    .HasForeignKey(d => d.ElectronicAddrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conNotification_ElecAddr3FK");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeNotificationPrefs)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conEmployeeNotificationFK");
            });

            modelBuilder.Entity<EmployeeOverdraftEmailOptOutList>(entity =>
            {
                entity.HasKey(e => new { e.EmployeeId, e.BusinessUnitId })
                    .HasName("PK_EmployeeODEmailOptOutList_EmployeeID_BusinessUnitID");

                entity.ToTable("EmployeeOverdraftEmailOptOutList");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeOverdraftEmailOptOutLists)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeODEmailOptOutList_EmployeeID");
            });

            modelBuilder.Entity<EmployeeSecurityChangeHistory>(entity =>
            {
                entity.HasKey(e => e.ChangeId)
                    .HasName("conEmployeeSecurityChangeHistoryPK");

                entity.ToTable("EmployeeSecurityChangeHistory");

                entity.HasIndex(e => e.BusinessUnitId, "IdxEmployeeSecurityChangeHistory_BusinessUnitID_Ix2")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ChangeEventId, "IdxEmployeeSecurityChangeHistory_ChangeEventID_Ix3")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.EmployeeId, "IdxEmployeeSecurityChangeHistory_EmployeeID_Ix1")
                    .HasFillFactor(90);

                entity.Property(e => e.ChangeId).HasColumnName("ChangeID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.ChangeEventId).HasColumnName("ChangeEventID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.EventDate).HasColumnType("datetime");

                entity.Property(e => e.ProfileId).HasColumnName("ProfileID");

                entity.Property(e => e.RoleId).HasColumnName("RoleID");

                entity.Property(e => e.SecOfficeGroupId).HasColumnName("SecOfficeGroupID");

                entity.Property(e => e.TicketNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.EmployeeSecurityChangeHistories)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBusinessUnit_EmpSecChgHistory_BusinessUnitID_FK3");

                entity.HasOne(d => d.ChangeEvent)
                    .WithMany(p => p.EmployeeSecurityChangeHistories)
                    .HasForeignKey(d => d.ChangeEventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conTypeCdDmt_EmpSecChgHistory_ChangeEventID_FK2");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeSecurityChangeHistoryEmployees)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conEmployee_EmpSecChgHistory_EmployeeID_FK1");

                entity.HasOne(d => d.Profile)
                    .WithMany(p => p.EmployeeSecurityChangeHistories)
                    .HasForeignKey(d => d.ProfileId)
                    .HasConstraintName("conProfile_EmpSecChgHistory_ProfileID_FK6");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.EmployeeSecurityChangeHistories)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("conRole_EmpSecChgHistory_RoleID_FK5");

                entity.HasOne(d => d.SecOfficeGroup)
                    .WithMany(p => p.EmployeeSecurityChangeHistories)
                    .HasForeignKey(d => d.SecOfficeGroupId)
                    .HasConstraintName("conSecOfficeGroup_EmpSecChgHistory_SecOfficeGroupID_FK7");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.EmployeeSecurityChangeHistoryUsers)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conEmployee_EmpSecChgHistory_UserID_FK4");
            });

            modelBuilder.Entity<EmployeeWorkgroupXref>(entity =>
            {
                entity.HasKey(e => e.EmployeeWorkgroupXrefId)
                    .HasName("IDXEmployeeWorkgroupXrefId")
                    .IsClustered(false);

                entity.ToTable("EmployeeWorkgroupXref");

                entity.HasIndex(e => e.EmployeeId, "CDXEmployeeWorkGroupXRef")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.EmployeeId, e.WorkgroupId }, "PKEmployeeWorkGroupXRef")
                    .IsUnique();

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.WorkgroupId).HasColumnName("WorkgroupID");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeWorkgroupXrefs)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FKEmployeeWorkGroupXRefXRef1");

                entity.HasOne(d => d.Workgroup)
                    .WithMany(p => p.EmployeeWorkgroupXrefs)
                    .HasForeignKey(d => d.WorkgroupId)
                    .HasConstraintName("FKEmployeeWorkGroupXRefXRef2");
            });

            modelBuilder.Entity<EndChange>(entity =>
            {
                entity.HasKey(e => e.TicketNum)
                    .HasName("PK__end_chan__4BDCA340D6950B25");

                entity.ToTable("end_change");

                entity.Property(e => e.TicketNum)
                    .ValueGeneratedNever()
                    .HasColumnName("ticket_num");
            });

            modelBuilder.Entity<Endorsement>(entity =>
            {
                entity.ToTable("Endorsement");

                entity.HasIndex(e => e.TitleEscrowInfoId, "EndorsementIdx")
                    .HasFillFactor(90);

                entity.Property(e => e.EndorsementId).HasColumnName("EndorsementID");

                entity.Property(e => e.NameId).HasColumnName("NameID");

                entity.Property(e => e.TitleEscrowInfoId).HasColumnName("TitleEscrowInfoID");

                entity.Property(e => e.TypeCdId).HasColumnName("TypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.Name)
                    .WithMany(p => p.EndorsementNames)
                    .HasForeignKey(d => d.NameId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Endorseme__NameI__6C1C3C17");

                entity.HasOne(d => d.TitleEscrowInfo)
                    .WithMany(p => p.Endorsements)
                    .HasForeignKey(d => d.TitleEscrowInfoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Endorseme__Title__6E048489");

                entity.HasOne(d => d.TypeCd)
                    .WithMany(p => p.EndorsementTypeCds)
                    .HasForeignKey(d => d.TypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Endorseme__TypeC__6D106050");

                entity.HasMany(d => d.Principals)
                    .WithMany(p => p.Endorsements)
                    .UsingEntity<Dictionary<string, object>>(
                        "EndorsementPrincipalXref",
                        l => l.HasOne<Principal>().WithMany().HasForeignKey("PrincipalId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Endorseme__Princ__46B5AD3E"),
                        r => r.HasOne<Endorsement>().WithMany().HasForeignKey("EndorsementId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Endorseme__Endor__45C18905"),
                        j =>
                        {
                            j.HasKey("EndorsementId", "PrincipalId").HasName("PK__Endorsem__350A7E474D6E1570");

                            j.ToTable("EndorsementPrincipalXRef");

                            j.HasIndex(new[] { "EndorsementId" }, "EndorsementPrincipalXRefIdx").HasFillFactor(90);

                            j.IndexerProperty<int>("EndorsementId").HasColumnName("EndorsementID");

                            j.IndexerProperty<int>("PrincipalId").HasColumnName("PrincipalID");
                        });
            });

            modelBuilder.Entity<Environment>(entity =>
            {
                entity.HasKey(e => e.Name)
                    .HasName("PK__Environm__737584F763543AC7");

                entity.ToTable("Environment");

                entity.Property(e => e.Name)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<EnvironmentInformation>(entity =>
            {
                entity.ToTable("EnvironmentInformation");

                entity.Property(e => e.CreatedByUser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(suser_name())");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EnvironmentName)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.SettingName)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedByUser)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.Value)
                    .HasMaxLength(512)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EscrowChargeTemplate>(entity =>
            {
                entity.ToTable("EscrowChargeTemplate");

                entity.HasIndex(e => new { e.BusinessUnitId, e.ObjectCd, e.ChargeProcessTypeCdId, e.GfeHudtypeCdId }, "IDX_ECT_Unique")
                    .IsUnique()
                    .HasFilter("([GfeHUDTypeCdID]<>(2372))")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.BusinessUnitId, e.ObjectCd, e.ChargeProcessTypeCdId, e.ChargeCategoryTypeCdId }, "XAK1EscrowChargeTemplate")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BusinessUnitId, "XIF91EscrowChargeTemplate")
                    .HasFillFactor(90);

                entity.Property(e => e.EscrowChargeTemplateId).HasColumnName("EscrowChargeTemplateID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.BuyerChargeSection)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerChargeSeqNum).HasDefaultValueSql("((0))");

                entity.Property(e => e.BuyerCreditSection)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerCreditSeqNum).HasDefaultValueSql("((0))");

                entity.Property(e => e.CalcBasePeriodTypeCdId).HasColumnName("CalcBasePeriodTypeCdID");

                entity.Property(e => e.ChargeCategoryTypeCdId).HasColumnName("ChargeCategoryTypeCdID");

                entity.Property(e => e.ChargeProcessTypeCdId).HasColumnName("ChargeProcessTypeCdID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.DefaultPaymentCategoryTypeCdId).HasColumnName("DefaultPaymentCategoryTypeCdID");

                entity.Property(e => e.DefaultPmtMethodTypeCdId).HasColumnName("DefaultPmtMethodTypeCdID");

                entity.Property(e => e.Descr)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.GfeEntryEditableFlag).HasDefaultValueSql("((0))");

                entity.Property(e => e.GfeEntryTypeCdId).HasColumnName("GfeEntryTypeCdID");

                entity.Property(e => e.GfeHudtypeCdId).HasColumnName("GfeHUDTypeCdID");

                entity.Property(e => e.GfeLenderDirEditableFlag).HasDefaultValueSql("((0))");

                entity.Property(e => e.GfeLenderDirectedFlag).HasDefaultValueSql("((1))");

                entity.Property(e => e.GfeThirdPartyEditableFlag).HasDefaultValueSql("((0))");

                entity.Property(e => e.GfeThirdPartyNameDefault)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Hud1BuyerChargeForCd).HasColumnName("Hud1BuyerChargeForCD");

                entity.Property(e => e.Hud1BuyerCreditForCd).HasColumnName("Hud1BuyerCreditForCD");

                entity.Property(e => e.Hud1SellerChargeForCd).HasColumnName("Hud1SellerChargeForCD");

                entity.Property(e => e.Hud1SellerCreditForCd).HasColumnName("Hud1SellerCreditForCD");

                entity.Property(e => e.MismocategoryTypeCdId).HasColumnName("MISMOCategoryTypeCdID");

                entity.Property(e => e.MismotypeCdId).HasColumnName("MISMOTypeCdID");

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ParentEscrowChargeTemplateId).HasColumnName("ParentEscrowChargeTemplateID");

                entity.Property(e => e.SellerChargeSection)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SellerChargeSeqNum).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellerCreditSection)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SellerCreditSeqNum).HasDefaultValueSql("((0))");

                entity.Property(e => e.SeqNum).HasDefaultValueSql("((0))");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.EscrowChargeTemplates)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conEscrowChrgTempl5F");

                entity.HasOne(d => d.CalcBasePeriodTypeCd)
                    .WithMany(p => p.EscrowChargeTemplateCalcBasePeriodTypeCds)
                    .HasForeignKey(d => d.CalcBasePeriodTypeCdId)
                    .HasConstraintName("conEscrowChrgTempl1F");

                entity.HasOne(d => d.ChargeCategoryTypeCd)
                    .WithMany(p => p.EscrowChargeTemplateChargeCategoryTypeCds)
                    .HasForeignKey(d => d.ChargeCategoryTypeCdId)
                    .HasConstraintName("conEscrowChrgTempl3F");

                entity.HasOne(d => d.ChargeProcessTypeCd)
                    .WithMany(p => p.EscrowChargeTemplateChargeProcessTypeCds)
                    .HasForeignKey(d => d.ChargeProcessTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conEscrowChrgTempl2F");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.EscrowChargeTemplates)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conEscrowChargeTemplate9FK");

                entity.HasOne(d => d.DefaultPaymentCategoryTypeCd)
                    .WithMany(p => p.EscrowChargeTemplateDefaultPaymentCategoryTypeCds)
                    .HasForeignKey(d => d.DefaultPaymentCategoryTypeCdId)
                    .HasConstraintName("conDefaultPaymentCategoryTypeCdIDFK");

                entity.HasOne(d => d.DefaultPmtMethodTypeCd)
                    .WithMany(p => p.EscrowChargeTemplateDefaultPmtMethodTypeCds)
                    .HasForeignKey(d => d.DefaultPmtMethodTypeCdId)
                    .HasConstraintName("conEscrowChrgTempl4F");

                entity.HasOne(d => d.ParentEscrowChargeTemplate)
                    .WithMany(p => p.InverseParentEscrowChargeTemplate)
                    .HasForeignKey(d => d.ParentEscrowChargeTemplateId)
                    .HasConstraintName("conParentEscrowChargeTemplateIDFK");
            });

            modelBuilder.Entity<EscrowChargeTemplateRuleListXref>(entity =>
            {
                entity.ToTable("EscrowChargeTemplateRuleListXref");

                entity.HasIndex(e => e.EscrowChargeTemplateId, "ncldx_EscrowChargeTemplateID")
                    .HasFillFactor(90);

                entity.Property(e => e.EscrowChargeTemplateRuleListXrefId).HasColumnName("EscrowChargeTemplateRuleListXrefID");

                entity.Property(e => e.EscrowChargeTemplateId).HasColumnName("EscrowChargeTemplateID");

                entity.Property(e => e.RuleId).HasColumnName("RuleID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.EscrowChargeTemplate)
                    .WithMany(p => p.EscrowChargeTemplateRuleListXrefs)
                    .HasForeignKey(d => d.EscrowChargeTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conEscrowChargeTemplateFK");

                entity.HasOne(d => d.Rule)
                    .WithMany(p => p.EscrowChargeTemplateRuleListXrefs)
                    .HasForeignKey(d => d.RuleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conRuleListIDFK");
            });

            modelBuilder.Entity<EsigningCredential>(entity =>
            {
                entity.HasKey(e => e.CredentialId)
                    .HasName("PK_CredentialID_ESigningCredentials");

                entity.ToTable("ESigningCredentials");

                entity.HasIndex(e => e.BusinessUnitId, "NC_BusinessUnitID_ESigningCredentials");

                entity.HasIndex(e => e.EsignPlatform, "NC_ESignPlatform_ESigningCredentials");

                entity.Property(e => e.CredentialId).HasColumnName("CredentialID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.ClientId)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("ClientID");

                entity.Property(e => e.ClientSecret)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.EsignPlatform).HasColumnName("ESignPlatform");

                entity.Property(e => e.IntegratorKey)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.SecretName)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UsedForEsigning).HasColumnName("UsedForESigning");

                entity.Property(e => e.UserName)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.EsigningCredentials)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusinessUnitID_ESigningCredentials");

                entity.HasOne(d => d.EsignPlatformNavigation)
                    .WithMany(p => p.EsigningCredentials)
                    .HasForeignKey(d => d.EsignPlatform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ESignPlatform_ESigningCredentials");
            });

            modelBuilder.Entity<EsigningDashboardDetail>(entity =>
            {
                entity.HasKey(e => e.EsigningEventLogId)
                    .HasName("PK_ESigningEventLogID_ESigningDashboardDetails");

                entity.ToTable("ESigningDashboardDetails");

                entity.HasIndex(e => e.DeliveryEventLogId, "NC_DeliveryEventLogID_ESigningDashboardDetails");

                entity.Property(e => e.EsigningEventLogId).HasColumnName("ESigningEventLogID");

                entity.Property(e => e.DeliveryEventLogId).HasColumnName("DeliveryEventLogID");

                entity.Property(e => e.DocumentName)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.EsigningCompletedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("ESigningCompletedOn");

                entity.Property(e => e.EsigningInitiatedBy)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ESigningInitiatedBy");

                entity.Property(e => e.EsigningInitiatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("ESigningInitiatedOn");

                entity.Property(e => e.EsigningPlatform).HasColumnName("ESigningPlatform");

                entity.Property(e => e.EsigningStatus).HasColumnName("ESigningStatus");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.HasOne(d => d.EsigningPlatformNavigation)
                    .WithMany(p => p.EsigningDashboardDetailEsigningPlatformNavigations)
                    .HasForeignKey(d => d.EsigningPlatform)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ESigningPlatform_ESigningDashboardDetails");

                entity.HasOne(d => d.EsigningStatusNavigation)
                    .WithMany(p => p.EsigningDashboardDetailEsigningStatusNavigations)
                    .HasForeignKey(d => d.EsigningStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ESigningStatus_ESigningDashboardDetails");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.EsigningDashboardDetails)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FileID_ESigningDashboardDetails");
            });

            modelBuilder.Entity<EtitleBusinessUnit>(entity =>
            {
                entity.HasKey(e => new { e.CorporateBusOrgId, e.BusinessUnitId });

                entity.ToTable("ETitleBusinessUnit");

                entity.Property(e => e.CorporateBusOrgId).HasColumnName("CorporateBusOrgID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.EtitleBusinessUnits)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conETitle2BusSourceTypeBusinessUnitFK");

                entity.HasOne(d => d.CorporateBusOrg)
                    .WithMany(p => p.EtitleBusinessUnits)
                    .HasForeignKey(d => d.CorporateBusOrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conETitle2CorprateBusOrgFK");
            });

            modelBuilder.Entity<EtitleDelivery>(entity =>
            {
                entity.ToTable("ETitleDelivery");

                entity.HasIndex(e => new { e.ClientId, e.ProcessState, e.EventLogId }, "ixn_ETitleDeliveryComposite")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DocId, "ixn_ETitleDeliveryDocID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.Pdfname, "ixn_ETitleDeliveryPDFName")
                    .HasFillFactor(90);

                entity.Property(e => e.EtitleDeliveryId).HasColumnName("ETitleDeliveryID");

                entity.Property(e => e.BatchId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BatchID");

                entity.Property(e => e.ClientId).HasColumnName("ClientID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EventLogFileName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.EventLogId).HasColumnName("EventLogID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.Pdfname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PDFName");

                entity.Property(e => e.ProcessState)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RequestId).HasColumnName("RequestID");

                entity.Property(e => e.SourceId).HasColumnName("SourceID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.ZipName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EtitleDeliveryAskfileDataLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ETitleDeliveryASKFileDataLog");

                entity.HasIndex(e => e.AskfileName, "ixn_ETitleDeliveryASKFileDataLogASKFileName")
                    .HasFillFactor(90);

                entity.Property(e => e.AskfileName)
                    .HasMaxLength(100)
                    .HasColumnName("ASKFileName");

                entity.Property(e => e.BorrowerFirstName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BorrowerLastName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.CapturedDate).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FundedDate).HasColumnType("datetime");

                entity.Property(e => e.IsEtitleDelivered).HasColumnName("IsETitleDelivered");

                entity.Property(e => e.LoanNbr)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MatchedComments)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.MissingDoc).HasMaxLength(255);

                entity.Property(e => e.NoRind)
                    .HasMaxLength(255)
                    .HasColumnName("NoRInd");

                entity.Property(e => e.PropAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PropCity)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PropState)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PropZip)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RegionName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Relsnbr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("RELSNbr");

                entity.Property(e => e.StlmtCoAddrLine1).HasMaxLength(255);

                entity.Property(e => e.StlmtCoCity).HasMaxLength(255);

                entity.Property(e => e.StlmtCoContact).HasMaxLength(255);

                entity.Property(e => e.StlmtCoMasterName).HasMaxLength(255);

                entity.Property(e => e.StlmtCoName).HasMaxLength(255);

                entity.Property(e => e.StlmtCoStateAbrvCode).HasMaxLength(255);
            });

            modelBuilder.Entity<EtitleDeliveryAskfileDatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ETitleDeliveryASKFileData");

                entity.HasIndex(e => e.AskfileName, "ixn_ETitleDeliveryASKFileDataASKFileName")
                    .HasFillFactor(90);

                entity.Property(e => e.AskfileName)
                    .HasMaxLength(100)
                    .HasColumnName("ASKFileName");

                entity.Property(e => e.BorrowerFirstName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BorrowerLastName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.CapturedDate).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FundedDate).HasColumnType("datetime");

                entity.Property(e => e.IsEtitleDelivered).HasColumnName("IsETitleDelivered");

                entity.Property(e => e.LoanNbr)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MatchedComments)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.MissingDoc).HasMaxLength(255);

                entity.Property(e => e.NoRind)
                    .HasMaxLength(255)
                    .HasColumnName("NoRInd");

                entity.Property(e => e.PropAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PropCity)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PropState)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PropZip)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RegionName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Relsnbr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("RELSNbr");

                entity.Property(e => e.StlmtCoAddrLine1).HasMaxLength(255);

                entity.Property(e => e.StlmtCoCity).HasMaxLength(255);

                entity.Property(e => e.StlmtCoContact).HasMaxLength(255);

                entity.Property(e => e.StlmtCoMasterName).HasMaxLength(255);

                entity.Property(e => e.StlmtCoName).HasMaxLength(255);

                entity.Property(e => e.StlmtCoStateAbrvCode).HasMaxLength(255);
            });

            modelBuilder.Entity<EtitleDeliveryLog>(entity =>
            {
                entity.ToTable("ETitleDeliveryLog");

                entity.Property(e => e.EtitleDeliveryLogId).HasColumnName("ETitleDeliveryLogID");

                entity.Property(e => e.BatchId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BatchID");

                entity.Property(e => e.ClientId).HasColumnName("ClientID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EventLogFileName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.EventLogId).HasColumnName("EventLogID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.LogEntryDate).HasColumnType("datetime");

                entity.Property(e => e.Pdfname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PDFName");

                entity.Property(e => e.ProcessState)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RequestId).HasColumnName("RequestID");

                entity.Property(e => e.SourceId).HasColumnName("SourceID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.ZipName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Etlsolr>(entity =>
            {
                entity.ToTable("ETLSOLR");

                entity.Property(e => e.Etlsolrid).HasColumnName("ETLSOLRID");

                entity.Property(e => e.BeginId).HasColumnName("BeginID");

                entity.Property(e => e.EndId).HasColumnName("EndID");

                entity.Property(e => e.Error)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.EventServer)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FailTime).HasColumnType("datetime");

                entity.Property(e => e.ProcessTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<EtlsolrfailQueue>(entity =>
            {
                entity.HasKey(e => e.EtlsolrfailQueueId)
                    .HasName("PK_ETLSOLRFailQueueID");

                entity.ToTable("ETLSOLRFailQueue");

                entity.Property(e => e.EtlsolrfailQueueId).HasColumnName("ETLSOLRFailQueueID");

                entity.Property(e => e.Error)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.EtlsolrId).HasColumnName("ETLSolrID");

                entity.Property(e => e.FailTime).HasColumnType("datetime");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.HasOne(d => d.Etlsolr)
                    .WithMany(p => p.EtlsolrfailQueues)
                    .HasForeignKey(d => d.EtlsolrId)
                    .HasConstraintName("FK_ETLSOLR_ETLFailQueue");
            });

            modelBuilder.Entity<Event>(entity =>
            {
                entity.ToTable("Event");

                entity.HasIndex(e => new { e.SuperEventId, e.Name }, "indEvent2")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ClassTypeId, e.Name }, "indEvent3")
                    .HasFillFactor(90);

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.Property(e => e.DeactivationDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .HasMaxLength(55)
                    .IsUnicode(false);

                entity.Property(e => e.ReactivationDate).HasColumnType("datetime");

                entity.Property(e => e.StatusChgComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StatusChgDate).HasColumnType("datetime");

                entity.Property(e => e.StatusChgUserId).HasColumnName("StatusChgUserID");

                entity.Property(e => e.SuperEventId).HasColumnName("SuperEventID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.Events)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conEvent6Fk");

                entity.HasOne(d => d.CreationUser)
                    .WithMany(p => p.EventCreationUsers)
                    .HasForeignKey(d => d.CreationUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conEvent4Fk");

                entity.HasOne(d => d.StatusChgUser)
                    .WithMany(p => p.EventStatusChgUsers)
                    .HasForeignKey(d => d.StatusChgUserId)
                    .HasConstraintName("conEvent3Fk");

                entity.HasOne(d => d.SuperEvent)
                    .WithMany(p => p.InverseSuperEvent)
                    .HasForeignKey(d => d.SuperEventId)
                    .HasConstraintName("conEvent2R");
            });

            modelBuilder.Entity<EventLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EventLog");

                entity.Property(e => e.ApplContext)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AssignedToId).HasColumnName("AssignedToID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.DocDeliveryId)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("DocDeliveryID");

                entity.Property(e => e.ErrorMsg)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.EventEndDate).HasColumnType("datetime");

                entity.Property(e => e.EventLogId).HasColumnName("EventLogID");

                entity.Property(e => e.EventSourceClassTypeId).HasColumnName("EventSourceClassTypeID");

                entity.Property(e => e.EventSourceId).HasColumnName("EventSourceID");

                entity.Property(e => e.EventStartDate).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.ScheduleDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SuperEventLogId).HasColumnName("SuperEventLogID");

                entity.Property(e => e.UpdSourceClassTypeId).HasColumnName("UpdSourceClassTypeID");

                entity.Property(e => e.UpdSourceId).HasColumnName("UpdSourceID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<EventLogArchiveStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EventLogArchiveStatus");

                entity.HasIndex(e => e.FileId, "clidxFileID")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.Property(e => e.ArchiveEndDateTime).HasColumnType("datetime");

                entity.Property(e => e.ArchiveStartDateTime).HasColumnType("datetime");

                entity.Property(e => e.EventLogTypeId).HasColumnName("EventLogTypeID");

                entity.Property(e => e.FileId).HasColumnName("FileID");
            });

            modelBuilder.Entity<EventLogEligibleFileId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EventLogEligibleFileIDs");

                entity.HasIndex(e => e.FileId, "clidxFileID")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.IsProcessed, "nclidxFileID")
                    .HasFillFactor(90);

                entity.Property(e => e.FileId).HasColumnName("FileID");
            });

            modelBuilder.Entity<EventLogKey>(entity =>
            {
                entity.HasKey(e => e.EventLogId)
                    .HasName("PK_EventLogKey_BigInt");

                entity.ToTable("EventLogKey");
            });

            modelBuilder.Entity<EventLogOe>(entity =>
            {
                entity.HasKey(e => new { e.EventLogId, e.FileId })
                    .HasName("PK_EventLogOEXKeyID");

                entity.ToTable("EventLogOE");

                entity.HasIndex(e => new { e.FileId, e.UpdTs }, "DW_IDX_EventOE_UpdTs")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.EventStartDate, "IX_EventLogOE_EventStartDate")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FileId, e.EventId, e.EventStartDate }, "indEventLogOE2")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FileId, e.SuperEventLogId }, "indEventLogOE3")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FileId, e.EventId }, "indEventLogOE6")
                    .HasFillFactor(90);

                entity.Property(e => e.EventLogId).HasColumnName("EventLogID");

                entity.Property(e => e.FileId)
                    .HasColumnName("FileID")
                    .HasDefaultValueSql("((1000))");

                entity.Property(e => e.ApplContext)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.DocDeliveryId)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("DocDeliveryID");

                entity.Property(e => e.ErrorMsg)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.EventEndDate).HasColumnType("datetime");

                entity.Property(e => e.EventSourceClassTypeId).HasColumnName("EventSourceClassTypeID");

                entity.Property(e => e.EventSourceId).HasColumnName("EventSourceID");

                entity.Property(e => e.EventStartDate).HasColumnType("datetime");

                entity.Property(e => e.ScheduleDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SuperEventLogId).HasColumnName("SuperEventLogID");

                entity.Property(e => e.UpdSourceClassTypeId).HasColumnName("UpdSourceClassTypeID");

                entity.Property(e => e.UpdSourceId).HasColumnName("UpdSourceID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.EventLogOeClassTypes)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conEventLogOE5Fk");

                entity.HasOne(d => d.Event)
                    .WithMany(p => p.EventLogOes)
                    .HasForeignKey(d => d.EventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conEventLogOE2Fk");

                entity.HasOne(d => d.EventSourceClassType)
                    .WithMany(p => p.EventLogOeEventSourceClassTypes)
                    .HasForeignKey(d => d.EventSourceClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conEventLogOE4Fk");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.EventLogOes)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conEventLogOE7Fk");

                entity.HasOne(d => d.SuperEventLog)
                    .WithMany(p => p.EventLogOes)
                    .HasForeignKey(d => d.SuperEventLogId)
                    .HasConstraintName("conEventLogOE3R");

                entity.HasOne(d => d.UpdSourceClassType)
                    .WithMany(p => p.EventLogOeUpdSourceClassTypes)
                    .HasForeignKey(d => d.UpdSourceClassTypeId)
                    .HasConstraintName("conEventLogOE6FK");
            });

            modelBuilder.Entity<EventLogTextDatum>(entity =>
            {
                entity.HasKey(e => e.EventLogTextDataId)
                    .HasName("PK_EventLogTextData_ID1")
                    .IsClustered(false);

                entity.HasIndex(e => e.EventLogId, "ixnEventLogTextData")
                    .IsClustered();

                entity.Property(e => e.EventLogTextDataId).HasColumnName("EventLogTextData_ID");

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.EventLogId).HasColumnName("EventLogID");
            });

            modelBuilder.Entity<Ewftemp>(entity =>
            {
                entity.HasKey(e => e.EventLogId)
                    .HasName("EWFtemp_Pk");

                entity.ToTable("EWFtemp");

                entity.Property(e => e.EventLogId)
                    .ValueGeneratedNever()
                    .HasColumnName("EventLogID");
            });

            modelBuilder.Entity<ExchangeFirstCoedate>(entity =>
            {
                entity.HasKey(e => e.FileId)
                    .HasName("PK_ExchangeFirstCOEdate_FileID");

                entity.ToTable("ExchangeFirstCOEdate");

                entity.HasIndex(e => new { e.FileId, e.DFcoe }, "UK_ExchangeFirstCOEdate_FileID_dFCOE")
                    .IsUnique();

                entity.Property(e => e.FileId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileID");

                entity.Property(e => e.DFcoe)
                    .HasColumnType("datetime")
                    .HasColumnName("dFCOE");

                entity.Property(e => e.IsProcessed).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.File)
                    .WithOne(p => p.ExchangeFirstCoedate)
                    .HasForeignKey<ExchangeFirstCoedate>(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExchangeFirstCOEdate_FileID");
            });

            modelBuilder.Entity<ExchangeTdsinfo>(entity =>
            {
                entity.ToTable("ExchangeTDSInfo");

                entity.HasIndex(e => e.BuyerFullConsolidateVestId, "idxExchangeTDSInfo_BuyerFullConsolidateVestID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BuyerShortConsolidateVestId, "idxExchangeTDSInfo_BuyerShortConsolidateVestId")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SellerFullConsolidateVestId, "idxExchangeTDSInfo_SellerFullConsolidateVestId")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SellerShortConsolidateVestId, "idxExchangeTDSInfo_SellerShortConsolidateVestID")
                    .HasFillFactor(90);

                entity.Property(e => e.ExchangeTdsinfoId).HasColumnName("ExchangeTDSInfoID");

                entity.Property(e => e.ActionNumber)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ActionTypeCdId).HasColumnName("ActionTypeCdID");

                entity.Property(e => e.AssignedEscrowNum)
                    .HasMaxLength(22)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerFullConsolidateVestId).HasColumnName("BuyerFullConsolidateVestID");

                entity.Property(e => e.BuyerSellerAgentFbpid).HasColumnName("BuyerSellerAgentFBPID");

                entity.Property(e => e.Coedate)
                    .HasColumnType("datetime")
                    .HasColumnName("COEDate");

                entity.Property(e => e.ContractAcceptanceDate).HasColumnType("datetime");

                entity.Property(e => e.ContractDate).HasColumnType("datetime");

                entity.Property(e => e.EscrowOfficerFbpid).HasColumnName("EscrowOfficerFBPID");

                entity.Property(e => e.EstimatedSettlementDate).HasColumnType("datetime");

                entity.Property(e => e.FastSearchType)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FsbuyerFullVestFlag).HasColumnName("FSBuyerFullVestFlag");

                entity.Property(e => e.InterestinProperty).HasColumnType("decimal(12, 8)");

                entity.Property(e => e.IsActualCoe).HasColumnName("IsActualCOE");

                entity.Property(e => e.SalesPriceAmt).HasColumnType("money");

                entity.Property(e => e.SellerShortConsolidateVestId).HasColumnName("SellerShortConsolidateVestID");

                entity.Property(e => e.TaxPayerAgentFbpid).HasColumnName("TaxPayerAgentFBPID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasMany(d => d.Properties)
                    .WithMany(p => p.ExchangeTdsinfos)
                    .UsingEntity<Dictionary<string, object>>(
                        "ExchangeTdsinfoRealPropertyXref",
                        l => l.HasOne<RealProperty>().WithMany().HasForeignKey("PropertyId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conExchangeTDSInfoRealPropertyXref2RealPropertyFK"),
                        r => r.HasOne<ExchangeTdsinfo>().WithMany().HasForeignKey("ExchangeTdsinfoId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conExchangeTDSInfoRealPropertyXref2ExchangeTDSInfoFK"),
                        j =>
                        {
                            j.HasKey("ExchangeTdsinfoId", "PropertyId").HasName("pk_ExchangeTDSInfoRealPropertyXref");

                            j.ToTable("ExchangeTDSInfoRealPropertyXref");

                            j.HasIndex(new[] { "PropertyId" }, "idx_TDSRealPropertyXref").HasFillFactor(90);

                            j.IndexerProperty<int>("ExchangeTdsinfoId").HasColumnName("ExchangeTDSInfoID");

                            j.IndexerProperty<int>("PropertyId").HasColumnName("PropertyID");
                        });
            });

            modelBuilder.Entity<ExportInfo>(entity =>
            {
                entity.ToTable("ExportInfo");

                entity.HasIndex(e => e.ApplId, "IDX_ExportInfo_ApplID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.StatusCd, e.ApplId }, "idx_ExportInfo_StatusCd_ApplId")
                    .HasFillFactor(90);

                entity.Property(e => e.ExportInfoId).HasColumnName("ExportInfoID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.ExportEndDate).HasColumnType("datetime");

                entity.Property(e => e.ExportStartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.Appl)
                    .WithMany(p => p.ExportInfos)
                    .HasForeignKey(d => d.ApplId)
                    .HasConstraintName("conExportInfo3Fk");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.ExportInfos)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conExportInfo2Fk");
            });

            modelBuilder.Entity<ExternalBusinessUnitXref>(entity =>
            {
                entity.HasKey(e => new { e.ExternalApplId, e.BusinessUnitId, e.ExternalBusinessUnitNum })
                    .HasName("XPKExternalBusinessUnitXref");

                entity.ToTable("ExternalBusinessUnitXref");

                entity.HasIndex(e => new { e.ExternalApplId, e.BusinessUnitId }, "conUniqExternalBusinessUnitXref")
                    .IsUnique();

                entity.HasIndex(e => new { e.ExternalApplId, e.ExternalBusinessUnitNum }, "conUniqExternalBusinessUnitXref1")
                    .IsUnique();

                entity.Property(e => e.ExternalApplId).HasColumnName("ExternalApplID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.ExternalBusinessUnitNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.ExternalBusinessUnitXrefs)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conExternalBusinessUnitXref2FK");

                entity.HasOne(d => d.ExternalAppl)
                    .WithMany(p => p.ExternalBusinessUnitXrefs)
                    .HasForeignKey(d => d.ExternalApplId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conExternalBusinessUnitXref1FK");
            });

            modelBuilder.Entity<ExternalFileService>(entity =>
            {
                entity.ToTable("ExternalFileService");

                entity.HasIndex(e => new { e.FileId, e.ServiceTypeCdId }, "IDXExternalFileService")
                    .HasFillFactor(90);

                entity.Property(e => e.ExternalFileServiceId).HasColumnName("ExternalFileServiceID");

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.ServiceTypeCdId).HasColumnName("ServiceTypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.ExternalFileServices)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ExternalF__FileI__558F7328");

                entity.HasOne(d => d.ServiceTypeCd)
                    .WithMany(p => p.ExternalFileServices)
                    .HasForeignKey(d => d.ServiceTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ExternalF__Servi__56839761");
            });

            modelBuilder.Entity<Facc2ndLevelParamMap>(entity =>
            {
                entity.HasKey(e => e.ParamMapId)
                    .HasName("PK_FACC2ndLevelParamMap_ParamMapID");

                entity.ToTable("FACC2ndLevelParamMap");

                entity.HasIndex(e => e.ParamCode, "idxFACC2ndLevelParamMap_Paramcode")
                    .HasFillFactor(90);

                entity.Property(e => e.ParamMapId).HasColumnName("ParamMapID");

                entity.Property(e => e.PropertyName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<FaccadditionalParam>(entity =>
            {
                entity.ToTable("FACCAdditionalParam");

                entity.HasIndex(e => new { e.CalculateFeeTypecdId, e.ServicefileFeeFaccxrefId }, "_dta_index_FACCAdditionalParam_")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ServiceFileFeeId, "idx_FACCAP_ServiceFileFeeID")
                    .HasFillFactor(90);

                entity.Property(e => e.FaccadditionalParamId).HasColumnName("FACCAdditionalParamID");

                entity.Property(e => e.CalculateFeeTypecdId).HasColumnName("CalculateFeeTypecdID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.FaccparamCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FACCParamCode");

                entity.Property(e => e.FaccparamKey)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FACCParamKey");

                entity.Property(e => e.FaccparamValue)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("FACCParamValue");

                entity.Property(e => e.FaccparamValueId)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("FACCParamValueID");

                entity.Property(e => e.FaccparamValueType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FACCParamValueType");

                entity.Property(e => e.Faccprompt)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("FACCPrompt");

                entity.Property(e => e.ServiceFileFeeId).HasColumnName("ServiceFileFeeID");

                entity.Property(e => e.ServicefileFeeFaccxrefId).HasColumnName("ServicefileFeeFACCXrefID");

                entity.Property(e => e.UpdDate).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.HasOne(d => d.CalculateFeeTypecd)
                    .WithMany(p => p.FaccadditionalParams)
                    .HasForeignKey(d => d.CalculateFeeTypecdId)
                    .HasConstraintName("FK_Add_CalculateFeeTypecdID");

                entity.HasOne(d => d.ServiceFileFee)
                    .WithMany(p => p.FaccadditionalParams)
                    .HasForeignKey(d => d.ServiceFileFeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACCAdditionalParam");
            });

            modelBuilder.Entity<FaccbusinessSegmentXref>(entity =>
            {
                entity.HasKey(e => e.BusinessSegmentId)
                    .HasName("PK_FACCBusinessSegmentXref_BusinessSegmentID");

                entity.ToTable("FACCBusinessSegmentXref");

                entity.Property(e => e.BusinessSegmentId)
                    .ValueGeneratedNever()
                    .HasColumnName("BusinessSegmentID");

                entity.Property(e => e.BusinessSegmentCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BusinessSegmentName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FaccbusinessSegmentId).HasColumnName("FACCBusinessSegmentID");

                entity.Property(e => e.FaccbusinessSegmentName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FACCBusinessSegmentName");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.BusinessSegment)
                    .WithOne(p => p.FaccbusinessSegmentXref)
                    .HasForeignKey<FaccbusinessSegmentXref>(d => d.BusinessSegmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusinessSegmentID_BusinessSegmentID");
            });

            modelBuilder.Entity<FaccclosingCost>(entity =>
            {
                entity.ToTable("FACCClosingCost");

                entity.HasIndex(e => e.ServiceFileFeeId, "IdxFACCClosingCostServiceFileFeeID")
                    .HasFillFactor(90);

                entity.Property(e => e.FaccclosingCostId).HasColumnName("FACCClosingCostID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.ChargeToCdId).HasColumnName("ChargeToCdID");

                entity.Property(e => e.CloseCity)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CloseCostDescr)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CloseCostId).HasColumnName("CloseCostID");

                entity.Property(e => e.CloseCostTypeDescr)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CloseCostTypeId).HasColumnName("CloseCostTypeID");

                entity.Property(e => e.CloseCounty)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CloseState)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ConsideredLoanAmt).HasColumnType("money");

                entity.Property(e => e.ConsideredSalesPriceAmt).HasColumnType("money");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

                entity.Property(e => e.Faccamount)
                    .HasColumnType("money")
                    .HasColumnName("FACCAmount");

                entity.Property(e => e.IsFacc).HasColumnName("IsFACC");

                entity.Property(e => e.OverRideEmployeeId).HasColumnName("OverRideEmployeeID");

                entity.Property(e => e.OverRideTypecdId).HasColumnName("OverRideTypecdID");

                entity.Property(e => e.OverrideReason)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.OverrideReasonObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceFileFeeId).HasColumnName("ServiceFileFeeID");

                entity.Property(e => e.SplitAmount).HasColumnType("money");

                entity.Property(e => e.SuperFaccclosingCostId).HasColumnName("SuperFACCClosingCostID");

                entity.Property(e => e.UnitType)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.UpdDate).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.HasOne(d => d.OverRideEmployee)
                    .WithMany(p => p.FaccclosingCosts)
                    .HasForeignKey(d => d.OverRideEmployeeId)
                    .HasConstraintName("FK_FACCClosingCostOverRideEmployeeID");

                entity.HasOne(d => d.OverRideTypecd)
                    .WithMany(p => p.FaccclosingCosts)
                    .HasForeignKey(d => d.OverRideTypecdId)
                    .HasConstraintName("FK_FACCClosingCostOverRideTypecdID");

                entity.HasOne(d => d.ServiceFileFee)
                    .WithMany(p => p.FaccclosingCosts)
                    .HasForeignKey(d => d.ServiceFileFeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACCClosingCostServiceFileFeeID");

                entity.HasOne(d => d.SuperFaccclosingCost)
                    .WithMany(p => p.InverseSuperFaccclosingCost)
                    .HasForeignKey(d => d.SuperFaccclosingCostId)
                    .HasConstraintName("FK_FACCClosingCostSuperFACCClosingCostID");
            });

            modelBuilder.Entity<FaccclosingCostNote>(entity =>
            {
                entity.ToTable("FACCClosingCostNote");

                entity.HasIndex(e => e.FaccclosingCostId, "IdxFACCClosingCostNoteFACCClosingCostID")
                    .HasFillFactor(90);

                entity.Property(e => e.FaccclosingCostNoteId).HasColumnName("FACCClosingCostNoteID");

                entity.Property(e => e.AdditionalFeeNote)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FaccclosingCostId).HasColumnName("FACCClosingCostID");

                entity.HasOne(d => d.FaccclosingCost)
                    .WithMany(p => p.FaccclosingCostNotes)
                    .HasForeignKey(d => d.FaccclosingCostId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACCClosingCostID");
            });

            modelBuilder.Entity<Faccendorsement>(entity =>
            {
                entity.ToTable("FACCEndorsement");

                entity.HasIndex(e => e.FacctitlePolicyId, "IdxFACCEndorsementFACCTitlePolicyID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ServiceFileFeeId, e.TitlePolicyTypecdId, e.ExternalFaccendorsementId }, "uidx_sffeeid_Policy_Endorsement")
                    .HasFillFactor(90);

                entity.Property(e => e.FaccendorsementId).HasColumnName("FACCEndorsementID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.ChargeToCdId).HasColumnName("ChargeToCdID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.Effectivedate).HasColumnType("datetime");

                entity.Property(e => e.ExternalFaccendorsementId).HasColumnName("ExternalFACCEndorsementID");

                entity.Property(e => e.Faccamount)
                    .HasColumnType("money")
                    .HasColumnName("FACCAmount");

                entity.Property(e => e.FaccendorsementDescr)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("FACCEndorsementDescr");

                entity.Property(e => e.FacctitlePolicyId).HasColumnName("FACCTitlePolicyID");

                entity.Property(e => e.GroupId).HasColumnName("GroupID");

                entity.Property(e => e.IsFacc).HasColumnName("IsFACC");

                entity.Property(e => e.OverRideEmployeeId).HasColumnName("OverRideEmployeeID");

                entity.Property(e => e.OverRideTypecdId).HasColumnName("OverRideTypecdID");

                entity.Property(e => e.OverrideReason)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.OverrideReasonObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceFileFeeId).HasColumnName("ServiceFileFeeID");

                entity.Property(e => e.SplitAmount).HasColumnType("money");

                entity.Property(e => e.SrseqNum).HasColumnName("SRSeqNum");

                entity.Property(e => e.SuperFaccendorsementId).HasColumnName("SuperFACCEndorsementID");

                entity.Property(e => e.TitlePolicyTypecdId).HasColumnName("TitlePolicyTypecdID");

                entity.Property(e => e.UpdDate).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.HasOne(d => d.FacctitlePolicy)
                    .WithMany(p => p.Faccendorsements)
                    .HasForeignKey(d => d.FacctitlePolicyId)
                    .HasConstraintName("FK_FACCEndorsementFACCTitlePolicyID");

                entity.HasOne(d => d.OverRideEmployee)
                    .WithMany(p => p.Faccendorsements)
                    .HasForeignKey(d => d.OverRideEmployeeId)
                    .HasConstraintName("FK__FACCEndor__OverR__5F18DD62");

                entity.HasOne(d => d.OverRideTypecd)
                    .WithMany(p => p.FaccendorsementOverRideTypecds)
                    .HasForeignKey(d => d.OverRideTypecdId)
                    .HasConstraintName("FK_End_OverRide");

                entity.HasOne(d => d.ServiceFileFee)
                    .WithMany(p => p.Faccendorsements)
                    .HasForeignKey(d => d.ServiceFileFeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACCEndorsement");

                entity.HasOne(d => d.TitlePolicyTypecd)
                    .WithMany(p => p.FaccendorsementTitlePolicyTypecds)
                    .HasForeignKey(d => d.TitlePolicyTypecdId)
                    .HasConstraintName("FK_TitlePolicyTypecdID");
            });

            modelBuilder.Entity<FaccoverrideInfo>(entity =>
            {
                entity.HasKey(e => e.FileId);

                entity.ToTable("FACCOverrideInfo");

                entity.Property(e => e.FileId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileID");

                entity.Property(e => e.AssociatedFileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OverrideTypeCdId).HasColumnName("OverrideTypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.File)
                    .WithOne(p => p.FaccoverrideInfo)
                    .HasForeignKey<FaccoverrideInfo>(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_FACCOverrideInfo_FK_2");

                entity.HasOne(d => d.OverrideTypeCd)
                    .WithMany(p => p.FaccoverrideInfos)
                    .HasForeignKey(d => d.OverrideTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_FACCOverrideInfo_FK_1");
            });

            modelBuilder.Entity<FaccpolicyProductxref>(entity =>
            {
                entity.HasKey(e => new { e.ProductTypeCdId, e.FaccpolicyCode })
                    .HasName("fastproduct_FACCProduct");

                entity.ToTable("FACCPolicyProductxref");

                entity.Property(e => e.ProductTypeCdId).HasColumnName("ProductTypeCdID");

                entity.Property(e => e.FaccpolicyCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FACCPolicyCode");

                entity.Property(e => e.Facccoverage)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FACCCoverage");

                entity.Property(e => e.FaccpolicyCategory)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FACCPolicyCategory");

                entity.Property(e => e.FaccpolicyId).HasColumnName("FACCPolicyID");

                entity.Property(e => e.FaccpolicyName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("FACCPolicyName");

                entity.Property(e => e.UpdDate).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ProductTypeCd)
                    .WithMany(p => p.FaccpolicyProductxrefs)
                    .HasForeignKey(d => d.ProductTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACCPolicyProduct");
            });

            modelBuilder.Entity<FaccrecordingFee>(entity =>
            {
                entity.ToTable("FACCRecordingFee");

                entity.HasIndex(e => e.ServiceFileFeeId, "idx_ServicefilefeeID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SuperRecordId, "idx_SuperRecordID")
                    .HasFillFactor(90);

                entity.Property(e => e.FaccrecordingFeeId).HasColumnName("FACCRecordingFeeID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.ChargeToCdId).HasColumnName("ChargeToCdID");

                entity.Property(e => e.ConsiderationAmount).HasColumnType("money");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.Faccamount)
                    .HasColumnType("money")
                    .HasColumnName("FACCAmount");

                entity.Property(e => e.IsFacc).HasColumnName("IsFACC");

                entity.Property(e => e.OverRideEmployeeId).HasColumnName("OverRideEmployeeID");

                entity.Property(e => e.OverRideTypecdId).HasColumnName("OverRideTypecdID");

                entity.Property(e => e.OverrideReason)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.OverrideReasonObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RecordingDocumentDescr)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RecordingDocumentId).HasColumnName("RecordingDocumentID");

                entity.Property(e => e.ServiceFileFeeId).HasColumnName("ServiceFileFeeID");

                entity.Property(e => e.SplitAmount).HasColumnType("money");

                entity.Property(e => e.SuperRecordId).HasColumnName("SuperRecordID");

                entity.Property(e => e.UpdDate).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.HasOne(d => d.OverRideEmployee)
                    .WithMany(p => p.FaccrecordingFees)
                    .HasForeignKey(d => d.OverRideEmployeeId)
                    .HasConstraintName("FK__FACCRecor__OverR__66B9FF2A");

                entity.HasOne(d => d.OverRideTypecd)
                    .WithMany(p => p.FaccrecordingFees)
                    .HasForeignKey(d => d.OverRideTypecdId)
                    .HasConstraintName("FK_Rec_OverRide");

                entity.HasOne(d => d.ServiceFileFee)
                    .WithMany(p => p.FaccrecordingFees)
                    .HasForeignKey(d => d.ServiceFileFeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACCRecordingFee");
            });

            modelBuilder.Entity<Faccrequestlog>(entity =>
            {
                entity.HasKey(e => new { e.FaccrequestlogId, e.FileId })
                    .HasName("PK_FACCRequestlogXKeyID");

                entity.ToTable("FACCRequestlog");

                entity.HasIndex(e => new { e.FileId, e.CreationDate }, "idx_Fileid1")
                    .HasFillFactor(90);

                entity.Property(e => e.FaccrequestlogId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FACCRequestlogID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.RequestXml).HasColumnType("xml");

                entity.Property(e => e.ResponceXml).HasColumnType("xml");

                entity.Property(e => e.UpdDate).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.Faccrequestlogs)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACCRequestlog1");
            });

            modelBuilder.Entity<FacctitlePolicy>(entity =>
            {
                entity.ToTable("FACCTitlePolicy");

                entity.HasIndex(e => e.SuperFacctitlePolicyId, "IdxFACCTitlePolicySuperFACCTitlePolicyID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ServiceFileFeeId, e.TitlePolicyTypecdId }, "uidx_sffeeid_TitlePolicyTypecdID")
                    .HasFillFactor(90);

                entity.Property(e => e.FacctitlePolicyId).HasColumnName("FACCTitlePolicyID");

                entity.Property(e => e.AdjustedAmount).HasColumnType("money");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.ChargeToCdId).HasColumnName("ChargeToCdID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.Effectivedate).HasColumnType("datetime");

                entity.Property(e => e.FaccadjustedAmount)
                    .HasColumnType("money")
                    .HasColumnName("FACCAdjustedAmount");

                entity.Property(e => e.Faccamount)
                    .HasColumnType("money")
                    .HasColumnName("FACCAmount");

                entity.Property(e => e.FaccrateTypeDescr)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("FACCRateTypeDescr");

                entity.Property(e => e.FaccrateTypeId).HasColumnName("FACCRateTypeID");

                entity.Property(e => e.FacctitlePolicyDescr)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("FACCTitlePolicyDescr");

                entity.Property(e => e.GroupId).HasColumnName("GroupID");

                entity.Property(e => e.GuaranteeLiabAmount).HasColumnType("money");

                entity.Property(e => e.IsFacc).HasColumnName("IsFACC");

                entity.Property(e => e.LinkKey).HasDefaultValueSql("((-1))");

                entity.Property(e => e.OverRideEmployeeId).HasColumnName("OverRideEmployeeID");

                entity.Property(e => e.OverRideTypecdId).HasColumnName("OverRideTypecdID");

                entity.Property(e => e.OverrideReason)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.OverrideReasonObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceFileFeeId).HasColumnName("ServiceFileFeeID");

                entity.Property(e => e.SplitAmount).HasColumnType("money");

                entity.Property(e => e.SuperFacctitlePolicyId).HasColumnName("SuperFACCTitlePolicyID");

                entity.Property(e => e.TitlePolicyTypecdId).HasColumnName("TitlePolicyTypecdID");

                entity.Property(e => e.UpdDate).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.HasOne(d => d.OverRideEmployee)
                    .WithMany(p => p.FacctitlePolicies)
                    .HasForeignKey(d => d.OverRideEmployeeId)
                    .HasConstraintName("FK__FACCTitle__OverR__6A8A900E");

                entity.HasOne(d => d.OverRideTypecd)
                    .WithMany(p => p.FacctitlePolicies)
                    .HasForeignKey(d => d.OverRideTypecdId)
                    .HasConstraintName("FK_Title_OverRide");

                entity.HasOne(d => d.ServiceFileFee)
                    .WithMany(p => p.FacctitlePolicies)
                    .HasForeignKey(d => d.ServiceFileFeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACCTitlePolicy");

                entity.HasOne(d => d.SuperFacctitlePolicy)
                    .WithMany(p => p.InverseSuperFacctitlePolicy)
                    .HasForeignKey(d => d.SuperFacctitlePolicyId)
                    .HasConstraintName("FK_FACCTitlePolicySuperFACCTitlePolicyID");
            });

            modelBuilder.Entity<FacctransactionDetail>(entity =>
            {
                entity.ToTable("FACCTransactionDetail", "EclipseSchema");

                entity.HasIndex(e => e.Guid, "IX_FACCTransactionDetail_GUID");

                entity.Property(e => e.Ccrequest)
                    .IsUnicode(false)
                    .HasColumnName("CCRequest");

                entity.Property(e => e.Ccresponse)
                    .IsUnicode(false)
                    .HasColumnName("CCResponse");

                entity.Property(e => e.CcresponseJson)
                    .IsUnicode(false)
                    .HasColumnName("CCResponseJson");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<FacctransactionTypeXref>(entity =>
            {
                entity.HasKey(e => e.TransactionTypeCdId)
                    .HasName("PK__FACCTran__9A20C34064D120A5");

                entity.ToTable("FACCTransactionTypeXref");

                entity.Property(e => e.TransactionTypeCdId)
                    .ValueGeneratedNever()
                    .HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.FacctransactionId).HasColumnName("FACCTransactionID");

                entity.Property(e => e.FacctransactionName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("FACCTransactionName");

                entity.Property(e => e.TransactionCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdDate).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.TransactionTypeCd)
                    .WithOne(p => p.FacctransactionTypeXref)
                    .HasForeignKey<FacctransactionTypeXref>(d => d.TransactionTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransactionType");
            });

            modelBuilder.Entity<Faccunderwriter>(entity =>
            {
                entity.ToTable("FACCUnderwriter");

                entity.Property(e => e.FaccunderwriterId)
                    .ValueGeneratedNever()
                    .HasColumnName("FACCUnderwriterID");

                entity.Property(e => e.FaccunderwriterName)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("FACCUnderwriterName");

                entity.Property(e => e.UpdDate).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<Fast1099sDetail>(entity =>
            {
                entity.HasKey(e => e.Fast1099sDetailsId)
                    .HasName("PKFAST1099sDetails");

                entity.ToTable("FAST1099sDetails");

                entity.HasIndex(e => new { e.FileId, e.VoidIndicator }, "idxFast1099SDetails1")
                    .HasFillFactor(90);

                entity.Property(e => e.Fast1099sDetailsId).HasColumnName("FAST1099sDetailsId");

                entity.Property(e => e.Address)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerRetax)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("BuyerRETax");

                entity.Property(e => e.BuyerRetaxPerc)
                    .HasColumnType("decimal(7, 4)")
                    .HasColumnName("BuyerRETaxPerc");

                entity.Property(e => e.City)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedUserId).HasColumnName("CreatedUserID");

                entity.Property(e => e.CurrentSeqNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(29)
                    .IsUnicode(false);

                entity.Property(e => e.ForeignAddress)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.GrossProceeds).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.GrossProceedsPerc).HasColumnType("decimal(7, 4)");

                entity.Property(e => e.LastDeliveredDate).HasColumnType("datetime");

                entity.Property(e => e.LastExportedDate).HasColumnType("datetime");

                entity.Property(e => e.LastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.OrigSeqNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyConsideration).HasDefaultValueSql("((0))");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Ssntintype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SSNTINType")
                    .IsFixedLength();

                entity.Property(e => e.Ssntinvalue)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("SSNTINValue");

                entity.Property(e => e.State)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.VoidDate).HasColumnType("datetime");

                entity.Property(e => e.Zip)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.File)
                    .WithMany(p => p.Fast1099sDetails)
                    .HasForeignKey(d => d.FileId)
                    .HasConstraintName("con1099SDetails1FK");

                entity.HasOne(d => d.PayeeIndicatorNavigation)
                    .WithMany(p => p.Fast1099sDetails)
                    .HasForeignKey(d => d.PayeeIndicator)
                    .HasConstraintName("con1099SDetails2FK");
            });

            modelBuilder.Entity<Fast1099sHeader>(entity =>
            {
                entity.ToTable("FAST1099sHeader");

                entity.HasIndex(e => e.FileId, "indxFileId1099S")
                    .HasFillFactor(90);

                entity.Property(e => e.Fast1099sHeaderId).HasColumnName("FAST1099sHeaderId");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.PropertyDescr)
                    .HasMaxLength(39)
                    .IsUnicode(false);

                entity.Property(e => e.RetaxFlag).HasColumnName("RETaxFlag");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.File)
                    .WithMany(p => p.Fast1099sHeaders)
                    .HasForeignKey(d => d.FileId)
                    .HasConstraintName("con1099S1FK");

                entity.HasOne(d => d.PropertydescrTypeCd)
                    .WithMany(p => p.Fast1099sHeaders)
                    .HasForeignKey(d => d.PropertydescrTypeCdId)
                    .HasConstraintName("con1099S2FK");
            });

            modelBuilder.Entity<Fast1099sextractDetail>(entity =>
            {
                entity.HasKey(e => e.ExtractId)
                    .HasName("PK__FAST1099__E155EE1C1621456B");

                entity.ToTable("FAST1099SExtractDetails");

                entity.Property(e => e.ExtractDate).HasColumnType("datetime");

                entity.Property(e => e.ExtractPath)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FastAlert>(entity =>
            {
                entity.HasKey(e => e.MsgId)
                    .HasName("PK__FastAler__662358926D2A1A40");

                entity.ToTable("FastAlert");

                entity.Property(e => e.MsgId).HasColumnName("MsgID");

                entity.Property(e => e.EmpTypeId).HasColumnName("EmpTypeID");

                entity.Property(e => e.ExpTime).HasColumnType("datetime");

                entity.Property(e => e.HostId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("HostID");

                entity.Property(e => e.Msg)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.RegionId).HasColumnName("RegionID");

                entity.Property(e => e.Updts)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<FastSceenGridScreenListXref>(entity =>
            {
                entity.HasKey(e => e.FastSceenGridId)
                    .HasName("conFastSceenGridScreenListXrefIDPk");

                entity.ToTable("FastSceenGridScreenListXref");

                entity.Property(e => e.FastSceenGridId).HasColumnName("FastSceenGridID");

                entity.Property(e => e.GridName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ScreenId).HasColumnName("ScreenID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.Screen)
                    .WithMany(p => p.FastSceenGridScreenListXrefs)
                    .HasForeignKey(d => d.ScreenId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFastSceenGridScreenListXrefScreenIDFK");
            });

            modelBuilder.Entity<FastSearchLog>(entity =>
            {
                entity.ToTable("FastSearchLog");

                entity.HasIndex(e => e.FileId, "IDXFSFileId")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PropertyId, "IDXFSPropertyId")
                    .HasFillFactor(90);

                entity.Property(e => e.FastSearchLogId).HasColumnName("FastSearchLogID");

                entity.Property(e => e.FastSearchOrderId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FastSearchOrderID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.FastSearchLogs)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFastSearchLog2Fk");
            });

            modelBuilder.Entity<FastSearchResult>(entity =>
            {
                entity.ToTable("FastSearchResult");

                entity.HasIndex(e => e.FileId, "FastSearchResult_ix1")
                    .HasFillFactor(90);

                entity.Property(e => e.FastSearchResultId).HasColumnName("FastSearchResultID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FileName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.File)
                    .WithMany(p => p.FastSearchResults)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FastSearchResult_fk1");
            });

            modelBuilder.Entity<FastprodCdcTable>(entity =>
            {
                entity.HasKey(e => e.TableName)
                    .HasName("PK__FASTPROD__733652EF07CFB820");

                entity.ToTable("FASTPROD_CDC_Tables");

                entity.Property(e => e.TableName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Cdcdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CDCDate");

                entity.Property(e => e.Cdcenabled).HasColumnName("CDCEnabled");

                entity.Property(e => e.Cdcid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CDCID");
            });

            modelBuilder.Entity<FastresultCodeXref>(entity =>
            {
                entity.ToTable("FASTResultCodeXref");

                entity.HasIndex(e => e.Resultcode, "UK_Resultcode")
                    .IsUnique();

                entity.Property(e => e.FastresultCodeXrefId).HasColumnName("FASTResultCodeXrefID");

                entity.Property(e => e.RecommendedAction)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ResponseData)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Result)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Resultcode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<FavoriteSearch>(entity =>
            {
                entity.ToTable("FavoriteSearch");

                entity.Property(e => e.FavoriteSearchId).HasColumnName("FavoriteSearchID");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.Keywords).IsUnicode(false);

                entity.Property(e => e.Regions).IsUnicode(false);

                entity.Property(e => e.SearchName).IsUnicode(false);

                entity.Property(e => e.SearchScopeTypeCdId).HasColumnName("SearchScopeTypeCdID");

                entity.Property(e => e.States).IsUnicode(false);

                entity.Property(e => e.TemplateDescription).IsUnicode(false);

                entity.Property(e => e.TemplateTypeCdId).HasColumnName("TemplateTypeCdID");

                entity.Property(e => e.TransactionTypes).IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<FaxGroup>(entity =>
            {
                entity.ToTable("FaxGroup");

                entity.HasIndex(e => e.BusinessUnitId, "Ind_FaxGroup_BusinessUnitID")
                    .HasFillFactor(90);

                entity.Property(e => e.FaxGroupId).HasColumnName("FaxGroupID");

                entity.Property(e => e.AddrLine1)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.AddrLine2)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.AddrLine3)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.AddrLine4)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.City)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.EmailId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EmailID");

                entity.Property(e => e.FaxGroupName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FaxNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Updts)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UPDTS");

                entity.Property(e => e.ZipCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.FaxGroups)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .HasConstraintName("FK_FaxGroup_BusinessUnitID");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.FaxGroups)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_FaxGroup_CreatedBy");
            });

            modelBuilder.Entity<FbpfilterDatum>(entity =>
            {
                entity.HasKey(e => e.FileBusinessPartyId)
                    .HasName("IDXFBPId");

                entity.ToTable("FBPFilterData");

                entity.HasIndex(e => e.BusOrgId, "IDXFBPBusOrgId")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.Fileid, "IDXFBPFileId")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.RoleTypeCdId, "IDXFBPRoleTypeCdId")
                    .HasFillFactor(90);

                entity.Property(e => e.FileBusinessPartyId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileBusinessPartyID");

                entity.Property(e => e.OriginalBusOrgId).HasColumnName("OriginalBusOrgID");
            });

            modelBuilder.Entity<Fbpinfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FBPInfo");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.Idcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("IDCode");

                entity.Property(e => e.Location)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FbpsearchVendorComment>(entity =>
            {
                entity.HasKey(e => e.CommentId)
                    .HasName("PK__FBPSearc__C3B4DFAAC71BF12B");

                entity.ToTable("FBPSearchVendorComment");

                entity.Property(e => e.CommentId).HasColumnName("CommentID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.Property(e => e.FileProcessId).HasColumnName("FileProcessID");

                entity.Property(e => e.Updts)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UPDTS");

                entity.Property(e => e.VendorComments)
                    .HasMaxLength(4000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FbpsearchVendorInfo>(entity =>
            {
                entity.HasKey(e => e.FileProcessId)
                    .HasName("PK__FBPSearc__96C0856CC0627009");

                entity.ToTable("FBPSearchVendorInfo");

                entity.Property(e => e.FileProcessId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileProcessID");

                entity.Property(e => e.ConfirmationDate).HasColumnType("datetime");

                entity.Property(e => e.Cost).HasColumnType("money");

                entity.Property(e => e.Updts)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UPDTS");

                entity.HasOne(d => d.FileProcess)
                    .WithOne(p => p.FbpsearchVendorInfo)
                    .HasForeignKey<FbpsearchVendorInfo>(d => d.FileProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__FBPSearchVendorInfo__FileProcessId");
            });

            modelBuilder.Entity<FbpsearchVendorProblemLog>(entity =>
            {
                entity.HasKey(e => e.ProbId)
                    .HasName("PK__FBPSearc__07803737E6FBF512");

                entity.ToTable("FBPSearchVendorProblemLog");

                entity.Property(e => e.ProbId).HasColumnName("ProbID");

                entity.Property(e => e.Descr)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FileProcessId).HasColumnName("FileProcessID");

                entity.Property(e => e.ProblemLogId).HasColumnName("ProblemLogID");

                entity.Property(e => e.Updts)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UPDTS");

                entity.HasOne(d => d.FileProcess)
                    .WithMany(p => p.FbpsearchVendorProblemLogs)
                    .HasForeignKey(d => d.FileProcessId)
                    .HasConstraintName("FK__FBPSearch__FileP__7AC0F7D7");
            });

            modelBuilder.Entity<FbpserviceTypeXref>(entity =>
            {
                entity.ToTable("FBPServiceTypeXref");

                entity.Property(e => e.FbpserviceTypeXrefId).HasColumnName("FBPServiceTypeXrefID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(45)
                    .IsUnicode(false);

                entity.Property(e => e.FileBusinessPartyId).HasColumnName("FileBusinessPartyID");

                entity.Property(e => e.ServiceTypeId).HasColumnName("ServiceTypeID");

                entity.HasOne(d => d.FileBusinessParty)
                    .WithMany(p => p.FbpserviceTypeXrefs)
                    .HasForeignKey(d => d.FileBusinessPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FBPServiceTypeXref_FBPServiceTypeXref");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.FbpserviceTypeXrefs)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TypeCddmt_ServiceTypeID");
            });

            modelBuilder.Entity<FctloanInfo>(entity =>
            {
                entity.HasKey(e => e.FileProcessId);

                entity.ToTable("FCTLoanInfo");

                entity.Property(e => e.FileProcessId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileProcessID");

                entity.Property(e => e.AgreementDate).HasColumnType("smalldatetime");

                entity.Property(e => e.BaseRate).HasColumnType("decimal(9, 5)");

                entity.Property(e => e.EquivalentRate).HasColumnType("decimal(9, 5)");

                entity.Property(e => e.InterestRate).HasColumnType("decimal(9, 5)");

                entity.Property(e => e.LastPaymentDue).HasColumnType("smalldatetime");

                entity.Property(e => e.MaxChargeRate).HasColumnType("decimal(9, 5)");

                entity.Property(e => e.MortgageProductTypeCdId).HasColumnName("MortgageProductTypeCdID");

                entity.Property(e => e.PaymentDatePeriod)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PlusMinusRate).HasColumnType("decimal(9, 5)");

                entity.Property(e => e.ProductOptionTypeCdId).HasColumnName("ProductOptionTypeCdID");

                entity.HasOne(d => d.FileProcess)
                    .WithOne(p => p.FctloanInfo)
                    .HasForeignKey<FctloanInfo>(d => d.FileProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFCTLoanInfo1FK");

                entity.HasOne(d => d.MortgageProductTypeCd)
                    .WithMany(p => p.FctloanInfoMortgageProductTypeCds)
                    .HasForeignKey(d => d.MortgageProductTypeCdId)
                    .HasConstraintName("conFCTLoanInfo2FK");

                entity.HasOne(d => d.ProductOptionTypeCd)
                    .WithMany(p => p.FctloanInfoProductOptionTypeCds)
                    .HasForeignKey(d => d.ProductOptionTypeCdId)
                    .HasConstraintName("conFCTLoanInfo3FK");
            });

            modelBuilder.Entity<FedwireStg>(entity =>
            {
                entity.ToTable("FedwireStg");

                entity.Property(e => e.Bdate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BDate");

                entity.Property(e => e.Boestatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BOEStatus");

                entity.Property(e => e.City)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cname)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CName");

                entity.Property(e => e.Fsstatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FSStatus");

                entity.Property(e => e.Ftstatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FTStatus");

                entity.Property(e => e.LastRevisionDate).HasColumnType("datetime");

                entity.Property(e => e.RoutingNumber)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Tname)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("TName");
            });

            modelBuilder.Entity<Fee>(entity =>
            {
                entity.ToTable("Fee");

                entity.HasIndex(e => e.EscrowChargeTemplateId, "XIF489Fee")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.BusinessUnitId, e.FeeTypeCdId }, "idxFee4")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.BusinessUnitId, e.ObjectCd, e.GfeHudtypeCdId }, "indFee2")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.GllookupId, e.ObjectCd, e.GfeHudtypeCdId }, "indFee3")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ClassTypeId, e.ObjectCd }, "indFee5")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TemplateId, "indFee5Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.FeeId).HasColumnName("FeeID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.ChargeToTypeCdId).HasColumnName("ChargeToTypeCdID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.DefaultChargeAmt).HasColumnType("money");

                entity.Property(e => e.Descr)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.EndorsementTypeCdId).HasColumnName("EndorsementTypeCdID");

                entity.Property(e => e.EscrowChargeTemplateId).HasColumnName("EscrowChargeTemplateID");

                entity.Property(e => e.Faccflag).HasColumnName("FACCFlag");

                entity.Property(e => e.FeeOwningOfficeTypeCdId).HasColumnName("FeeOwningOfficeTypeCdID");

                entity.Property(e => e.FeeTypeCdId).HasColumnName("FeeTypeCdID");

                entity.Property(e => e.GeographicTypeCdId).HasColumnName("GeographicTypeCdID");

                entity.Property(e => e.GfeHudtypeCdId).HasColumnName("GfeHUDTypeCdID");

                entity.Property(e => e.GllookupId).HasColumnName("GLLookupID");

                entity.Property(e => e.IsCplfee).HasColumnName("IsCPLFee");

                entity.Property(e => e.IsFaccclosingCostFee).HasColumnName("IsFACCClosingCostFee");

                entity.Property(e => e.LoanEstimateDescr)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.OtherTaxTypeCdId).HasColumnName("OtherTaxTypeCdID");

                entity.Property(e => e.RecipientType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.StatCode)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.T64excludeFlag).HasColumnName("T64ExcludeFlag");

                entity.Property(e => e.TemplateId).HasColumnName("TemplateID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.Uwglflag).HasColumnName("UWGLFlag");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.Fees)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFee2Fk");

                entity.HasOne(d => d.ChargeToTypeCd)
                    .WithMany(p => p.FeeChargeToTypeCds)
                    .HasForeignKey(d => d.ChargeToTypeCdId)
                    .HasConstraintName("conFee3Fk");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.Fees)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFee5Fk");

                entity.HasOne(d => d.EscrowChargeTemplate)
                    .WithMany(p => p.Fees)
                    .HasForeignKey(d => d.EscrowChargeTemplateId)
                    .HasConstraintName("conFee9Fk");

                entity.HasOne(d => d.FeeToBucketNavigation)
                    .WithMany(p => p.FeeFeeToBucketNavigations)
                    .HasForeignKey(d => d.FeeToBucket)
                    .HasConstraintName("conFeeToBucketType");

                entity.HasOne(d => d.FeeTypeCd)
                    .WithMany(p => p.FeeFeeTypeCds)
                    .HasForeignKey(d => d.FeeTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFee4Fk");

                entity.HasOne(d => d.GeographicTypeCd)
                    .WithMany(p => p.FeeGeographicTypeCds)
                    .HasForeignKey(d => d.GeographicTypeCdId)
                    .HasConstraintName("conFeeFK7");

                entity.HasOne(d => d.Gllookup)
                    .WithMany(p => p.Fees)
                    .HasForeignKey(d => d.GllookupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFee6FK");

                entity.HasOne(d => d.Template)
                    .WithMany(p => p.Fees)
                    .HasForeignKey(d => d.TemplateId)
                    .HasConstraintName("conFee7Fk");
            });

            modelBuilder.Entity<FeeFilterTemplate>(entity =>
            {
                entity.ToTable("FeeFilterTemplate");

                entity.HasIndex(e => new { e.BusinessUnitId, e.ServiceTypeCdId, e.StatusCd }, "ixn_FeeFilterTemplate1")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.BusinessUnitId, e.StatusCd, e.Name }, "ixn_FeeFilterTemplate2")
                    .HasFillFactor(90);

                entity.Property(e => e.FeeFilterTemplateId).HasColumnName("FeeFilterTemplateID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedUserId).HasColumnName("CreatedUserID");

                entity.Property(e => e.DeactivatedDate).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LastActivatedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceTypeCdId).HasColumnName("ServiceTypeCdID");

                entity.Property(e => e.StatusCd).HasColumnName("StatusCD");

                entity.Property(e => e.StatusChgComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StatusChgUserId).HasColumnName("StatusChgUserID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedUserId).HasColumnName("UpdatedUserID");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.FeeFilterTemplates)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFeeFilterTemplate_BusinessUnit");

                entity.HasOne(d => d.CreatedUser)
                    .WithMany(p => p.FeeFilterTemplateCreatedUsers)
                    .HasForeignKey(d => d.CreatedUserId)
                    .HasConstraintName("conFeeFilterTemplateEmp1");

                entity.HasOne(d => d.StatusChgUser)
                    .WithMany(p => p.FeeFilterTemplateStatusChgUsers)
                    .HasForeignKey(d => d.StatusChgUserId)
                    .HasConstraintName("conFeeFilterTemplateEmp2");
            });

            modelBuilder.Entity<FeeFilterTemplateFeeXref>(entity =>
            {
                entity.ToTable("FeeFilterTemplateFeeXref");

                entity.HasIndex(e => new { e.FeeFilterTemplateId, e.FeeId }, "ixn_FeeFilterTemplateFeeXref_FeeFilterTemplateID")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FeeId, "ixn_FeeFilterTemplateFeeXref_FeeID")
                    .HasFillFactor(90);

                entity.Property(e => e.FeeFilterTemplateId).HasColumnName("FeeFilterTemplateID");

                entity.Property(e => e.FeeId).HasColumnName("FeeID");

                entity.HasOne(d => d.FeeFilterTemplate)
                    .WithMany(p => p.FeeFilterTemplateFeeXrefs)
                    .HasForeignKey(d => d.FeeFilterTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFeeFilterTemplateFeeXref_FeeFilterTemplate");

                entity.HasOne(d => d.Fee)
                    .WithMany(p => p.FeeFilterTemplateFeeXrefs)
                    .HasForeignKey(d => d.FeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFeeFilterTemplateFeeXref_Fee");
            });

            modelBuilder.Entity<FeeSetupChangeHistory>(entity =>
            {
                entity.HasKey(e => e.FeeSetupHistoryId)
                    .HasName("FeeSetupChangeHistory_pk");

                entity.ToTable("FeeSetupChangeHistory");

                entity.Property(e => e.FeeSetupHistoryId).HasColumnName("FeeSetupHistoryID");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeeId).HasColumnName("FeeID");

                entity.Property(e => e.FeeSetupXml)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("FeeSetupXML");

                entity.Property(e => e.Notes)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.FeeSetupChangeHistories)
                    .HasForeignKey(d => d.CreatedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FeeSetupChangeHistory_Employee_Fk");

                entity.HasOne(d => d.Fee)
                    .WithMany(p => p.FeeSetupChangeHistories)
                    .HasForeignKey(d => d.FeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FeeSetupChangeHistory_FeeID_Fk");
            });

            modelBuilder.Entity<FeeTransferAllocation>(entity =>
            {
                entity.HasKey(e => e.DisbursementAllocationId);

                entity.ToTable("FeeTransferAllocation");

                entity.HasIndex(e => e.DisbursementAllocationId, "IX_FeeTransferAllocation")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.DisbursementId, e.ServiceFileFeeId }, "IX_FeeTransferDisbID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ServiceFileFeeId, e.DisbursementId }, "ixn_FeeTransferAllocation_ServiceFileFeeID")
                    .HasFillFactor(90);

                entity.Property(e => e.DisbursementAllocationId)
                    .ValueGeneratedNever()
                    .HasColumnName("DisbursementAllocationID");

                entity.Property(e => e.BuyerChargeAmount).HasColumnType("money");

                entity.Property(e => e.BuyerPaidChargeAmt).HasColumnType("money");

                entity.Property(e => e.BuyerPaidSalesTaxAmt).HasColumnType("money");

                entity.Property(e => e.BuyerSalesTaxAmt).HasColumnType("money");

                entity.Property(e => e.DisbursementId).HasColumnName("DisbursementID");

                entity.Property(e => e.ExchangeFeeAmt).HasColumnType("money");

                entity.Property(e => e.FeeId).HasColumnName("FeeID");

                entity.Property(e => e.FeeOwningOfficeBuid).HasColumnName("FeeOwningOfficeBUID");

                entity.Property(e => e.FeeOwningOfficeTypeCdId).HasColumnName("FeeOwningOfficeTypeCdID");

                entity.Property(e => e.FeeTypeCdId).HasColumnName("FeeTypeCdID");

                entity.Property(e => e.FileProcessId).HasColumnName("FileProcessID");

                entity.Property(e => e.FileTransactionTypeCdId).HasColumnName("FileTransactionTypeCdID");

                entity.Property(e => e.GllookupId).HasColumnName("GLLookupID");

                entity.Property(e => e.InvoiceId).HasColumnName("InvoiceID");

                entity.Property(e => e.Otcflag).HasColumnName("OTCFlag");

                entity.Property(e => e.PaymentMethodTypeCdId).HasColumnName("PaymentMethodTypeCdID");

                entity.Property(e => e.SellerChargeAmount).HasColumnType("money");

                entity.Property(e => e.SellerPaidChargeAmt).HasColumnType("money");

                entity.Property(e => e.SellerPaidSalesTaxAmt).HasColumnType("money");

                entity.Property(e => e.SellerSalesTaxAmt).HasColumnType("money");

                entity.Property(e => e.ServiceFileFeeId).HasColumnName("ServiceFileFeeID");

                entity.Property(e => e.SplitAmt).HasColumnType("money");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.DisbursementAllocation)
                    .WithOne(p => p.FeeTransferAllocation)
                    .HasForeignKey<FeeTransferAllocation>(d => d.DisbursementAllocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFeeTransferAllocation2FK");

                entity.HasOne(d => d.Disbursement)
                    .WithMany(p => p.FeeTransferAllocations)
                    .HasForeignKey(d => d.DisbursementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFeeTransferAllocation3FK");

                entity.HasOne(d => d.Fee)
                    .WithMany(p => p.FeeTransferAllocations)
                    .HasForeignKey(d => d.FeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFeeTransferAllocation4FK");
            });

            modelBuilder.Entity<FeeTransferExtract>(entity =>
            {
                entity.HasKey(e => e.FeeTransferExtractsId)
                    .HasName("conFeeTransferExtractsPK");

                entity.HasIndex(e => e.MapperId, "idfFeeTransferExtracts")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BankAccountNum, "idx_FTE_BankAccountNum")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FeeId, e.FeeType, e.FeeDistribution }, "idx_FTE_FeeID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileId, "idx_FTE_FileID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FileTransactionType, e.FileBusinessSegment, e.AdjReason }, "idx_FTE_Multiple")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.MapperId, e.FeeOwningOfficeBuid }, "idx_FeeOwningOfficeBUId")
                    .HasFillFactor(90);

                entity.Property(e => e.FeeTransferExtractsId).HasColumnName("FeeTransferExtractsID");

                entity.Property(e => e.AdhocBusinessSourceFlg)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.AdjDate).HasColumnType("datetime");

                entity.Property(e => e.AdjDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AdjReason)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BankAccountNum)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.BankAddress1)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.BankAddress2)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.BankCity)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BankCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BankCountry)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.BankCounty)
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.BankId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BankID");

                entity.Property(e => e.BankName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BankState)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BankZip)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BusSourceAddrBookId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BusSourceAddrBookID");

                entity.Property(e => e.BusSourceAddress1)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.BusSourceAddress2)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.BusSourceAttention)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BusSourceBusFax)
                    .HasMaxLength(52)
                    .IsUnicode(false);

                entity.Property(e => e.BusSourceBusPhone)
                    .HasMaxLength(52)
                    .IsUnicode(false);

                entity.Property(e => e.BusSourceCity)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BusSourceCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BusSourceCountry)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.BusSourceCounty)
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.BusSourceEntityType)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.BusSourceId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BusSourceID");

                entity.Property(e => e.BusSourceName1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BusSourceName2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BusSourceRefNum)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BusSourceRegionalParentAddrBookId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BusSourceRegionalParentAddrBookID");

                entity.Property(e => e.BusSourceRegionalParentAddress1)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.BusSourceRegionalParentAddress2)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.BusSourceRegionalParentCity)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BusSourceRegionalParentCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BusSourceRegionalParentCountry)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.BusSourceRegionalParentCounty)
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.BusSourceRegionalParentEntityType)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.BusSourceRegionalParentId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BusSourceRegionalParentID");

                entity.Property(e => e.BusSourceRegionalParentName1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BusSourceRegionalParentName2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BusSourceRegionalParentState)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BusSourceRegionalParentZip)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BusSourceSalesRep1Code)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BusSourceSalesRep1Fax)
                    .HasMaxLength(52)
                    .IsUnicode(false);

                entity.Property(e => e.BusSourceSalesRep1Id)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BusSourceSalesRep1ID");

                entity.Property(e => e.BusSourceSalesRep1Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BusSourceSalesRep1Phone)
                    .HasMaxLength(52)
                    .IsUnicode(false);

                entity.Property(e => e.BusSourceSalesRep2Code)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BusSourceSalesRep2Id)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BusSourceSalesRep2ID");

                entity.Property(e => e.BusSourceSalesRep2Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BusSourceState)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BusSourceZip)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameFirst1)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameFirst10)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameFirst2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameFirst3)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameFirst4)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameFirst5)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameFirst6)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameFirst7)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameFirst8)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameFirst9)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameLast1)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameLast10)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameLast2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameLast3)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameLast4)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameLast5)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameLast6)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameLast7)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameLast8)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameLast9)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameMiddle1)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameMiddle10)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameMiddle2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameMiddle3)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameMiddle4)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameMiddle5)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameMiddle6)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameMiddle7)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameMiddle8)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameMiddle9)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameShort1)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameShort10)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameShort2)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameShort3)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameShort4)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameShort5)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameShort6)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameShort7)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameShort8)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameShort9)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameSuffix1)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameSuffix10)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameSuffix2)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameSuffix3)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameSuffix4)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameSuffix5)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameSuffix6)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameSuffix7)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameSuffix8)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerNameSuffix9)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameFirst1)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameFirst10)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameFirst2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameFirst3)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameFirst4)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameFirst5)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameFirst6)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameFirst7)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameFirst8)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameFirst9)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameLast1)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameLast10)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameLast2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameLast3)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameLast4)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameLast5)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameLast6)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameLast7)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameLast8)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameLast9)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameMiddle1)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameMiddle10)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameMiddle2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameMiddle3)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameMiddle4)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameMiddle5)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameMiddle6)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameMiddle7)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameMiddle8)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameMiddle9)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameSuffix1)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameSuffix10)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameSuffix2)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameSuffix3)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameSuffix4)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameSuffix5)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameSuffix6)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameSuffix7)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameSuffix8)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSpouseNameSuffix9)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyIncomeFeeFlg)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DisbursementId).HasColumnName("DisbursementID");

                entity.Property(e => e.DocumentNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Eoobuid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EOOBuid");

                entity.Property(e => e.EoobusAddress1)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("EOOBusAddress1");

                entity.Property(e => e.EoobusAddress2)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("EOOBusAddress2");

                entity.Property(e => e.EoobusCity)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("EOOBusCity");

                entity.Property(e => e.EoobusCountry)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("EOOBusCountry");

                entity.Property(e => e.EoobusCounty)
                    .HasMaxLength(65)
                    .IsUnicode(false)
                    .HasColumnName("EOOBusCounty");

                entity.Property(e => e.EoobusState)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("EOOBusState");

                entity.Property(e => e.EoobusZip)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EOOBusZip");

                entity.Property(e => e.Eoocode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EOOCode");

                entity.Property(e => e.EoofastStatCd)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("EOOFastStatCD");

                entity.Property(e => e.EoofficerCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EOOfficerCode");

                entity.Property(e => e.EoofficerName)
                    .HasMaxLength(65)
                    .IsUnicode(false)
                    .HasColumnName("EOOfficerName");

                entity.Property(e => e.EooglclientCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("EOOGLClientCode");

                entity.Property(e => e.EoogldivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("EOOGLDivisionCode");

                entity.Property(e => e.EoohomeOfficeBuid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EOOHomeOfficeBuid");

                entity.Property(e => e.EoomailAddress1)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("EOOMailAddress1");

                entity.Property(e => e.EoomailAddress2)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("EOOMailAddress2");

                entity.Property(e => e.EoomailCity)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("EOOMailCity");

                entity.Property(e => e.EoomailCountry)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("EOOMailCountry");

                entity.Property(e => e.EoomailCounty)
                    .HasMaxLength(65)
                    .IsUnicode(false)
                    .HasColumnName("EOOMailCounty");

                entity.Property(e => e.EoomailState)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("EOOMailState");

                entity.Property(e => e.EoomailZip)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EOOMailZip");

                entity.Property(e => e.Eooname)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("EOOName");

                entity.Property(e => e.EooofficialCompanyName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EOOOfficialCompanyName");

                entity.Property(e => e.EooregionBuid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EOORegionBuid");

                entity.Property(e => e.EooregionCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EOORegionCode");

                entity.Property(e => e.EooregionName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("EOORegionName");

                entity.Property(e => e.Eoot32companyOfficeNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EOOT32CompanyOfficeNumber");

                entity.Property(e => e.EscrowOfficerFeeFlg)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FeeCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FeeDesc)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FeeDistribution)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.FeeGlcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FeeGLCode");

                entity.Property(e => e.FeeId).HasColumnName("FeeID");

                entity.Property(e => e.FeeOwningOfficeBuid)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FeeOwningOfficeType)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FeeSalesTax)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FeeSplitAmount)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FeeTransferComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FeeTransferStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FeeTransferTotalAmount)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FeeTransferTransType)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FeeType)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.FileBusinessSegment)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.FileId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FileID");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FileOpenDate).HasColumnType("datetime");

                entity.Property(e => e.FileServiceTypesConcat)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FileSettlementDate).HasColumnType("datetime");

                entity.Property(e => e.FileTransactionType)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.FirstNewLoanLiabilityAmount)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.GlextractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("GLExtractDate");

                entity.Property(e => e.GovernmentReportableFlg)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceExportDate).HasColumnType("datetime");

                entity.Property(e => e.InvoiceNum)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.MapperId).HasColumnName("MapperID");

                entity.Property(e => e.OfficeIncomeFeeFlg)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PostedOnDate).HasColumnType("datetime");

                entity.Property(e => e.PropertyAddrFirstLine1)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyAddrFirstLine2)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyAddrSecondLine1)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyAddrSecondLine2)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyCity1)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyCity2)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyCountry1)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyCountry2)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyCounty1)
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyCounty2)
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyState1)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyState2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyZip1)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyZip2)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RateTypeFlg)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RetainedAmount)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SalesPriceLiabilityAmount)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SalesRepFeeFlg)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameFirst1)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameFirst10)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameFirst2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameFirst3)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameFirst4)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameFirst5)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameFirst6)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameFirst7)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameFirst8)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameFirst9)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameLast1)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameLast10)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameLast2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameLast3)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameLast4)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameLast5)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameLast6)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameLast7)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameLast8)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameLast9)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameMiddle1)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameMiddle10)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameMiddle2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameMiddle3)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameMiddle4)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameMiddle5)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameMiddle6)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameMiddle7)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameMiddle8)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameMiddle9)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameShort1)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameShort10)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameShort2)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameShort3)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameShort4)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameShort5)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameShort6)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameShort7)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameShort8)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameShort9)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameSuffix1)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameSuffix10)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameSuffix2)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameSuffix3)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameSuffix4)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameSuffix5)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameSuffix6)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameSuffix7)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameSuffix8)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SellerNameSuffix9)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameFirst1)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameFirst10)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameFirst2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameFirst3)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameFirst4)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameFirst5)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameFirst6)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameFirst7)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameFirst8)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameFirst9)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameLast1)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameLast10)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameLast2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameLast3)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameLast4)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameLast5)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameLast6)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameLast7)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameLast8)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameLast9)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameMiddle1)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameMiddle10)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameMiddle2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameMiddle3)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameMiddle4)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameMiddle5)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameMiddle6)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameMiddle7)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameMiddle8)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameMiddle9)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameSuffix1)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameSuffix10)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameSuffix2)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameSuffix3)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameSuffix4)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameSuffix5)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameSuffix6)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameSuffix7)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameSuffix8)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSpouseNameSuffix9)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceFileFeeId).HasColumnName("ServiceFileFeeID");

                entity.Property(e => e.SmsbankCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SMSBankCode");

                entity.Property(e => e.SubjectToPromulgatedRateFlg)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SubjectToRemittanceFlg)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SubjectToSalesTaxFlg)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.T32extractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("T32ExtractDate");

                entity.Property(e => e.TitleOfficerFeeFlg)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Toobuid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TOOBuid");

                entity.Property(e => e.ToobusAddress1)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("TOOBusAddress1");

                entity.Property(e => e.ToobusAddress2)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("TOOBusAddress2");

                entity.Property(e => e.ToobusCity)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TOOBusCity");

                entity.Property(e => e.ToobusCountry)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TOOBusCountry");

                entity.Property(e => e.ToobusCounty)
                    .HasMaxLength(65)
                    .IsUnicode(false)
                    .HasColumnName("TOOBusCounty");

                entity.Property(e => e.ToobusState)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TOOBusState");

                entity.Property(e => e.ToobusZip)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TOOBusZip");

                entity.Property(e => e.Toocode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TOOCode");

                entity.Property(e => e.ToofastStatCd)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TOOFastStatCD");

                entity.Property(e => e.ToofficerCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TOOfficerCode");

                entity.Property(e => e.ToofficerName)
                    .HasMaxLength(65)
                    .IsUnicode(false)
                    .HasColumnName("TOOfficerName");

                entity.Property(e => e.TooglclientCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TOOGLClientCode");

                entity.Property(e => e.ToogldivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TOOGLDivisionCode");

                entity.Property(e => e.ToohomeOfficeBuid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TOOHomeOfficeBuid");

                entity.Property(e => e.ToomailAddress1)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("TOOMailAddress1");

                entity.Property(e => e.ToomailAddress2)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("TOOMailAddress2");

                entity.Property(e => e.ToomailCity)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TOOMailCity");

                entity.Property(e => e.ToomailCountry)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TOOMailCountry");

                entity.Property(e => e.ToomailCounty)
                    .HasMaxLength(65)
                    .IsUnicode(false)
                    .HasColumnName("TOOMailCounty");

                entity.Property(e => e.ToomailState)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TOOMailState");

                entity.Property(e => e.ToomailZip)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TOOMailZip");

                entity.Property(e => e.Tooname)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("TOOName");

                entity.Property(e => e.TooofficialCompanyName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TOOOfficialCompanyName");

                entity.Property(e => e.TooregionBuid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TOORegionBuid");

                entity.Property(e => e.TooregionCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TOORegionCode");

                entity.Property(e => e.TooregionName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("TOORegionName");

                entity.Property(e => e.Toot32companyOfficeNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TOOT32CompanyOfficeNumber");

                entity.Property(e => e.TootitleAgentType)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("TOOTitleAgentType");

                entity.Property(e => e.ToounderwriterCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TOOUnderwriterCode");

                entity.Property(e => e.ToounderwriterId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TOOUnderwriterID");

                entity.Property(e => e.ToounderwriterName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TOOUnderwriterName");

                entity.Property(e => e.TransactionCodeFlg)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.XmlowningOfficeBuid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("XMLOwningOfficeBuid");
            });

            modelBuilder.Entity<FftbusOrgXref>(entity =>
            {
                entity.ToTable("FFTBusOrgXref");

                entity.HasIndex(e => new { e.FeeFilterTemplateId, e.BusOrgId }, "clx_FFTBusOrgXref")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.BusOrgId, e.FeeFilterTemplateId }, "ixn_FFTBusOrgXref")
                    .HasFillFactor(90);

                entity.Property(e => e.FftbusOrgXrefId).HasColumnName("FFTBusOrgXrefId");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.FeeFilterTemplateId).HasColumnName("FeeFilterTemplateID");

                entity.HasOne(d => d.BusOrg)
                    .WithMany(p => p.FftbusOrgXrefs)
                    .HasForeignKey(d => d.BusOrgId)
                    .HasConstraintName("conFFTBusOrgXref_BusOrgID");

                entity.HasOne(d => d.FeeFilterTemplate)
                    .WithMany(p => p.FftbusOrgXrefs)
                    .HasForeignKey(d => d.FeeFilterTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFFTBusOrgXref_FeeFilterTemplate");
            });

            modelBuilder.Entity<FftchangeHistory>(entity =>
            {
                entity.HasKey(e => e.FeeFilterTemplateHistoryId)
                    .HasName("conFFTChangeHistoryPk");

                entity.ToTable("FFTChangeHistory");

                entity.HasIndex(e => e.FeeFilterTemplateId, "ixn_FFTChangeHistory1")
                    .HasFillFactor(90);

                entity.Property(e => e.FeeFilterTemplateHistoryId).HasColumnName("FeeFilterTemplateHistoryID");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.EventTypeCdId).HasColumnName("EventTypeCdID");

                entity.Property(e => e.FeeFilterTemplateId).HasColumnName("FeeFilterTemplateID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.EventTypeCd)
                    .WithMany(p => p.FftchangeHistories)
                    .HasForeignKey(d => d.EventTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFFTChangeHistory_TypeCdDmt");

                entity.HasOne(d => d.FeeFilterTemplate)
                    .WithMany(p => p.FftchangeHistories)
                    .HasForeignKey(d => d.FeeFilterTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFFTChangeHistory_FeeFilterTemplate");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.FftchangeHistories)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFFTChangeHistory_Emp");
            });

            modelBuilder.Entity<FftgeoRegionXref>(entity =>
            {
                entity.ToTable("FFTGeoRegionXref");

                entity.HasIndex(e => new { e.FeeFilterTemplateId, e.ClassTypeId, e.GeoRegionId }, "clx_FFTGeoRegionXref")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ClassTypeId, e.GeoRegionId, e.FeeFilterTemplateId }, "ixn_FFTGeoRegionXref")
                    .HasFillFactor(90);

                entity.Property(e => e.FftgeoRegionXrefId).HasColumnName("FFTGeoRegionXrefId");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.FeeFilterTemplateId).HasColumnName("FeeFilterTemplateID");

                entity.Property(e => e.GeoRegionId).HasColumnName("GeoRegionID");

                entity.HasOne(d => d.FeeFilterTemplate)
                    .WithMany(p => p.FftgeoRegionXrefs)
                    .HasForeignKey(d => d.FeeFilterTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFFTGeoRegionXref_FeeFilterTemplate");
            });

            modelBuilder.Entity<FftprogramTypeXref>(entity =>
            {
                entity.ToTable("FFTProgramTypeXref");

                entity.HasIndex(e => new { e.FeeFilterTemplateId, e.ProgramTypeId }, "clx_FFTProgramTypeXref")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ProgramTypeId, e.FeeFilterTemplateId }, "ixn_FFTProgramTypeXref")
                    .HasFillFactor(90);

                entity.Property(e => e.FftprogramTypeXrefId).HasColumnName("FFTProgramTypeXrefId");

                entity.Property(e => e.FeeFilterTemplateId).HasColumnName("FeeFilterTemplateID");

                entity.Property(e => e.ProgramTypeId).HasColumnName("ProgramTypeID");

                entity.HasOne(d => d.FeeFilterTemplate)
                    .WithMany(p => p.FftprogramTypeXrefs)
                    .HasForeignKey(d => d.FeeFilterTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFFTProgramTypeXref_FeeFilterTemplate");

                entity.HasOne(d => d.ProgramType)
                    .WithMany(p => p.FftprogramTypeXrefs)
                    .HasForeignKey(d => d.ProgramTypeId)
                    .HasConstraintName("conFFTProgramTypeXref_ProgramType");
            });

            modelBuilder.Entity<FftregionUnderwriterXref>(entity =>
            {
                entity.ToTable("FFTRegionUnderwriterXref");

                entity.HasIndex(e => new { e.FeeFilterTemplateId, e.RegionUnderwriterId }, "clx_FFTRegionUnderwriterXref")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.RegionUnderwriterId, e.FeeFilterTemplateId }, "ixn_FFTRegionUnderWriterXref")
                    .HasFillFactor(90);

                entity.Property(e => e.FftregionUnderwriterXrefId).HasColumnName("FFTRegionUnderwriterXrefId");

                entity.Property(e => e.FeeFilterTemplateId).HasColumnName("FeeFilterTemplateID");

                entity.Property(e => e.RegionUnderwriterId).HasColumnName("RegionUnderwriterID");

                entity.HasOne(d => d.FeeFilterTemplate)
                    .WithMany(p => p.FftregionUnderwriterXrefs)
                    .HasForeignKey(d => d.FeeFilterTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFFTRegionUnderwriterXref_FeeFilterTemplate");

                entity.HasOne(d => d.RegionUnderwriter)
                    .WithMany(p => p.FftregionUnderwriterXrefs)
                    .HasForeignKey(d => d.RegionUnderwriterId)
                    .HasConstraintName("conFFTRegionUnderwriterXref_RegionUnderwriter");
            });

            modelBuilder.Entity<FftsearchTypeXref>(entity =>
            {
                entity.ToTable("FFTSearchTypeXref");

                entity.HasIndex(e => new { e.FeeFilterTemplateId, e.SearchTypeId }, "clx_FFTSearchTypeXref")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.SearchTypeId, e.FeeFilterTemplateId }, "ixn_FFTSearchTypeXref")
                    .HasFillFactor(90);

                entity.Property(e => e.FftsearchTypeXrefId).HasColumnName("FFTSearchTypeXrefId");

                entity.Property(e => e.FeeFilterTemplateId).HasColumnName("FeeFilterTemplateID");

                entity.Property(e => e.SearchTypeId).HasColumnName("SearchTypeID");

                entity.HasOne(d => d.FeeFilterTemplate)
                    .WithMany(p => p.FftsearchTypeXrefs)
                    .HasForeignKey(d => d.FeeFilterTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFFTSearchTypeXref_FeeFilterTemplate");

                entity.HasOne(d => d.SearchType)
                    .WithMany(p => p.FftsearchTypeXrefs)
                    .HasForeignKey(d => d.SearchTypeId)
                    .HasConstraintName("conFFTSearchTypeXref_SearchType");
            });

            modelBuilder.Entity<FfttypeCdDmtXref>(entity =>
            {
                entity.ToTable("FFTTypeCdDmtXref");

                entity.HasIndex(e => new { e.FeeFilterTemplateId, e.ClassTypeId, e.TypeCdId }, "clx_FFTTypeCdDmtXref")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ClassTypeId, e.TypeCdId, e.FeeFilterTemplateId }, "ixn_FFTTypeCdDmtXref")
                    .HasFillFactor(90);

                entity.Property(e => e.FfttypeCdDmtXrefId).HasColumnName("FFTTypeCdDmtXrefId");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.FeeFilterTemplateId).HasColumnName("FeeFilterTemplateID");

                entity.Property(e => e.TypeCdId).HasColumnName("TypeCdID");

                entity.HasOne(d => d.FeeFilterTemplate)
                    .WithMany(p => p.FfttypeCdDmtXrefs)
                    .HasForeignKey(d => d.FeeFilterTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFFTTypeCdDmtXref_FeeFilterTemplate");

                entity.HasOne(d => d.TypeCd)
                    .WithMany(p => p.FfttypeCdDmtXrefs)
                    .HasForeignKey(d => d.TypeCdId)
                    .HasConstraintName("conFFTTypeCdDmtXref_TypeCdDmt");
            });

            modelBuilder.Entity<FieldElement>(entity =>
            {
                entity.ToTable("FieldElement");

                entity.HasIndex(e => new { e.FormdocumentId, e.FieldTemplateId }, "XAK1FieldElement")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FieldTemplateId, "XIF55FieldElement")
                    .HasFillFactor(90);

                entity.Property(e => e.FieldElementId).HasColumnName("FieldElementID");

                entity.Property(e => e.FieldTemplateId).HasColumnName("FieldTemplateID");

                entity.Property(e => e.FormdocumentId).HasColumnName("FormdocumentID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.Value)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.HasOne(d => d.FieldTemplate)
                    .WithMany(p => p.FieldElements)
                    .HasForeignKey(d => d.FieldTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFieldElement3fk");

                entity.HasOne(d => d.Formdocument)
                    .WithMany(p => p.FieldElements)
                    .HasForeignKey(d => d.FormdocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFieldElement4fk");
            });

            modelBuilder.Entity<FieldTemplate>(entity =>
            {
                entity.ToTable("FieldTemplate");

                entity.HasIndex(e => e.FormTemplateId, "XIF290FieldTemplate")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DataElementId, "XIF294FieldTemplate")
                    .HasFillFactor(90);

                entity.Property(e => e.FieldTemplateId).HasColumnName("FieldTemplateID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CopyToKeyField)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.Property(e => e.CustomFloatKey)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CustomSupplKey)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.DataElementId).HasColumnName("DataElementID");

                entity.Property(e => e.Descr)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayTypeCdId).HasColumnName("DisplayTypeCdID");

                entity.Property(e => e.FloatKeyField)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.FlowRuleTypeCdid).HasColumnName("FlowRuleTypeCDID");

                entity.Property(e => e.FormTemplateId).HasColumnName("FormTemplateID");

                entity.Property(e => e.FormatCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.KeyField)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.MoveToKeyField)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.OverFlowKeyField)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.StatusChgDate).HasColumnType("datetime");

                entity.Property(e => e.StatusChgUserId).HasColumnName("StatusChgUserID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.FieldTemplates)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFieldTemplate5fk");

                entity.HasOne(d => d.DataElement)
                    .WithMany(p => p.FieldTemplates)
                    .HasForeignKey(d => d.DataElementId)
                    .HasConstraintName("conFieldTemplate4fk");

                entity.HasOne(d => d.DisplayTypeCd)
                    .WithMany(p => p.FieldTemplateDisplayTypeCds)
                    .HasForeignKey(d => d.DisplayTypeCdId)
                    .HasConstraintName("conFieldTemplate3fk");

                entity.HasOne(d => d.FlowRuleTypeCd)
                    .WithMany(p => p.FieldTemplateFlowRuleTypeCds)
                    .HasForeignKey(d => d.FlowRuleTypeCdid)
                    .HasConstraintName("conFieldTemplate2fk");

                entity.HasOne(d => d.FormTemplate)
                    .WithMany(p => p.FieldTemplates)
                    .HasForeignKey(d => d.FormTemplateId)
                    .HasConstraintName("conFieldTemplate1fk");
            });

            modelBuilder.Entity<FileAccount>(entity =>
            {
                entity.HasKey(e => e.AccountId)
                    .HasName("XPKFileAccount");

                entity.ToTable("FileAccount");

                entity.Property(e => e.AccountId).HasColumnName("AccountID");

                entity.Property(e => e.AccountCd)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.FileAccounts)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFileAccount4FK");
            });

            modelBuilder.Entity<FileBusinessParty>(entity =>
            {
                entity.ToTable("FileBusinessParty");

                entity.HasIndex(e => e.UpdTs, "DW_IXN01_FileBusinessParty_UpdTS")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.StatusEmailFlag, "IDX3FileBusinessParty")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.RefBusOrgId, "IX_FileBusinessParty_RefBusOrgID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.Sales1EmployeeId, "IX_FileBusinessParty_Sales1EmployeeID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.Sales2EmployeeId, "IX_FileBusinessParty_Sales2EmployeeID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FileId, e.RoleTypeCdId, e.BusinessUnitId }, "IdxFileBusinessParty1")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FileId, e.BusinessUnitId, e.PrincipalId, e.BusOrgId, e.FileBusinessPartyId, e.RoleTypeCdId, e.RefNum, e.ContactId }, "IdxFileBusinessParty2")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.BusOrgId, e.RoleTypeCdId, e.FileId, e.ContactId, e.RefNum }, "IdxFileBusinessParty3")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BusOrgAlternateNameId, "IdxFileBusinessPartyBusOrgAlternateNameID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BusinessUnitId, "XIF80FileBusinessParty")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CheckDescriptionDetailId, "XIF82FileBusinessParty")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SuperFileBusinessPartyId, "XIF83FileBusinessParty")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PrincipalId, "XIF84FileBusinessParty")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ContactId, "XIF85FileBusinessParty")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BusOrgId, "XIF86FileBusinessParty")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileId, "XIF88FileBusinessParty")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PhysicalAddrId, "idxPhysicalAddrID")
                    .HasFillFactor(90);

                entity.Property(e => e.FileBusinessPartyId).HasColumnName("FileBusinessPartyID");

                entity.Property(e => e.AttentionName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BusOrgAlternateNameId).HasColumnName("BusOrgAlternateNameID");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.CheckDescriptionDetailId).HasColumnName("CheckDescriptionDetailID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.DisableNotificationCdId).HasColumnName("DisableNotificationCdID");

                entity.Property(e => e.EntitySubTypeCdId).HasColumnName("EntitySubTypeCdID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.GabrequestBusOrgReferenceId).HasColumnName("GABRequestBusOrgReferenceID");

                entity.Property(e => e.IssueCheckFlag).HasDefaultValueSql("((1))");

                entity.Property(e => e.PersonId).HasColumnName("PersonID");

                entity.Property(e => e.PhysicalAddrId).HasColumnName("PhysicalAddrID");

                entity.Property(e => e.PrincipalId).HasColumnName("PrincipalID");

                entity.Property(e => e.RefNum)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RoleTypeCdId).HasColumnName("RoleTypeCdID");

                entity.Property(e => e.Sales1EmployeeId).HasColumnName("Sales1EmployeeID");

                entity.Property(e => e.Sales2EmployeeId).HasColumnName("Sales2EmployeeID");

                entity.Property(e => e.SuperFileBusinessPartyId).HasColumnName("SuperFileBusinessPartyID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.AgentOffice)
                    .WithMany(p => p.FileBusinessPartyAgentOffices)
                    .HasForeignKey(d => d.AgentOfficeId)
                    .HasConstraintName("FK_FileBusinessParty_AgentOfficeId");

                entity.HasOne(d => d.BusOrgAlternateName)
                    .WithMany(p => p.FileBusinessParties)
                    .HasForeignKey(d => d.BusOrgAlternateNameId)
                    .HasConstraintName("conFBPAlternameNameFk");

                entity.HasOne(d => d.BusOrg)
                    .WithMany(p => p.FileBusinessParties)
                    .HasForeignKey(d => d.BusOrgId)
                    .HasConstraintName("conFileBusinessParty10FK");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.FileBusinessPartyBusinessUnits)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .HasConstraintName("conFileBusinessParty31FK");

                entity.HasOne(d => d.CheckDescriptionDetail)
                    .WithMany(p => p.FileBusinessParties)
                    .HasForeignKey(d => d.CheckDescriptionDetailId)
                    .HasConstraintName("conCheckDescriptionDetail1FK");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.FileBusinessParties)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFileBusinessParty5FK");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.FileBusinessParties)
                    .HasForeignKey(d => d.ContactId)
                    .HasConstraintName("conFileBusinessParty11FK");

                entity.HasOne(d => d.DisableNotificationCd)
                    .WithMany(p => p.FileBusinessPartyDisableNotificationCds)
                    .HasForeignKey(d => d.DisableNotificationCdId)
                    .HasConstraintName("conDisableNotificationCdIDFK");

                entity.HasOne(d => d.EntitySubTypeCd)
                    .WithMany(p => p.FileBusinessPartyEntitySubTypeCds)
                    .HasForeignKey(d => d.EntitySubTypeCdId)
                    .HasConstraintName("conFileBusinessParty13FK");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.FileBusinessParties)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFileBusinessParty1FK");

                entity.HasOne(d => d.GabrequestBusOrgReference)
                    .WithMany(p => p.FileBusinessParties)
                    .HasForeignKey(d => d.GabrequestBusOrgReferenceId)
                    .HasConstraintName("conFBPGABRequestBusOrgReferenceFk");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.FileBusinessParties)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("conFileBusinessParty_PersonIDfk");

                entity.HasOne(d => d.PhysicalAddr)
                    .WithMany(p => p.FileBusinessParties)
                    .HasForeignKey(d => d.PhysicalAddrId)
                    .HasConstraintName("conFBPPhysicalAddrFk");

                entity.HasOne(d => d.Principal)
                    .WithMany(p => p.FileBusinessParties)
                    .HasForeignKey(d => d.PrincipalId)
                    .HasConstraintName("conFileBusinessParty30FK");

                entity.HasOne(d => d.RoleTypeCd)
                    .WithMany(p => p.FileBusinessPartyRoleTypeCds)
                    .HasForeignKey(d => d.RoleTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFileBusinessParty2FK");

                entity.HasOne(d => d.Sales1Employee)
                    .WithMany(p => p.FileBusinessPartySales1Employees)
                    .HasForeignKey(d => d.Sales1EmployeeId)
                    .HasConstraintName("conFileBusinessParty7Fk");

                entity.HasOne(d => d.Sales2Employee)
                    .WithMany(p => p.FileBusinessPartySales2Employees)
                    .HasForeignKey(d => d.Sales2EmployeeId)
                    .HasConstraintName("conFileBusinessParty8Fk");

                entity.HasOne(d => d.SuperFileBusinessParty)
                    .WithMany(p => p.InverseSuperFileBusinessParty)
                    .HasForeignKey(d => d.SuperFileBusinessPartyId)
                    .HasConstraintName("conFileBusinessParty6FK");

                entity.HasOne(d => d.TitleAgentTypeCd)
                    .WithMany(p => p.FileBusinessPartyTitleAgentTypeCds)
                    .HasForeignKey(d => d.TitleAgentTypeCdId)
                    .HasConstraintName("conFileBusinessParty14FK");
            });

            modelBuilder.Entity<FileBusinessPartyConsumerMessageBoxDetail>(entity =>
            {
                entity.HasKey(e => e.FbpconsumerMessageBoxDetailId)
                    .HasName("PK_FileBusinessPartyConsumerMessageBoxDetailFBPConsumerMessageBoxDetailID");

                entity.ToTable("FileBusinessPartyConsumerMessageBoxDetail");

                entity.HasIndex(e => e.FileBusinessPartyId, "idxFileBusinessPartyConsumerMessageBoxDetail_FileBusinessPartyID")
                    .HasFillFactor(90);

                entity.Property(e => e.FbpconsumerMessageBoxDetailId).HasColumnName("FBPConsumerMessageBoxDetailID");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.ConsumerMessageBoxId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ConsumerMessageBoxID");

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.FileBusinessPartyId).HasColumnName("FileBusinessPartyID");

                entity.HasOne(d => d.FileBusinessParty)
                    .WithMany(p => p.FileBusinessPartyConsumerMessageBoxDetails)
                    .HasForeignKey(d => d.FileBusinessPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FileBusinessPartyConsumerMessageBoxDetailFileBusinessPartyID");
            });

            modelBuilder.Entity<FileBusinessPartyContactXref>(entity =>
            {
                entity.HasKey(e => e.FileBusinessPartyId)
                    .HasName("PK_FileBusinessPartyContactXRef");

                entity.ToTable("FileBusinessPartyContactXref");

                entity.Property(e => e.FileBusinessPartyId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileBusinessPartyID");

                entity.Property(e => e.BusFax)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BusPhone)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Busextn)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BUSEXTN");

                entity.Property(e => e.CellPhone)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Pager)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.HasOne(d => d.FileBusinessParty)
                    .WithOne(p => p.FileBusinessPartyContactXref)
                    .HasForeignKey<FileBusinessPartyContactXref>(d => d.FileBusinessPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_FBPX");
            });

            modelBuilder.Entity<FileBusinessPartyLicenseInformationXref>(entity =>
            {
                entity.ToTable("FileBusinessPartyLicenseInformationXref");

                entity.HasIndex(e => new { e.FileBusinessPartyId, e.LicenseEntityClassTypeId }, "IDX_FileBusinessPartyLicenseInformationXref_FileBusinessPartyID_LicenseEntityClassTypeID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileBusinessPartyId, "idxFileBusinessPartyID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.LicenseEntityClassTypeId, "idx_FileBusinessPartyLicenseInformationXref_3")
                    .HasFillFactor(90);

                entity.Property(e => e.FileBusinessPartyLicenseInformationXrefId).HasColumnName("FileBusinessPartyLicenseInformationXrefID");

                entity.Property(e => e.EditNmlsflag).HasColumnName("EditNMLSFlag");

                entity.Property(e => e.EditNmlslicenseNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EditNMLSLicenseNo");

                entity.Property(e => e.EditStateLicenseNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EditStateLicenseTypeGeoRegionXrefId).HasColumnName("EditStateLicenseTypeGeoRegionXrefID");

                entity.Property(e => e.FileBusinessPartyId).HasColumnName("FileBusinessPartyID");

                entity.Property(e => e.LicenseEntityClassTypeId).HasColumnName("LicenseEntityClassTypeID");

                entity.Property(e => e.NmlslicenseInformationId).HasColumnName("NMLSLicenseInformationID");

                entity.Property(e => e.NmlslicenseNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NMLSLicenseNo");

                entity.Property(e => e.RefStateLicenseInformationId).HasColumnName("RefStateLicenseInformationID");

                entity.Property(e => e.StateLicenseInformationId).HasColumnName("StateLicenseInformationID");

                entity.Property(e => e.StateLicenseNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.FileBusinessParty)
                    .WithMany(p => p.FileBusinessPartyLicenseInformationXrefs)
                    .HasForeignKey(d => d.FileBusinessPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFileBusinessPartyIDLIFK");

                entity.HasOne(d => d.NmlslicenseInformation)
                    .WithMany(p => p.FileBusinessPartyLicenseInformationXrefNmlslicenseInformations)
                    .HasForeignKey(d => d.NmlslicenseInformationId)
                    .HasConstraintName("conNMLSLicenseInformationIDFK");

                entity.HasOne(d => d.StateLicenseInformation)
                    .WithMany(p => p.FileBusinessPartyLicenseInformationXrefStateLicenseInformations)
                    .HasForeignKey(d => d.StateLicenseInformationId)
                    .HasConstraintName("conStateLicenseInformationIDFK");
            });

            modelBuilder.Entity<FileDetailsBulkConversion>(entity =>
            {
                entity.HasKey(e => e.FileId)
                    .HasName("PK_FileID_FileDetails_BulkConversion");

                entity.ToTable("FileDetails_BulkConversion");

                entity.Property(e => e.FileId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileID");

                entity.Property(e => e.ConversionDate).HasColumnType("datetime");

                entity.HasOne(d => d.File)
                    .WithOne(p => p.FileDetailsBulkConversion)
                    .HasForeignKey<FileDetailsBulkConversion>(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FileID_FileDetails_BulkConversion");
            });

            modelBuilder.Entity<FileDetailsBulkconversionCloud>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FileDetails_Bulkconversion_Cloud");

                entity.Property(e => e.ConversionDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.IsConverted)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FileDetailsForScheduler>(entity =>
            {
                entity.ToTable("FileDetailsForScheduler");

                entity.HasIndex(e => new { e.PrincipalId, e.StatusCd }, "idxFileDetailsForScheduler_10")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.BusOrgId, e.StatusCd }, "idxFileDetailsForScheduler_11")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.PhysicalAddrId, e.StatusCd }, "idxFileDetailsForScheduler_2")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.AddrBookEntryId, e.StatusCd }, "idxFileDetailsForScheduler_3")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.TitleEscrowInfoId, e.PrincipalId, e.StatusCd }, "idxFileDetailsForScheduler_4")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FileId, e.BusOrgId, e.StatusCd }, "idxFileDetailsForScheduler_5")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.TitleEscrowInfoId, e.PropertyId, e.StatusCd }, "idxFileDetailsForScheduler_6")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileDetailsForSchedulerId, "idxFileDetailsForScheduler_7")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.PropertyId, e.StatusCd }, "idxFileDetailsForScheduler_9")
                    .HasFillFactor(90);

                entity.Property(e => e.AddrBookEntryId).HasColumnName("AddrBookEntryID");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.PhysicalAddrId).HasColumnName("PhysicalAddrID");

                entity.Property(e => e.PrincipalId).HasColumnName("PrincipalID");

                entity.Property(e => e.PropertyId).HasColumnName("PropertyID");

                entity.Property(e => e.TitleEscrowInfoId).HasColumnName("TitleEscrowInfoID");

                entity.Property(e => e.UpdateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<FileDetailsImageDocTool>(entity =>
            {
                entity.HasKey(e => e.FileId)
                    .HasName("PK_FileID_FileDetails_ImageDocTool");

                entity.ToTable("FileDetails_ImageDocTool");

                entity.Property(e => e.FileId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileID");

                entity.Property(e => e.Fileprocesstatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.ImageDocDate).HasColumnType("datetime");

                entity.HasOne(d => d.File)
                    .WithOne(p => p.FileDetailsImageDocTool)
                    .HasForeignKey<FileDetailsImageDocTool>(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FileID_FileDetails_ImageDocTool");
            });

            modelBuilder.Entity<FileEntry>(entity =>
            {
                entity.ToTable("FileEntry");

                entity.HasIndex(e => new { e.TransactionTypeCdId, e.TransactionId }, "XIF15FileEntry")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.AccountId, "XIF374FileEntry")
                    .HasFillFactor(90);

                entity.Property(e => e.FileEntryId).HasColumnName("FileEntryID");

                entity.Property(e => e.AccountId).HasColumnName("AccountID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.TasupdateFlag).HasColumnName("TASUpdateFlag");

                entity.Property(e => e.TransactionId).HasColumnName("TransactionID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.FileEntries)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFileEntry1FK");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.FileEntries)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFileEntry2FK");

                entity.HasOne(d => d.TransactionTypeCd)
                    .WithMany(p => p.FileEntries)
                    .HasForeignKey(d => d.TransactionTypeCdId)
                    .HasConstraintName("conFileEntry15FK");
            });

            modelBuilder.Entity<FileProcLock>(entity =>
            {
                entity.ToTable("FileProcLock");

                entity.HasIndex(e => e.FileId, "IDXFileProcLock")
                    .HasFillFactor(90);

                entity.Property(e => e.FileProcLockId).HasColumnName("FileProcLock_ID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.LockProcDesc)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SessionId).HasColumnName("SessionID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.WhenIssued).HasColumnType("datetime");
            });

            modelBuilder.Entity<FileProcess>(entity =>
            {
                entity.ToTable("FileProcess");

                entity.HasIndex(e => new { e.FileId, e.FileProcessId, e.ClassTypeId, e.FileProcessStatusFlag, e.ProcessTypeCdId, e.SeqNum }, "IDXCFileProcess")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FileId, e.FileProcessId, e.SeqNum, e.FileBusinessPartyId, e.ProcessTypeCdId }, "IDXCFileProcess2")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FileId, e.ProcessTypeCdId, e.FileBusinessPartyId }, "IDX_FileProcess_FileID_ProcessTypeCdID_FileBusinessPartyID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileBusinessPartyId, "XIF76FileProcess")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileId, "XIF77FileProcess")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SuperFileProcessId, "XIF78FileProcess")
                    .HasFillFactor(90);

                entity.Property(e => e.FileProcessId).HasColumnName("FileProcessID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.FileBusinessPartyId).HasColumnName("FileBusinessPartyID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FileProcessStatusFlag).HasDefaultValueSql("((1))");

                entity.Property(e => e.ProcessTypeCdId).HasColumnName("ProcessTypeCdID");

                entity.Property(e => e.SplitLspgrpFlag)
                    .HasColumnName("SplitLSPGrpFlag")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SuperFileProcessId).HasColumnName("SuperFileProcessID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.FileProcesses)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFileProcess5FK");

                entity.HasOne(d => d.CreationEmployee)
                    .WithMany(p => p.FileProcessCreationEmployees)
                    .HasForeignKey(d => d.CreationEmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFileProcess10FK");

                entity.HasOne(d => d.FileBusinessParty)
                    .WithMany(p => p.FileProcesses)
                    .HasForeignKey(d => d.FileBusinessPartyId)
                    .HasConstraintName("conFileProcess3FK");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.FileProcesses)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFileProcess2FK");

                entity.HasOne(d => d.ProcessTypeCd)
                    .WithMany(p => p.FileProcesses)
                    .HasForeignKey(d => d.ProcessTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFileProcess4FK");

                entity.HasOne(d => d.SuperFileProcess)
                    .WithMany(p => p.InverseSuperFileProcess)
                    .HasForeignKey(d => d.SuperFileProcessId)
                    .HasConstraintName("conFileProcess1FK");

                entity.HasOne(d => d.UpdatedEmployee)
                    .WithMany(p => p.FileProcessUpdatedEmployees)
                    .HasForeignKey(d => d.UpdatedEmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFileProcess14FK");
            });

            modelBuilder.Entity<FileSearchEventMsgQueue>(entity =>
            {
                entity.HasKey(e => e.EventMsqId)
                    .HasName("PK_FileSearchEventMsgQueueID");

                entity.ToTable("FileSearchEventMsgQueue");

                entity.HasIndex(e => new { e.EventServer, e.EventStatus }, "idxFileSearchEventMsgQueue_EventServer")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.EventStatus, "idxFileSearchEventMsgQueue_EventStatus")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ProcessStartTime, "idxFileSearchEventMsgQueue_ProcessStartTime")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ReceivedTime, e.EventStatus }, "idxFileSearchEventMsgQueue_ReceivedTime")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.UniqueKey, "idxFileSearchEventMsgQueue_UniqueKey")
                    .HasFillFactor(90);

                entity.Property(e => e.EventMsqId).HasColumnName("EventMsqID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.EventData).IsUnicode(false);

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.EventServer)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessEndTime).HasColumnType("datetime");

                entity.Property(e => e.ProcessStartTime).HasColumnType("datetime");

                entity.Property(e => e.ReceivedTime).HasColumnType("datetime");

                entity.Property(e => e.UniqueKey).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<FileService>(entity =>
            {
                entity.ToTable("FileService");

                entity.HasIndex(e => e.UpdTs, "DW_IXN01_FileService_UpdTS")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ServiceTypeCdId, "DW_IXN02_FileService_ServiceTypeCdID_Include")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FileId, e.ServiceTypeCdId }, "IDXServiceTypeFile")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FileId, e.ServiceTypeCdId, e.FileServiceId, e.OwnerOfficeId }, "IDXServiceTypeFile2")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileId, "XIF297FileService")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.OwnerOfficeId, e.FileId }, "XIF298FileService")
                    .HasFillFactor(90);

                entity.Property(e => e.FileServiceId).HasColumnName("FileServiceID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.ExternalServiceNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.OwnerOfficeId).HasColumnName("OwnerOfficeID");

                entity.Property(e => e.ServiceTypeCdId).HasColumnName("ServiceTypeCdID");

                entity.Property(e => e.StateLicenseInformationId).HasColumnName("StateLicenseInformationID");

                entity.Property(e => e.StateLicenseNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.FileServices)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("R_495");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.FileServices)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFileService3Fk");

                entity.HasOne(d => d.OwnerOffice)
                    .WithMany(p => p.FileServices)
                    .HasForeignKey(d => d.OwnerOfficeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFileService4Fk");

                entity.HasOne(d => d.ServiceTypeCd)
                    .WithMany(p => p.FileServices)
                    .HasForeignKey(d => d.ServiceTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("R_496");
            });

            modelBuilder.Entity<FileServiceProductionOfficeXref>(entity =>
            {
                entity.HasKey(e => new { e.ProductionOfficeId, e.FileServiceId })
                    .HasName("conFileServProdOfficeXref1Pk");

                entity.ToTable("FileServiceProductionOfficeXref");

                entity.HasIndex(e => e.FileServiceId, "XIF229FileServiceProductionOfficeXref")
                    .HasFillFactor(90);

                entity.Property(e => e.ProductionOfficeId).HasColumnName("ProductionOfficeID");

                entity.Property(e => e.FileServiceId).HasColumnName("FileServiceID");

                entity.Property(e => e.AssistantId).HasColumnName("AssistantID");

                entity.Property(e => e.OfficerId).HasColumnName("OfficerID");

                entity.HasOne(d => d.Assistant)
                    .WithMany(p => p.FileServiceProductionOfficeXrefAssistants)
                    .HasForeignKey(d => d.AssistantId)
                    .HasConstraintName("conFileServProdOfficeXRefAssistantIDFK");

                entity.HasOne(d => d.FileService)
                    .WithMany(p => p.FileServiceProductionOfficeXrefs)
                    .HasForeignKey(d => d.FileServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFileServiceProdOfficeXref2Fk");

                entity.HasOne(d => d.Officer)
                    .WithMany(p => p.FileServiceProductionOfficeXrefOfficers)
                    .HasForeignKey(d => d.OfficerId)
                    .HasConstraintName("conFileServProdOfficeXRefOfficerIDFK");

                entity.HasOne(d => d.ProductionOffice)
                    .WithMany(p => p.FileServiceProductionOfficeXrefs)
                    .HasForeignKey(d => d.ProductionOfficeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFileServiceProdOfficeXref3Fk");
            });

            modelBuilder.Entity<FilesForScheduler>(entity =>
            {
                entity.HasKey(e => e.FileId)
                    .HasName("PK__FilesFor__6F0F989F340B9CB4");

                entity.ToTable("FilesForScheduler");

                entity.HasIndex(e => e.TitleEscrowInfoId, "idxFilesForScheduler1")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.StatusCd, "idxFilesForScheduler2")
                    .HasFillFactor(90);

                entity.Property(e => e.FileId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileID");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OrderDate).HasColumnType("datetime");

                entity.Property(e => e.OwnerOfficeId).HasColumnName("OwnerOfficeID");

                entity.Property(e => e.OwnerOfficeName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.RegionId).HasColumnName("RegionID");

                entity.Property(e => e.RegionName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.TitleEscrowInfoId).HasColumnName("TitleEscrowInfoID");

                entity.Property(e => e.UpdateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<FixProdOfficeIssue>(entity =>
            {
                entity.HasKey(e => e.Fileid)
                    .HasName("IDXFixProdOfficeIssueFileIdPK");

                entity.ToTable("FixProdOfficeIssue");

                entity.Property(e => e.Fileid)
                    .ValueGeneratedNever()
                    .HasColumnName("fileid");
            });

            modelBuilder.Entity<FloridaDisclosureOverrideName>(entity =>
            {
                entity.HasKey(e => e.FdoverrideNameId);

                entity.ToTable("FloridaDisclosureOverrideName");

                entity.Property(e => e.FdoverrideNameId).HasColumnName("FDOverrideNameId");

                entity.Property(e => e.OwningOfficeOverrideName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UnderWriterOverrideName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.FloridaDisclosureOverrideNames)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceFile_FileID");
            });

            modelBuilder.Entity<FormDocument>(entity =>
            {
                entity.ToTable("FormDocument");

                entity.HasIndex(e => new { e.FileId, e.FormTemplateId, e.BusinessUnitId }, "XAK1FormDocument")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BusinessUnitId, "XIF285FormDocument")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FormTemplateId, "XIF286FormDocument")
                    .HasFillFactor(90);

                entity.Property(e => e.FormdocumentId).HasColumnName("FormdocumentID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.Property(e => e.Descr)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FilePathName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FormTemplateId).HasColumnName("FormTemplateID");

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.OrientationTypeCdId).HasColumnName("OrientationTypeCdID");

                entity.Property(e => e.PaperSizeTypeCdId).HasColumnName("PaperSizeTypeCdID");

                entity.Property(e => e.RenderDocName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SpecialInstructions)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StatusChgComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StatusChgDate).HasColumnType("datetime");

                entity.Property(e => e.StatusChgUserId).HasColumnName("StatusChgUserID");

                entity.Property(e => e.TemplateId).HasColumnName("TemplateID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.FormDocuments)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFormDocument2fk");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.FormDocuments)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFormDocument4fk");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.FormDocuments)
                    .HasForeignKey(d => d.FileId)
                    .HasConstraintName("conFormDocument1fk");

                entity.HasOne(d => d.FormTemplate)
                    .WithMany(p => p.FormDocuments)
                    .HasForeignKey(d => d.FormTemplateId)
                    .HasConstraintName("conFormDocument3fk");

                entity.HasOne(d => d.OrientationTypeCd)
                    .WithMany(p => p.FormDocumentOrientationTypeCds)
                    .HasForeignKey(d => d.OrientationTypeCdId)
                    .HasConstraintName("conFormDocument6fk");

                entity.HasOne(d => d.PaperSizeTypeCd)
                    .WithMany(p => p.FormDocumentPaperSizeTypeCds)
                    .HasForeignKey(d => d.PaperSizeTypeCdId)
                    .HasConstraintName("conFormDocument5fk");
            });

            modelBuilder.Entity<FormTemplate>(entity =>
            {
                entity.ToTable("FormTemplate");

                entity.HasIndex(e => e.BusinessUnitId, "XIF61FormTemplate")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.Descr, e.CreationDate }, "indTemplate2")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.FormTemplateId).HasColumnName("FormTemplateID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.Property(e => e.Descr)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocTypeCdId).HasColumnName("DocTypeCdID");

                entity.Property(e => e.FilePathName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.OrientationTypeCdId).HasColumnName("OrientationTypeCdID");

                entity.Property(e => e.PaperSizeTypeCdId).HasColumnName("PaperSizeTypeCdID");

                entity.Property(e => e.PrinterTypeCdId).HasColumnName("PrinterTypeCdID");

                entity.Property(e => e.StatusChgDate).HasColumnType("datetime");

                entity.Property(e => e.StatusChgUserId).HasColumnName("StatusChgUserID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.FormTemplates)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFormTemplate1FK");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.FormTemplates)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFormTemplate2FK");

                entity.HasOne(d => d.DocTypeCd)
                    .WithMany(p => p.FormTemplateDocTypeCds)
                    .HasForeignKey(d => d.DocTypeCdId)
                    .HasConstraintName("conFormTemplate6FK");

                entity.HasOne(d => d.OrientationTypeCd)
                    .WithMany(p => p.FormTemplateOrientationTypeCds)
                    .HasForeignKey(d => d.OrientationTypeCdId)
                    .HasConstraintName("conFormTemplate4FK");

                entity.HasOne(d => d.PaperSizeTypeCd)
                    .WithMany(p => p.FormTemplatePaperSizeTypeCds)
                    .HasForeignKey(d => d.PaperSizeTypeCdId)
                    .HasConstraintName("conFormTemplate3FK");

                entity.HasOne(d => d.PrinterTypeCd)
                    .WithMany(p => p.FormTemplatePrinterTypeCds)
                    .HasForeignKey(d => d.PrinterTypeCdId)
                    .HasConstraintName("conFormTemplate5FK");
            });

            modelBuilder.Entity<FractionalSettlementStatement>(entity =>
            {
                entity.HasKey(e => e.FractionalSsid)
                    .HasName("PK_FractionalSS_ID");

                entity.ToTable("FractionalSettlementStatement");

                entity.HasIndex(e => e.FractionalSsid, "Ind_FractionalSettlementStatement_FractionalSSID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileId, "idxNCFSSFileID")
                    .HasFillFactor(90);

                entity.Property(e => e.FractionalSsid).HasColumnName("FractionalSSID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.PrincipalTypeCdid).HasColumnName("PrincipalTypeCDID");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.FractionalSettlementStatements)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FractionalSettlementStatement_FileID");
            });

            modelBuilder.Entity<FractionalSsbuyerSellerAllocation>(entity =>
            {
                entity.HasKey(e => e.FractionalSsbuySelAlocId)
                    .HasName("PK_FractionalSSBuySelAlocId_ID");

                entity.ToTable("FractionalSSBuyerSellerAllocation");

                entity.HasIndex(e => e.FractionalSsbuySelAlocId, "Ind_FractionalSSBuyerSellerAllocation_FractionalSSBuyerSellerId")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileId, "idxNCFSSBuyrSellrAllocFileID")
                    .HasFillFactor(90);

                entity.Property(e => e.FractionalSsbuySelAlocId).HasColumnName("FractionalSSBuySelAlocId");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.VestedIntersetAllocation).HasColumnType("decimal(9, 6)");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.FractionalSsbuyerSellerAllocations)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FractionalSSBuyerSellerAllocation_FileID");
            });

            modelBuilder.Entity<FtpSite>(entity =>
            {
                entity.ToTable("FtpSite");

                entity.Property(e => e.BasePath)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Password)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Server)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(35)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Gabemail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GABEmail");

                entity.HasIndex(e => e.AddrBookEntryId, "idxGABEmail_AddrBookEntryID");

                entity.HasIndex(e => e.ElectronicAddrId, "idxGABEmail_ElectronicAddrID");

                entity.Property(e => e.AddrBookEntryId).HasColumnName("AddrBookEntryID");

                entity.Property(e => e.ElectronicAddrId).HasColumnName("ElectronicAddrID");

                entity.Property(e => e.ElectronicAddrTypeCdId).HasColumnName("ElectronicAddrTypeCdID");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GabentryRequestQueue>(entity =>
            {
                entity.ToTable("GABEntryRequestQueue");

                entity.HasIndex(e => e.BusOrgId, "Ind_GABEntryRequestQueue_BusOrgID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ReferenceBusOrgId, "Ind_GABEntryRequestQueue_ReferenceBusOrgID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.RegionId, e.RequestedDate, e.StatusId }, "idx_GABEntryRequestQueue_RegionID_RequestedDate")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.LockedByUserId, e.StatusId }, "idx_LockedByUserID_StatusId")
                    .HasFillFactor(90);

                entity.Property(e => e.GabentryRequestQueueId).HasColumnName("GABEntryRequestQueueID");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.BusOrgIdcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BusOrgIDCode");

                entity.Property(e => e.Comments)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.DuplicateBusOrgId).HasColumnName("DuplicateBusOrgID");

                entity.Property(e => e.EnterpriseId).HasColumnName("EnterpriseID");

                entity.Property(e => e.EnterpriseNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EntryInstructions)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LockedByUserId).HasColumnName("LockedByUserID");

                entity.Property(e => e.LockedByUserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MdmstatusCd).HasColumnName("MDMStatusCd");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessedDataTextId).HasColumnName("ProcessedDataTextID");

                entity.Property(e => e.ReferenceBusOrgId).HasColumnName("ReferenceBusOrgID");

                entity.Property(e => e.RegionId).HasColumnName("RegionID");

                entity.Property(e => e.RegionName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.RequestTypeCdId).HasColumnName("RequestTypeCdID");

                entity.Property(e => e.RequestedDate).HasColumnType("datetime");

                entity.Property(e => e.RequestorId).HasColumnName("RequestorID");

                entity.Property(e => e.RoleTypeCdId).HasColumnName("RoleTypeCdID");

                entity.Property(e => e.RoleTypeName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.StatusChangedDate).HasColumnType("datetime");

                entity.Property(e => e.StatusId).HasColumnName("StatusID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.BusOrg)
                    .WithMany(p => p.GabentryRequestQueueBusOrgs)
                    .HasForeignKey(d => d.BusOrgId)
                    .HasConstraintName("conGABBusOrgFk");

                entity.HasOne(d => d.DuplicateBusOrg)
                    .WithMany(p => p.GabentryRequestQueueDuplicateBusOrgs)
                    .HasForeignKey(d => d.DuplicateBusOrgId)
                    .HasConstraintName("conGABBusOrg3Fk");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.GabentryRequestQueues)
                    .HasForeignKey(d => d.FileId)
                    .HasConstraintName("conGABServiceFileFk");

                entity.HasOne(d => d.LockedByUser)
                    .WithMany(p => p.GabentryRequestQueueLockedByUsers)
                    .HasForeignKey(d => d.LockedByUserId)
                    .HasConstraintName("conGABEmployee2Fk");

                entity.HasOne(d => d.ReferenceBusOrg)
                    .WithMany(p => p.GabentryRequestQueueReferenceBusOrgs)
                    .HasForeignKey(d => d.ReferenceBusOrgId)
                    .HasConstraintName("conGABBusOrg2Fk");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.GabentryRequestQueues)
                    .HasForeignKey(d => d.RegionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conGABBusinessUnitFk");

                entity.HasOne(d => d.RequestTypeCd)
                    .WithMany(p => p.GabentryRequestQueueRequestTypeCds)
                    .HasForeignKey(d => d.RequestTypeCdId)
                    .HasConstraintName("FK_GabEntryRequestQueue_RequestTypeCdID");

                entity.HasOne(d => d.Requestor)
                    .WithMany(p => p.GabentryRequestQueueRequestors)
                    .HasForeignKey(d => d.RequestorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conGABEmployeeFk");

                entity.HasOne(d => d.RoleTypeCd)
                    .WithMany(p => p.GabentryRequestQueueRoleTypeCds)
                    .HasForeignKey(d => d.RoleTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conGABTypeCdDmtFk");
            });

            modelBuilder.Entity<GabqueueContactHistory>(entity =>
            {
                entity.ToTable("GABQueueContactHistory");

                entity.HasIndex(e => e.GabqueueId, "Ind_GABQueueContactHistory_GABQueueID")
                    .HasFillFactor(90);

                entity.Property(e => e.GabqueueContactHistoryId).HasColumnName("GABQueueContactHistoryId");

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.GabqueueId).HasColumnName("GABQueueID");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.GabqueueContactHistories)
                    .HasForeignKey(d => d.ContactId)
                    .HasConstraintName("FK_GABQueueContactHistory_ContactID");

                entity.HasOne(d => d.Gabqueue)
                    .WithMany(p => p.GabqueueContactHistories)
                    .HasForeignKey(d => d.GabqueueId)
                    .HasConstraintName("FK_GABQueueContactHistory_GABQueueID");
            });

            modelBuilder.Entity<GabrefreshEventLog>(entity =>
            {
                entity.ToTable("GABRefreshEventLog");

                entity.Property(e => e.GabrefreshEventLogId)
                    .ValueGeneratedNever()
                    .HasColumnName("GABRefreshEventLogID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.EventEndDate).HasColumnType("datetime");

                entity.Property(e => e.EventSourceClassTypeId).HasColumnName("EventSourceClassTypeID");

                entity.Property(e => e.EventSourceId).HasColumnName("EventSourceID");

                entity.Property(e => e.EventStartDate).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.UpdSourceClassTypeId).HasColumnName("UpdSourceClassTypeID");

                entity.Property(e => e.UpdSourceId).HasColumnName("UpdSourceID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.GabrefreshEventLogClassTypes)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK2_GABRefreshEventLog");

                entity.HasOne(d => d.Event)
                    .WithMany(p => p.GabrefreshEventLogs)
                    .HasForeignKey(d => d.EventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK4_GABRefreshEventLog");

                entity.HasOne(d => d.EventSourceClassType)
                    .WithMany(p => p.GabrefreshEventLogEventSourceClassTypes)
                    .HasForeignKey(d => d.EventSourceClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK5_GABRefreshEventLog");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.GabrefreshEventLogs)
                    .HasForeignKey(d => d.FileId)
                    .HasConstraintName("FK3_GABRefreshEventLog");

                entity.HasOne(d => d.GabrefreshEventLogNavigation)
                    .WithOne(p => p.GabrefreshEventLog)
                    .HasForeignKey<GabrefreshEventLog>(d => d.GabrefreshEventLogId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK1_GABRefreshEventLog");

                entity.HasOne(d => d.UpdSourceClassType)
                    .WithMany(p => p.GabrefreshEventLogUpdSourceClassTypes)
                    .HasForeignKey(d => d.UpdSourceClassTypeId)
                    .HasConstraintName("FK6_GABRefreshEventLog");
            });

            modelBuilder.Entity<GabrequestBusOrgReference>(entity =>
            {
                entity.ToTable("GABRequestBusOrgReference");

                entity.HasIndex(e => e.AddrBookEntryId, "CLX_GBRBAddrBookEntryID")
                    .HasFillFactor(90);

                entity.Property(e => e.GabrequestBusOrgReferenceId).HasColumnName("GABRequestBusOrgReferenceID");

                entity.Property(e => e.AddrBookEntryId).HasColumnName("AddrBookEntryID");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EnterpriseId).HasColumnName("EnterpriseID");

                entity.Property(e => e.ReferenceAddrBookEntryId).HasColumnName("ReferenceAddrBookEntryID");

                entity.Property(e => e.ReferenceBusOrgId).HasColumnName("ReferenceBusOrgID");

                entity.Property(e => e.UpdateDatetime).HasColumnType("datetime");

                entity.HasOne(d => d.BusOrg)
                    .WithMany(p => p.GabrequestBusOrgReferences)
                    .HasForeignKey(d => d.BusOrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conGABRequestBusOrgReferenceFBPFK1");
            });

            modelBuilder.Entity<GeneratorInfo>(entity =>
            {
                entity.ToTable("GeneratorInfo");

                entity.Property(e => e.GeneratorInfoId).HasColumnName("GeneratorInfoID");

                entity.Property(e => e.ObjectName).HasMaxLength(128);

                entity.Property(e => e.OrderByColumns)
                    .HasMaxLength(1024)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GenericEmail>(entity =>
            {
                entity.ToTable("GenericEmail");

                entity.HasIndex(e => new { e.FileId, e.DateSent }, "idx_FileID_DateSent")
                    .HasFillFactor(90);

                entity.Property(e => e.GenericEmailId).HasColumnName("GenericEmailID");

                entity.Property(e => e.Cc)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DateSent).HasColumnType("datetime");

                entity.Property(e => e.Emailmessage)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.Nameofattachments)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.SendTo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Sentby)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SubjectLine)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Updts)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UPDTS");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.GenericEmails)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__GenericEmail__FileID");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.GenericEmails)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK__GenericEm__UserI__71028373");
            });

            modelBuilder.Entity<GeographicRegion>(entity =>
            {
                entity.HasKey(e => e.GeoRegionId)
                    .HasName("conGeoRegion1Pk");

                entity.ToTable("GeographicRegion");

                entity.HasIndex(e => e.Mdmcode, "CLX_GRMDMCode");

                entity.HasIndex(e => new { e.ObjectCd, e.ClassTypeId }, "IDX_GeographicRegion_ObjectCd_ClassTypeID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.SuperGeoRegionId, e.Name }, "indGeoRegion2")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ClassTypeId, e.Name, e.SuperGeoRegionId }, "indGeoRegion3")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.SuperGeoRegionId, e.ObjectCd, e.Name }, "indGeoRegion6")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ObjectCd, "indGeographicRegionObjectCd");

                entity.HasIndex(e => new { e.ClassTypeId, e.ObjectCd, e.GeoRegionId }, "indGeographicRegionObjectCdCls")
                    .HasFillFactor(90);

                entity.Property(e => e.GeoRegionId).HasColumnName("GeoRegionID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.CountryCode)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fipscode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("FIPSCode");

                entity.Property(e => e.Mdmcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MDMCode");

                entity.Property(e => e.Name)
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SanctionedCountry).HasDefaultValueSql("((0))");

                entity.Property(e => e.SuperGeoRegionId).HasColumnName("SuperGeoRegionID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.GeographicRegions)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conGeographicRegion3Fk");

                entity.HasOne(d => d.SuperGeoRegion)
                    .WithMany(p => p.InverseSuperGeoRegion)
                    .HasForeignKey(d => d.SuperGeoRegionId)
                    .HasConstraintName("conGeographicRegion2R");

                entity.HasMany(d => d.PrincipalsNavigation)
                    .WithMany(p => p.GeoRegions)
                    .UsingEntity<Dictionary<string, object>>(
                        "PrincipalStateXref",
                        l => l.HasOne<Principal>().WithMany().HasForeignKey("PrincipalId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Principal__Princ__69FEE97B"),
                        r => r.HasOne<GeographicRegion>().WithMany().HasForeignKey("GeoRegionId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Principal__GeoRe__690AC542"),
                        j =>
                        {
                            j.HasKey("GeoRegionId", "PrincipalId").HasName("PK__Principa__97F369FA1DAC9A28");

                            j.ToTable("PrincipalStateXRef");

                            j.HasIndex(new[] { "PrincipalId" }, "PrincipalStateXRefIdx");

                            j.IndexerProperty<int>("GeoRegionId").HasColumnName("GeoRegionID");

                            j.IndexerProperty<int>("PrincipalId").HasColumnName("PrincipalID");
                        });

                entity.HasMany(d => d.PropertyCollaterals)
                    .WithMany(p => p.GeoRegions)
                    .UsingEntity<Dictionary<string, object>>(
                        "PropertyCollateralStateXref",
                        l => l.HasOne<PropertyCollateral>().WithMany().HasForeignKey("PropertyCollateralId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__PropertyC__Prope__1300FF0E"),
                        r => r.HasOne<GeographicRegion>().WithMany().HasForeignKey("GeoRegionId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__PropertyC__GeoRe__120CDAD5"),
                        j =>
                        {
                            j.HasKey("GeoRegionId", "PropertyCollateralId").HasName("PK__Property__69043FA427E9AB81");

                            j.ToTable("PropertyCollateralStateXRef");

                            j.HasIndex(new[] { "PropertyCollateralId" }, "PropertyCollateralStateXRefIdx");

                            j.IndexerProperty<int>("GeoRegionId").HasColumnName("GeoRegionID");

                            j.IndexerProperty<int>("PropertyCollateralId").HasColumnName("PropertyCollateralID");
                        });
            });

            modelBuilder.Entity<GfeagtUwsplitInfo>(entity =>
            {
                entity.ToTable("GFEAgtUWSplitInfo");

                entity.HasIndex(e => e.FileId, "idx_FileId")
                    .HasFillFactor(90);

                entity.Property(e => e.GfeagtUwsplitInfoId).HasColumnName("GFEAgtUWSplitInfoID");

                entity.Property(e => e.Agt1DefaultPayTo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Agt1OverridePayTo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Agt1Pct).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.Agt1SplitAmount).HasColumnType("money");

                entity.Property(e => e.Agt2OverridePayTo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Agt2PayTo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Agt2Pct).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.Agt2SplitAmount).HasColumnType("money");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FstUwdpct)
                    .HasColumnType("decimal(8, 4)")
                    .HasColumnName("FstUWDPct");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.Property(e => e.UwcalType).HasColumnName("UWCalType");

                entity.Property(e => e.UwdefaultPayTo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UWDefaultPayTo");

                entity.Property(e => e.UwdefaultPct)
                    .HasColumnType("decimal(8, 4)")
                    .HasColumnName("UWDefaultPct");

                entity.Property(e => e.UwoverridePayTo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UWOverridePayTo");

                entity.Property(e => e.UwoverridePayToFlag).HasColumnName("UWOverridePayToFlag");

                entity.Property(e => e.UwoverridePct)
                    .HasColumnType("decimal(8, 4)")
                    .HasColumnName("UWOverridePct");

                entity.Property(e => e.UwoverridePctFlag).HasColumnName("UWOverridePctFlag");

                entity.Property(e => e.UwsplitAmount)
                    .HasColumnType("money")
                    .HasColumnName("UWSplitAmount");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.GfeagtUwsplitInfos)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GFEAgtUWSplitFileID");
            });

            modelBuilder.Entity<Gfeentry>(entity =>
            {
                entity.HasKey(e => e.GfeId)
                    .HasName("PK__GFEEntry__FB085CFF4BBB1A07");

                entity.ToTable("GFEEntry");

                entity.HasIndex(e => e.FileId, "idx_FileId")
                    .HasFillFactor(90);

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.Property(e => e.DailyIntchargeAmount)
                    .HasColumnType("money")
                    .HasColumnName("DailyINTChargeAmount");

                entity.Property(e => e.DisplaySalesTaxTypeCdId).HasColumnName("DisplaySalesTaxTypeCdID");

                entity.Property(e => e.Gfe8desForTolCure)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("GFE8DesForTolCure");

                entity.Property(e => e.Gfe8tolCureAmt)
                    .HasColumnType("money")
                    .HasColumnName("GFE8TolCureAmt");

                entity.Property(e => e.Gfe8tolCurePaymntMtdId).HasColumnName("GFE8TolCurePaymntMtdID");

                entity.Property(e => e.InitDepositAmount).HasColumnType("money");

                entity.Property(e => e.LenderTitleInsuranceAmount).HasColumnType("money");

                entity.Property(e => e.OriginationChargeAmount).HasColumnType("money");

                entity.Property(e => e.OwnerTitleInsuranceAmount).HasColumnType("money");

                entity.Property(e => e.Points).HasColumnType("money");

                entity.Property(e => e.RecordingChargeAmount).HasColumnType("money");

                entity.Property(e => e.RecordingLoanEstRounded).HasColumnType("money");

                entity.Property(e => e.RecordingLoanEstUnrounded).HasColumnType("money");

                entity.Property(e => e.TranTaxLoanEstRounded).HasColumnType("money");

                entity.Property(e => e.TranTaxLoanEstUnrounded).HasColumnType("money");

                entity.Property(e => e.TransferTaxes)
                    .HasColumnType("money")
                    .HasColumnName("Transfer_Taxes");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.Gfeentries)
                    .HasForeignKey(d => d.FileId)
                    .HasConstraintName("con_GFEEntry_ServiceFile");
            });

            modelBuilder.Entity<GfeimpoundDescription>(entity =>
            {
                entity.ToTable("GFEImpoundDescription");

                entity.HasIndex(e => e.GfeloanTermId, "idx_GFEImpoundDescription_GFELoanTermID")
                    .HasFillFactor(90);

                entity.Property(e => e.GfeimpoundDescriptionId).HasColumnName("GFEImpoundDescriptionID");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.GfeloanTermId).HasColumnName("GFELoanTermID");

                entity.HasOne(d => d.GfeloanTerm)
                    .WithMany(p => p.GfeimpoundDescriptions)
                    .HasForeignKey(d => d.GfeloanTermId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GFEImpoundDescription_GFELoanTermID");
            });

            modelBuilder.Entity<GfeloanTerm>(entity =>
            {
                entity.ToTable("GFELoanTerm");

                entity.HasIndex(e => e.FileId, "idx_GFELoanTerm_FileID")
                    .HasFillFactor(90);

                entity.Property(e => e.GfeloanTermId).HasColumnName("GFELoanTermID");

                entity.Property(e => e.AddlMonthlyEscrowAmt)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BalloonPaymentDueDate).HasColumnType("datetime");

                entity.Property(e => e.BalloonPaymentMaxAmt).HasColumnType("money");

                entity.Property(e => e.ChangedIntRate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.InitialLoanAmt).HasColumnType("money");

                entity.Property(e => e.InitialMonthlyAmt)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InitialMonthlyMinsAmtFlag).HasColumnName("InitialMonthlyMInsAmtFlag");

                entity.Property(e => e.IntRateAfterPeriod)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IntRateBeforePeriod)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IntRateChangeDate).HasColumnType("datetime");

                entity.Property(e => e.LoanBalMaxAmt)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoanTerm)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MonthlyAmtChangeDate).HasColumnType("datetime");

                entity.Property(e => e.MonthlyIncrAmt).HasColumnType("money");

                entity.Property(e => e.MonthlyMaxAmt).HasColumnType("money");

                entity.Property(e => e.PrePaymentMaxAmt).HasColumnType("money");

                entity.Property(e => e.StatusCd).HasColumnName("StatusCD");

                entity.Property(e => e.TotalInitialMonthlyAmt)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.File)
                    .WithMany(p => p.GfeloanTerms)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GFELoanTerm_FileID");
            });

            modelBuilder.Entity<GlextractLog>(entity =>
            {
                entity.HasKey(e => new { e.GlextractId, e.BusinessUnitId, e.DisbursementId });

                entity.ToTable("GLExtractLog");

                entity.Property(e => e.GlextractId).HasColumnName("GLExtractID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.DisbursementId).HasColumnName("DisbursementID");

                entity.Property(e => e.FileId).HasColumnName("FileID");
            });

            modelBuilder.Entity<Gllookup>(entity =>
            {
                entity.ToTable("GLLookup");

                entity.HasIndex(e => new { e.BusinessUnitId, e.ObjectCd }, "indGLLookup2")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.GllookupId).HasColumnName("GLLookupID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Descr)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LedgerNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.Gllookups)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conGLLookup1Fk");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.Gllookups)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conGLLookUp2FK");
            });

            modelBuilder.Entity<GoBigRedRecord>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.RecordTypeId, e.RecordId }, "GoBigRedRecords_UniqueRecordIndex")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor(90);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.ContainsDataElementSeal).HasColumnName("ContainsDataElementSEAL");

                entity.Property(e => e.ContainsDataElementUwbfsta).HasColumnName("ContainsDataElementUWBFSTA");

                entity.Property(e => e.Error).IsUnicode(false);

                entity.Property(e => e.InUseByAnActiveTemplateInAgoBigRedRegion).HasColumnName("InUseByAnActiveTemplateInAGoBigRedRegion");

                entity.Property(e => e.NewRecordId).HasColumnName("NewRecordID");

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.RecordTypeId).HasColumnName("RecordTypeID");
            });

            modelBuilder.Entity<GroupResequence>(entity =>
            {
                entity.ToTable("GroupResequence");

                entity.Property(e => e.GroupResequenceId).HasColumnName("GroupResequenceID");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.Property(e => e.FileBusinessPartyId).HasColumnName("FileBusinessPartyID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FpseqNum).HasColumnName("FPSeqNum");

                entity.Property(e => e.GrpKeyField)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastModifiedUserId).HasColumnName("LastModifiedUserID");

                entity.Property(e => e.MiscDescr)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SectionResequenceId).HasColumnName("SectionResequenceID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.CreationUser)
                    .WithMany(p => p.GroupResequenceCreationUsers)
                    .HasForeignKey(d => d.CreationUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conGrpResqCreationUserIDFK");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.GroupResequences)
                    .HasForeignKey(d => d.FileId)
                    .HasConstraintName("conGrpResqFileIDFK");

                entity.HasOne(d => d.LastModifiedUser)
                    .WithMany(p => p.GroupResequenceLastModifiedUsers)
                    .HasForeignKey(d => d.LastModifiedUserId)
                    .HasConstraintName("conGrpResqLastModifiedUserIDFK");
            });

            modelBuilder.Entity<Guinode>(entity =>
            {
                entity.HasKey(e => e.NodeId)
                    .HasName("XPKGUINode");

                entity.ToTable("GUINode");

                entity.HasIndex(e => e.ParentNodeId, "XIF67GUINode")
                    .HasFillFactor(90);

                entity.Property(e => e.NodeId).HasColumnName("NodeID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.NodeName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.ParentNodeId).HasColumnName("ParentNodeID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.Guinodes)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conGUINode1FK");

                entity.HasOne(d => d.ParentNode)
                    .WithMany(p => p.InverseParentNode)
                    .HasForeignKey(d => d.ParentNodeId)
                    .HasConstraintName("conGUINode2FK");
            });

            modelBuilder.Entity<GuinodeCustomization>(entity =>
            {
                entity.HasKey(e => e.NodeCustomizationId)
                    .HasName("XPKGUINodeCustomization");

                entity.ToTable("GUINodeCustomization");

                entity.HasIndex(e => new { e.BusinessUnitId, e.TransTypeCdId, e.NodeId }, "XAK1GUINodeCustomization")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.NodeId, "XIF72GUINodeCustomization")
                    .HasFillFactor(90);

                entity.Property(e => e.NodeCustomizationId).HasColumnName("NodeCustomizationID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.NodeId).HasColumnName("NodeID");

                entity.Property(e => e.TransTypeCdId).HasColumnName("TransTypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.GuinodeCustomizations)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conGUINodeCustomization2FK");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.GuinodeCustomizations)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conGUINodeCustomization3FK");

                entity.HasOne(d => d.Node)
                    .WithMany(p => p.GuinodeCustomizations)
                    .HasForeignKey(d => d.NodeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conGUINodeCustomization1FK");

                entity.HasOne(d => d.TransTypeCd)
                    .WithMany(p => p.GuinodeCustomizations)
                    .HasForeignKey(d => d.TransTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conGUINodeCustomization4FK");
            });

            modelBuilder.Entity<HighAvailabilityHeartbeat>(entity =>
            {
                entity.HasKey(e => e.SourceLibraryFullName);

                entity.ToTable("HighAvailabilityHeartbeat");

                entity.Property(e => e.SourceLibraryFullName).HasMaxLength(500);

                entity.Property(e => e.ActiveServerFullName).HasMaxLength(500);

                entity.Property(e => e.LastHeartbeatDateTime).HasColumnType("datetime");

                entity.Property(e => e.RequestTimeOut).HasColumnType("datetime");

                entity.Property(e => e.WindowsServiceName).HasMaxLength(500);
            });

            modelBuilder.Entity<HoldFundInfo>(entity =>
            {
                entity.HasKey(e => e.FileProcessId)
                    .HasName("XPKHoldFundInfo");

                entity.ToTable("HoldFundInfo");

                entity.Property(e => e.FileProcessId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileProcessID");

                entity.Property(e => e.ActualReleaseDate).HasColumnType("datetime");

                entity.Property(e => e.EstReleaseDate).HasColumnType("datetime");

                entity.Property(e => e.HoldDate).HasColumnType("datetime");

                entity.HasOne(d => d.FileProcess)
                    .WithOne(p => p.HoldFundInfo)
                    .HasForeignKey<HoldFundInfo>(d => d.FileProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFileProcess9FK");
            });

            modelBuilder.Entity<HomeWarrantyInfo>(entity =>
            {
                entity.HasKey(e => e.FileProcessId)
                    .HasName("XPKHomeWarrantyInfo");

                entity.ToTable("HomeWarrantyInfo");

                entity.Property(e => e.FileProcessId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileProcessID");

                entity.Property(e => e.ChargeAmtNotToExceed).HasColumnType("money");

                entity.Property(e => e.FromDate).HasColumnType("datetime");

                entity.Property(e => e.PaidByTypeCdId).HasColumnName("PaidByTypeCdID");

                entity.Property(e => e.PerDiemAmount).HasColumnType("money");

                entity.Property(e => e.ToDate).HasColumnType("datetime");

                entity.HasOne(d => d.FileProcess)
                    .WithOne(p => p.HomeWarrantyInfo)
                    .HasForeignKey<HomeWarrantyInfo>(d => d.FileProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFileProcess6FK");

                entity.HasOne(d => d.PaidByTypeCd)
                    .WithMany(p => p.HomeWarrantyInfos)
                    .HasForeignKey(d => d.PaidByTypeCdId)
                    .HasConstraintName("R_409");
            });

            modelBuilder.Entity<HudDeliveryVersioning>(entity =>
            {
                entity.HasKey(e => e.VersionNo);

                entity.ToTable("HudDeliveryVersioning");

                entity.HasIndex(e => new { e.DeliveryEventLogId, e.FileId }, "IX_DeliveryEventLogID_FileID");

                entity.Property(e => e.DeliveryEventLogId).HasColumnName("DeliveryEventLogID");

                entity.Property(e => e.DocName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.EventMsgId).HasColumnName("EventMsgID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.HudDeliveryVersionings)
                    .HasForeignKey(d => d.FileId)
                    .HasConstraintName("fk2HudDeliveryVersioning");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.HudDeliveryVersionings)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk3HudDeliveryVersioning");

                entity.HasOne(d => d.DeliveryEventLog)
                    .WithMany(p => p.HudDeliveryVersionings)
                    .HasForeignKey(d => new { d.DeliveryEventLogId, d.FileId })
                    .HasConstraintName("fk1HudDeliveryVersioning");
            });

            modelBuilder.Entity<HudLineAssignmentForChargesFee>(entity =>
            {
                entity.HasKey(e => e.HudLineAssignmentForChargesFeesId)
                    .HasName("PK__HudLineA__644E08CF6E3DD165")
                    .IsClustered(false);

                entity.HasIndex(e => e.FileId, "idxHudLineAssignmentForChargesFees1")
                    .IsClustered();

                entity.HasIndex(e => e.ServiceFileFeeId, "idxHudLineAssignmentForChargesFees2")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ChargeId, "idxHudLineAssignmentForChargesFees3")
                    .HasFillFactor(90);

                entity.Property(e => e.HudLineAssignmentForChargesFeesId).HasColumnName("HudLineAssignmentForChargesFeesID");

                entity.Property(e => e.ChargeId).HasColumnName("ChargeID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.Hud1chargeLineNum).HasColumnName("HUD1ChargeLineNum");

                entity.Property(e => e.HudlineNumFlag).HasColumnName("HUDLineNumFlag");

                entity.Property(e => e.InEscrowId).HasColumnName("InEscrowID");

                entity.Property(e => e.OutOfEscrowId).HasColumnName("OutOfEscrowID");

                entity.Property(e => e.ServiceFileFeeId).HasColumnName("ServiceFileFeeID");

                entity.Property(e => e.Updts)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Charge)
                    .WithMany(p => p.HudLineAssignmentForChargesFees)
                    .HasForeignKey(d => d.ChargeId)
                    .HasConstraintName("FK__HudLineAs__Charg__08DA0D04");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.HudLineAssignmentForChargesFees)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__HudLineAs__FileI__09CE313D");

                entity.HasOne(d => d.ServiceFileFee)
                    .WithMany(p => p.HudLineAssignmentForChargesFees)
                    .HasForeignKey(d => d.ServiceFileFeeId)
                    .HasConstraintName("FK__HudLineAs__Servi__0AC25576");
            });

            modelBuilder.Entity<IbabankAccount>(entity =>
            {
                entity.ToTable("IBABankAccount");

                entity.HasIndex(e => new { e.AccountNum, e.IbabankId, e.IbabankTypeCdId }, "IDXAccountNum")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.AccountNumHmac, "IDXAccountNumHMAC")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.StatusCd, "IDXCVRIBABankAccount")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ChargeId, "IDXChargeID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FileBusinessPartyId, e.BeneficiaryTypeCdId }, "IDXFileBusinessPartyID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileId, "IDXFileID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.IbabankId, e.IbabankTypeCdId }, "IDXIBABankID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.IbabankProductId, "IDXIBABankProductID")
                    .HasFillFactor(90);

                entity.Property(e => e.IbabankAccountId).HasColumnName("IBABankAccountID");

                entity.Property(e => e.AccountBalance).HasColumnType("money");

                entity.Property(e => e.AccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNumHmac)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("AccountNumHMAC");

                entity.Property(e => e.AccruedDate).HasColumnType("datetime");

                entity.Property(e => e.AccruedInterest).HasColumnType("money");

                entity.Property(e => e.AlertDate).HasColumnType("datetime");

                entity.Property(e => e.AlertId).HasColumnName("AlertID");

                entity.Property(e => e.Apy)
                    .HasColumnType("money")
                    .HasColumnName("APY");

                entity.Property(e => e.BeneficiaryTypeCdId).HasColumnName("BeneficiaryTypeCdID");

                entity.Property(e => e.ChargeId).HasColumnName("ChargeID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.FastBankAccountId).HasColumnName("FastBankAccountID");

                entity.Property(e => e.FileBusinessPartyId).HasColumnName("FileBusinessPartyID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FormattedAcctNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.IbabankId).HasColumnName("IBABankID");

                entity.Property(e => e.IbabankProductId).HasColumnName("IBABankProductID");

                entity.Property(e => e.IbabankTypeCdId).HasColumnName("IBABankTypeCdID");

                entity.Property(e => e.NonAutoBankContact)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ProductName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SeqNum)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.StatusCdId).HasColumnName("StatusCdID");

                entity.Property(e => e.StatusChgComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StatusUpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.StatusUpdatedEmployeeId).HasColumnName("StatusUpdatedEmployeeID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.HasOne(d => d.Charge)
                    .WithMany(p => p.IbabankAccounts)
                    .HasForeignKey(d => d.ChargeId)
                    .HasConstraintName("FK_IBABankAccount_ChargeID");

                entity.HasOne(d => d.CreationEmployee)
                    .WithMany(p => p.IbabankAccounts)
                    .HasForeignKey(d => d.CreationEmployeeId)
                    .HasConstraintName("FK_IBABankAccount_CreationEmployeeID");

                entity.HasOne(d => d.FastBankAccount)
                    .WithMany(p => p.IbabankAccounts)
                    .HasForeignKey(d => d.FastBankAccountId)
                    .HasConstraintName("FK_IBABankAccount_FASTBankAccountID");

                entity.HasOne(d => d.FileBusinessParty)
                    .WithMany(p => p.IbabankAccounts)
                    .HasForeignKey(d => d.FileBusinessPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IBABankAccount_FileBusinessPartyID");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.IbabankAccounts)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IBABankAccount_FileID");

                entity.HasOne(d => d.IbabankProduct)
                    .WithMany(p => p.IbabankAccounts)
                    .HasForeignKey(d => d.IbabankProductId)
                    .HasConstraintName("FK_IBABankAccount_IBABankProductID");

                entity.HasOne(d => d.IbabankTypeCd)
                    .WithMany(p => p.IbabankAccounts)
                    .HasForeignKey(d => d.IbabankTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IBABankAccount_IBABankTypeCdID");
            });

            modelBuilder.Entity<IbabankBranch>(entity =>
            {
                entity.HasKey(e => e.IbabankId)
                    .HasName("PK_IBABankBranch_IBABankID");

                entity.ToTable("IBABankBranch");

                entity.HasIndex(e => e.AbaroutingNo, "IDXABARoutingNo")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.BusinessUnitId, e.StatusCd }, "IDXBusinessUnitID")
                    .HasFillFactor(90);

                entity.Property(e => e.IbabankId).HasColumnName("IBABankID");

                entity.Property(e => e.AbaroutingNo)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("ABARoutingNo");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.CurrStatusDate).HasColumnType("datetime");

                entity.Property(e => e.CurrStatusUserId).HasColumnName("CurrStatusUserID");

                entity.Property(e => e.Cutofftime).HasColumnType("datetime");

                entity.Property(e => e.Notes)
                    .HasMaxLength(270)
                    .IsUnicode(false);

                entity.Property(e => e.TimeZoneCdId).HasColumnName("TimeZoneCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.IbabankBranches)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .HasConstraintName("FK_IBABankBranch_BusinessUnitID");

                entity.HasOne(d => d.CreationEmployee)
                    .WithMany(p => p.IbabankBranchCreationEmployees)
                    .HasForeignKey(d => d.CreationEmployeeId)
                    .HasConstraintName("FK_IBABankBranch_CreationEmployeeID");

                entity.HasOne(d => d.CurrStatusUser)
                    .WithMany(p => p.IbabankBranchCurrStatusUsers)
                    .HasForeignKey(d => d.CurrStatusUserId)
                    .HasConstraintName("FK_IBABankbranch_CurrStatusUserID");

                entity.HasOne(d => d.TimeZoneCd)
                    .WithMany(p => p.IbabankBranches)
                    .HasForeignKey(d => d.TimeZoneCdId)
                    .HasConstraintName("FK_IBABankBranch_TimeZoneCdId");
            });

            modelBuilder.Entity<IbabankBranchAddrXref>(entity =>
            {
                entity.HasKey(e => new { e.IbabankId, e.AddrTypeCdId })
                    .HasName("PK_IBABankBranchAddrXref_IBABankIDAddrTypeCdID");

                entity.ToTable("IBABankBranchAddrXref");

                entity.Property(e => e.IbabankId).HasColumnName("IBABankID");

                entity.Property(e => e.AddrTypeCdId).HasColumnName("AddrTypeCdID");

                entity.Property(e => e.AddrBookEntryId).HasColumnName("AddrBookEntryID");

                entity.HasOne(d => d.AddrBookEntry)
                    .WithMany(p => p.IbabankBranchAddrXrefs)
                    .HasForeignKey(d => d.AddrBookEntryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IBABankBranchAddrXref_AddrBookEntryID");

                entity.HasOne(d => d.Ibabank)
                    .WithMany(p => p.IbabankBranchAddrXrefs)
                    .HasForeignKey(d => d.IbabankId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IBABankBranchAddrXref_IBABankID");
            });

            modelBuilder.Entity<IbabankProduct>(entity =>
            {
                entity.ToTable("IBABankProduct");

                entity.HasIndex(e => e.IbabankId, "IDXIBABankID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ProductCd, "IDXProductCD")
                    .HasFillFactor(90);

                entity.Property(e => e.IbabankProductId).HasColumnName("IBABankProductID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.IbabankId).HasColumnName("IBABankID");

                entity.Property(e => e.ProductCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ProductName)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CreationEmployee)
                    .WithMany(p => p.IbabankProducts)
                    .HasForeignKey(d => d.CreationEmployeeId)
                    .HasConstraintName("FK_IBABankProduct_CreationEmployeeID");

                entity.HasOne(d => d.Ibabank)
                    .WithMany(p => p.IbabankProducts)
                    .HasForeignKey(d => d.IbabankId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IBABankProduct_IBABankID");
            });

            modelBuilder.Entity<IbabankStatusChangeXref>(entity =>
            {
                entity.HasKey(e => e.IbabankStatusChangeId)
                    .HasName("PK_IBABankStatusChangeID");

                entity.ToTable("IBABankStatusChangeXref");

                entity.Property(e => e.IbabankStatusChangeId).HasColumnName("IBABankStatusChangeID");

                entity.Property(e => e.CurrStatusDate).HasColumnType("datetime");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.IbabankId).HasColumnName("IBABankID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(270)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.IbabankStatusChangeXrefs)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IBABankStatusChangeXref_EmployeeID");

                entity.HasOne(d => d.Ibabank)
                    .WithMany(p => p.IbabankStatusChangeXrefs)
                    .HasForeignKey(d => d.IbabankId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IBABankStatusChangeXref_IBABankID");
            });

            modelBuilder.Entity<IbabankbranchBuxref>(entity =>
            {
                entity.ToTable("IBABankbranchBUXref");

                entity.Property(e => e.IbabankbranchBuxrefId).HasColumnName("IBABankbranchBUXrefId");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.IbabankId).HasColumnName("IBABankID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.Ibabank)
                    .WithMany(p => p.IbabankbranchBuxrefs)
                    .HasForeignKey(d => d.IbabankId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IBABankbranchBUXref_IBABankID");
            });

            modelBuilder.Entity<Ibadatum>(entity =>
            {
                entity.HasKey(e => e.IbadataId)
                    .HasName("PK_IBAData_ID");

                entity.ToTable("IBAData");

                entity.Property(e => e.IbadataId).HasColumnName("IBAData_ID");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AccountTitleLine1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.AccountTitleLine2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.AccountTitleLine3)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.AvailableBalance)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Buid).HasColumnName("BUID");

                entity.Property(e => e.CityandState)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ClosingWithdrawal)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Company)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentBalance).HasColumnType("money");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateClosed).HasColumnType("datetime");

                entity.Property(e => e.DateOpened).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FileNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InterestPaidLastYr)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InterestPaidYtd)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("InterestPaidYTD");

                entity.Property(e => e.NameAddressLine1)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Name/AddressLine1");

                entity.Property(e => e.NameAddressLine2)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Name/AddressLine2");

                entity.Property(e => e.Office)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TaxId)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("TaxID");

                entity.Property(e => e.TypeCode)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ZipCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IbanonAutomatedBank>(entity =>
            {
                entity.HasKey(e => e.IbabankId)
                    .HasName("PK_IBANonAutomatedBank_IBABankID");

                entity.ToTable("IBANonAutomatedBank");

                entity.HasIndex(e => e.IbabankId, "IDXIncIBANonAutoBank")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.RoutingNumber, "IDXRoutingNo")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.IbabankId).HasColumnName("IBABankID");

                entity.Property(e => e.BankName)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.BatchDate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BookEntryStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.City)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.FundSettlementStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FundTransferStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LastRevisionDate).HasColumnType("datetime");

                entity.Property(e => e.RoutingNumber)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TelegraphName)
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Ibarate>(entity =>
            {
                entity.HasKey(e => e.RateId)
                    .HasName("PK_IBARates_RateID");

                entity.ToTable("IBARates");

                entity.HasIndex(e => e.IbabankProductId, "IDXIBABankProductID")
                    .HasFillFactor(90);

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.Apy)
                    .HasColumnType("money")
                    .HasColumnName("APY");

                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

                entity.Property(e => e.IbabankProductId).HasColumnName("IBABankProductID");

                entity.Property(e => e.MaxAmt).HasColumnType("money");

                entity.Property(e => e.MinAmt).HasColumnType("money");

                entity.HasOne(d => d.IbabankProduct)
                    .WithMany(p => p.Ibarates)
                    .HasForeignKey(d => d.IbabankProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IBARates_IBABankProductID");
            });

            modelBuilder.Entity<Ibatransaction>(entity =>
            {
                entity.ToTable("IBATransaction");

                entity.HasIndex(e => e.StatusCd, "IDXCVRIBATransaction")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DisbursementId, "IDXDisbursementID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileProcessId, "IDXFileProcessID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.IbabankAccountId, "IDXIBABankAccountID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.IbatransactionId, e.StatusCdId, e.TransactionTypeCdId, e.ExtractId, e.UpdateTrustAccountingFlag }, "IDXIBATransaction")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.IbatransactionId, e.ClassTypeId }, "IDXIBATransaction1")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.InEscrowId, "IDXInEscrowID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.OrginalIbatransactionId, "NCI_OrginalIBATransactionID_IBATransaction");

                entity.Property(e => e.IbatransactionId).HasColumnName("IBATransactionID");

                entity.Property(e => e.AlertId).HasColumnName("AlertID");

                entity.Property(e => e.ApprovedDate).HasColumnType("datetime");

                entity.Property(e => e.ApprovedEmployeeId).HasColumnName("ApprovedEmployeeID");

                entity.Property(e => e.ChargeAmount).HasColumnType("money");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.DisbursementId).HasColumnName("DisbursementID");

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.FileProcessId).HasColumnName("FileProcessID");

                entity.Property(e => e.IbabankAccountId).HasColumnName("IBABankAccountID");

                entity.Property(e => e.IbatranId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("IBATranID");

                entity.Property(e => e.InEscrowId).HasColumnName("InEscrowID");

                entity.Property(e => e.OrginalIbatransactionId).HasColumnName("OrginalIBATransactionID");

                entity.Property(e => e.StatusCdId).HasColumnName("StatusCdID");

                entity.Property(e => e.TranAmount).HasColumnType("money");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.UpdatetoFsb).HasColumnName("UpdatetoFSB");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.Ibatransactions)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IBATransaction_ClassTypeID");

                entity.HasOne(d => d.Disbursement)
                    .WithMany(p => p.Ibatransactions)
                    .HasForeignKey(d => d.DisbursementId)
                    .HasConstraintName("FK_IBATRANSACTION_DisbursementID");

                entity.HasOne(d => d.Extract)
                    .WithMany(p => p.Ibatransactions)
                    .HasForeignKey(d => d.ExtractId)
                    .HasConstraintName("FK_IBATransaction_ExtractID");

                entity.HasOne(d => d.FileProcess)
                    .WithMany(p => p.Ibatransactions)
                    .HasForeignKey(d => d.FileProcessId)
                    .HasConstraintName("FK_IBATransaction_FileProcessID");

                entity.HasOne(d => d.IbabankAccount)
                    .WithMany(p => p.Ibatransactions)
                    .HasForeignKey(d => d.IbabankAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IBATransaction_IBABankAccountID");

                entity.HasOne(d => d.InEscrow)
                    .WithMany(p => p.Ibatransactions)
                    .HasForeignKey(d => d.InEscrowId)
                    .HasConstraintName("FK_IBATransaction_InEscrowID");

                entity.HasOne(d => d.StatusCdNavigation)
                    .WithMany(p => p.IbatransactionStatusCdNavigations)
                    .HasForeignKey(d => d.StatusCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IBATransaction_StatusCdID");

                entity.HasOne(d => d.TransactionTypeCd)
                    .WithMany(p => p.IbatransactionTransactionTypeCds)
                    .HasForeignKey(d => d.TransactionTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IBATransaction_TransactionTypeCdID");
            });

            modelBuilder.Entity<IbatransactionAdjustmentLog>(entity =>
            {
                entity.ToTable("IBATransactionAdjustmentLog");

                entity.HasIndex(e => e.IbatransactionId, "nclidx_IBATransactionID")
                    .HasFillFactor(90);

                entity.Property(e => e.IbatransactionAdjustmentLogId).HasColumnName("IBATransactionAdjustmentLogID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.IbatransactionId).HasColumnName("IBATransactionID");

                entity.Property(e => e.StatusCdId).HasColumnName("StatusCdID");

                entity.Property(e => e.StatusChgComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TransAmount).HasColumnType("money");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.CreationEmployee)
                    .WithMany(p => p.IbatransactionAdjustmentLogs)
                    .HasForeignKey(d => d.CreationEmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conIBATransactionAdjLogToEmpFK");

                entity.HasOne(d => d.Ibatransaction)
                    .WithMany(p => p.IbatransactionAdjustmentLogs)
                    .HasForeignKey(d => d.IbatransactionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conIBATransactionAdjLogToIBATransactionFK");
            });

            modelBuilder.Entity<IbatransactionLog>(entity =>
            {
                entity.HasKey(e => e.IbatransactionId)
                    .HasName("PK_IBATransactionLogID");

                entity.ToTable("IBATransactionLog");

                entity.HasIndex(e => e.UpdatedKey, "IDXIBAUpdatedKey")
                    .HasFillFactor(90);

                entity.Property(e => e.IbatransactionId)
                    .ValueGeneratedNever()
                    .HasColumnName("IBATransactionID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.HasOne(d => d.Ibatransaction)
                    .WithOne(p => p.IbatransactionLog)
                    .HasForeignKey<IbatransactionLog>(d => d.IbatransactionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IBATransactionLog_IBATransactionID");
            });

            modelBuilder.Entity<IbatransactionOldBankXref>(entity =>
            {
                entity.ToTable("IBATransactionOldBankXref");

                entity.HasIndex(e => e.IbatransactionId, "NCI_IBATransactionID_IBATransactionOldBankXref")
                    .HasFillFactor(90);

                entity.Property(e => e.IbatransactionOldBankXrefId).HasColumnName("IBATransactionOldBankXrefId");

                entity.Property(e => e.AccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNumHmac)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("AccountNumHMAC");

                entity.Property(e => e.BalanceAmount).HasColumnType("money");

                entity.Property(e => e.FormattedAcctNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.IbabankId).HasColumnName("IBABankID");

                entity.Property(e => e.IbatransactionId).HasColumnName("IBATransactionID");

                entity.Property(e => e.OldBeneficiaryAddress)
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.OldBeneficiaryName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OldBeneficiaryRole)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OldBeneficiaryType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OldBenficiarySsntinflag)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("OldBenficiarySSNTINFlag");

                entity.Property(e => e.OldIbatype)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("OldIBAType");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Ibabank)
                    .WithMany(p => p.IbatransactionOldBankXrefs)
                    .HasForeignKey(d => d.IbabankId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IBATransactionOldBankXref_IBABankID");

                entity.HasOne(d => d.Ibatransaction)
                    .WithMany(p => p.IbatransactionOldBankXrefs)
                    .HasForeignKey(d => d.IbatransactionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IBATransactionOldBankXref_IBATransactionID");
            });

            modelBuilder.Entity<IbatransactionStatusLog>(entity =>
            {
                entity.ToTable("IBATransactionStatusLog");

                entity.HasIndex(e => new { e.IbatransactionId, e.StatusCdId, e.UpdatedDate }, "IDXIBATransactionStatusLog")
                    .HasFillFactor(90);

                entity.Property(e => e.IbatransactionStatusLogId).HasColumnName("IBATransactionStatusLogID");

                entity.Property(e => e.IbatransactionId).HasColumnName("IBATransactionID");

                entity.Property(e => e.RequestData)
                    .HasMaxLength(6000)
                    .IsUnicode(false);

                entity.Property(e => e.ResponseData)
                    .HasMaxLength(6000)
                    .IsUnicode(false);

                entity.Property(e => e.StatusCdId).HasColumnName("StatusCdID");

                entity.Property(e => e.StatusChgComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.HasOne(d => d.Ibatransaction)
                    .WithMany(p => p.IbatransactionStatusLogs)
                    .HasForeignKey(d => d.IbatransactionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IBATransactionStatusLog_IBATransactionID");

                entity.HasOne(d => d.StatusCd)
                    .WithMany(p => p.IbatransactionStatusLogs)
                    .HasForeignKey(d => d.StatusCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IBATransactionStatusLog_StatusCdID");
            });

            modelBuilder.Entity<ImageDocToolProcessState>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ImageDocTool_ProcessStates");

                entity.Property(e => e.Descr)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ImageRestriction>(entity =>
            {
                entity.ToTable("ImageRestriction");

                entity.HasIndex(e => new { e.AppId, e.RegionId }, "idx_ImageRestriction_AppRegion")
                    .IsUnique();

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Descr)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<ImageRestrictionAudit>(entity =>
            {
                entity.ToTable("ImageRestrictionAudit");

                entity.HasIndex(e => e.ImageRestrictionId, "idx_ImageRestrictionAudit_ImageRestrictionId");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Descr)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.ImageRestriction)
                    .WithMany(p => p.ImageRestrictionAudits)
                    .HasForeignKey(d => d.ImageRestrictionId)
                    .HasConstraintName("FK_ImageRestrictionAudit_Id");
            });

            modelBuilder.Entity<ImagingPurgeRun>(entity =>
            {
                entity.HasKey(e => e.FileId)
                    .HasName("conImagingPurgeRunPK");

                entity.ToTable("ImagingPurgeRun");

                entity.Property(e => e.FileId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileID");

                entity.Property(e => e.RunStartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ImportLog>(entity =>
            {
                entity.ToTable("ImportLog", "Migration");

                entity.Property(e => e.ImportLogId).HasColumnName("ImportLogID");

                entity.Property(e => e.BatchId).HasColumnName("BatchID");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SourceRegionId).HasColumnName("SourceRegionID");

                entity.Property(e => e.TableName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TargetRegionId).HasColumnName("TargetRegionID");
            });

            modelBuilder.Entity<InEscrowDeposit>(entity =>
            {
                entity.HasKey(e => e.InEscrowId)
                    .HasName("XPKInEscrowDeposit");

                entity.ToTable("InEscrowDeposit");

                entity.HasIndex(e => new { e.FileId, e.InEscrowId, e.TransactionTypeCdId, e.Amount, e.CreditToTypeCdId, e.StatusTypeCdId, e.Description }, "IDXInEscrowDeposit")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DlparentInEscrowId, "IDXInEscrowDepositDLparentinescrowid");

                entity.HasIndex(e => e.DepositListId, "IDXInEscrowDepositDepositListID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ReceiptNum, "IDXInEscrowDepositReceiptNum")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.StatusTypeCdId, "IDXInEscrowDepositstatustypecdid");

                entity.HasIndex(e => e.BankAcctId, "XIF19InEscrowDeposit")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ExtractId, "XIF375InEscrowDeposit")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.AdjustedTransactionId, "XIF376InEscrowDeposit")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CorrectingTransactionId, "XIF377InEscrowDeposit")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.BankAcctId, e.IssueDate, e.ExcludeFlag, e.DepositListId, e.TransactionTypeCdId, e.StatusTypeCdId }, "XIF379InEscrowDeposit")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PaymentId, "XIF384InEscrowDeposit")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TransactionTypeCdId, "XIF388InEscrowDeposit")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileId, "XIF389InEscrowDeposit")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.BankAcctId, e.DepositListId, e.ExcludeFlag }, "idx1_InEscrowDeposit")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.InEscrowId, "idxInEscrowDepositRepresentingType");

                entity.HasIndex(e => new { e.FileId, e.ReceiptNum }, "idxReceiptAutoNumberCheck")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DlparentInEscrowId, "idx_InEscrowDeposit_DLParentInEscrowId")
                    .HasFillFactor(95);

                entity.HasIndex(e => e.PropertyId, "ixn_InEscrowDepositPropertyID");

                entity.Property(e => e.InEscrowId).HasColumnName("InEscrowID");

                entity.Property(e => e.AdjustedTransactionId).HasColumnName("AdjustedTransactionID");

                entity.Property(e => e.AdjustmentDate).HasColumnType("datetime");

                entity.Property(e => e.AdjustmentReasonTypeCdId).HasColumnName("AdjustmentReasonTypeCdID");

                entity.Property(e => e.AdjustmentTypeCdId).HasColumnName("AdjustmentTypeCdID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BankAcctId).HasColumnName("BankAcctID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CorrectingTransactionId).HasColumnName("CorrectingTransactionID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.CreditToTypeCdId).HasColumnName("CreditToTypeCdID");

                entity.Property(e => e.DepositDate).HasColumnType("datetime");

                entity.Property(e => e.DepositListId).HasColumnName("DepositListID");

                entity.Property(e => e.DepositTicketNum)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DepositorName)
                    .HasMaxLength(130)
                    .IsUnicode(false);

                entity.Property(e => e.DepositorTypeCdId).HasColumnName("DepositorTypeCdID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DlparentInEscrowId).HasColumnName("DLParentInEscrowId");

                entity.Property(e => e.ExcludeDate).HasColumnType("datetime");

                entity.Property(e => e.ExcludeEmployeeId).HasColumnName("ExcludeEmployeeID");

                entity.Property(e => e.ExcludeFlag).HasDefaultValueSql("((0))");

                entity.Property(e => e.ExcludeReason)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.ManualReceiptReason)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentId).HasColumnName("PaymentID");

                entity.Property(e => e.PropertyId).HasColumnName("PropertyID");

                entity.Property(e => e.ReceiptNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RemainingAmount).HasColumnType("money");

                entity.Property(e => e.RepresentingTypeCdId).HasColumnName("RepresentingTypeCdID");

                entity.Property(e => e.SourceTypeCdId).HasColumnName("SourceTypeCdID");

                entity.Property(e => e.StatusTypeCdId).HasColumnName("StatusTypeCdID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.HasOne(d => d.AdjustedTransaction)
                    .WithMany(p => p.InverseAdjustedTransaction)
                    .HasForeignKey(d => d.AdjustedTransactionId)
                    .HasConstraintName("R_270");

                entity.HasOne(d => d.AdjustmentReasonTypeCd)
                    .WithMany(p => p.InEscrowDepositAdjustmentReasonTypeCds)
                    .HasForeignKey(d => d.AdjustmentReasonTypeCdId)
                    .HasConstraintName("R_447");

                entity.HasOne(d => d.BankAcct)
                    .WithMany(p => p.InEscrowDeposits)
                    .HasForeignKey(d => d.BankAcctId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conInEscrowDeposit1FK");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.InEscrowDeposits)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conInEscrowDeposit4FK");

                entity.HasOne(d => d.CorrectingTransaction)
                    .WithMany(p => p.InverseCorrectingTransaction)
                    .HasForeignKey(d => d.CorrectingTransactionId)
                    .HasConstraintName("R_241");

                entity.HasOne(d => d.CreationEmployee)
                    .WithMany(p => p.InEscrowDepositCreationEmployees)
                    .HasForeignKey(d => d.CreationEmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conInEscrowDeposit6FK");

                entity.HasOne(d => d.CreditToTypeCd)
                    .WithMany(p => p.InEscrowDepositCreditToTypeCds)
                    .HasForeignKey(d => d.CreditToTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conInEscrowDeposit20FK");

                entity.HasOne(d => d.DepositList)
                    .WithMany(p => p.InEscrowDeposits)
                    .HasForeignKey(d => d.DepositListId)
                    .HasConstraintName("conInEscrowDepositref48FK");

                entity.HasOne(d => d.DepositorTypeCd)
                    .WithMany(p => p.InEscrowDepositDepositorTypeCds)
                    .HasForeignKey(d => d.DepositorTypeCdId)
                    .HasConstraintName("conInEscrowDeposit18FK");

                entity.HasOne(d => d.DlparentInEscrow)
                    .WithMany(p => p.InverseDlparentInEscrow)
                    .HasForeignKey(d => d.DlparentInEscrowId)
                    .HasConstraintName("conInEscrowDepositref50FK");

                entity.HasOne(d => d.ExcludeEmployee)
                    .WithMany(p => p.InEscrowDepositExcludeEmployees)
                    .HasForeignKey(d => d.ExcludeEmployeeId)
                    .HasConstraintName("conInEscrowDepositref49FK");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.InEscrowDeposits)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conInEscrowDeposit45FK");

                entity.HasOne(d => d.Payment)
                    .WithMany(p => p.InEscrowDeposits)
                    .HasForeignKey(d => d.PaymentId)
                    .HasConstraintName("conInEscrowDeposit2FK");

                entity.HasOne(d => d.Property)
                    .WithMany(p => p.InEscrowDeposits)
                    .HasForeignKey(d => d.PropertyId)
                    .HasConstraintName("conInEscrowDeposit2RealPropertyFK");

                entity.HasOne(d => d.RepresentingTypeCd)
                    .WithMany(p => p.InEscrowDepositRepresentingTypeCds)
                    .HasForeignKey(d => d.RepresentingTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conInEscrowDeposit19FK");

                entity.HasOne(d => d.SourceTypeCd)
                    .WithMany(p => p.InEscrowDepositSourceTypeCds)
                    .HasForeignKey(d => d.SourceTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conInEscrowDeposit16FK");

                entity.HasOne(d => d.StatusTypeCd)
                    .WithMany(p => p.InEscrowDepositStatusTypeCds)
                    .HasForeignKey(d => d.StatusTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conInEscrowDeposit17FK");

                entity.HasOne(d => d.TransactionTypeCd)
                    .WithMany(p => p.InEscrowDepositTransactionTypeCds)
                    .HasForeignKey(d => d.TransactionTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conInEscrowDeposit22FK");
            });

            modelBuilder.Entity<IncomingWire>(entity =>
            {
                entity.ToTable("IncomingWire");

                entity.HasIndex(e => e.ReceivedDate, "IX_IncomingWire_ReceivedDate")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SourceTypeCdId, "IX_Incomingwire_SourceTypeCdId");

                entity.Property(e => e.IncomingWireId).HasColumnName("IncomingWireID");

                entity.Property(e => e.Bai2RefsResponse)
                    .IsUnicode(false)
                    .HasColumnName("BAI2_Refs_Response");

                entity.Property(e => e.Bai2TextResponse)
                    .IsUnicode(false)
                    .HasColumnName("BAI2_Text_Response");

                entity.Property(e => e.ReceivedDate).HasColumnType("datetime");

                entity.HasOne(d => d.SourceTypeCd)
                    .WithMany(p => p.IncomingWires)
                    .HasForeignKey(d => d.SourceTypeCdId)
                    .HasConstraintName("FK_IncomingWire_SourceTypeCdId");
            });

            modelBuilder.Entity<IncomingWireDeposit>(entity =>
            {
                entity.ToTable("IncomingWireDeposit");

                entity.HasIndex(e => e.DepositStatus, "IDX_incomingwiredeposit_DepositStatus")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.DepositStatus, e.DeliveryStatus }, "IDX_incomingwiredeposit_DepositStatus_DeliveryStatus")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.IncomingWireDetailId, e.DepositStatus }, "IdxIncomingWireDepositIncomingWireDetailID")
                    .HasFillFactor(90);

                entity.Property(e => e.AchsourceTypeId).HasColumnName("ACHSourceTypeID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.ErrorInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.IncomingWireDetailId).HasColumnName("IncomingWireDetailID");

                entity.Property(e => e.StatusChangeDate).HasColumnType("datetime");

                entity.Property(e => e.TargetFileId).HasDefaultValueSql("((0))");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.AchsourceType)
                    .WithMany(p => p.IncomingWireDeposits)
                    .HasForeignKey(d => d.AchsourceTypeId)
                    .HasConstraintName("FKIncomingWireDepositACHSourceTypeID");

                entity.HasOne(d => d.IncomingWireDetail)
                    .WithMany(p => p.IncomingWireDeposits)
                    .HasForeignKey(d => d.IncomingWireDetailId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FKIncomingWireDepositIncomingWireDetailID");
            });

            modelBuilder.Entity<IncomingWireDetail>(entity =>
            {
                entity.ToTable("IncomingWireDetail");

                entity.HasIndex(e => e.AccountNum, "IDX_IncomingWireDetail_AccountNum_Incl_ALL")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.AccountNumHmac, "IX_IncomingWireDetail_AccountNumHMAC")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ConfirmRef, e.IssueDate }, "IX_IncomingWireDetail_ConfirmRef")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SourceTypeCdId, "IX_incomingwiredetail_SourceTypeCdId")
                    .HasFillFactor(90);

                entity.Property(e => e.IncomingWireDetailId).HasColumnName("IncomingWireDetailID");

                entity.Property(e => e.AccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNumHmac)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("AccountNumHMAC");

                entity.Property(e => e.Achaddenda)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ACHAddenda");

                entity.Property(e => e.AchaddendaSeqNum)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ACHAddendaSeqNum");

                entity.Property(e => e.AchaddendaTypeCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ACHAddendaTypeCode");

                entity.Property(e => e.Achdescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACHDescription");

                entity.Property(e => e.AchentryDetailSeqNum)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ACHEntryDetailSeqNum");

                entity.Property(e => e.AchindividualCompanyName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACHIndividualCompanyName");

                entity.Property(e => e.Achodfi)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ACHODFI");

                entity.Property(e => e.AchpaymentInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACHPaymentInfo");

                entity.Property(e => e.AchrecordTypeCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ACHRecordTypeCode");

                entity.Property(e => e.Achseccode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACHSECCode");

                entity.Property(e => e.AchtraceNum)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ACHTraceNum");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.Bbi)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("BBI");

                entity.Property(e => e.Bbkinfo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("BBKINFO");

                entity.Property(e => e.Bnf)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("BNF");

                entity.Property(e => e.Bnfinfo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("BNFINFO");

                entity.Property(e => e.ConfirmRef)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContinuationRecords).IsUnicode(false);

                entity.Property(e => e.Ibkinfo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("IBKINFO");

                entity.Property(e => e.Imad)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IMAD");

                entity.Property(e => e.IncomingWireId).HasColumnName("IncomingWireID");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Obi)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OBI");

                entity.Property(e => e.Ogb)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OGB");

                entity.Property(e => e.Omad)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OMAD");

                entity.Property(e => e.OriginatorId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("OriginatorID");

                entity.Property(e => e.OriginatorName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PayMeth)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Pnrmtime)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("PNRMTIME");

                entity.Property(e => e.Rcvbkaba)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("RCVBKABA");

                entity.Property(e => e.Rcvbkinfo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("RCVBKINFO");

                entity.Property(e => e.Rcvbkname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("RCVBKNAME");

                entity.Property(e => e.Records).IsUnicode(false);

                entity.Property(e => e.Rfb)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("RFB");

                entity.Property(e => e.Sndbkaba)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SNDBKABA");

                entity.Property(e => e.Sndbkname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SNDBKNAME");

                entity.Property(e => e.StatusChgDate).HasColumnType("datetime");

                entity.Property(e => e.StatusChgUserId).HasColumnName("StatusChgUserID");

                entity.Property(e => e.TypeCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TypeId).HasColumnName("TypeID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.IncomingWire)
                    .WithMany(p => p.IncomingWireDetails)
                    .HasForeignKey(d => d.IncomingWireId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conIncomingWireDetail2FK");

                entity.HasOne(d => d.SourceTypeCd)
                    .WithMany(p => p.IncomingWireDetails)
                    .HasForeignKey(d => d.SourceTypeCdId)
                    .HasConstraintName("FK_IncomingWireDetail_SourceTypeCdId");

                entity.HasOne(d => d.StatusChgUser)
                    .WithMany(p => p.IncomingWireDetails)
                    .HasForeignKey(d => d.StatusChgUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conIncomingWireDetail3FK");
            });

            modelBuilder.Entity<IncomingWireDetailLog>(entity =>
            {
                entity.HasKey(e => e.IncomingWireDetailId);

                entity.ToTable("IncomingWireDetailLog");

                entity.Property(e => e.IncomingWireDetailId)
                    .ValueGeneratedNever()
                    .HasColumnName("IncomingWireDetailID");

                entity.Property(e => e.Bai2AchTextRequest)
                    .IsUnicode(false)
                    .HasColumnName("BAI2_ACH_Text_Request");

                entity.Property(e => e.Bai2AchTextResponse)
                    .IsUnicode(false)
                    .HasColumnName("BAI2_ACH_Text_Response");
            });

            modelBuilder.Entity<IncomingWireDisbursement>(entity =>
            {
                entity.HasKey(e => e.DisbursementId);

                entity.ToTable("IncomingWireDisbursement");

                entity.Property(e => e.DisbursementId).HasColumnName("DisbursementID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BankAcctId).HasColumnName("BankAcctID");

                entity.Property(e => e.DisbursementMethodTypeCdId).HasColumnName("DisbursementMethodTypeCdID");

                entity.Property(e => e.DocumentNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IncomingWireDetailId).HasColumnName("IncomingWireDetailID");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.IssuedByEmployeeId).HasColumnName("IssuedByEmployeeID");

                entity.Property(e => e.SourceTypeCdId).HasColumnName("SourceTypeCdID");

                entity.Property(e => e.StatusTypeCdId).HasColumnName("StatusTypeCdID");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.Property(e => e.WireDisbursementDetailId).HasColumnName("WireDisbursementDetailID");

                entity.HasOne(d => d.IncomingWireDetail)
                    .WithMany(p => p.IncomingWireDisbursements)
                    .HasForeignKey(d => d.IncomingWireDetailId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IncomingWireDisbursement_IncomingWireDetail");

                entity.HasOne(d => d.UpdatedEmployee)
                    .WithMany(p => p.IncomingWireDisbursements)
                    .HasForeignKey(d => d.UpdatedEmployeeId)
                    .HasConstraintName("FK_IncomingWireDisbursement_Employee");

                entity.HasOne(d => d.WireDisbursementDetail)
                    .WithMany(p => p.IncomingWireDisbursements)
                    .HasForeignKey(d => d.WireDisbursementDetailId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IncomingWireDisbursement_WireDisbursementDetail");
            });

            modelBuilder.Entity<IncomingWireXpresswireUserIdxref>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IncomingWireXpresswireUserIDXref");

                entity.HasIndex(e => e.RecId, "PK_IncomingWireXpresswireUserIDXref_RecID")
                    .IsClustered();

                entity.Property(e => e.RecId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecID");

                entity.Property(e => e.XpressWireUserId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("XpressWireUserID");
            });

            modelBuilder.Entity<IndexType>(entity =>
            {
                entity.HasKey(e => e.IndexTypeHeaderId)
                    .HasName("conIndexTypeHeader1Pk");

                entity.ToTable("IndexType");

                entity.HasIndex(e => new { e.ClassTypeId, e.HeaderName, e.ColumnName }, "indIndexTypeHeader2")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.IndexTypeHeaderId).HasColumnName("IndexTypeHeaderID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.ColumnName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.IndexTypes)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conIndexType2Fk");
            });

            modelBuilder.Entity<IngrianAudit>(entity =>
            {
                entity.ToTable("Ingrian_Audit");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Bcpin).HasColumnName("BCPIN");

                entity.Property(e => e.Bcpout).HasColumnName("BCPOUT");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Tblname)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<InspReprInfo>(entity =>
            {
                entity.HasKey(e => e.FileProcessId)
                    .HasName("XPKInspReprInfo");

                entity.ToTable("InspReprInfo");

                entity.Property(e => e.FileProcessId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileProcessID");

                entity.Property(e => e.CompleteDate).HasColumnType("datetime");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.FollowUpDate).HasColumnType("datetime");

                entity.Property(e => e.FurnishedByTypeCdId).HasColumnName("FurnishedByTypeCdID");

                entity.Property(e => e.OrderDate).HasColumnType("datetime");

                entity.Property(e => e.ReportDate).HasColumnType("datetime");

                entity.HasOne(d => d.FileProcess)
                    .WithOne(p => p.InspReprInfo)
                    .HasForeignKey<InspReprInfo>(d => d.FileProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conInspReprInfo15FK");

                entity.HasOne(d => d.FurnishedByTypeCd)
                    .WithMany(p => p.InspReprInfos)
                    .HasForeignKey(d => d.FurnishedByTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("R_410");
            });

            modelBuilder.Entity<Instruction>(entity =>
            {
                entity.ToTable("Instruction");

                entity.HasIndex(e => e.InstructionId, "IdxInstr")
                    .HasFillFactor(90);

                entity.Property(e => e.InstructionId).HasColumnName("InstructionID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.DeactivationDate).HasColumnType("datetime");

                entity.Property(e => e.InstructionName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Reactivationdate).HasColumnType("datetime");

                entity.Property(e => e.StatusCd).HasColumnName("StatusCD");

                entity.Property(e => e.StatusChangeDate).HasColumnType("datetime");

                entity.Property(e => e.StatusChangeUserId).HasColumnName("StatusChangeUserID");

                entity.Property(e => e.StatusChgComments)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.Instructions)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .HasConstraintName("FK_Instruction_BusinessUnitID");

                entity.HasOne(d => d.CreationEmployee)
                    .WithMany(p => p.InstructionCreationEmployees)
                    .HasForeignKey(d => d.CreationEmployeeId)
                    .HasConstraintName("FK_Instruction_EmployeeID");

                entity.HasOne(d => d.StatusChangeUser)
                    .WithMany(p => p.InstructionStatusChangeUsers)
                    .HasForeignKey(d => d.StatusChangeUserId)
                    .HasConstraintName("FK_Instruction_StatusChangeUserID");

                entity.HasOne(d => d.UpdatedEmployee)
                    .WithMany(p => p.InstructionUpdatedEmployees)
                    .HasForeignKey(d => d.UpdatedEmployeeId)
                    .HasConstraintName("FK_Instruction_UpdatedEmployeeID");
            });

            modelBuilder.Entity<InstructionBusOrgXref>(entity =>
            {
                entity.ToTable("InstructionBusOrgXref");

                entity.HasIndex(e => new { e.InstructionId, e.BusOrgId }, "Unq_InstructionID_BusOrgID")
                    .HasFillFactor(90);

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.InstructionId).HasColumnName("InstructionID");

                entity.HasOne(d => d.BusOrg)
                    .WithMany(p => p.InstructionBusOrgXrefs)
                    .HasForeignKey(d => d.BusOrgId)
                    .HasConstraintName("FK_InstructionBusOrgXref_BusOrgID");

                entity.HasOne(d => d.Instruction)
                    .WithMany(p => p.InstructionBusOrgXrefs)
                    .HasForeignKey(d => d.InstructionId)
                    .HasConstraintName("FK_InstructionBusOrgXref_InstructionID");
            });

            modelBuilder.Entity<InstructionOptionBusUnitXref>(entity =>
            {
                entity.HasKey(e => e.InstructionOptionId)
                    .HasName("PK_InstructionOptionID");

                entity.ToTable("InstructionOptionBusUnitXref");

                entity.HasIndex(e => new { e.InstructionId, e.BusinessUnitId }, "Ind_InstructionID_BUID")
                    .HasFillFactor(90);

                entity.Property(e => e.InstructionOptionId).HasColumnName("InstructionOptionID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.InstructionId).HasColumnName("InstructionID");

                entity.Property(e => e.OptionValue)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.InstructionOptionBusUnitXrefs)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .HasConstraintName("FK_IX_BusinessUnitID");

                entity.HasOne(d => d.Instruction)
                    .WithMany(p => p.InstructionOptionBusUnitXrefs)
                    .HasForeignKey(d => d.InstructionId)
                    .HasConstraintName("FK_IX_InstructionID");
            });

            modelBuilder.Entity<InsuranceInfo>(entity =>
            {
                entity.HasKey(e => e.FileProcessId)
                    .HasName("XPKInsuranceInfo");

                entity.ToTable("InsuranceInfo");

                entity.HasIndex(e => e.UwfileBusinessPartyId, "XIF63InsuranceInfo")
                    .HasFillFactor(90);

                entity.Property(e => e.FileProcessId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileProcessID");

                entity.Property(e => e.PremiumAmt).HasColumnType("money");

                entity.Property(e => e.PremiumPeriodTypeCdId).HasColumnName("PremiumPeriodTypeCdID");

                entity.Property(e => e.UwfileBusinessPartyId).HasColumnName("UWFileBusinessPartyID");

                entity.HasOne(d => d.FileProcess)
                    .WithOne(p => p.InsuranceInfo)
                    .HasForeignKey<InsuranceInfo>(d => d.FileProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conInsuranceInfo13FK");

                entity.HasOne(d => d.PremiumPeriodTypeCd)
                    .WithMany(p => p.InsuranceInfos)
                    .HasForeignKey(d => d.PremiumPeriodTypeCdId)
                    .HasConstraintName("conInsuranceInfo11FK");

                entity.HasOne(d => d.UwfileBusinessParty)
                    .WithMany(p => p.InsuranceInfos)
                    .HasForeignKey(d => d.UwfileBusinessPartyId)
                    .HasConstraintName("conInsuranceInfo12FK");
            });

            modelBuilder.Entity<IntegrationServicesEventLog>(entity =>
            {
                entity.HasKey(e => e.IseventLogId);

                entity.ToTable("IntegrationServicesEventLog");

                entity.Property(e => e.IseventLogId)
                    .ValueGeneratedNever()
                    .HasColumnName("ISEventLogID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.EventEndDate).HasColumnType("datetime");

                entity.Property(e => e.EventSourceClassTypeId).HasColumnName("EventSourceClassTypeID");

                entity.Property(e => e.EventSourceId).HasColumnName("EventSourceID");

                entity.Property(e => e.EventStartDate).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.UpdSourceClassTypeId).HasColumnName("UpdSourceClassTypeID");

                entity.Property(e => e.UpdSourceId).HasColumnName("UpdSourceID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.IntegrationServicesEventLogClassTypes)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK2_IntegrationServicesEventLog");

                entity.HasOne(d => d.Event)
                    .WithMany(p => p.IntegrationServicesEventLogs)
                    .HasForeignKey(d => d.EventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK5_IntegrationServicesEventLog");

                entity.HasOne(d => d.EventSourceClassType)
                    .WithMany(p => p.IntegrationServicesEventLogEventSourceClassTypes)
                    .HasForeignKey(d => d.EventSourceClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK4_IntegrationServicesEventLog");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.IntegrationServicesEventLogs)
                    .HasForeignKey(d => d.FileId)
                    .HasConstraintName("FK3_IntegrationServicesEventLog");

                entity.HasOne(d => d.IseventLog)
                    .WithOne(p => p.IntegrationServicesEventLog)
                    .HasForeignKey<IntegrationServicesEventLog>(d => d.IseventLogId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK1_IntegrationServicesEventLog");

                entity.HasOne(d => d.UpdSourceClassType)
                    .WithMany(p => p.IntegrationServicesEventLogUpdSourceClassTypes)
                    .HasForeignKey(d => d.UpdSourceClassTypeId)
                    .HasConstraintName("FK6_IntegrationServicesEventLog");
            });

            modelBuilder.Entity<InterOfficeFee>(entity =>
            {
                entity.ToTable("InterOfficeFee");

                entity.HasIndex(e => e.FileId, "idx_InterofficeFee_FileID")
                    .HasFillFactor(90);

                entity.Property(e => e.InterOfficeFeeId).HasColumnName("InterOfficeFeeID");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FeeAmount).HasColumnType("money");

                entity.Property(e => e.FeeDescr)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FeeId).HasColumnName("FeeID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.GllookupId).HasColumnName("GLLookupID");

                entity.Property(e => e.InterOfficeFeeExtractId).HasColumnName("InterOfficeFeeExtractID");

                entity.Property(e => e.PayeeFileBusinessPartyId).HasColumnName("PayeeFileBusinessPartyID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.Fee)
                    .WithMany(p => p.InterOfficeFees)
                    .HasForeignKey(d => d.FeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_conInterOfficeFee2FeeFK");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.InterOfficeFees)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_conInterOfficeFee2ServiceFileFK");

                entity.HasOne(d => d.Gllookup)
                    .WithMany(p => p.InterOfficeFees)
                    .HasForeignKey(d => d.GllookupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_conInterOfficeFee2GLLookupFK");

                entity.HasOne(d => d.PayeeFileBusinessParty)
                    .WithMany(p => p.InterOfficeFees)
                    .HasForeignKey(d => d.PayeeFileBusinessPartyId)
                    .HasConstraintName("FK_conInterOfficeFee2FileBusinessPartyFK");
            });

            modelBuilder.Entity<InterOfficeFeeExtract>(entity =>
            {
                entity.ToTable("InterOfficeFeeExtract");

                entity.Property(e => e.InterOfficeFeeExtractId).HasColumnName("InterOfficeFeeExtractID");

                entity.Property(e => e.ExtractCompleteDate).HasColumnType("datetime");

                entity.Property(e => e.ExtractDate).HasColumnType("date");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<InterOfficeFeeExtractedBusinessUnit>(entity =>
            {
                entity.ToTable("InterOfficeFeeExtractedBusinessUnit");

                entity.Property(e => e.InterOfficeFeeExtractedBusinessUnitId).HasColumnName("InterOfficeFeeExtractedBusinessUnitID");

                entity.Property(e => e.InterOfficeFeeExtractId).HasColumnName("InterOfficeFeeExtractID");

                entity.Property(e => e.OfficeExtractCompleteDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.PayeeBusinessUnitId).HasColumnName("PayeeBusinessUnitID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<InterOfficeFeeStatusHistory>(entity =>
            {
                entity.ToTable("InterOfficeFeeStatusHistory");

                entity.HasIndex(e => e.InterOfficeFeeId, "idx_InterOfficeFeeStatusHistory_InterOfficeFeeID")
                    .HasFillFactor(90);

                entity.Property(e => e.InterOfficeFeeStatusHistoryId).HasColumnName("InterOfficeFeeStatusHistoryID");

                entity.Property(e => e.InterOfficeFeeExtractId).HasColumnName("InterOfficeFeeExtractID");

                entity.Property(e => e.InterOfficeFeeId).HasColumnName("InterOfficeFeeID");

                entity.Property(e => e.StatusChangedDate).HasColumnType("date");

                entity.Property(e => e.StatusChangedReason)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.InterOfficeFee)
                    .WithMany(p => p.InterOfficeFeeStatusHistories)
                    .HasForeignKey(d => d.InterOfficeFeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_conInterOfficeFeeStatusHistory2InterOfficeFeeFK");
            });

            modelBuilder.Entity<InterfaceDeliveryRequest>(entity =>
            {
                entity.ToTable("InterfaceDeliveryRequest");

                entity.HasIndex(e => new { e.ApplId, e.FileId }, "IDX_ApplIDFileID")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.ApplId, e.ReferenceId }, "IDX_ApplIDReferenceID")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.FileId, "IDX_FileID")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.FileId, e.BusOrgId }, "IDX_InterfaceDeliveryRequest_FileId_BusOrgID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.StatusCd, e.RequestDateTime }, "IDX_StatusCdRequestDateTime")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.SuperInterfaceDeliveryRequestId, "IDX_SuperInterfaceDeliveryRequestID")
                    .HasFillFactor(100);

                entity.Property(e => e.InterfaceDeliveryRequestId).HasColumnName("InterfaceDeliveryRequestID");

                entity.Property(e => e.AddrBookEntryId).HasColumnName("AddrBookEntryID");

                entity.Property(e => e.ApplId).HasColumnName("ApplID");

                entity.Property(e => e.AutoUploadDateTime).HasColumnType("datetime");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.BusUnitId).HasColumnName("BusUnitID");

                entity.Property(e => e.DeliveryEventLogId).HasColumnName("DeliveryEventLogID");

                entity.Property(e => e.DocumentName)
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.EventMsqId).HasColumnName("EventMsqID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FormDocumentId).HasColumnName("FormDocumentID");

                entity.Property(e => e.Gabid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("GABID");

                entity.Property(e => e.HudfilePath)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("HUDFilePath");

                entity.Property(e => e.ReferenceId)
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("ReferenceID");

                entity.Property(e => e.RegionId).HasColumnName("RegionID");

                entity.Property(e => e.RequestData).IsUnicode(false);

                entity.Property(e => e.RequestDateTime).HasColumnType("datetime");

                entity.Property(e => e.ResponseData).IsUnicode(false);

                entity.Property(e => e.ResponseDateTime).HasColumnType("datetime");

                entity.Property(e => e.SuperInterfaceDeliveryRequestId).HasColumnName("SuperInterfaceDeliveryRequestID");

                entity.Property(e => e.UserData).IsUnicode(false);

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.AddrBookEntry)
                    .WithMany(p => p.InterfaceDeliveryRequests)
                    .HasForeignKey(d => d.AddrBookEntryId)
                    .HasConstraintName("FK_InterfaceDeliveryRequest_AddrBookEntry");

                entity.HasOne(d => d.Appl)
                    .WithMany(p => p.InterfaceDeliveryRequests)
                    .HasForeignKey(d => d.ApplId)
                    .HasConstraintName("FK_InterfaceDeliveryRequest_Application");

                entity.HasOne(d => d.BusOrg)
                    .WithMany(p => p.InterfaceDeliveryRequests)
                    .HasForeignKey(d => d.BusOrgId)
                    .HasConstraintName("FK_InterfaceDeliveryRequest_BusOrg");

                entity.HasOne(d => d.BusUnit)
                    .WithMany(p => p.InterfaceDeliveryRequestBusUnits)
                    .HasForeignKey(d => d.BusUnitId)
                    .HasConstraintName("FK_InterfaceDeliveryRequest_BusinessUnit1");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.InterfaceDeliveryRequests)
                    .HasForeignKey(d => d.FileId)
                    .HasConstraintName("FK_InterfaceDeliveryRequest_ServiceFile");

                entity.HasOne(d => d.FormDocument)
                    .WithMany(p => p.InterfaceDeliveryRequests)
                    .HasForeignKey(d => d.FormDocumentId)
                    .HasConstraintName("FK_InterfaceDeliveryRequest_FormDocument");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.InterfaceDeliveryRequestRegions)
                    .HasForeignKey(d => d.RegionId)
                    .HasConstraintName("FK_InterfaceDeliveryRequest_BusinessUnit");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.InterfaceDeliveryRequests)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_InterfaceDeliveryRequest_Employee");
            });

            modelBuilder.Entity<InterfaceTransaction>(entity =>
            {
                entity.ToTable("InterfaceTransaction");

                entity.HasIndex(e => new { e.FileId, e.TransactionId }, "IDX_InterfaceTransaction_FileID_TransactionID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.InterfaceAppTypeCd, e.FileId }, "IX_InterfaceTransaction")
                    .IsUnique();

                entity.Property(e => e.InterfaceTransactionId).HasColumnName("InterfaceTransactionID");

                entity.Property(e => e.CreateDateTime).HasColumnType("datetime");

                entity.Property(e => e.EscrowServiceOrderId)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("EscrowServiceOrderID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.LastUpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.SubEscrowServiceOrderId)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("SubEscrowServiceOrderID");

                entity.Property(e => e.TitleServiceOrderId)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TitleServiceOrderID");

                entity.Property(e => e.TransactionId)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TransactionID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<InterfaceTransactionLog>(entity =>
            {
                entity.ToTable("InterfaceTransactionLog");

                entity.Property(e => e.InterfaceTransactionLogId).HasColumnName("InterfaceTransactionLogID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.CreateDateTime).HasColumnType("datetime");

                entity.Property(e => e.InterfaceTransactionId).HasColumnName("InterfaceTransactionID");

                entity.Property(e => e.TransactionTypeId).HasColumnName("TransactionTypeID");

                entity.HasOne(d => d.InterfaceTransaction)
                    .WithMany(p => p.InterfaceTransactionLogs)
                    .HasForeignKey(d => d.InterfaceTransactionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InterfaceTransactionLog_InterfaceTransaction");
            });

            modelBuilder.Entity<InternalAuditLog>(entity =>
            {
                entity.HasKey(e => new { e.InternalAuditLogId, e.FileId })
                    .HasName("PK_InternalAuditLogXKeyID");

                entity.ToTable("InternalAuditLog");

                entity.HasIndex(e => e.FileId, "indInternalAuditLogFileID1")
                    .HasFillFactor(90);

                entity.Property(e => e.InternalAuditLogId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("InternalAuditLogID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.AppId).HasColumnName("AppID");

                entity.Property(e => e.AuditDataXml).IsUnicode(false);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.DocumentName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentTypeCdId).HasColumnName("DocumentTypeCdID");

                entity.Property(e => e.EventTypeCdId).HasColumnName("EventTypeCdID");

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.ReferenceId)
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("ReferenceID");

                entity.Property(e => e.ServerIpaddress)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ServerIPAddress");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.App)
                    .WithMany(p => p.InternalAuditLogs)
                    .HasForeignKey(d => d.AppId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conInternalAuditLogAppIDFK1");

                entity.HasOne(d => d.DocumentTypeCd)
                    .WithMany(p => p.InternalAuditLogs)
                    .HasForeignKey(d => d.DocumentTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conInternalAuditLogDocTypeCdIDFK1");

                entity.HasOne(d => d.EventTypeCd)
                    .WithMany(p => p.InternalAuditLogs)
                    .HasForeignKey(d => d.EventTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conInternalAuditLogEventTypeCdIDFK1");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.InternalAuditLogs)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conInternalAuditLogFileIDFK1");
            });

            modelBuilder.Entity<InvHistoryPhysicalAddrXref>(entity =>
            {
                entity.HasKey(e => new { e.InvoiceHistoryId, e.PhysicalAddrId });

                entity.ToTable("InvHistoryPhysicalAddrXref");

                entity.Property(e => e.InvoiceHistoryId).HasColumnName("InvoiceHistoryID");

                entity.Property(e => e.PhysicalAddrId).HasColumnName("PhysicalAddrID");

                entity.Property(e => e.FeeAllocationAmount).HasColumnType("numeric(13, 2)");

                entity.Property(e => e.ServiceFileFeeId).HasColumnName("ServiceFileFeeID");
            });

            modelBuilder.Entity<Invoice>(entity =>
            {
                entity.ToTable("Invoice");

                entity.HasIndex(e => e.BillToEntityId, "IndInvoice5Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.InvoiceNum, "idxInvoiceAutoNumberCheck")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.InvoiceStatusCdId, "idx_Invoice_InvoiceStatusCdID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ExportInfoId, "indInvoice3Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.OrderId, "indInvoice6Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.InvoiceId).HasColumnName("InvoiceID");

                entity.Property(e => e.BillToEntityId).HasColumnName("BillToEntityID");

                entity.Property(e => e.BillToEntityRoleTypeCdId).HasColumnName("BillToEntityRoleTypeCdID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ExportInfoId).HasColumnName("ExportInfoID");

                entity.Property(e => e.ExportRequestDate).HasColumnType("datetime");

                entity.Property(e => e.InvoiceStatusCdId).HasColumnName("InvoiceStatusCdID");

                entity.Property(e => e.InvoiceStatusDate).HasColumnType("datetime");

                entity.Property(e => e.InvoicedByEmployeeId).HasColumnName("InvoicedByEmployeeID");

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.SpaflagInvoice).HasColumnName("SPAFlagInvoice");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.BillToEntityRoleTypeCd)
                    .WithMany(p => p.InvoiceBillToEntityRoleTypeCds)
                    .HasForeignKey(d => d.BillToEntityRoleTypeCdId)
                    .HasConstraintName("R_568");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.Invoices)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conInvoice9FK");

                entity.HasOne(d => d.ExportInfo)
                    .WithMany(p => p.Invoices)
                    .HasForeignKey(d => d.ExportInfoId)
                    .HasConstraintName("conInvoice7FK");

                entity.HasOne(d => d.InvoiceStatusCd)
                    .WithMany(p => p.InvoiceInvoiceStatusCds)
                    .HasForeignKey(d => d.InvoiceStatusCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conInvoice6FK");

                entity.HasOne(d => d.InvoicedByEmployee)
                    .WithMany(p => p.Invoices)
                    .HasForeignKey(d => d.InvoicedByEmployeeId)
                    .HasConstraintName("conInvoice2FK");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.Invoices)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conInvoice8FK");

                entity.HasMany(d => d.Files)
                    .WithMany(p => p.Invoices)
                    .UsingEntity<Dictionary<string, object>>(
                        "InvoiceServiceFileXref",
                        l => l.HasOne<ServiceFile>().WithMany().HasForeignKey("FileId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conInvoiceServiceFileXref3Fk"),
                        r => r.HasOne<Invoice>().WithMany().HasForeignKey("InvoiceId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conInvoiceServiceFileXref2Fk"),
                        j =>
                        {
                            j.HasKey("InvoiceId", "FileId").HasName("conInvoiceServiceFileXref1Pk");

                            j.ToTable("InvoiceServiceFileXref");

                            j.HasIndex(new[] { "FileId" }, "indInvoiceServiceFileXref3Fk").HasFillFactor(90);

                            j.IndexerProperty<int>("InvoiceId").HasColumnName("InvoiceID");

                            j.IndexerProperty<int>("FileId").HasColumnName("FileID");
                        });
            });

            modelBuilder.Entity<InvoiceExtractCharMapping>(entity =>
            {
                entity.ToTable("InvoiceExtractCharMapping");

                entity.HasIndex(e => e.UnicodeChar, "UQ__InvoiceE__28EF649A99057EFF")
                    .IsUnique();

                entity.Property(e => e.InvoiceExtractCharMappingId).HasColumnName("InvoiceExtractCharMapping_ID");

                entity.Property(e => e.AsciiChar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.UnicodeChar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<InvoiceExtractFee>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.BillToName1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BillToName2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BillToPerson)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Buyer1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Buyer10)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Buyer2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Buyer3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Buyer4)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Buyer5)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Buyer6)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Buyer7)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Buyer8)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Buyer9)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Eocode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EOCode");

                entity.Property(e => e.EohomeOfficeCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EOHomeOfficeCode");

                entity.Property(e => e.Eoname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EOName");

                entity.Property(e => e.EoobillAddrCity)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("EOOBillAddrCity");

                entity.Property(e => e.EoobillAddrCountry)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("EOOBillAddrCountry");

                entity.Property(e => e.EoobillAddrState)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("EOOBillAddrState");

                entity.Property(e => e.EoobillAddrStreet1)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("EOOBillAddrStreet1");

                entity.Property(e => e.EoobillAddrStreet2)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("EOOBillAddrStreet2");

                entity.Property(e => e.EoobillAddrZip)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EOOBillAddrZip");

                entity.Property(e => e.Eoocode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EOOCode");

                entity.Property(e => e.EooglclientCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("EOOGLClientCode");

                entity.Property(e => e.EoogldivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("EOOGLDivisionCode");

                entity.Property(e => e.Eooid)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("EOOID");

                entity.Property(e => e.EoomailAddrCity)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("EOOMailAddrCity");

                entity.Property(e => e.EoomailAddrCountry)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("EOOMailAddrCountry");

                entity.Property(e => e.EoomailAddrState)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("EOOMailAddrState");

                entity.Property(e => e.EoomailAddrStreet1)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("EOOMailAddrStreet1");

                entity.Property(e => e.EoomailAddrStreet2)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("EOOMailAddrStreet2");

                entity.Property(e => e.EoomailAddrZip)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EOOMailAddrZip");

                entity.Property(e => e.Eooname)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("EOOName");

                entity.Property(e => e.EooofficialName1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EOOOfficialName1");

                entity.Property(e => e.EooofficialName2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EOOOfficialName2");

                entity.Property(e => e.EoophoneNum)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("EOOPhoneNum");

                entity.Property(e => e.EooremitAddrCity)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("EOORemitAddrCity");

                entity.Property(e => e.EooremitAddrCountry)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("EOORemitAddrCountry");

                entity.Property(e => e.EooremitAddrState)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("EOORemitAddrState");

                entity.Property(e => e.EooremitAddrStreet1)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("EOORemitAddrStreet1");

                entity.Property(e => e.EooremitAddrStreet2)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("EOORemitAddrStreet2");

                entity.Property(e => e.EooremitAddrStreet3)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("EOORemitAddrStreet3");

                entity.Property(e => e.EooremitAddrStreet4)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("EOORemitAddrStreet4");

                entity.Property(e => e.EooremitAddrZip)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EOORemitAddrZip");

                entity.Property(e => e.FeeAction)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FeeBuyerCharge)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FeeBuyerTax)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FeeCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FeeDescr)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FeeGlcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FeeGLCode");

                entity.Property(e => e.FeeSellerCharge)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FeeSellerTax)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FeeSetupGlcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FeeSetupGLCode");

                entity.Property(e => e.FeeType)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.FileBusSeg)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FileNewLoan1LiabilityAmt)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileNewLoan1RecordingDate)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileNum)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileOpenDate)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileOrderType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileSalesPriceLiabilityAmt)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileTransType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FtadjustDt)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("FTAdjustDt");

                entity.Property(e => e.FtadjustType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FTAdjustType");

                entity.Property(e => e.FtissueDt)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("FTIssueDt");

                entity.Property(e => e.Ftnum)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("FTNum");

                entity.Property(e => e.InvComments)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InvExportReqDate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InvFormat)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InvHistId).HasColumnName("InvHistID");

                entity.Property(e => e.InvId).HasColumnName("InvID");

                entity.Property(e => e.InvNum)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InvStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InvToBillAddrCity)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvToBillAddrCountry)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvToBillAddrState)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvToBillAddrStreet1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvToBillAddrStreet2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvToBillAddrZip)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvToBusAddrCity)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvToBusAddrCountry)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvToBusAddrState)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvToBusAddrStreet1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvToBusAddrStreet2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvToBusAddrZip)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvToCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InvToContact)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InvToName1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InvToName2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InvToParentAddrBookEntryId)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InvToPhoneNum)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvToRefNum)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.P1a1city)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("P1A1City");

                entity.Property(e => e.P1a1country)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("P1A1Country");

                entity.Property(e => e.P1a1county)
                    .HasMaxLength(65)
                    .IsUnicode(false)
                    .HasColumnName("P1A1County");

                entity.Property(e => e.P1a1state)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("P1A1State");

                entity.Property(e => e.P1a1street1)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P1A1Street1");

                entity.Property(e => e.P1a1street2)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P1A1Street2");

                entity.Property(e => e.P1a1zip)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("P1A1Zip");

                entity.Property(e => e.P1a2city)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("P1A2City");

                entity.Property(e => e.P1a2country)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("P1A2Country");

                entity.Property(e => e.P1a2county)
                    .HasMaxLength(65)
                    .IsUnicode(false)
                    .HasColumnName("P1A2County");

                entity.Property(e => e.P1a2state)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("P1A2State");

                entity.Property(e => e.P1a2street1)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P1A2Street1");

                entity.Property(e => e.P1a2street2)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P1A2Street2");

                entity.Property(e => e.P1a2zip)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("P1A2Zip");

                entity.Property(e => e.P1annApn1)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P1AnnApn1");

                entity.Property(e => e.P1annApn2)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P1AnnApn2");

                entity.Property(e => e.P1annApn3)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P1AnnApn3");

                entity.Property(e => e.P1suppApn1)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P1SuppApn1");

                entity.Property(e => e.P1suppApn2)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P1SuppApn2");

                entity.Property(e => e.P1suppApn3)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P1SuppApn3");

                entity.Property(e => e.P1suppApn4)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P1SuppApn4");

                entity.Property(e => e.P1suppApn5)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P1SuppApn5");

                entity.Property(e => e.P2a1city)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("P2A1City");

                entity.Property(e => e.P2a1country)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("P2A1Country");

                entity.Property(e => e.P2a1county)
                    .HasMaxLength(65)
                    .IsUnicode(false)
                    .HasColumnName("P2A1County");

                entity.Property(e => e.P2a1state)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("P2A1State");

                entity.Property(e => e.P2a1street1)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P2A1Street1");

                entity.Property(e => e.P2a1street2)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P2A1Street2");

                entity.Property(e => e.P2a1zip)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("P2A1Zip");

                entity.Property(e => e.P2a2city)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("P2A2City");

                entity.Property(e => e.P2a2country)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("P2A2Country");

                entity.Property(e => e.P2a2county)
                    .HasMaxLength(65)
                    .IsUnicode(false)
                    .HasColumnName("P2A2County");

                entity.Property(e => e.P2a2state)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("P2A2State");

                entity.Property(e => e.P2a2street1)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P2A2Street1");

                entity.Property(e => e.P2a2street2)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P2A2Street2");

                entity.Property(e => e.P2a2zip)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("P2A2Zip");

                entity.Property(e => e.P2annApn1)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P2AnnApn1");

                entity.Property(e => e.P2annApn2)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P2AnnApn2");

                entity.Property(e => e.P2annApn3)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P2AnnApn3");

                entity.Property(e => e.P2suppApn1)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P2SuppApn1");

                entity.Property(e => e.P2suppApn2)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P2SuppApn2");

                entity.Property(e => e.P2suppApn3)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P2SuppApn3");

                entity.Property(e => e.P2suppApn4)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P2SuppApn4");

                entity.Property(e => e.P2suppApn5)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P2SuppApn5");

                entity.Property(e => e.RegionCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RegionName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Seller1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Seller10)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Seller2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Seller3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Seller4)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Seller5)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Seller6)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Seller7)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Seller8)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Seller9)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ServFileFeeId).HasColumnName("ServFileFeeID");

                entity.Property(e => e.Sr1code)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SR1Code");

                entity.Property(e => e.Sr1homeOfficeCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SR1HomeOfficeCode");

                entity.Property(e => e.Sr1name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SR1Name");

                entity.Property(e => e.Sr2code)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SR2Code");

                entity.Property(e => e.Sr2homeOfficeCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SR2HomeOfficeCode");

                entity.Property(e => e.Sr2name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SR2Name");

                entity.Property(e => e.Tocode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TOCode");

                entity.Property(e => e.TohomeOfficeCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TOHomeOfficeCode");

                entity.Property(e => e.Toname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TOName");

                entity.Property(e => e.ToobillAddrCity)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TOOBillAddrCity");

                entity.Property(e => e.ToobillAddrCountry)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TOOBillAddrCountry");

                entity.Property(e => e.ToobillAddrState)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TOOBillAddrState");

                entity.Property(e => e.ToobillAddrStreet1)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("TOOBillAddrStreet1");

                entity.Property(e => e.ToobillAddrStreet2)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("TOOBillAddrStreet2");

                entity.Property(e => e.ToobillAddrZip)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TOOBillAddrZip");

                entity.Property(e => e.Toocode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TOOCode");

                entity.Property(e => e.TooglclientCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TOOGLClientCode");

                entity.Property(e => e.ToogldivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TOOGLDivisionCode");

                entity.Property(e => e.Tooid)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TOOID");

                entity.Property(e => e.ToomailAddrCity)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TOOMailAddrCity");

                entity.Property(e => e.ToomailAddrCountry)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TOOMailAddrCountry");

                entity.Property(e => e.ToomailAddrState)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TOOMailAddrState");

                entity.Property(e => e.ToomailAddrStreet1)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("TOOMailAddrStreet1");

                entity.Property(e => e.ToomailAddrStreet2)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("TOOMailAddrStreet2");

                entity.Property(e => e.ToomailAddrZip)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TOOMailAddrZip");

                entity.Property(e => e.Tooname)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("TOOName");

                entity.Property(e => e.TooofficialName1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TOOOfficialName1");

                entity.Property(e => e.TooofficialName2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TOOOfficialName2");

                entity.Property(e => e.ToophoneNum)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TOOPhoneNum");

                entity.Property(e => e.TooremitAddrCity)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TOORemitAddrCity");

                entity.Property(e => e.TooremitAddrCountry)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TOORemitAddrCountry");

                entity.Property(e => e.TooremitAddrState)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TOORemitAddrState");

                entity.Property(e => e.TooremitAddrStreet1)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("TOORemitAddrStreet1");

                entity.Property(e => e.TooremitAddrStreet2)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("TOORemitAddrStreet2");

                entity.Property(e => e.TooremitAddrStreet3)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("TOORemitAddrStreet3");

                entity.Property(e => e.TooremitAddrStreet4)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("TOORemitAddrStreet4");

                entity.Property(e => e.TooremitAddrZip)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TOORemitAddrZip");
            });

            modelBuilder.Entity<InvoiceExtractHeader>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.BillToName1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BillToName2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BillToPerson)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Buyer1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Buyer10)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Buyer2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Buyer3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Buyer4)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Buyer5)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Buyer6)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Buyer7)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Buyer8)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Buyer9)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Eocode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EOCode");

                entity.Property(e => e.EohomeOfficeCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EOHomeOfficeCode");

                entity.Property(e => e.Eoname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EOName");

                entity.Property(e => e.EoobillAddrCity)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("EOOBillAddrCity");

                entity.Property(e => e.EoobillAddrCountry)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("EOOBillAddrCountry");

                entity.Property(e => e.EoobillAddrState)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("EOOBillAddrState");

                entity.Property(e => e.EoobillAddrStreet1)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("EOOBillAddrStreet1");

                entity.Property(e => e.EoobillAddrStreet2)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("EOOBillAddrStreet2");

                entity.Property(e => e.EoobillAddrZip)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EOOBillAddrZip");

                entity.Property(e => e.Eoocode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EOOCode");

                entity.Property(e => e.EooglclientCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("EOOGLClientCode");

                entity.Property(e => e.EoogldivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("EOOGLDivisionCode");

                entity.Property(e => e.Eooid)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("EOOID");

                entity.Property(e => e.EoomailAddrCity)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("EOOMailAddrCity");

                entity.Property(e => e.EoomailAddrCountry)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("EOOMailAddrCountry");

                entity.Property(e => e.EoomailAddrState)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("EOOMailAddrState");

                entity.Property(e => e.EoomailAddrStreet1)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("EOOMailAddrStreet1");

                entity.Property(e => e.EoomailAddrStreet2)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("EOOMailAddrStreet2");

                entity.Property(e => e.EoomailAddrZip)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EOOMailAddrZip");

                entity.Property(e => e.Eooname)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("EOOName");

                entity.Property(e => e.EooofficialName1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EOOOfficialName1");

                entity.Property(e => e.EooofficialName2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EOOOfficialName2");

                entity.Property(e => e.EoophoneNum)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("EOOPhoneNum");

                entity.Property(e => e.EooremitAddrCity)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("EOORemitAddrCity");

                entity.Property(e => e.EooremitAddrCountry)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("EOORemitAddrCountry");

                entity.Property(e => e.EooremitAddrState)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("EOORemitAddrState");

                entity.Property(e => e.EooremitAddrStreet1)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("EOORemitAddrStreet1");

                entity.Property(e => e.EooremitAddrStreet2)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("EOORemitAddrStreet2");

                entity.Property(e => e.EooremitAddrStreet3)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("EOORemitAddrStreet3");

                entity.Property(e => e.EooremitAddrStreet4)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("EOORemitAddrStreet4");

                entity.Property(e => e.EooremitAddrZip)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EOORemitAddrZip");

                entity.Property(e => e.FileBusSeg)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FileNewLoan1LiabilityAmt)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileNewLoan1RecordingDate)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileNum)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileOpenDate)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileOrderType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileSalesPriceLiabilityAmt)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileTransType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InvComments)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InvExportReqDate).HasColumnType("datetime");

                entity.Property(e => e.InvFormat)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InvId).HasColumnName("InvID");

                entity.Property(e => e.InvNum)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InvToAddrBookEntryId).HasColumnName("InvToAddrBookEntryID");

                entity.Property(e => e.InvToBillAddrCity)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvToBillAddrCountry)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvToBillAddrState)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvToBillAddrStreet1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvToBillAddrStreet2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvToBillAddrZip)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvToBusAddrCity)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvToBusAddrCountry)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvToBusAddrState)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvToBusAddrStreet1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvToBusAddrStreet2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvToBusAddrZip)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvToCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InvToContact)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InvToName1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InvToName2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InvToPhoneNum)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvToRefNum)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.P1a1city)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("P1A1City");

                entity.Property(e => e.P1a1country)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("P1A1Country");

                entity.Property(e => e.P1a1county)
                    .HasMaxLength(65)
                    .IsUnicode(false)
                    .HasColumnName("P1A1County");

                entity.Property(e => e.P1a1state)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("P1A1State");

                entity.Property(e => e.P1a1street1)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P1A1Street1");

                entity.Property(e => e.P1a1street2)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P1A1Street2");

                entity.Property(e => e.P1a1zip)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("P1A1Zip");

                entity.Property(e => e.P1a2city)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("P1A2City");

                entity.Property(e => e.P1a2country)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("P1A2Country");

                entity.Property(e => e.P1a2county)
                    .HasMaxLength(65)
                    .IsUnicode(false)
                    .HasColumnName("P1A2County");

                entity.Property(e => e.P1a2state)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("P1A2State");

                entity.Property(e => e.P1a2street1)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P1A2Street1");

                entity.Property(e => e.P1a2street2)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P1A2Street2");

                entity.Property(e => e.P1a2zip)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("P1A2Zip");

                entity.Property(e => e.P1annApn1)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P1AnnApn1");

                entity.Property(e => e.P1annApn2)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P1AnnApn2");

                entity.Property(e => e.P1annApn3)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P1AnnApn3");

                entity.Property(e => e.P1suppApn1)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P1SuppApn1");

                entity.Property(e => e.P1suppApn2)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P1SuppApn2");

                entity.Property(e => e.P1suppApn3)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P1SuppApn3");

                entity.Property(e => e.P1suppApn4)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P1SuppApn4");

                entity.Property(e => e.P1suppApn5)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P1SuppApn5");

                entity.Property(e => e.P2a1city)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("P2A1City");

                entity.Property(e => e.P2a1country)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("P2A1Country");

                entity.Property(e => e.P2a1county)
                    .HasMaxLength(65)
                    .IsUnicode(false)
                    .HasColumnName("P2A1County");

                entity.Property(e => e.P2a1state)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("P2A1State");

                entity.Property(e => e.P2a1street1)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P2A1Street1");

                entity.Property(e => e.P2a1street2)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P2A1Street2");

                entity.Property(e => e.P2a1zip)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("P2A1Zip");

                entity.Property(e => e.P2a2city)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("P2A2City");

                entity.Property(e => e.P2a2country)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("P2A2Country");

                entity.Property(e => e.P2a2county)
                    .HasMaxLength(65)
                    .IsUnicode(false)
                    .HasColumnName("P2A2County");

                entity.Property(e => e.P2a2state)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("P2A2State");

                entity.Property(e => e.P2a2street1)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P2A2Street1");

                entity.Property(e => e.P2a2street2)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P2A2Street2");

                entity.Property(e => e.P2a2zip)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("P2A2Zip");

                entity.Property(e => e.P2annApn1)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P2AnnApn1");

                entity.Property(e => e.P2annApn2)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P2AnnApn2");

                entity.Property(e => e.P2annApn3)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P2AnnApn3");

                entity.Property(e => e.P2suppApn1)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P2SuppApn1");

                entity.Property(e => e.P2suppApn2)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P2SuppApn2");

                entity.Property(e => e.P2suppApn3)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P2SuppApn3");

                entity.Property(e => e.P2suppApn4)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P2SuppApn4");

                entity.Property(e => e.P2suppApn5)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P2SuppApn5");

                entity.Property(e => e.ParentInvToAddrBookEntryId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ParentInvToAddrBookEntryID");

                entity.Property(e => e.RegionCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RegionName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Seller1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Seller10)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Seller2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Seller3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Seller4)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Seller5)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Seller6)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Seller7)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Seller8)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Seller9)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Sr1code)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SR1Code");

                entity.Property(e => e.Sr1homeOfficeCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SR1HomeOfficeCode");

                entity.Property(e => e.Sr1name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SR1Name");

                entity.Property(e => e.Sr2code)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SR2Code");

                entity.Property(e => e.Sr2homeOfficeCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SR2HomeOfficeCode");

                entity.Property(e => e.Sr2name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SR2Name");

                entity.Property(e => e.Tocode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TOCode");

                entity.Property(e => e.TohomeOfficeCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TOHomeOfficeCode");

                entity.Property(e => e.Toname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TOName");

                entity.Property(e => e.ToobillAddrCity)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TOOBillAddrCity");

                entity.Property(e => e.ToobillAddrCountry)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TOOBillAddrCountry");

                entity.Property(e => e.ToobillAddrState)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TOOBillAddrState");

                entity.Property(e => e.ToobillAddrStreet1)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("TOOBillAddrStreet1");

                entity.Property(e => e.ToobillAddrStreet2)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("TOOBillAddrStreet2");

                entity.Property(e => e.ToobillAddrZip)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TOOBillAddrZip");

                entity.Property(e => e.Toocode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TOOCode");

                entity.Property(e => e.TooglclientCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TOOGLClientCode");

                entity.Property(e => e.ToogldivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TOOGLDivisionCode");

                entity.Property(e => e.Tooid)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TOOID");

                entity.Property(e => e.ToomailAddrCity)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TOOMailAddrCity");

                entity.Property(e => e.ToomailAddrCountry)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TOOMailAddrCountry");

                entity.Property(e => e.ToomailAddrState)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TOOMailAddrState");

                entity.Property(e => e.ToomailAddrStreet1)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("TOOMailAddrStreet1");

                entity.Property(e => e.ToomailAddrStreet2)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("TOOMailAddrStreet2");

                entity.Property(e => e.ToomailAddrZip)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TOOMailAddrZip");

                entity.Property(e => e.Tooname)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("TOOName");

                entity.Property(e => e.TooofficialName1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TOOOfficialName1");

                entity.Property(e => e.TooofficialName2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TOOOfficialName2");

                entity.Property(e => e.ToophoneNum)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TOOPhoneNum");

                entity.Property(e => e.TooremitAddrCity)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TOORemitAddrCity");

                entity.Property(e => e.TooremitAddrCountry)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TOORemitAddrCountry");

                entity.Property(e => e.TooremitAddrState)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TOORemitAddrState");

                entity.Property(e => e.TooremitAddrStreet1)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("TOORemitAddrStreet1");

                entity.Property(e => e.TooremitAddrStreet2)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("TOORemitAddrStreet2");

                entity.Property(e => e.TooremitAddrStreet3)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("TOORemitAddrStreet3");

                entity.Property(e => e.TooremitAddrStreet4)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("TOORemitAddrStreet4");

                entity.Property(e => e.TooremitAddrZip)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TOORemitAddrZip");
            });

            modelBuilder.Entity<InvoiceExtractInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.InvoiceId).HasColumnName("InvoiceID");

                entity.Property(e => e.InvoiceStatusCdId).HasColumnName("InvoiceStatusCdID");
            });

            modelBuilder.Entity<InvoiceExtractOffice>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.BusinessUnitId, "UQ__InvoiceE__19FA597C7A0E1BD0")
                    .IsUnique();

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");
            });

            modelBuilder.Entity<InvoiceFeesSortOrder>(entity =>
            {
                entity.HasKey(e => e.InvoiceId)
                    .HasName("conInvoiceFeesSortOrderInvoiceIDPK");

                entity.ToTable("InvoiceFeesSortOrder");

                entity.Property(e => e.InvoiceId)
                    .ValueGeneratedNever()
                    .HasColumnName("InvoiceID");

                entity.Property(e => e.SortOrderXml)
                    .HasColumnType("xml")
                    .HasColumnName("SortOrderXML");

                entity.HasOne(d => d.Invoice)
                    .WithOne(p => p.InvoiceFeesSortOrder)
                    .HasForeignKey<InvoiceFeesSortOrder>(d => d.InvoiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InvoiceFeesSortOrder_InvoiceID");
            });

            modelBuilder.Entity<InvoiceHistory>(entity =>
            {
                entity.HasKey(e => e.InvoiceHistoryId)
                    .HasName("InvoiceHistory_PK")
                    .IsClustered(false);

                entity.ToTable("InvoiceHistory");

                entity.HasIndex(e => new { e.InvoiceId, e.ServicefilefeeId }, "IDX1InvoiceHistoryClustered")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.InvoiceId, e.InvoiceStatusCdId }, "IDX3InvoiceHistory")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ServicefilefeeId, e.InvoiceStatusCdId }, "IDX4InvoiceHistory")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.InvoiceNum, "IDXinvNum")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ExportInfoId, "Idx5InvoiceHistory")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ExportRequestDate, e.InvoiceStatusCdId, e.ExportInfoId, e.TitleOwningOfficeId }, "idx_InvoiceHistory_ExportRequestDate")
                    .HasFillFactor(90);

                entity.Property(e => e.InvoiceHistoryId).HasColumnName("InvoiceHistoryID");

                entity.Property(e => e.ActionStatusId).HasDefaultValueSql("((0))");

                entity.Property(e => e.BuyerChargeAmt).HasColumnType("money");

                entity.Property(e => e.BuyerSalesTaxAmt).HasColumnType("money");

                entity.Property(e => e.Descr)
                    .HasMaxLength(201)
                    .IsUnicode(false);

                entity.Property(e => e.DiscountAmt).HasColumnType("money");

                entity.Property(e => e.DiscountPercent).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.EscrowOfficerId).HasColumnName("EscrowOfficerID");

                entity.Property(e => e.EscrowOwningOfficeId).HasColumnName("EscrowOwningOfficeID");

                entity.Property(e => e.ExportInfoId).HasColumnName("ExportInfoID");

                entity.Property(e => e.ExportRequestDate).HasColumnType("datetime");

                entity.Property(e => e.FeeId).HasColumnName("FeeID");

                entity.Property(e => e.FeeTypeCdId).HasColumnName("feeTypeCdId");

                entity.Property(e => e.GlLookupId).HasColumnName("GlLookupID");

                entity.Property(e => e.InvoiceId).HasColumnName("InvoiceID");

                entity.Property(e => e.InvoiceStatusCdId).HasColumnName("InvoiceStatusCdID");

                entity.Property(e => e.InvoiceStatusDate).HasColumnType("datetime");

                entity.Property(e => e.InvoicedByEmployeeId).HasColumnName("InvoicedByEmployeeID");

                entity.Property(e => e.Otcflag).HasColumnName("OTCFlag");

                entity.Property(e => e.PolicyId).HasColumnName("PolicyID");

                entity.Property(e => e.SellerChargeAmt).HasColumnType("money");

                entity.Property(e => e.SellerSalesTaxAmt).HasColumnType("money");

                entity.Property(e => e.ServicefilefeeId).HasColumnName("ServicefilefeeID");

                entity.Property(e => e.TitleOfficerId).HasColumnName("TitleOfficerID");

                entity.Property(e => e.TitleOwningOfficeId).HasColumnName("TitleOwningOfficeID");

                entity.HasOne(d => d.EscrowOfficer)
                    .WithMany(p => p.InvoiceHistoryEscrowOfficers)
                    .HasForeignKey(d => d.EscrowOfficerId)
                    .HasConstraintName("conInvoiceHistory4FK");

                entity.HasOne(d => d.EscrowOwningOffice)
                    .WithMany(p => p.InvoiceHistoryEscrowOwningOffices)
                    .HasForeignKey(d => d.EscrowOwningOfficeId)
                    .HasConstraintName("conInvoiceHistory2FK");

                entity.HasOne(d => d.TitleOfficer)
                    .WithMany(p => p.InvoiceHistoryTitleOfficers)
                    .HasForeignKey(d => d.TitleOfficerId)
                    .HasConstraintName("conInvoiceHistory3FK");

                entity.HasOne(d => d.TitleOwningOffice)
                    .WithMany(p => p.InvoiceHistoryTitleOwningOffices)
                    .HasForeignKey(d => d.TitleOwningOfficeId)
                    .HasConstraintName("conInvoiceHistory1FK");
            });

            modelBuilder.Entity<InvoiceImportInfo>(entity =>
            {
                entity.HasKey(e => e.ImportInfoId)
                    .HasName("conImportInfo1PK");

                entity.ToTable("InvoiceImportInfo");

                entity.Property(e => e.ImportInfoId).HasColumnName("ImportInfoID");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ImportEndDate).HasColumnType("datetime");

                entity.Property(e => e.ImportStartDate).HasColumnType("datetime");

                entity.Property(e => e.ImportXml)
                    .IsUnicode(false)
                    .HasColumnName("ImportXML");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Updts)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<InvoicePaymentInfo>(entity =>
            {
                entity.ToTable("InvoicePaymentInfo");

                entity.HasIndex(e => e.ImportInfoId, "IDXImportInfoID1")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.OracleSeqNum, "IDXOrcSeq")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.InvoiceId, "IDX_InvoicePaymentInfo_InvoiceID")
                    .HasFillFactor(90);

                entity.Property(e => e.InvoicePaymentInfoId).HasColumnName("InvoicePaymentInfoID");

                entity.Property(e => e.Action)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BalanceAmount).HasColumnType("money");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentNum)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ImportInfoId).HasColumnName("ImportInfoID");

                entity.Property(e => e.PayerName)
                    .HasMaxLength(360)
                    .IsUnicode(false);

                entity.Property(e => e.Reason)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Updts)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Invoice)
                    .WithMany(p => p.InvoicePaymentInfos)
                    .HasForeignKey(d => d.InvoiceId)
                    .HasConstraintName("conInvoicePaymentInfo3FK");
            });

            modelBuilder.Entity<InvoicePaymentInfoNoMatch>(entity =>
            {
                entity.ToTable("InvoicePaymentInfoNoMatch");

                entity.Property(e => e.InvoicePaymentInfoNoMatchId).HasColumnName("InvoicePaymentInfoNoMatch_ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ImportInfoId).HasColumnName("ImportInfoID");

                entity.Property(e => e.InvoiceId).HasColumnName("InvoiceID");

                entity.Property(e => e.Updts)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<LastNoteWorldExtract>(entity =>
            {
                entity.ToTable("LastNoteWorldExtract");

                entity.Property(e => e.LastExtractDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<LeaseInfo>(entity =>
            {
                entity.HasKey(e => e.FileProcessId)
                    .HasName("XPKLeaseInfo");

                entity.ToTable("LeaseInfo");

                entity.Property(e => e.FileProcessId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileProcessID");

                entity.Property(e => e.LeaseAmt).HasColumnType("money");

                entity.Property(e => e.LeasePeriodTypeCdId).HasColumnName("LeasePeriodTypeCdID");

                entity.HasOne(d => d.FileProcess)
                    .WithOne(p => p.LeaseInfo)
                    .HasForeignKey<LeaseInfo>(d => d.FileProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conFileProcess8FK");

                entity.HasOne(d => d.LeasePeriodTypeCd)
                    .WithMany(p => p.LeaseInfos)
                    .HasForeignKey(d => d.LeasePeriodTypeCdId)
                    .HasConstraintName("R_412");
            });

            modelBuilder.Entity<LegacyDocFileIdXref>(entity =>
            {
                entity.HasKey(e => e.DocId)
                    .HasName("conLegacyDocFileIdXrefDocIDPk");

                entity.ToTable("LegacyDocFileIdXref");

                entity.Property(e => e.DocId)
                    .ValueGeneratedNever()
                    .HasColumnName("DocID");

                entity.Property(e => e.FileId).HasColumnName("FileID");
            });

            modelBuilder.Entity<LicenseInformation>(entity =>
            {
                entity.ToTable("LicenseInformation");

                entity.HasIndex(e => new { e.LicenseInformationId, e.LicenseTypeGeoRegionXrefId }, "idxLicInfoIDLicTyGeoRegXrefID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.LicenseNo, "idxLicenseNo")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.LicenseEntityId, e.LicenseEntityClassTypeId, e.StatusCd, e.LicenseTypeId }, "idx_LicenseInformation_LicenseEntityID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.LicenseTypeId, "idx_LicenseInformation_LicenseTypeID")
                    .HasFillFactor(90);

                entity.Property(e => e.LicenseInformationId).HasColumnName("LicenseInformationID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.Property(e => e.DeactivationDate).HasColumnType("datetime");

                entity.Property(e => e.LicenseCategoryClassTypeId).HasColumnName("LicenseCategoryClassTypeID");

                entity.Property(e => e.LicenseEntityClassTypeId).HasColumnName("LicenseEntityClassTypeID");

                entity.Property(e => e.LicenseEntityId).HasColumnName("LicenseEntityID");

                entity.Property(e => e.LicenseNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LicenseTypeGeoRegionXrefId).HasColumnName("LicenseTypeGeoRegionXrefID");

                entity.Property(e => e.LicenseTypeId).HasColumnName("LicenseTypeID");

                entity.Property(e => e.ReactivationDate).HasColumnType("datetime");

                entity.Property(e => e.ReferenceLicenseInformationId).HasColumnName("ReferenceLicenseInformationID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.CreationUser)
                    .WithMany(p => p.LicenseInformationCreationUsers)
                    .HasForeignKey(d => d.CreationUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conLNCreationUserIDFK");

                entity.HasOne(d => d.DeActivationByNavigation)
                    .WithMany(p => p.LicenseInformationDeActivationByNavigations)
                    .HasForeignKey(d => d.DeActivationBy)
                    .HasConstraintName("conLNDeActivationByFK");

                entity.HasOne(d => d.LicenseCategoryClassType)
                    .WithMany(p => p.LicenseInformationLicenseCategoryClassTypes)
                    .HasForeignKey(d => d.LicenseCategoryClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conLNLicenseCategoryClassTypeIDFK");

                entity.HasOne(d => d.LicenseEntityClassType)
                    .WithMany(p => p.LicenseInformationLicenseEntityClassTypes)
                    .HasForeignKey(d => d.LicenseEntityClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conLNLicenseEntityClassTypeIDFK");

                entity.HasOne(d => d.LicenseTypeGeoRegionXref)
                    .WithMany(p => p.LicenseInformations)
                    .HasForeignKey(d => d.LicenseTypeGeoRegionXrefId)
                    .HasConstraintName("conLNLicenseTypeGeoRegionXrefIDFK");

                entity.HasOne(d => d.LicenseType)
                    .WithMany(p => p.LicenseInformations)
                    .HasForeignKey(d => d.LicenseTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conLNLicenseTypeIDFK");

                entity.HasOne(d => d.ReActivationByNavigation)
                    .WithMany(p => p.LicenseInformationReActivationByNavigations)
                    .HasForeignKey(d => d.ReActivationBy)
                    .HasConstraintName("conLNReActivationByFK");
            });

            modelBuilder.Entity<LicenseInformationLog>(entity =>
            {
                entity.ToTable("LicenseInformationLog");

                entity.HasIndex(e => e.LicenseInformationId, "idxLILLicenseInformationID")
                    .HasFillFactor(90);

                entity.Property(e => e.LicenseInformationLogId).HasColumnName("LicenseInformationLogID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.Property(e => e.EventTypeId).HasColumnName("EventTypeID");

                entity.Property(e => e.LicenseInformationId).HasColumnName("LicenseInformationID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.CreationUser)
                    .WithMany(p => p.LicenseInformationLogs)
                    .HasForeignKey(d => d.CreationUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conLNLCreationUserIDFK");

                entity.HasOne(d => d.EventType)
                    .WithMany(p => p.LicenseInformationLogs)
                    .HasForeignKey(d => d.EventTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conLNLEventTypeIDFK");

                entity.HasOne(d => d.LicenseInformation)
                    .WithMany(p => p.LicenseInformationLogs)
                    .HasForeignKey(d => d.LicenseInformationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conLNLLicenseInformationIDFK");
            });

            modelBuilder.Entity<LicenseType>(entity =>
            {
                entity.ToTable("LicenseType");

                entity.HasIndex(e => e.LicenseTypeDescr, "idxLicenseTypeDescr")
                    .HasFillFactor(90);

                entity.Property(e => e.LicenseTypeId).HasColumnName("LicenseTypeID");

                entity.Property(e => e.IsNmlsflag).HasColumnName("IsNMLSFlag");

                entity.Property(e => e.LicenseTypeDescr)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<LicenseTypeGeoRegionXref>(entity =>
            {
                entity.ToTable("LicenseTypeGeoRegionXref");

                entity.HasIndex(e => e.GeoRegionId, "idxGeoRegionID")
                    .HasFillFactor(90);

                entity.Property(e => e.LicenseTypeGeoRegionXrefId).HasColumnName("LicenseTypeGeoRegionXrefID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.Property(e => e.DeactivationDate).HasColumnType("datetime");

                entity.Property(e => e.DeactivationUserId).HasColumnName("DeactivationUserID");

                entity.Property(e => e.GeoRegionId).HasColumnName("GeoRegionID");

                entity.Property(e => e.LicenseTypeCategoryTypeId).HasColumnName("LicenseTypeCategoryTypeID");

                entity.Property(e => e.LicenseTypeId).HasColumnName("LicenseTypeID");

                entity.Property(e => e.ReactivationDate).HasColumnType("datetime");

                entity.Property(e => e.ReactivationUserId).HasColumnName("ReactivationUserID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.CreationUser)
                    .WithMany(p => p.LicenseTypeGeoRegionXrefCreationUsers)
                    .HasForeignKey(d => d.CreationUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conLTGXCreationUserIDFK");

                entity.HasOne(d => d.DeactivationUser)
                    .WithMany(p => p.LicenseTypeGeoRegionXrefDeactivationUsers)
                    .HasForeignKey(d => d.DeactivationUserId)
                    .HasConstraintName("conLTGXDeactivationUserIDFK");

                entity.HasOne(d => d.GeoRegion)
                    .WithMany(p => p.LicenseTypeGeoRegionXrefs)
                    .HasForeignKey(d => d.GeoRegionId)
                    .HasConstraintName("conLTGXGeoRegionIDFK");

                entity.HasOne(d => d.LicenseTypeCategoryType)
                    .WithMany(p => p.LicenseTypeGeoRegionXrefs)
                    .HasForeignKey(d => d.LicenseTypeCategoryTypeId)
                    .HasConstraintName("conLicenseTypeCategoryTypeIDFK");

                entity.HasOne(d => d.LicenseType)
                    .WithMany(p => p.LicenseTypeGeoRegionXrefs)
                    .HasForeignKey(d => d.LicenseTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conLicenseTypeIDFK");

                entity.HasOne(d => d.ReactivationUser)
                    .WithMany(p => p.LicenseTypeGeoRegionXrefReactivationUsers)
                    .HasForeignKey(d => d.ReactivationUserId)
                    .HasConstraintName("conLTGXReactivationUserIDFK");
            });

            modelBuilder.Entity<Loan1LoanInvestor>(entity =>
            {
                entity.ToTable("Loan1LoanInvestor");

                entity.Property(e => e.Loan1LoanInvestorId).HasColumnName("Loan1LoanInvestorID");

                entity.Property(e => e.FileBusinessPartyId).HasColumnName("FileBusinessPartyID");

                entity.Property(e => e.LoanInvestorId).HasColumnName("LoanInvestorID");

                entity.Property(e => e.LoanNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransferDate).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.FileBusinessParty)
                    .WithMany(p => p.Loan1LoanInvestors)
                    .HasForeignKey(d => d.FileBusinessPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_Loan1LoanInvestor_FK_1");

                entity.HasOne(d => d.LoanInvestor)
                    .WithMany(p => p.Loan1LoanInvestors)
                    .HasForeignKey(d => d.LoanInvestorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_Loan1LoanInvestor_FK_2");
            });

            modelBuilder.Entity<Loan1LoanInvestorContact>(entity =>
            {
                entity.ToTable("Loan1LoanInvestorContact");

                entity.HasIndex(e => new { e.Loan1LoanInvestorId, e.LoanInvestorContactId }, "ixn_Loan1LoanInvestorContact_Loan1LoanInvestorID")
                    .HasFillFactor(90);

                entity.Property(e => e.Loan1LoanInvestorContactId).HasColumnName("Loan1LoanInvestorContactID");

                entity.Property(e => e.FileBusinessPartyId).HasColumnName("FileBusinessPartyID");

                entity.Property(e => e.Loan1LoanInvestorId).HasColumnName("Loan1LoanInvestorID");

                entity.Property(e => e.LoanInvestorContactId).HasColumnName("LoanInvestorContactID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.FileBusinessParty)
                    .WithMany(p => p.Loan1LoanInvestorContacts)
                    .HasForeignKey(d => d.FileBusinessPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_Loan1LoanInvestorContact_FK_1");

                entity.HasOne(d => d.Loan1LoanInvestor)
                    .WithMany(p => p.Loan1LoanInvestorContacts)
                    .HasForeignKey(d => d.Loan1LoanInvestorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_Loan1LoanInvestorContact_FK_3");

                entity.HasOne(d => d.LoanInvestorContact)
                    .WithMany(p => p.Loan1LoanInvestorContacts)
                    .HasForeignKey(d => d.LoanInvestorContactId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_Loan1LoanInvestorContact_FK_2");
            });

            modelBuilder.Entity<LoanInfo>(entity =>
            {
                entity.HasKey(e => e.FileProcessId)
                    .HasName("XPKLoanInfo");

                entity.ToTable("LoanInfo");

                entity.HasIndex(e => e.TrusteeId, "XIF299LoanInfo")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.MortgageBrokerId, "XIF300LoanInfo")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TrustorMortgagerTextId, "XIF301LoanInfo")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.RecordDocId, "XIF303LoanInfo")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TitleInsMortgageeClauseTextId, "XIF307LoanInfo")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.HazardInsLossPayeeTextId, "XIF308LoanInfo")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.AssignBenMortgageeTextId, "XIF309LoanInfo")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BenMortgageeTextId, "XIF310LoanInfo")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.LenderPayeeParentId, "XIF312LoanInfo")
                    .HasFillFactor(90);

                entity.Property(e => e.FileProcessId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileProcessID");

                entity.Property(e => e.AaacreditChargeFlag).HasColumnName("AAACreditChargeFlag");

                entity.Property(e => e.AccountServiceTypeCdId).HasColumnName("AccountServiceTypeCdID");

                entity.Property(e => e.AssignBenMortgageeTextId).HasColumnName("AssignBenMortgageeTextID");

                entity.Property(e => e.BenMortgageeTextId).HasColumnName("BenMortgageeTextID");

                entity.Property(e => e.CcpcreditChargeFlag).HasColumnName("CCPCreditChargeFlag");

                entity.Property(e => e.CcpdispFrmt).HasColumnName("CCPDispFrmt");

                entity.Property(e => e.DiscountPointAdjAmt).HasColumnType("money");

                entity.Property(e => e.DiscountPointPercent).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.DiscountPoints).HasColumnType("money");

                entity.Property(e => e.FirstPmtDue).HasColumnType("datetime");

                entity.Property(e => e.FundingAmt).HasColumnType("money");

                entity.Property(e => e.FundingDate).HasColumnType("datetime");

                entity.Property(e => e.GoodThruDate).HasColumnType("datetime");

                entity.Property(e => e.HazardInsLossPayeeTextId).HasColumnName("HazardInsLossPayeeTextID");

                entity.Property(e => e.InterestFrom).HasColumnType("datetime");

                entity.Property(e => e.InterestPaidThru).HasColumnType("datetime");

                entity.Property(e => e.LateChargeAmt).HasColumnType("money");

                entity.Property(e => e.LateChargePercent).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.LenderPayeeParentId).HasColumnName("LenderPayeeParentID");

                entity.Property(e => e.LenderPolicyLiability).HasColumnType("money");

                entity.Property(e => e.LoanAmt).HasColumnType("money");

                entity.Property(e => e.LoanDueDate).HasColumnType("datetime");

                entity.Property(e => e.LoanLiability).HasColumnType("money");

                entity.Property(e => e.LoanTermTypeCdId).HasColumnName("LoanTermTypeCdID");

                entity.Property(e => e.LoanTypeCdId).HasColumnName("LoanTypeCdID");

                entity.Property(e => e.MbfeesToLoanProceedsFlag).HasColumnName("MBFeesToLoanProceedsFlag");

                entity.Property(e => e.MortgageBrokerId).HasColumnName("MortgageBrokerID");

                entity.Property(e => e.MortgageInsCase)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NameOfInsuredPerson)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NextPmtDue).HasColumnType("datetime");

                entity.Property(e => e.NoteDated).HasColumnType("datetime");

                entity.Property(e => e.OrigNoteAmt).HasColumnType("money");

                entity.Property(e => e.OriginalPrincipalBalance).HasColumnType("money");

                entity.Property(e => e.OriginationFeeAdjAmt).HasColumnType("money");

                entity.Property(e => e.OriginationFeePercent).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.OriginationPoints).HasColumnType("money");

                entity.Property(e => e.PayablePeriodTypeCdId).HasColumnName("PayablePeriodTypeCdID");

                entity.Property(e => e.PayoffDemandStatusFlag).HasDefaultValueSql("((0))");

                entity.Property(e => e.PmtAmt).HasColumnType("money");

                entity.Property(e => e.PmtTypeCdId).HasColumnName("PmtTypeCdID");

                entity.Property(e => e.ProposedInsuredTextId).HasColumnName("ProposedInsuredTextID");

                entity.Property(e => e.RecordDocId).HasColumnName("RecordDocID");

                entity.Property(e => e.Reference2)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.RescissionEnd).HasColumnType("datetime");

                entity.Property(e => e.RescissionEndOwflag).HasColumnName("RescissionEndOWFlag");

                entity.Property(e => e.RescissionStart).HasColumnType("datetime");

                entity.Property(e => e.RestrictAutomaticUpdate).HasDefaultValueSql("((0))");

                entity.Property(e => e.SigningDate).HasColumnType("datetime");

                entity.Property(e => e.TitleInsMortgageeClauseTextId).HasColumnName("TitleInsMortgageeClauseTextID");

                entity.Property(e => e.TrusteeId).HasColumnName("TrusteeID");

                entity.Property(e => e.TrustorMortgagerTextId).HasColumnName("TrustorMortgagerTextID");

                entity.HasOne(d => d.FileProcess)
                    .WithOne(p => p.LoanInfo)
                    .HasForeignKey<LoanInfo>(d => d.FileProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conLoanInfo1FK");

                entity.HasOne(d => d.LenderPayeeParent)
                    .WithMany(p => p.LoanInfoLenderPayeeParents)
                    .HasForeignKey(d => d.LenderPayeeParentId)
                    .HasConstraintName("conLoanInfo15FK");

                entity.HasOne(d => d.LoanTermTypeCd)
                    .WithMany(p => p.LoanInfoLoanTermTypeCds)
                    .HasForeignKey(d => d.LoanTermTypeCdId)
                    .HasConstraintName("conLoanInfo11FK");

                entity.HasOne(d => d.LoanTypeCd)
                    .WithMany(p => p.LoanInfoLoanTypeCds)
                    .HasForeignKey(d => d.LoanTypeCdId)
                    .HasConstraintName("conLoanInfo12FK");

                entity.HasOne(d => d.MortgageBroker)
                    .WithMany(p => p.LoanInfoMortgageBrokers)
                    .HasForeignKey(d => d.MortgageBrokerId)
                    .HasConstraintName("conLoanInfo13FK");

                entity.HasOne(d => d.PayablePeriodTypeCd)
                    .WithMany(p => p.LoanInfoPayablePeriodTypeCds)
                    .HasForeignKey(d => d.PayablePeriodTypeCdId)
                    .HasConstraintName("conLoanInfo10FK");

                entity.HasOne(d => d.PmtTypeCd)
                    .WithMany(p => p.LoanInfoPmtTypeCds)
                    .HasForeignKey(d => d.PmtTypeCdId)
                    .HasConstraintName("conLoanInfo8FK");

                entity.HasOne(d => d.RecordDoc)
                    .WithMany(p => p.LoanInfos)
                    .HasForeignKey(d => d.RecordDocId)
                    .HasConstraintName("conLoanInfo2FK");

                entity.HasOne(d => d.Trustee)
                    .WithMany(p => p.LoanInfoTrustees)
                    .HasForeignKey(d => d.TrusteeId)
                    .HasConstraintName("conLoanInfo14FK");
            });

            modelBuilder.Entity<LoanInvestor>(entity =>
            {
                entity.ToTable("LoanInvestor");

                entity.HasIndex(e => e.BusOrgId, "ixn_LoanInvestor_BusOrgID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.LoanInvestorBusOrgId, "ixn_LoanInvestor_LoanInvestorBusOrgID")
                    .HasFillFactor(90);

                entity.Property(e => e.LoanInvestorId).HasColumnName("LoanInvestorID");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.Property(e => e.DeactivationDate).HasColumnType("datetime");

                entity.Property(e => e.DeactivationUserId).HasColumnName("DeactivationUserID");

                entity.Property(e => e.LastActivationDate).HasColumnType("datetime");

                entity.Property(e => e.LastActivationUserId).HasColumnName("LastActivationUserID");

                entity.Property(e => e.LoanInvestorBusOrgId).HasColumnName("LoanInvestorBusOrgID");

                entity.Property(e => e.StatusChgComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.BusOrg)
                    .WithMany(p => p.LoanInvestorBusOrgs)
                    .HasForeignKey(d => d.BusOrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_BusOrg_FK_1");

                entity.HasOne(d => d.LoanInvestorBusOrg)
                    .WithMany(p => p.LoanInvestorLoanInvestorBusOrgs)
                    .HasForeignKey(d => d.LoanInvestorBusOrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_BusOrg_FK_2");
            });

            modelBuilder.Entity<LoanInvestorContact>(entity =>
            {
                entity.ToTable("LoanInvestorContact");

                entity.Property(e => e.LoanInvestorContactId).HasColumnName("LoanInvestorContactID");

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.LoanInvestorId).HasColumnName("LoanInvestorID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.LoanInvestor)
                    .WithMany(p => p.LoanInvestorContacts)
                    .HasForeignKey(d => d.LoanInvestorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_LoanInvestor_FK_1");
            });

            modelBuilder.Entity<LockedArchiveDb>(entity =>
            {
                entity.HasKey(e => e.LockedArchiveDbsId)
                    .HasName("IDXLockedArchiveDBsId");

                entity.ToTable("LockedArchiveDBs");

                entity.Property(e => e.LockedArchiveDbsId).HasColumnName("LockedArchiveDBsId");

                entity.Property(e => e.Dbqtr).HasColumnName("DBQTR");

                entity.Property(e => e.Dbyear).HasColumnName("DBYear");
            });

            modelBuilder.Entity<Log>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("pk_Log_LogID")
                    .IsClustered(false);

                entity.ToTable("log", "faxination");

                entity.HasIndex(e => e.LogId, "IX_log")
                    .IsClustered();

                entity.HasIndex(e => e.DeliveryStatus, "idxLog2")
                    .HasFillFactor(90);

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.Address)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Attempts)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Baudrate)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ChargeCode)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CompletionTime)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CreationTime)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DeliveryEventLogId).HasColumnName("DeliveryEventLogID");

                entity.Property(e => e.DeliveryStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.EventLogId).HasColumnName("EventLogID");

                entity.Property(e => e.FileName)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FromName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("From_Name")
                    .IsFixedLength();

                entity.Property(e => e.ItemsSent)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.JobNumber)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Message)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ModemId)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("ModemID")
                    .IsFixedLength();

                entity.Property(e => e.Number)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.OboName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OBO_Name")
                    .IsFixedLength();

                entity.Property(e => e.OrlistName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ORList_Name")
                    .IsFixedLength();

                entity.Property(e => e.Priority)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RequestId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("RequestID")
                    .IsFixedLength();

                entity.Property(e => e.ServerId)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("ServerID")
                    .IsFixedLength();

                entity.Property(e => e.Status)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.StatusDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Subject)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.SubmissionTime)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Template)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ToName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("To_Name")
                    .IsFixedLength();

                entity.Property(e => e.TolistName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Tolist_Name")
                    .IsFixedLength();
            });

            modelBuilder.Entity<LossRecoveryFee>(entity =>
            {
                entity.HasKey(e => e.InEscrowId)
                    .HasName("conLossRecoveryFeePK");

                entity.ToTable("LossRecoveryFee");

                entity.HasIndex(e => e.DisbursementId, "idx_LossRecoveryFee_DisbursementID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ServiceFileFeeId, "idx_LossRecoveryFee_ServiceFileFeeID")
                    .HasFillFactor(90);

                entity.Property(e => e.InEscrowId)
                    .ValueGeneratedNever()
                    .HasColumnName("InEscrowID");

                entity.Property(e => e.DisbursementId).HasColumnName("DisbursementID");

                entity.Property(e => e.ServiceFileFeeId).HasColumnName("ServiceFileFeeID");

                entity.HasOne(d => d.Disbursement)
                    .WithMany(p => p.LossRecoveryFees)
                    .HasForeignKey(d => d.DisbursementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_LossRecoveryFee_FK_2");

                entity.HasOne(d => d.InEscrow)
                    .WithOne(p => p.LossRecoveryFee)
                    .HasForeignKey<LossRecoveryFee>(d => d.InEscrowId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_LossRecoveryFee_FK_1");
            });

            modelBuilder.Entity<LrhOrder>(entity =>
            {
                entity.HasKey(e => e.LrhOrdersId)
                    .HasName("LRH_Orders_PK");

                entity.ToTable("LRH_Orders");

                entity.Property(e => e.LrhOrdersId).HasColumnName("LRH_OrdersId");

                entity.Property(e => e.DwordrKey).HasColumnName("DWOrdrKey");

                entity.Property(e => e.FastEscrwOwnOffcId).HasColumnName("FastEscrwOwnOffcID");

                entity.Property(e => e.FastStatCdId).HasColumnName("FastStatCdID");

                entity.Property(e => e.FastTtlOwnOffcId).HasColumnName("FastTtlOwnOffcID");

                entity.Property(e => e.FileNbr)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OrdrCloseDt).HasColumnType("datetime");

                entity.Property(e => e.PrimCloseApptDt).HasColumnType("smalldatetime");

                entity.Property(e => e.PrimCloseApptTm)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.SettlDt).HasColumnType("datetime");

                entity.Property(e => e.StatCdDesc)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.StatChgDt).HasColumnType("datetime");
            });

            modelBuilder.Entity<MdmbusinessEventLog>(entity =>
            {
                entity.ToTable("MDMBusinessEventLog");

                entity.HasIndex(e => e.StatusCd, "idx_MDMBusinessEventLog_StatusCd")
                    .HasFillFactor(90);

                entity.Property(e => e.MdmbusinessEventLogId).HasColumnName("MDMBusinessEventLogID");

                entity.Property(e => e.BusinessEventName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdationDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.ParentEntepriseId).HasColumnName("ParentEntepriseID");

                entity.Property(e => e.QueuePickDateTime).HasColumnType("datetime");

                entity.Property(e => e.RecordEntepriseId).HasColumnName("RecordEntepriseID");

                entity.Property(e => e.SatusComment).IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.Xmlmessage)
                    .IsUnicode(false)
                    .HasColumnName("XMLMessage");
            });

            modelBuilder.Entity<MdmbusinessEventLogHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MDMBusinessEventLogHistory");

                entity.HasIndex(e => e.MdmbusinessEventLogId, "idxMDMBusinessEventLogID")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.Property(e => e.BusinessEventName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdationDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.MdmbusinessEventLogId).HasColumnName("MDMBusinessEventLogID");

                entity.Property(e => e.ParentEntepriseId).HasColumnName("ParentEntepriseID");

                entity.Property(e => e.QueuePickDateTime).HasColumnType("datetime");

                entity.Property(e => e.RecordEntepriseId).HasColumnName("RecordEntepriseID");

                entity.Property(e => e.SatusComment).IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.Xmlmessage)
                    .IsUnicode(false)
                    .HasColumnName("XMLMessage");
            });

            modelBuilder.Entity<MdmdataTruncationLog>(entity =>
            {
                entity.ToTable("MDMDataTruncationLog");

                entity.Property(e => e.MdmdataTruncationLogId).HasColumnName("MDMDataTruncationLogID");

                entity.Property(e => e.BusinessEntityType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FieldName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LogDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OriginalValue)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ParentEntepriseId).HasColumnName("ParentEntepriseID");

                entity.Property(e => e.RecordEnterpriseId).HasColumnName("RecordEnterpriseID");

                entity.Property(e => e.RecordTypeId).HasColumnName("RecordTypeID");

                entity.Property(e => e.RegionId).HasColumnName("RegionID");

                entity.Property(e => e.StoredValue)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<Mdmetllog>(entity =>
            {
                entity.ToTable("MDMETLLog");

                entity.Property(e => e.MdmetllogId).HasColumnName("MDMETLLogID");

                entity.Property(e => e.EndDatetime).HasColumnType("datetime");

                entity.Property(e => e.LogTypeId).HasColumnName("LogTypeID");

                entity.Property(e => e.StartDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<MdmetllogDetail>(entity =>
            {
                entity.HasKey(e => e.MdmetllogDetailsId)
                    .HasName("conMDMETLLogDetailsPK");

                entity.ToTable("MDMETLLogDetails");

                entity.Property(e => e.MdmetllogDetailsId).HasColumnName("MDMETLLogDetailsID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.EndBusOrgId).HasColumnName("EndBusOrgID");

                entity.Property(e => e.MdmetllogId).HasColumnName("MDMETLLogID");

                entity.Property(e => e.StartBusOrgId).HasColumnName("StartBusOrgID");
            });

            modelBuilder.Entity<MdmtypeCodeMapping>(entity =>
            {
                entity.HasKey(e => new { e.ClassTypeId, e.TypeCdId })
                    .HasName("MDMTypeCodeMappingPK");

                entity.ToTable("MDMTypeCodeMapping");

                entity.HasIndex(e => e.TypeCdId, "CLX_MDMTCMTypeCdID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.Mdmpurpose, e.Mdmtype }, "CLX_MDMTCPurposeType")
                    .HasFillFactor(90);

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.TypeCdId).HasColumnName("TypeCdID");

                entity.Property(e => e.Mdmpurpose)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MDMPurpose");

                entity.Property(e => e.Mdmtype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MDMType");

                entity.Property(e => e.UpdDate).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.MdmtypeCodeMappings)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MDMClassTypeID");

                entity.HasOne(d => d.TypeCd)
                    .WithMany(p => p.MdmtypeCodeMappings)
                    .HasForeignKey(d => d.TypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MDMTypeCdID");
            });

            modelBuilder.Entity<MoveNewTextToBottom>(entity =>
            {
                entity.HasKey(e => e.TextId)
                    .HasName("IDXMoveText");

                entity.ToTable("MoveNewTextToBottom");
            });

            modelBuilder.Entity<MoveTextId>(entity =>
            {
                entity.HasKey(e => e.TextId)
                    .HasName("IDXMoveTextId");

                entity.ToTable("MoveTextId");
            });

            modelBuilder.Entity<MoveTextIdFull>(entity =>
            {
                entity.HasKey(e => e.TextId)
                    .HasName("PK_MoveTextIdFull1");

                entity.ToTable("MoveTextIdFull");

                entity.Property(e => e.TextId)
                    .ValueGeneratedNever()
                    .HasColumnName("TextID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.TextData).IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<MsmqTrace>(entity =>
            {
                entity.ToTable("MsmqTrace");

                entity.Property(e => e.MsmqTraceId).HasColumnName("MsmqTraceID");

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EncryptOrDecrypt)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MsmqMessage).IsUnicode(false);

                entity.Property(e => e.QueueName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ServerName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<NameValueSetting>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NameValueSetting");

                entity.HasIndex(e => new { e.Name, e.EnvironmentName }, "conNameValueSetting1")
                    .IsUnique();

                entity.Property(e => e.EnvironmentName)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Value).IsUnicode(false);

                entity.HasOne(d => d.EnvironmentNameNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.EnvironmentName)
                    .HasConstraintName("FK__NameValue__Envir__1E9443F9");
            });

            modelBuilder.Entity<NcsmigrateLog>(entity =>
            {
                entity.HasKey(e => e.CopyDocsRequestId)
                    .HasName("PK_CopyDocsRequestIDPK_NCSMIGRATELOG");

                entity.ToTable("NCSMigrateLog", "Migration");

                entity.HasIndex(e => e.FileId, "NCI_NCSMIGRATELOG_Fileid")
                    .HasFillFactor(90);

                entity.Property(e => e.CopyDocsRequestId)
                    .ValueGeneratedNever()
                    .HasColumnName("CopyDocsRequestID");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.LogComments).IsUnicode(false);

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<NextGenActiveRequest>(entity =>
            {
                entity.HasKey(e => e.JobId);

                entity.Property(e => e.JobId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequestStartTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<NonWorkStd>(entity =>
            {
                entity.ToTable("NonWorkStd");

                entity.Property(e => e.NonWorkStdId).HasColumnName("NonWorkStdID");

                entity.Property(e => e.DayTypDesc)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.FastbusUnitId).HasColumnName("FASTBusUnitId");

                entity.Property(e => e.NonWorkClsNm)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.NonWorkCmnt)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NonWorkDt).HasColumnType("datetime");

                entity.Property(e => e.NonWorkUserCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RsnTypDesc)
                    .HasMaxLength(70)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<NotificationChangeEvent>(entity =>
            {
                entity.ToTable("NotificationChangeEvent");

                entity.HasIndex(e => new { e.NotificationChangeEventId, e.FileId }, "uidx_sffeeid_TitlePolicyTypecdID")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.NotificationChangeEventId).HasColumnName("NotificationChangeEventID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.NotificationChangeTypeCdId).HasColumnName("NotificationChangeTypeCdID");

                entity.Property(e => e.StatusCd).HasColumnName("statusCD");

                entity.Property(e => e.UpdDate).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.NotificationChangeEvents)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FileID");

                entity.HasOne(d => d.NotificationChangeTypeCd)
                    .WithMany(p => p.NotificationChangeEvents)
                    .HasForeignKey(d => d.NotificationChangeTypeCdId)
                    .HasConstraintName("FK_NotificationChangeTypeCdID");
            });

            modelBuilder.Entity<NotificationChangeEventTobeRemoved>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NotificationChangeEvent_TobeRemoved");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.NotificationChangeEventId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("NotificationChangeEventID");

                entity.Property(e => e.NotificationChangeTypeCdId).HasColumnName("NotificationChangeTypeCdID");

                entity.Property(e => e.StatusCd).HasColumnName("statusCD");

                entity.Property(e => e.UpdDate).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");
            });

            modelBuilder.Entity<NotificationChangeHistory>(entity =>
            {
                entity.HasKey(e => e.NotificationHistoryId)
                    .HasName("conNotificationHistoryPK");

                entity.ToTable("NotificationChangeHistory");

                entity.HasIndex(e => e.NotificationTemplateId, "ixnNotificationChgHistoryFK1")
                    .HasFillFactor(90);

                entity.Property(e => e.NotificationHistoryId).HasColumnName("NotificationHistoryID");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.EventTypeCdId).HasColumnName("EventTypeCdID");

                entity.Property(e => e.NotificationTemplateId).HasColumnName("NotificationTemplateID");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<NotificationDocGrp>(entity =>
            {
                entity.ToTable("NotificationDocGrp");

                entity.Property(e => e.NotificationDocGrpId).HasColumnName("NotificationDocGrpID");

                entity.Property(e => e.NotificationTemplateId).HasColumnName("NotificationTemplateID");
            });

            modelBuilder.Entity<NotificationDocGrpDetail>(entity =>
            {
                entity.ToTable("NotificationDocGrpDetail");

                entity.HasIndex(e => e.NotificationDocumentTemplateId, "ixnNotificationDocGrpDetail1FK")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.NotificationDocGrpId, e.NotificationDocumentTemplateId }, "ixnNotificationDocGrpDetail2FK")
                    .HasFillFactor(90);

                entity.Property(e => e.NotificationDocGrpDetailId).HasColumnName("NotificationDocGrpDetailID");

                entity.Property(e => e.NotificationDocGrpId).HasColumnName("NotificationDocGrpID");

                entity.Property(e => e.NotificationDocumentTemplateId).HasColumnName("NotificationDocumentTemplateID");
            });

            modelBuilder.Entity<NotificationDocumentTemplate>(entity =>
            {
                entity.ToTable("NotificationDocumentTemplate");

                entity.Property(e => e.NotificationDocumentTemplateId).HasColumnName("NotificationDocumentTemplateID");

                entity.Property(e => e.DocObjectCd)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.NotificationDocTypeCdId).HasColumnName("NotificationDocTypeCdID");

                entity.Property(e => e.NotificationTemplateId).HasColumnName("NotificationTemplateID");

                entity.Property(e => e.TemplateId).HasColumnName("TemplateID");

                entity.Property(e => e.TemplateRegionId).HasColumnName("TemplateRegionID");

                entity.Property(e => e.WorkQueueTriggerId).HasColumnName("WorkQueueTriggerID");

                entity.HasOne(d => d.NotificationTemplate)
                    .WithMany(p => p.NotificationDocumentTemplates)
                    .HasForeignKey(d => d.NotificationTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conNotificationDocTemplateNotificationTemplateFK");

                entity.HasOne(d => d.WorkQueueTrigger)
                    .WithMany(p => p.NotificationDocumentTemplates)
                    .HasForeignKey(d => d.WorkQueueTriggerId)
                    .HasConstraintName("conNotificationDocTemplateWorkQueueTriggerFK");
            });

            modelBuilder.Entity<NotificationEventLog>(entity =>
            {
                entity.HasKey(e => e.NotificationEventLogId2)
                    .HasName("NotificationEventLog_PK")
                    .IsClustered(false);

                entity.ToTable("NotificationEventLog");

                entity.HasIndex(e => e.NotificationEventLogId, "conNotificationEventLogPk")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FileId, e.EventId, e.EventStartDate }, "indNotificationEventLog1")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.EventId, "indNotificationEventLog2")
                    .HasFillFactor(90);

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryEventLogId).HasColumnName("DeliveryEventLogID");

                entity.Property(e => e.EventEndDate).HasColumnType("datetime");

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.EventStartDate).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.NotificationEventLogId).HasColumnName("NotificationEventLogID");

                entity.Property(e => e.NotificationTemplateId).HasColumnName("NotificationTemplateID");

                entity.Property(e => e.RegionId).HasColumnName("RegionID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<NotificationTemplate>(entity =>
            {
                entity.ToTable("NotificationTemplate");

                entity.HasIndex(e => new { e.TaskGabflag, e.StatusCd, e.EditedDeletedFlag }, "IDX_NotificationTemplate_TaskGABFlag_StatusCd_EditedDeletedFlag")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.NotificationTemplateId, e.MessageTemplateId }, "idx_MsgtemplateID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.EditedDeletedFlag, "idx_NotificationTemplate_EditedDeletedFlag")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BusOrgContactPrefId, "ixn_NotificationTemplateBusOrgContactPref")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BusOrgPrefId, "ixn_NotificationTemplateBusOrgPref")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.EmployeePrefId, "ixn_NotificationTemplateEmployeePref")
                    .HasFillFactor(90);

                entity.Property(e => e.NotificationTemplateId).HasColumnName("NotificationTemplateID");

                entity.Property(e => e.BusOrgContactPrefId).HasColumnName("BusOrgContactPrefID");

                entity.Property(e => e.BusOrgPrefId).HasColumnName("BusOrgPrefID");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedUserId).HasColumnName("CreatedUserID");

                entity.Property(e => e.DeactivatedDate).HasColumnType("datetime");

                entity.Property(e => e.DocParseStr)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DocSelList)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.DocSelectionCriteria)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeePrefId).HasColumnName("EmployeePrefID");

                entity.Property(e => e.IsProcessedToBpm).HasColumnName("IsProcessedToBPM");

                entity.Property(e => e.LastActivatedDate).HasColumnType("datetime");

                entity.Property(e => e.MessageTemplateId).HasColumnName("MessageTemplateID");

                entity.Property(e => e.MessageTemplateObjectCd)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.PackageName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PersonPrefId).HasColumnName("PersonPrefID");

                entity.Property(e => e.RegionId).HasColumnName("RegionID");

                entity.Property(e => e.StatusChgComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StatusChgUserId).HasColumnName("StatusChgUserID");

                entity.Property(e => e.SubjectLine)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.SubjectName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SuperNotificationTemplateId).HasColumnName("SuperNotificationTemplateID");

                entity.Property(e => e.TaskGabflag).HasColumnName("TaskGABFlag");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.BusOrgContactPref)
                    .WithMany(p => p.NotificationTemplates)
                    .HasForeignKey(d => d.BusOrgContactPrefId)
                    .HasConstraintName("conNotificationBusContactPref");

                entity.HasOne(d => d.BusOrgPref)
                    .WithMany(p => p.NotificationTemplates)
                    .HasForeignKey(d => d.BusOrgPrefId)
                    .HasConstraintName("conNotificationBusOrgPref");

                entity.HasOne(d => d.CreatedUser)
                    .WithMany(p => p.NotificationTemplateCreatedUsers)
                    .HasForeignKey(d => d.CreatedUserId)
                    .HasConstraintName("conNotificationTemplateEmp1");

                entity.HasOne(d => d.EmployeePref)
                    .WithMany(p => p.NotificationTemplates)
                    .HasForeignKey(d => d.EmployeePrefId)
                    .HasConstraintName("conNotificationEmployeePref");

                entity.HasOne(d => d.PersonPref)
                    .WithMany(p => p.NotificationTemplates)
                    .HasForeignKey(d => d.PersonPrefId)
                    .HasConstraintName("conNotificationPersonPref");

                entity.HasOne(d => d.StatusChgUser)
                    .WithMany(p => p.NotificationTemplateStatusChgUsers)
                    .HasForeignKey(d => d.StatusChgUserId)
                    .HasConstraintName("conNotificationTemplateEmp2");

                entity.HasMany(d => d.TaskTemplates)
                    .WithMany(p => p.NotificationTemplates)
                    .UsingEntity<Dictionary<string, object>>(
                        "NotificationTaskTemplateXref",
                        l => l.HasOne<TaskTemplate>().WithMany().HasForeignKey("TaskTemplateId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conNotificationTaskTemplate_TaskTemplateFK"),
                        r => r.HasOne<NotificationTemplate>().WithMany().HasForeignKey("NotificationTemplateId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conNotificationTaskTemplate_NotificationTemplateFK"),
                        j =>
                        {
                            j.HasKey("NotificationTemplateId", "TaskTemplateId").HasName("conNotificationTaskTemplatePk");

                            j.ToTable("NotificationTaskTemplateXref");

                            j.HasIndex(new[] { "TaskTemplateId" }, "ixnNotificationTaskTemplate").HasFillFactor(90);

                            j.IndexerProperty<int>("NotificationTemplateId").HasColumnName("NotificationTemplateID");

                            j.IndexerProperty<int>("TaskTemplateId").HasColumnName("TaskTemplateID");
                        });
            });

            modelBuilder.Entity<NotificationTemplateFbproleXref>(entity =>
            {
                entity.ToTable("NotificationTemplateFBPRoleXref");

                entity.HasIndex(e => new { e.NotificationTemplateId, e.FbproleTypeCdId }, "ixn_NotificationTemplateFBPRoleXref_1")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.NotificationTemplateFbproleXrefId).HasColumnName("NotificationTemplateFBPRoleXrefID");

                entity.Property(e => e.FbproleTypeCdId).HasColumnName("FBPRoleTypeCdID");

                entity.Property(e => e.NotificationTemplateId).HasColumnName("NotificationTemplateID");

                entity.HasOne(d => d.FbproleTypeCd)
                    .WithMany(p => p.NotificationTemplateFbproleXrefs)
                    .HasForeignKey(d => d.FbproleTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_NotificationTemplateFBPRoleXref_FK_2");

                entity.HasOne(d => d.NotificationTemplate)
                    .WithMany(p => p.NotificationTemplateFbproleXrefs)
                    .HasForeignKey(d => d.NotificationTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_NotificationTemplateFBPRoleXref_FK_1");
            });

            modelBuilder.Entity<NotificationTemplateSenderInfoXref>(entity =>
            {
                entity.ToTable("NotificationTemplateSenderInfoXref");

                entity.HasIndex(e => new { e.NotificationTemplateId, e.SenderInfoId }, "ixn_NotificationTemplateSenderInfoXref_1")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.NotificationTemplateSenderInfoXrefId).HasColumnName("NotificationTemplateSenderInfoXrefID");

                entity.Property(e => e.NotificationTemplateId).HasColumnName("NotificationTemplateID");

                entity.Property(e => e.SenderEmailId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SenderEmailID");

                entity.Property(e => e.SenderInfoId).HasColumnName("SenderInfoID");

                entity.Property(e => e.SenderName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.NotificationTemplate)
                    .WithMany(p => p.NotificationTemplateSenderInfoXrefs)
                    .HasForeignKey(d => d.NotificationTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_NotificationTemplateSenderInfoXref_FK_1");

                entity.HasOne(d => d.SenderInfo)
                    .WithMany(p => p.NotificationTemplateSenderInfoXrefs)
                    .HasForeignKey(d => d.SenderInfoId)
                    .HasConstraintName("con_NotificationTemplateSenderInfoXref_FK_2");
            });

            modelBuilder.Entity<NotificationTemplateStaticEmailXref>(entity =>
            {
                entity.ToTable("NotificationTemplateStaticEmailXref");

                entity.HasIndex(e => e.NotificationTemplateId, "ixn_NotificationTemplateStaticEmailXref_1")
                    .HasFillFactor(90);

                entity.Property(e => e.NotificationTemplateStaticEmailXrefId).HasColumnName("NotificationTemplateStaticEmailXrefID");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EmailID");

                entity.Property(e => e.Name)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.NotificationTemplateId).HasColumnName("NotificationTemplateID");

                entity.HasOne(d => d.NotificationTemplate)
                    .WithMany(p => p.NotificationTemplateStaticEmailXrefs)
                    .HasForeignKey(d => d.NotificationTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_NotificationTemplateStaticEmailXref_FK_1");
            });

            modelBuilder.Entity<NpidataElement>(entity =>
            {
                entity.ToTable("NPIDataElements");

                entity.HasIndex(e => e.ObjectCd, "Idx_NPIDataElements_ObjectCd");

                entity.Property(e => e.KeyName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<NpidataEncryption>(entity =>
            {
                entity.ToTable("NPIDataEncryption");

                entity.HasIndex(e => e.TextId, "nci_TextID_NPIDataEncryption")
                    .HasFillFactor(90);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.KeyName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OriginalTextData)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.TextData)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.TextId).HasColumnName("TextID");
            });

            modelBuilder.Entity<NpidataEncryptionStatus>(entity =>
            {
                entity.ToTable("NPIDataEncryptionStatus");

                entity.HasIndex(e => e.TextId, "nci_TextID_NPIDataEncryptionStatus");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.InstanceName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Instance_name");

                entity.Property(e => e.StatusChangeDate).HasColumnType("datetime");

                entity.Property(e => e.TextId).HasColumnName("TextID");
            });

            modelBuilder.Entity<OfficeDetailsImageDocTool>(entity =>
            {
                entity.HasKey(e => e.OfficeId)
                    .HasName("PK_OfficeID_OfficeDetails_ImageDocTool");

                entity.ToTable("OfficeDetails_ImageDocTool");

                entity.Property(e => e.OfficeId).ValueGeneratedNever();

                entity.Property(e => e.OfficeProcessStartDate).HasColumnType("datetime");

                entity.Property(e => e.Officeprocesstatus).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<OfficeGroup>(entity =>
            {
                entity.ToTable("OfficeGroup");

                entity.HasIndex(e => new { e.BusinessUnitId, e.OfficeGroupId, e.GroupName }, "IdxOGBUID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.OfficeGroupId, e.GroupName }, "IdxOGName")
                    .HasFillFactor(90);

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.OfficeGroups)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("OfficeGroup_BusinessUnit_Fk");

                entity.HasMany(d => d.Offices)
                    .WithMany(p => p.OfficeGroupsNavigation)
                    .UsingEntity<Dictionary<string, object>>(
                        "OfficeGroupOfficesXref",
                        l => l.HasOne<BusinessUnit>().WithMany().HasForeignKey("OfficeId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("OfficeGroupOfficesXref_BusinessUnit_Fk"),
                        r => r.HasOne<OfficeGroup>().WithMany().HasForeignKey("OfficeGroupId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("OfficeGroupOfficesXref_OfficeGroup_Fk"),
                        j =>
                        {
                            j.HasKey("OfficeGroupId", "OfficeId").HasName("OfficeGroupOfficesXref_Pk");

                            j.ToTable("OfficeGroupOfficesXref");
                        });
            });

            modelBuilder.Entity<OfficePrinterPrefrence>(entity =>
            {
                entity.HasKey(e => e.OfficePrinterPreferenceId)
                    .HasName("XPKOfficePrinterPrefrence");

                entity.ToTable("OfficePrinterPrefrence");

                entity.HasIndex(e => e.BusinessUnitId, "XIF44OfficePrinterPrefrence")
                    .HasFillFactor(90);

                entity.Property(e => e.OfficePrinterPreferenceId)
                    .ValueGeneratedNever()
                    .HasColumnName("OfficePrinterPreferenceID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.PrinterName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.PrinterTypeCdId).HasColumnName("PrinterTypeCdID");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.OfficePrinterPrefrences)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .HasConstraintName("conOfficePrinterPreference2fk");

                entity.HasOne(d => d.PrinterTypeCd)
                    .WithMany(p => p.OfficePrinterPrefrences)
                    .HasForeignKey(d => d.PrinterTypeCdId)
                    .HasConstraintName("conOfficePrinterPreference1fk");
            });

            modelBuilder.Entity<OfficeProductChangeHistory>(entity =>
            {
                entity.HasKey(e => e.OfficeProdHistoryId);

                entity.ToTable("OfficeProductChangeHistory");

                entity.Property(e => e.OfficeProdHistoryId).HasColumnName("OfficeProdHistoryID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.EventTypeCdId).HasColumnName("EventTypeCdID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.OfficeProductChangeHistories)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .HasConstraintName("FK_OfficeProductChangeHistory_BusinessUnit");

                entity.HasOne(d => d.EventTypeCd)
                    .WithMany(p => p.OfficeProductChangeHistories)
                    .HasForeignKey(d => d.EventTypeCdId)
                    .HasConstraintName("FK_OfficeProductChangeHistory_TypeCddmt");
            });

            modelBuilder.Entity<OfficeUnderwriter>(entity =>
            {
                entity.ToTable("OfficeUnderwriter");

                entity.HasIndex(e => new { e.RegionUnderwriterId, e.BusinessUnitId }, "CDXOfficeUnderwriter")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BusinessUnitId, "IdxOfficeUnderWriter")
                    .HasFillFactor(90);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DeactivationDate).HasColumnType("datetime");

                entity.Property(e => e.FullName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PromulgatedFeePercentage).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.ReactivationDate).HasColumnType("datetime");

                entity.Property(e => e.StatusChgComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StatusChgUserId).HasColumnName("StatusChgUserID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.OfficeUnderwriters)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con2OfficeUWBusinessUnitFK");

                entity.HasOne(d => d.CreationEmployee)
                    .WithMany(p => p.OfficeUnderwriterCreationEmployees)
                    .HasForeignKey(d => d.CreationEmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con3OfficeUWEmployeeFK");

                entity.HasOne(d => d.RegionUnderwriter)
                    .WithMany(p => p.OfficeUnderwriters)
                    .HasForeignKey(d => d.RegionUnderwriterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con1OfficeUWRegionUnderwriterFK");

                entity.HasOne(d => d.StatusChgUser)
                    .WithMany(p => p.OfficeUnderwriterStatusChgUsers)
                    .HasForeignKey(d => d.StatusChgUserId)
                    .HasConstraintName("con5OfficeUWEmployeeFK");

                entity.HasOne(d => d.UpdatedEmployee)
                    .WithMany(p => p.OfficeUnderwriterUpdatedEmployees)
                    .HasForeignKey(d => d.UpdatedEmployeeId)
                    .HasConstraintName("con4OfficeUWEmployeeFK");
            });

            modelBuilder.Entity<OfficeUnderwriterAutoNumber>(entity =>
            {
                entity.HasKey(e => e.OfficeUnderwriterId)
                    .HasName("PK__OfficeUn__DF80D70815764DE3");

                entity.ToTable("OfficeUnderwriterAutoNumber");

                entity.Property(e => e.OfficeUnderwriterId).ValueGeneratedNever();

                entity.Property(e => e.Prefix1)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Prefix2)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.HasOne(d => d.OfficeUnderwriter)
                    .WithOne(p => p.OfficeUnderwriterAutoNumber)
                    .HasForeignKey<OfficeUnderwriterAutoNumber>(d => d.OfficeUnderwriterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Con1OfficeUWAutoNumber");
            });

            modelBuilder.Entity<OfficesForFastc>(entity =>
            {
                entity.HasKey(e => e.BusinessUnitId)
                    .HasName("PK__OfficesF__19FA597DDE741A4A");

                entity.ToTable("OfficesForFASTCS");

                entity.Property(e => e.BusinessUnitId)
                    .ValueGeneratedNever()
                    .HasColumnName("BusinessUnitID");

                entity.HasOne(d => d.BusinessUnit)
                    .WithOne(p => p.OfficesForFastc)
                    .HasForeignKey<OfficesForFastc>(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__OfficesFo__Busin__7653AA7A");
            });

            modelBuilder.Entity<OtherBusOrg>(entity =>
            {
                entity.ToTable("OtherBusOrg");

                entity.HasIndex(e => e.BusOrgId, "indOtherBusOrg3Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BusOrgContactId, "indOtherBusOrg5Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.OtherBusOrgId).HasColumnName("OtherBusOrgID");

                entity.Property(e => e.BusOrgContactId).HasColumnName("BusOrgContactID");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.RefNum)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.BusOrgContact)
                    .WithMany(p => p.OtherBusOrgs)
                    .HasForeignKey(d => d.BusOrgContactId)
                    .HasConstraintName("conOtherBusOrg4Fk");

                entity.HasOne(d => d.BusOrg)
                    .WithMany(p => p.OtherBusOrgs)
                    .HasForeignKey(d => d.BusOrgId)
                    .HasConstraintName("conOtherBusOrg3Fk");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.OtherBusOrgs)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conOtherBusOrg2FK");
            });

            modelBuilder.Entity<OutOfEscrowDeposit>(entity =>
            {
                entity.HasKey(e => e.OutOfEscrowId)
                    .HasName("XPKOutOfEscrowDeposit");

                entity.ToTable("OutOfEscrowDeposit");

                entity.HasIndex(e => e.FileId, "conOutOfEscrowDepositAK1")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.OutOfEscrowId).HasColumnName("OutOfEscrowID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.DisbursedAsProceedsAmount).HasColumnType("money");

                entity.Property(e => e.ExcessDepositAmount).HasColumnType("money");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.SourceTypeCdId).HasColumnName("SourceTypeCdID");

                entity.Property(e => e.StatusTypeCdId).HasColumnName("StatusTypeCdID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.OutOfEscrowDeposits)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conOutOfEscrowDeposit7FK");

                entity.HasOne(d => d.File)
                    .WithOne(p => p.OutOfEscrowDeposit)
                    .HasForeignKey<OutOfEscrowDeposit>(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conOutOfEscrowDeposit1FK");

                entity.HasOne(d => d.SourceTypeCd)
                    .WithMany(p => p.OutOfEscrowDepositSourceTypeCds)
                    .HasForeignKey(d => d.SourceTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conOutOfEscrowDeposit11FK");

                entity.HasOne(d => d.StatusTypeCd)
                    .WithMany(p => p.OutOfEscrowDepositStatusTypeCds)
                    .HasForeignKey(d => d.StatusTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conOutOfEscrowDeposit12FK");

                entity.HasOne(d => d.TransactionTypeCd)
                    .WithMany(p => p.OutOfEscrowDepositTransactionTypeCds)
                    .HasForeignKey(d => d.TransactionTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conOutOfEscrowDeposit10FK");
            });

            modelBuilder.Entity<OverDraftDepositFbpxref>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OverDraftDepositFBPXref");

                entity.Property(e => e.FileBusinessPartyId).HasColumnName("FileBusinessPartyID");

                entity.Property(e => e.InEscrowId).HasColumnName("InEscrowID");

                entity.Property(e => e.OverdraftDepositFbpid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("OverdraftDepositFBPID");

                entity.HasOne(d => d.FileBusinessParty)
                    .WithMany()
                    .HasForeignKey(d => d.FileBusinessPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InEscrowFBPOverdraft");

                entity.HasOne(d => d.InEscrow)
                    .WithMany()
                    .HasForeignKey(d => d.InEscrowId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InEscrowIDOverdraft");
            });

            modelBuilder.Entity<OverDraftDisbursementFbpxref>(entity =>
            {
                entity.HasKey(e => e.OverdraftDisbFbpid)
                    .HasName("PK_OverDraftDisbursementFBPXref_OverdraftDisbFBPID");

                entity.ToTable("OverDraftDisbursementFBPXref");

                entity.Property(e => e.OverdraftDisbFbpid).HasColumnName("OverdraftDisbFBPID");

                entity.Property(e => e.DisbursementId).HasColumnName("DisbursementID");

                entity.Property(e => e.FileBusinessPartyId).HasColumnName("FileBusinessPartyID");

                entity.HasOne(d => d.Disbursement)
                    .WithMany(p => p.OverDraftDisbursementFbpxrefs)
                    .HasForeignKey(d => d.DisbursementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DisbIDOverdraft");

                entity.HasOne(d => d.FileBusinessParty)
                    .WithMany(p => p.OverDraftDisbursementFbpxrefs)
                    .HasForeignKey(d => d.FileBusinessPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FBPOverdraft");
            });

            modelBuilder.Entity<OverDraftDisbursementXref>(entity =>
            {
                entity.ToTable("OverDraftDisbursementXref");

                entity.HasIndex(e => new { e.OverDraftId, e.DisbursementId, e.CreateDate, e.StatusTypeCdId }, "idxOverDraftDisbursementXrefKeys")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DisbursementId, "idxOverDraftDisbursementXref_DisbursementID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileId, "idxOverDraftDisbursementXref_FileID")
                    .HasFillFactor(90);

                entity.Property(e => e.OverDraftDisbursementXrefId).HasColumnName("OverDraftDisbursementXrefID");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.DisbAmount).HasColumnType("money");

                entity.Property(e => e.DisbursementId).HasColumnName("DisbursementID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.OverDraftId).HasColumnName("OverDraftID");

                entity.Property(e => e.OverdraftAmount).HasColumnType("money");

                entity.Property(e => e.StatusTypeCdId).HasColumnName("StatusTypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.Disbursement)
                    .WithMany(p => p.OverDraftDisbursementXrefs)
                    .HasForeignKey(d => d.DisbursementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OverDraftDisbursementXref_DisbursementID");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.OverDraftDisbursementXrefs)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OverDraftDisbursementXref_FileID");

                entity.HasOne(d => d.OverDraft)
                    .WithMany(p => p.OverDraftDisbursementXrefs)
                    .HasForeignKey(d => d.OverDraftId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OverDraftDisbursementXref_OverDraftID");
            });

            modelBuilder.Entity<OverDraftFbpxref>(entity =>
            {
                entity.ToTable("OverDraftFBPXref");

                entity.HasIndex(e => new { e.OverDraftId, e.FileBusinessPartyId }, "idxOverDraftFBPXrefKeys")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileId, "idxOverDraftFBPXref_FileID")
                    .HasFillFactor(90);

                entity.Property(e => e.OverDraftFbpxrefId).HasColumnName("OverDraftFBPXrefID");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.FileBusinessPartyId).HasColumnName("FileBusinessPartyID");

                entity.Property(e => e.FileBusinessPartyName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.OverDraftId).HasColumnName("OverDraftID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.FileBusinessParty)
                    .WithMany(p => p.OverDraftFbpxrefs)
                    .HasForeignKey(d => d.FileBusinessPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OverDraftFBPXref_FileBusinessPartyID");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.OverDraftFbpxrefs)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OverDraftFBPXref_FileID");

                entity.HasOne(d => d.OverDraft)
                    .WithMany(p => p.OverDraftFbpxrefs)
                    .HasForeignKey(d => d.OverDraftId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OverDraftFBPXref_OverDraftID");
            });

            modelBuilder.Entity<OverDraftInEscrowDepositLink>(entity =>
            {
                entity.ToTable("OverDraftInEscrowDepositLink");

                entity.HasIndex(e => new { e.OverDraftId, e.InEscrowId, e.CreateDate, e.StatusCd }, "idxOverDraftInEscrowDepositLinkKeys")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileId, "idxOverDraftInEscrowDepositLink_FileID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.InEscrowId, "idxOverDraftInEscrowDepositLink_InEscrowID")
                    .HasFillFactor(90);

                entity.Property(e => e.OverDraftInEscrowDepositLinkId).HasColumnName("OverDraftInEscrowDepositLinkID");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreateUserId).HasColumnName("CreateUserID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.InEscrowId).HasColumnName("InEscrowID");

                entity.Property(e => e.OverDraftId).HasColumnName("OverDraftID");

                entity.Property(e => e.SplitAmount).HasColumnType("money");

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UpdateUserId).HasColumnName("UpdateUserID");

                entity.Property(e => e.Updts)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.File)
                    .WithMany(p => p.OverDraftInEscrowDepositLinks)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OverDraftInEscrowDepositLink_FileID");

                entity.HasOne(d => d.InEscrow)
                    .WithMany(p => p.OverDraftInEscrowDepositLinks)
                    .HasForeignKey(d => d.InEscrowId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OverDraftInEscrowDepositLink_InEscrowID");

                entity.HasOne(d => d.OverDraft)
                    .WithMany(p => p.OverDraftInEscrowDepositLinks)
                    .HasForeignKey(d => d.OverDraftId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OverDraftInEscrowDepositLink_OverDraftID");

                entity.HasOne(d => d.StatusCdNavigation)
                    .WithMany(p => p.OverDraftInEscrowDepositLinks)
                    .HasForeignKey(d => d.StatusCd)
                    .HasConstraintName("FK_OverDraftInEscrowDepositLink_StatusCd");
            });

            modelBuilder.Entity<OverDraftInEscrowDepositXref>(entity =>
            {
                entity.ToTable("OverDraftInEscrowDepositXref");

                entity.HasIndex(e => new { e.OverDraftId, e.InEscrowId, e.CreateDate, e.StatusTypeCdId }, "idxOverDraftInEscrowDepositXrefKeys")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileId, "idxOverDraftInEscrowDepositXref_FileID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.InEscrowId, "idxOverDraftInEscrowDepositXref_InEscrowID")
                    .HasFillFactor(90);

                entity.Property(e => e.OverDraftInEscrowDepositXrefId).HasColumnName("OverDraftInEscrowDepositXrefID");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreateUserId).HasColumnName("CreateUserID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.InEscrowId).HasColumnName("InEscrowID");

                entity.Property(e => e.OverDraftId).HasColumnName("OverDraftID");

                entity.Property(e => e.OverdraftAmount).HasColumnType("money");

                entity.Property(e => e.StatusTypeCdId).HasColumnName("StatusTypeCdID");

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UpdateUserId).HasColumnName("UpdateUserID");

                entity.Property(e => e.Updts)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.File)
                    .WithMany(p => p.OverDraftInEscrowDepositXrefs)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OverDraftInEscrowDepositXref_FileID");

                entity.HasOne(d => d.InEscrow)
                    .WithMany(p => p.OverDraftInEscrowDepositXrefs)
                    .HasForeignKey(d => d.InEscrowId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OverDraftInEscrowDepositXref_InEscrowID");

                entity.HasOne(d => d.OverDraft)
                    .WithMany(p => p.OverDraftInEscrowDepositXrefs)
                    .HasForeignKey(d => d.OverDraftId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OverDraftInEscrowDepositXref_OverDraftID");
            });

            modelBuilder.Entity<OverDraftMaster>(entity =>
            {
                entity.HasKey(e => e.OverDraftId)
                    .HasName("PK_OverDraftMaster_OverDraftID");

                entity.ToTable("OverDraftMaster");

                entity.HasIndex(e => e.OverDraftType, "IDX_OverdraftMaster_OverdraftType")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileId, "idxOverDraftMaster_FileID")
                    .HasFillFactor(90);

                entity.Property(e => e.OverDraftId).HasColumnName("OverDraftID");

                entity.Property(e => e.AmountRecoverable).HasColumnType("money");

                entity.Property(e => e.ApprovedDate).HasColumnType("datetime");

                entity.Property(e => e.ApprovedUserId).HasColumnName("ApprovedUserID");

                entity.Property(e => e.CauseLossTypeCdId).HasColumnName("CauseLossTypeCdID");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedUserId).HasColumnName("CreatedUserID");

                entity.Property(e => e.DepositAmount).HasColumnType("money");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.GroupCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LossExplanation)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.LossNotRecoverExplanation)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.OtherCauseExplanation)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.OtherTypeExplanation)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.OverdraftComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OverdraftStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProcessTypeCdId).HasColumnName("ProcessTypeCdID");

                entity.Property(e => e.PropertyTypeCdId).HasColumnName("PropertyTypeCdID");

                entity.Property(e => e.RequestOverDraftAmount).HasColumnType("money");

                entity.Property(e => e.TypeLossTypeCdId).HasColumnName("TypeLossTypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.HasOne(d => d.CauseLossTypeCd)
                    .WithMany(p => p.OverDraftMasterCauseLossTypeCds)
                    .HasForeignKey(d => d.CauseLossTypeCdId)
                    .HasConstraintName("FK_OverDraftMaster_CauseLossTypeCdID");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.OverDraftMasters)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OverDraftMaster_FileID");

                entity.HasOne(d => d.ProcessTypeCd)
                    .WithMany(p => p.OverDraftMasterProcessTypeCds)
                    .HasForeignKey(d => d.ProcessTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OverDraftMaster_ProcessTypeCdID");

                entity.HasOne(d => d.TypeLossTypeCd)
                    .WithMany(p => p.OverDraftMasterTypeLossTypeCds)
                    .HasForeignKey(d => d.TypeLossTypeCdId)
                    .HasConstraintName("FK_OverDraftMaster_TypeLossTypeCdID");
            });

            modelBuilder.Entity<OverdraftDisbursement>(entity =>
            {
                entity.HasKey(e => e.DisbursementId)
                    .HasName("conOverdraftDisbursementPk");

                entity.ToTable("OverdraftDisbursement");

                entity.Property(e => e.DisbursementId)
                    .ValueGeneratedNever()
                    .HasColumnName("DisbursementID");

                entity.Property(e => e.AmountRecoverable).HasColumnType("money");

                entity.Property(e => e.CauseLossTypeCdId).HasColumnName("CauseLossTypeCdID");

                entity.Property(e => e.CreatedUserId).HasColumnName("CreatedUserID");

                entity.Property(e => e.DepositAmount).HasColumnType("money");

                entity.Property(e => e.LossExplanation)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.LossNotRecoverExplanation)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.OtherCauseExplanation)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.OtherTypeExplanation)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessTypeCdId).HasColumnName("ProcessTypeCdID");

                entity.Property(e => e.PropertyTypeCdId).HasColumnName("PropertyTypeCdID");

                entity.Property(e => e.TypeLossTypeCdId).HasColumnName("TypeLossTypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.CauseLossTypeCd)
                    .WithMany(p => p.OverdraftDisbursementCauseLossTypeCds)
                    .HasForeignKey(d => d.CauseLossTypeCdId)
                    .HasConstraintName("FK_OverDraftDisbmt_CauseLossTypeCdID");

                entity.HasOne(d => d.Disbursement)
                    .WithOne(p => p.OverdraftDisbursement)
                    .HasForeignKey<OverdraftDisbursement>(d => d.DisbursementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_Disbursement_FK");

                entity.HasOne(d => d.ProcessTypeCd)
                    .WithMany(p => p.OverdraftDisbursementProcessTypeCds)
                    .HasForeignKey(d => d.ProcessTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_DOT_TypeCdDMT_2FK");

                entity.HasOne(d => d.TypeLossTypeCd)
                    .WithMany(p => p.OverdraftDisbursementTypeLossTypeCds)
                    .HasForeignKey(d => d.TypeLossTypeCdId)
                    .HasConstraintName("FK_OverDraftDisbmt_TypeLossTypeCdID");
            });

            modelBuilder.Entity<Package>(entity =>
            {
                entity.ToTable("Package");

                entity.HasIndex(e => new { e.ClassTypeId, e.ObjectCd }, "indPackage2")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.PackageId).HasColumnName("PackageID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Name)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.Packages)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPackage2Fk");

                entity.HasMany(d => d.PackageGroups)
                    .WithMany(p => p.Packages)
                    .UsingEntity<Dictionary<string, object>>(
                        "PackageGrpXref",
                        l => l.HasOne<Package>().WithMany().HasForeignKey("PackageGroupId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conPackageGrpXref2Fk"),
                        r => r.HasOne<Package>().WithMany().HasForeignKey("PackageId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conPackageGrpXref3Fk"),
                        j =>
                        {
                            j.HasKey("PackageGroupId", "PackageId").HasName("conPackageGrpXref1Pk");

                            j.ToTable("PackageGrpXref");

                            j.HasIndex(new[] { "PackageId" }, "indPackageGrpXref3Fk").HasFillFactor(90);

                            j.IndexerProperty<int>("PackageGroupId").HasColumnName("PackageGroupID");

                            j.IndexerProperty<int>("PackageId").HasColumnName("PackageID");
                        });

                entity.HasMany(d => d.Packages)
                    .WithMany(p => p.PackageGroups)
                    .UsingEntity<Dictionary<string, object>>(
                        "PackageGrpXref",
                        l => l.HasOne<Package>().WithMany().HasForeignKey("PackageId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conPackageGrpXref3Fk"),
                        r => r.HasOne<Package>().WithMany().HasForeignKey("PackageGroupId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conPackageGrpXref2Fk"),
                        j =>
                        {
                            j.HasKey("PackageGroupId", "PackageId").HasName("conPackageGrpXref1Pk");

                            j.ToTable("PackageGrpXref");

                            j.HasIndex(new[] { "PackageId" }, "indPackageGrpXref3Fk").HasFillFactor(90);

                            j.IndexerProperty<int>("PackageGroupId").HasColumnName("PackageGroupID");

                            j.IndexerProperty<int>("PackageId").HasColumnName("PackageID");
                        });

                entity.HasMany(d => d.Templates)
                    .WithMany(p => p.Packages)
                    .UsingEntity<Dictionary<string, object>>(
                        "PackageTemplateXref",
                        l => l.HasOne<Template>().WithMany().HasForeignKey("TemplateId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conPackageTemplateXref2Fk"),
                        r => r.HasOne<Package>().WithMany().HasForeignKey("PackageId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conPackageTemplateXref3Fk"),
                        j =>
                        {
                            j.HasKey("PackageId", "TemplateId").HasName("conPackageTemplateXref1Pk");

                            j.ToTable("PackageTemplateXref");

                            j.HasIndex(new[] { "TemplateId" }, "indPackageTemplateXref3Fk").HasFillFactor(90);

                            j.IndexerProperty<int>("PackageId").HasColumnName("PackageID");

                            j.IndexerProperty<int>("TemplateId").HasColumnName("TemplateID");
                        });
            });

            modelBuilder.Entity<PageBusOrgIdlist>(entity =>
            {
                entity.ToTable("PageBusOrgIDList");

                entity.HasIndex(e => e.BusOrgId, "idxPBOLBusOrgID")
                    .HasFillFactor(90);

                entity.Property(e => e.PageBusOrgIdlistId).HasColumnName("PageBusOrgIDListID");

                entity.Property(e => e.AddrBookEntryId).HasColumnName("AddrBookEntryID");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");
            });

            modelBuilder.Entity<PaidDisbursement>(entity =>
            {
                entity.HasKey(e => e.DisbursementId)
                    .HasName("PK_PaidDisbursement_DisbursementID");

                entity.ToTable("PaidDisbursement");

                entity.Property(e => e.DisbursementId)
                    .ValueGeneratedNever()
                    .HasColumnName("DisbursementID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.Fsbflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FSBFlag")
                    .IsFixedLength();

                entity.Property(e => e.PaidAmount).HasColumnType("money");

                entity.Property(e => e.PaidDate).HasColumnType("datetime");

                entity.Property(e => e.PaidSeqNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PaidStatusCdId).HasColumnName("PaidStatusCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Disbursement)
                    .WithOne(p => p.PaidDisbursement)
                    .HasForeignKey<PaidDisbursement>(d => d.DisbursementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PaidDisbursement_DisbursementID");

                entity.HasOne(d => d.PaidStatusCd)
                    .WithMany(p => p.PaidDisbursements)
                    .HasForeignKey(d => d.PaidStatusCdId)
                    .HasConstraintName("FK_PaidDisbursement_PaidStatusCdID");
            });

            modelBuilder.Entity<PaidStatusBatch>(entity =>
            {
                entity.HasKey(e => e.BatchId)
                    .HasName("PK_PaidStatusLog_BatchID");

                entity.ToTable("PaidStatusBatch");

                entity.HasIndex(e => e.UpdatedKey, "IDXPaidStatusBatch")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.Processed, "idx_PaidStatusBatch_Processed")
                    .HasFillFactor(90);

                entity.Property(e => e.BatchId)
                    .ValueGeneratedNever()
                    .HasColumnName("BatchID");

                entity.Property(e => e.RequestXml)
                    .IsUnicode(false)
                    .HasColumnName("RequestXML");

                entity.Property(e => e.ResponseXml)
                    .IsUnicode(false)
                    .HasColumnName("ResponseXML");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<PaidStatusLog>(entity =>
            {
                entity.HasKey(e => new { e.BatchId, e.FastrecordId })
                    .HasName("PK_PaidStatusLog_BatchIDFASTRecordID");

                entity.ToTable("PaidStatusLog");

                entity.Property(e => e.BatchId).HasColumnName("BatchID");

                entity.Property(e => e.FastrecordId).HasColumnName("FASTRecordID");

                entity.Property(e => e.Fastamount)
                    .HasColumnType("money")
                    .HasColumnName("FASTAmount");

                entity.Property(e => e.MatchStatusCdId).HasColumnName("MatchStatusCdID");

                entity.Property(e => e.TransactionId)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TransactionID")
                    .IsFixedLength();

                entity.HasOne(d => d.Batch)
                    .WithMany(p => p.PaidStatusLogs)
                    .HasForeignKey(d => d.BatchId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PaidStatusLog_BatchID");

                entity.HasOne(d => d.MatchStatusCd)
                    .WithMany(p => p.PaidStatusLogs)
                    .HasForeignKey(d => d.MatchStatusCdId)
                    .HasConstraintName("FK_PaidStatusLog_MatchStatusCdID");
            });

            modelBuilder.Entity<PartiesForFastc>(entity =>
            {
                entity.HasKey(e => e.PartyType)
                    .HasName("PK__PartiesF__600B0D9F18C72A1F");

                entity.ToTable("PartiesForFASTCS");

                entity.Property(e => e.PartyType).ValueGeneratedNever();
            });

            modelBuilder.Entity<PartnerLog>(entity =>
            {
                entity.ToTable("PartnerLog");

                entity.HasIndex(e => e.FileId, "indPartnerLogFileID")
                    .HasFillFactor(90);

                entity.Property(e => e.PartnerLogId).HasColumnName("PartnerLogID");

                entity.Property(e => e.AppId).HasColumnName("AppID");

                entity.Property(e => e.AuditDataXml).HasColumnType("xml");

                entity.Property(e => e.EventTypeCdId).HasColumnName("EventTypeCdID");

                entity.Property(e => e.ExternalEventCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ExternalEventDescr).IsUnicode(false);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.App)
                    .WithMany(p => p.PartnerLogs)
                    .HasForeignKey(d => d.AppId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPartnerLogAppIDFK");

                entity.HasOne(d => d.EventTypeCd)
                    .WithMany(p => p.PartnerLogs)
                    .HasForeignKey(d => d.EventTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPartnerLogEventTypeCdIDFK");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.PartnerLogs)
                    .HasForeignKey(d => d.FileId)
                    .HasConstraintName("conPartnerLogFileIDFK");
            });

            modelBuilder.Entity<PayeeIdentification>(entity =>
            {
                entity.ToTable("PayeeIdentification");

                entity.Property(e => e.PayeeIdentificationId).HasColumnName("PayeeIdentificationID");

                entity.Property(e => e.Address1)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.AgencyName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.BusinessName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CellPhone)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.HomePhone)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Payee)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RecommendedAction)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.RequestData)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.RequestDateTime).HasColumnType("datetime");

                entity.Property(e => e.Resultcode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.ValidationMessage)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Zip)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.ResultcodeNavigation)
                    .WithMany(p => p.PayeeIdentifications)
                    .HasPrincipalKey(p => p.Resultcode)
                    .HasForeignKey(d => d.Resultcode)
                    .HasConstraintName("FK_Resultcode_PayeeIdentification");
            });

            modelBuilder.Entity<Payment>(entity =>
            {
                entity.ToTable("Payment");

                entity.Property(e => e.PaymentId).HasColumnName("PaymentID");

                entity.Property(e => e.Abanum)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ABANum");

                entity.Property(e => e.AccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.AuthorizationNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BankContactName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.BankName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.CardTypeCdId).HasColumnName("CardTypeCdID");

                entity.Property(e => e.CheckNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.ConfirmationDate).HasColumnType("datetime");

                entity.Property(e => e.ConfirmationNum)
                    .HasMaxLength(22)
                    .IsUnicode(false);

                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");

                entity.Property(e => e.FederalRoutingNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NameOnCard)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentDate).HasColumnType("datetime");

                entity.Property(e => e.PaymentMethodTypeCdId).HasColumnName("PaymentMethodTypeCdID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.CardTypeCd)
                    .WithMany(p => p.PaymentCardTypeCds)
                    .HasForeignKey(d => d.CardTypeCdId)
                    .HasConstraintName("conPayment22FK");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.Payments)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPayment1FK");

                entity.HasOne(d => d.PaymentMethodTypeCd)
                    .WithMany(p => p.PaymentPaymentMethodTypeCds)
                    .HasForeignKey(d => d.PaymentMethodTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPayment14FK");

                entity.HasOne(d => d.TransactionTypeCd)
                    .WithMany(p => p.PaymentTransactionTypeCds)
                    .HasForeignKey(d => d.TransactionTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPayment11FK");
            });

            modelBuilder.Entity<PendingStarterDoc>(entity =>
            {
                entity.HasKey(e => e.FileId)
                    .HasName("PK__PendingS__6F0F989FA2ADF005");

                entity.ToTable("PendingStarterDoc");

                entity.Property(e => e.FileId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileID");

                entity.Property(e => e.BatchId).HasColumnName("BatchID");

                entity.Property(e => e.CountyName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.OpenDate).HasColumnType("datetime");

                entity.Property(e => e.StateCd)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<PerformanceAudit>(entity =>
            {
                entity.ToTable("PerformanceAudit");

                entity.Property(e => e.ActionName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ActionTrackingId)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.SubActionName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SubActionTrackingId)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Person>(entity =>
            {
                entity.ToTable("Person");

                entity.Property(e => e.PersonId).HasColumnName("PersonID");

                entity.Property(e => e.AddrBookEntryId).HasColumnName("AddrBookEntryID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.CustomerPreference)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DelegateName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.EnterpriseId).HasColumnName("EnterpriseID");

                entity.Property(e => e.EnterpriseNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.WireInstId).HasColumnName("WireInstID");

                entity.HasOne(d => d.AddrBookEntry)
                    .WithMany(p => p.People)
                    .HasForeignKey(d => d.AddrBookEntryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_Person_FK_1");

                entity.HasOne(d => d.SalesRep1Navigation)
                    .WithMany(p => p.PersonSalesRep1Navigations)
                    .HasForeignKey(d => d.SalesRep1)
                    .HasConstraintName("con_Person_FK_2");

                entity.HasOne(d => d.SalesRep2Navigation)
                    .WithMany(p => p.PersonSalesRep2Navigations)
                    .HasForeignKey(d => d.SalesRep2)
                    .HasConstraintName("con_Person_FK_3");

                entity.HasOne(d => d.WireInst)
                    .WithMany(p => p.People)
                    .HasForeignKey(d => d.WireInstId)
                    .HasConstraintName("con_Person_FK_4");

                entity.HasMany(d => d.BusinessPrograms)
                    .WithMany(p => p.People)
                    .UsingEntity<Dictionary<string, object>>(
                        "PersonBusinessProgramXref",
                        l => l.HasOne<BusinessProgram>().WithMany().HasForeignKey("BusinessProgramId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("con_PersonBusinessProgramXref_FK_2"),
                        r => r.HasOne<Person>().WithMany().HasForeignKey("PersonId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("con_PersonBusinessProgramXref_FK_1"),
                        j =>
                        {
                            j.HasKey("PersonId", "BusinessProgramId").HasName("conPersonBusinessProgramXrefPK");

                            j.ToTable("PersonBusinessProgramXref");

                            j.IndexerProperty<int>("PersonId").HasColumnName("PersonID");

                            j.IndexerProperty<int>("BusinessProgramId").HasColumnName("BusinessProgramID");
                        });
            });

            modelBuilder.Entity<PersonBpchangeHistory>(entity =>
            {
                entity.ToTable("PersonBPChangeHistory");

                entity.Property(e => e.PersonBpchangeHistoryId).HasColumnName("PersonBPChangeHistoryID");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.EventTypeCdId).HasColumnName("EventTypeCdID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.PersonId).HasColumnName("PersonID");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.PersonBpchangeHistories)
                    .HasForeignKey(d => d.CreatedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_PersonBPChangeHistory_FK_3");

                entity.HasOne(d => d.EventTypeCd)
                    .WithMany(p => p.PersonBpchangeHistories)
                    .HasForeignKey(d => d.EventTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_PersonBPChangeHistory_FK_2");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.PersonBpchangeHistories)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_PersonBPChangeHistory_FK_1");
            });

            modelBuilder.Entity<PersonNotificationPref>(entity =>
            {
                entity.HasKey(e => e.PersonPrefId)
                    .HasName("conPersonNotificationPrefPk");

                entity.ToTable("PersonNotificationPref");

                entity.Property(e => e.PersonPrefId).HasColumnName("PersonPrefID");

                entity.Property(e => e.ElectronicAddrId).HasColumnName("ElectronicAddrID");

                entity.Property(e => e.PersonId).HasColumnName("PersonID");

                entity.HasOne(d => d.ElectronicAddr)
                    .WithMany(p => p.PersonNotificationPrefs)
                    .HasForeignKey(d => d.ElectronicAddrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPersonNotificationElecAddr1FK");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.PersonNotificationPrefs)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPersonNotificationFK");
            });

            modelBuilder.Entity<PersonRelationship>(entity =>
            {
                entity.ToTable("PersonRelationship");

                entity.Property(e => e.PersonRelationshipId).HasColumnName("PersonRelationshipID");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.Property(e => e.DeactivationDate).HasColumnType("datetime");

                entity.Property(e => e.DeactivationUserId).HasColumnName("DeactivationUserID");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.LastActivationDate).HasColumnType("datetime");

                entity.Property(e => e.LastActivationUserId).HasColumnName("LastActivationUserID");

                entity.Property(e => e.ParentPersonId).HasColumnName("ParentPersonID");

                entity.Property(e => e.PersonId).HasColumnName("PersonID");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StatusChgComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.BusOrg)
                    .WithMany(p => p.PersonRelationships)
                    .HasForeignKey(d => d.BusOrgId)
                    .HasConstraintName("conPersonRelationship_FK_2");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.PersonRelationships)
                    .HasForeignKey(d => d.ContactId)
                    .HasConstraintName("conPersonRelationship_FK_3");

                entity.HasOne(d => d.ParentPerson)
                    .WithMany(p => p.PersonRelationshipParentPeople)
                    .HasForeignKey(d => d.ParentPersonId)
                    .HasConstraintName("conPersonRelationship_FK_1");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.PersonRelationshipPeople)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("conPersonRelationship_FK_4");
            });

            modelBuilder.Entity<PersonRelationshipChangeHistory>(entity =>
            {
                entity.ToTable("PersonRelationshipChangeHistory");

                entity.Property(e => e.PersonRelationshipChangeHistoryId).HasColumnName("PersonRelationshipChangeHistoryID");

                entity.Property(e => e.ChangeDate).HasColumnType("datetime");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.PersonRelationshipId).HasColumnName("PersonRelationshipID");

                entity.Property(e => e.StatusId).HasColumnName("StatusID");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.PersonRelationshipChangeHistories)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("conPersonEmployeeID_FK_2");

                entity.HasOne(d => d.PersonRelationship)
                    .WithMany(p => p.PersonRelationshipChangeHistories)
                    .HasForeignKey(d => d.PersonRelationshipId)
                    .HasConstraintName("conPersonRelationshipID_FK_1");
            });

            modelBuilder.Entity<PersonRoleRelationshipXref>(entity =>
            {
                entity.HasKey(e => new { e.PersonRelationshipId, e.RoleTypeCdId })
                    .HasName("PersonRoleRelationshipXref1Pk");

                entity.ToTable("PersonRoleRelationshipXref");

                entity.Property(e => e.PersonRelationshipId).HasColumnName("PersonRelationshipID");

                entity.Property(e => e.RoleTypeCdId).HasColumnName("RoleTypeCdID");

                entity.HasOne(d => d.PersonRelationship)
                    .WithMany(p => p.PersonRoleRelationshipXrefs)
                    .HasForeignKey(d => d.PersonRelationshipId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPersonRoleRelationshipXref_FK_1");

                entity.HasOne(d => d.RoleTypeCd)
                    .WithMany(p => p.PersonRoleRelationshipXrefs)
                    .HasForeignKey(d => d.RoleTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPersonRoleRelationshipXref_FK_2");
            });

            modelBuilder.Entity<PersonWebCustomerXref>(entity =>
            {
                entity.HasKey(e => new { e.PersonId, e.WebCustomerTypeCdId })
                    .HasName("conPersonWebCustomerXrefPK");

                entity.ToTable("PersonWebCustomerXref");

                entity.Property(e => e.PersonId).HasColumnName("PersonID");

                entity.Property(e => e.WebCustomerTypeCdId).HasColumnName("WebCustomerTypeCdID");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.PersonWebCustomerXrefs)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_PersonWebCustomerXref_FK_1");

                entity.HasOne(d => d.WebCustomerTypeCd)
                    .WithMany(p => p.PersonWebCustomerXrefs)
                    .HasForeignKey(d => d.WebCustomerTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_PersonWebCustomerXref_FK_2");
            });

            modelBuilder.Entity<PersonalProperty>(entity =>
            {
                entity.ToTable("PersonalProperty");

                entity.HasIndex(e => e.TitleEscrowInfoId, "indPersonalProperty1FK")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TextId, "indPersonalProperty2FK")
                    .HasFillFactor(90);

                entity.Property(e => e.PersonalPropertyId).HasColumnName("PersonalPropertyID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.DocDate).HasColumnType("datetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.DocName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocParties)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.TextId).HasColumnName("TextID");

                entity.Property(e => e.TitleEscrowInfoId).HasColumnName("TitleEscrowInfoID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.TitleEscrowInfo)
                    .WithMany(p => p.PersonalProperties)
                    .HasForeignKey(d => d.TitleEscrowInfoId)
                    .HasConstraintName("conPersonalProperty1FK");
            });

            modelBuilder.Entity<Phrase>(entity =>
            {
                entity.ToTable("Phrase");

                entity.HasIndex(e => new { e.PhraseGrpId, e.ObjectCd, e.NextPhraseVersionId }, "PhraseUniqueObjectCd")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ObjectCd, "indPhrase10")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ClassTypeId, e.PhraseGrpId, e.ObjectCd, e.NextPhraseVersionId, e.Name, e.CreationDate }, "indPhrase2")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PhraseGrpId, "indPhrase4Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.NextPhraseVersionId, "indPhrase8Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PhraseTextId, "indPhrase9Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.PhraseId).HasColumnName("PhraseID");

                entity.Property(e => e.BottomMarginValue).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.Property(e => e.DeactivationDate).HasColumnType("datetime");

                entity.Property(e => e.FontName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.JustifyTextFlg).HasDefaultValueSql("((0))");

                entity.Property(e => e.LeftMarginValue).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.Name)
                    .HasMaxLength(58)
                    .IsUnicode(false);

                entity.Property(e => e.NextPhraseVersionId).HasColumnName("NextPhraseVersionID");

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PhraseGrpId).HasColumnName("PhraseGrpID");

                entity.Property(e => e.PhraseTextId).HasColumnName("PhraseTextID");

                entity.Property(e => e.ReactivationDate).HasColumnType("datetime");

                entity.Property(e => e.RightMarginValue).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.StatusChgComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StatusChgDate).HasColumnType("datetime");

                entity.Property(e => e.StatusChgUserId).HasColumnName("StatusChgUserID");

                entity.Property(e => e.TopMarginValue).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.Phrases)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPhrase5Fk");

                entity.HasOne(d => d.CreationUser)
                    .WithMany(p => p.PhraseCreationUsers)
                    .HasForeignKey(d => d.CreationUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPhrase6Fk");

                entity.HasOne(d => d.NextPhraseVersion)
                    .WithMany(p => p.InverseNextPhraseVersion)
                    .HasForeignKey(d => d.NextPhraseVersionId)
                    .HasConstraintName("conPhrase2R");

                entity.HasOne(d => d.PhraseGrp)
                    .WithMany(p => p.Phrases)
                    .HasForeignKey(d => d.PhraseGrpId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPhrase4Fk");

                entity.HasOne(d => d.StatusChgUser)
                    .WithMany(p => p.PhraseStatusChgUsers)
                    .HasForeignKey(d => d.StatusChgUserId)
                    .HasConstraintName("conPhrase7FK");
            });

            modelBuilder.Entity<PhraseElement>(entity =>
            {
                entity.ToTable("PhraseElement");

                entity.HasIndex(e => e.SeqNum, "IDXPhraseElementSeqNum")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.PhraseId, e.DisplayName }, "indPhraseElement12")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.PhraseId, e.SeqNum }, "indPhraseElement2")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DataElementId, "indPhraseElement4Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.PhraseElementId).HasColumnName("PhraseElementID");

                entity.Property(e => e.AlignmentTypeCdId).HasColumnName("AlignmentTypeCdID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.DataElementId).HasColumnName("DataElementID");

                entity.Property(e => e.Descr)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.ElementIndex)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ElementSeparatorTypeCdId).HasColumnName("ElementSeparatorTypeCdID");

                entity.Property(e => e.FormFieldName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FormatTypeCdId).HasColumnName("FormatTypeCdID");

                entity.Property(e => e.InitialValue)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PhraseId).HasColumnName("PhraseID");

                entity.Property(e => e.PictureTypeCdId).HasColumnName("PictureTypeCdID");

                entity.Property(e => e.PrintCaseTypeCdId).HasColumnName("PrintCaseTypeCdID");

                entity.Property(e => e.ReadOnlyIndicator).HasDefaultValueSql("((0))");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.Xcoordinate)
                    .HasColumnType("decimal(4, 2)")
                    .HasColumnName("XCoordinate");

                entity.Property(e => e.Ycoordinate)
                    .HasColumnType("decimal(4, 2)")
                    .HasColumnName("YCoordinate");

                entity.HasOne(d => d.AlignmentTypeCd)
                    .WithMany(p => p.PhraseElementAlignmentTypeCds)
                    .HasForeignKey(d => d.AlignmentTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPhrElement7Fk");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.PhraseElements)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPhrElement4Fk");

                entity.HasOne(d => d.DataElement)
                    .WithMany(p => p.PhraseElements)
                    .HasForeignKey(d => d.DataElementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPhrElement3Fk");

                entity.HasOne(d => d.ElementSeparatorTypeCd)
                    .WithMany(p => p.PhraseElementElementSeparatorTypeCds)
                    .HasForeignKey(d => d.ElementSeparatorTypeCdId)
                    .HasConstraintName("conPhrEement9Fk");

                entity.HasOne(d => d.FormatTypeCd)
                    .WithMany(p => p.PhraseElementFormatTypeCds)
                    .HasForeignKey(d => d.FormatTypeCdId)
                    .HasConstraintName("conPhrEement6Fk");

                entity.HasOne(d => d.Phrase)
                    .WithMany(p => p.PhraseElements)
                    .HasForeignKey(d => d.PhraseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPhrElement2Fk");

                entity.HasOne(d => d.PictureTypeCd)
                    .WithMany(p => p.PhraseElementPictureTypeCds)
                    .HasForeignKey(d => d.PictureTypeCdId)
                    .HasConstraintName("conPhrEement8Fk");

                entity.HasOne(d => d.PrintCaseTypeCd)
                    .WithMany(p => p.PhraseElementPrintCaseTypeCds)
                    .HasForeignKey(d => d.PrintCaseTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPhrEement5Fk");
            });

            modelBuilder.Entity<PhraseGeoRegionFilter>(entity =>
            {
                entity.HasKey(e => e.PhraseRegionFilterId);

                entity.ToTable("PhraseGeoRegionFilter");

                entity.HasIndex(e => new { e.PhraseGroupId, e.ObjectCd, e.BusinessUnitId, e.UnderConstFlg }, "UK_PhraseGeoRegionFilter")
                    .IsUnique();

                entity.Property(e => e.PhraseRegionFilterId).HasColumnName("PhraseRegionFilterID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ObjectCD");

                entity.Property(e => e.PhraseGroupId).HasColumnName("PhraseGroupID");

                entity.Property(e => e.UnderConstFlg).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.PhraseGeoRegionFilters)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .HasConstraintName("FK_PhraseGeoRegionFilter_BusinessUnitID");

                entity.HasOne(d => d.PhraseGroup)
                    .WithMany(p => p.PhraseGeoRegionFilters)
                    .HasForeignKey(d => d.PhraseGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PhraseGeoRegionFilter_PhraseGroupID");
            });

            modelBuilder.Entity<PhraseGeoRegionFilterDocprep>(entity =>
            {
                entity.HasKey(e => e.PhraseRegionFilterId);

                entity.ToTable("PhraseGeoRegionFilter_docprep");

                entity.HasIndex(e => new { e.PhraseGroupId, e.ObjectCd, e.BusinessUnitId, e.UnderConstFlg }, "IX_PhraseGeoRegionFilter_docprep_PhraseGroupID")
                    .HasFillFactor(90);

                entity.Property(e => e.PhraseRegionFilterId).HasColumnName("PhraseRegionFilterID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ObjectCD");

                entity.Property(e => e.PhraseGroupId).HasColumnName("PhraseGroupID");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.PhraseGeoRegionFilterDocpreps)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .HasConstraintName("FK_PhraseGeoRegionFilter_docprep_BusinessUnitID");
            });

            modelBuilder.Entity<PhraseGeoStateFilter>(entity =>
            {
                entity.HasKey(e => e.PhraseStateFilterId);

                entity.ToTable("PhraseGeoStateFilter");

                entity.HasIndex(e => new { e.PhraseGroupId, e.ObjectCd, e.GeoRegionId, e.UnderConstFlg }, "UK_PhraseGeoStateFilter")
                    .IsUnique();

                entity.Property(e => e.PhraseStateFilterId).HasColumnName("PhraseStateFilterID");

                entity.Property(e => e.GeoRegionId).HasColumnName("GeoRegionID");

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ObjectCD");

                entity.Property(e => e.PhraseGroupId).HasColumnName("PhraseGroupID");

                entity.Property(e => e.UnderConstFlg).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.GeoRegion)
                    .WithMany(p => p.PhraseGeoStateFilters)
                    .HasForeignKey(d => d.GeoRegionId)
                    .HasConstraintName("FK_PhraseGeoStateFilter_GeoRegionID");

                entity.HasOne(d => d.PhraseGroup)
                    .WithMany(p => p.PhraseGeoStateFilters)
                    .HasForeignKey(d => d.PhraseGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PhraseGeoStateFilter_PhraseGroupID");
            });

            modelBuilder.Entity<PhraseGeoStateFilterDocprep>(entity =>
            {
                entity.HasKey(e => e.PhraseStateFilterId);

                entity.ToTable("PhraseGeoStateFilter_docprep");

                entity.HasIndex(e => new { e.PhraseGroupId, e.ObjectCd, e.GeoRegionId, e.UnderConstFlg }, "IX_PhraseGeoStateFilter_docprep_PhraseGroupID")
                    .HasFillFactor(90);

                entity.Property(e => e.PhraseStateFilterId).HasColumnName("PhraseStateFilterID");

                entity.Property(e => e.GeoRegionId).HasColumnName("GeoRegionID");

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ObjectCD");

                entity.Property(e => e.PhraseGroupId).HasColumnName("PhraseGroupID");

                entity.HasOne(d => d.GeoRegion)
                    .WithMany(p => p.PhraseGeoStateFilterDocpreps)
                    .HasForeignKey(d => d.GeoRegionId)
                    .HasConstraintName("FK_PhraseGeoStateFilter_docprep_GeoRegionID");
            });

            modelBuilder.Entity<PhraseGrp>(entity =>
            {
                entity.ToTable("PhraseGrp");

                entity.HasIndex(e => new { e.ClassTypeId, e.BusinessUnitId, e.ObjectCd }, "indPhraseGrp2")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.BusinessUnitId, e.ObjectCd }, "indPhraseGrp5Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.PhraseGrpId).HasColumnName("PhraseGrpID");

                entity.Property(e => e.BottomMarginValue).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.Property(e => e.FontName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LeftMarginValue).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.Name)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PhraseTypeCdId).HasColumnName("PhraseTypeCdID");

                entity.Property(e => e.RightMarginValue).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.StatusChgComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StatusChgDate).HasColumnType("datetime");

                entity.Property(e => e.StatusChgUserId).HasColumnName("StatusChgUserID");

                entity.Property(e => e.TopMarginValue).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.PhraseGrps)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPhraseGrp5Fk");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.PhraseGrps)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPhraseGrp2Fk");

                entity.HasOne(d => d.PhraseTypeCd)
                    .WithMany(p => p.PhraseGrps)
                    .HasForeignKey(d => d.PhraseTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPhraseGrp4Fk");
            });

            modelBuilder.Entity<PhraseGrpGeoRegionfilter>(entity =>
            {
                entity.HasKey(e => e.PhraseGroupRegionFilterId);

                entity.ToTable("PhraseGrpGeoRegionfilter");

                entity.HasIndex(e => new { e.PhraseGroupId, e.BusinessUnitId }, "UK_PhraseGrpGeoRegionfilter")
                    .IsUnique();

                entity.Property(e => e.PhraseGroupRegionFilterId).HasColumnName("PhraseGroupRegionFilterID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.PhraseGroupId).HasColumnName("PhraseGroupID");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.PhraseGrpGeoRegionfilters)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .HasConstraintName("FK_PhraseGrpGeoRegionfilter_BusinessUnitID");

                entity.HasOne(d => d.PhraseGroup)
                    .WithMany(p => p.PhraseGrpGeoRegionfilters)
                    .HasForeignKey(d => d.PhraseGroupId)
                    .HasConstraintName("FK_PhraseGrpGeoRegionfilter_PhraseGroupID");
            });

            modelBuilder.Entity<PhraseGrpGeoStateFilter>(entity =>
            {
                entity.HasKey(e => e.PhraseGroupStateFilterId);

                entity.ToTable("PhraseGrpGeoStateFilter");

                entity.HasIndex(e => new { e.PhraseGroupId, e.GeoRegionId }, "UK_PhraseGrpGeoStateFilter")
                    .IsUnique();

                entity.Property(e => e.PhraseGroupStateFilterId).HasColumnName("PhraseGroupStateFilterID");

                entity.Property(e => e.GeoRegionId).HasColumnName("GeoRegionID");

                entity.Property(e => e.PhraseGroupId).HasColumnName("PhraseGroupID");

                entity.HasOne(d => d.GeoRegion)
                    .WithMany(p => p.PhraseGrpGeoStateFilters)
                    .HasForeignKey(d => d.GeoRegionId)
                    .HasConstraintName("FK_PhraseGrpGeoStateFilter_GeoRegionID");

                entity.HasOne(d => d.PhraseGroup)
                    .WithMany(p => p.PhraseGrpGeoStateFilters)
                    .HasForeignKey(d => d.PhraseGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PhraseGrpGeoStateFilter_PhraseGroupID");
            });

            modelBuilder.Entity<PhraseGrpGeoStateFilterDocprep>(entity =>
            {
                entity.HasKey(e => e.PhraseGroupStateFilterId)
                    .HasName("PK_PhraseGrpGeoStateFilter_PhraseGroupStateFilterID");

                entity.ToTable("PhraseGrpGeoStateFilter_docprep");

                entity.HasIndex(e => e.PhraseGroupId, "ixn_PhrasegrpID_PhraseGrpGeoStateFilter_docprep")
                    .HasFillFactor(90);

                entity.Property(e => e.PhraseGroupStateFilterId).HasColumnName("PhraseGroupStateFilterID");

                entity.Property(e => e.GeoRegionId).HasColumnName("GeoRegionID");

                entity.Property(e => e.PhraseGroupId).HasColumnName("PhraseGroupID");

                entity.HasOne(d => d.GeoRegion)
                    .WithMany(p => p.PhraseGrpGeoStateFilterDocpreps)
                    .HasForeignKey(d => d.GeoRegionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PhraseGrpGeoStateFilter_docprep_GeographicRegion");
            });

            modelBuilder.Entity<PhraseGrpRegionFilterDocprep>(entity =>
            {
                entity.HasKey(e => e.PhraseGroupRegionFilterId)
                    .HasName("PK_PhraseGrpRegionFilter_PhraseGroupRegionFilterID");

                entity.ToTable("PhraseGrpRegionFilter_docprep");

                entity.HasIndex(e => e.PhraseGroupId, "ixn_PhrasegrpID_PhraseGrpRegionFilter_docprep")
                    .HasFillFactor(90);

                entity.Property(e => e.PhraseGroupRegionFilterId).HasColumnName("PhraseGroupRegionFilterID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.PhraseGroupId).HasColumnName("PhraseGroupID");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.PhraseGrpRegionFilterDocpreps)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PhraseGrpRegionfilter_docprep_BusinessUnitID");
            });

            modelBuilder.Entity<PhraseHistory>(entity =>
            {
                entity.ToTable("PhraseHistory");

                entity.HasIndex(e => e.PhraseId, "idxPhraseHistory2")
                    .HasFillFactor(90);

                entity.Property(e => e.PhraseHistoryId).HasColumnName("PhraseHistoryID");

                entity.Property(e => e.ChangeDate).HasColumnType("datetime");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PhraseId).HasColumnName("PhraseID");

                entity.Property(e => e.StatusCd).HasColumnName("StatusCD");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.Phrase)
                    .WithMany(p => p.PhraseHistories)
                    .HasForeignKey(d => d.PhraseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PhraseFK");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.PhraseHistories)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("EmployeePhraseHistoryFK");
            });

            modelBuilder.Entity<PhraseMarker>(entity =>
            {
                entity.HasKey(e => new { e.PhraseMarkerId, e.FileId })
                    .HasName("conPhraseMarkerPk");

                entity.ToTable("PhraseMarker");

                entity.HasIndex(e => new { e.FileId, e.PhraseMarkerFormId }, "idxPhraseMarker2_PhraseMarkerFormID")
                    .HasFillFactor(90);

                entity.Property(e => e.PhraseMarkerId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PhraseMarkerID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PhraseMarkerFormId).HasColumnName("PhraseMarkerFormID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.PhraseMarkers)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("R_553_");

                entity.HasOne(d => d.PhraseMarkerForm)
                    .WithMany(p => p.PhraseMarkers)
                    .HasForeignKey(d => d.PhraseMarkerFormId)
                    .HasConstraintName("PhraseMarker_FormFK_");
            });

            modelBuilder.Entity<PhraseMarkerCopyInfo>(entity =>
            {
                entity.HasKey(e => e.PhraseMarkerTo)
                    .HasName("XPKPhraseMarkerCopyInfo_");

                entity.ToTable("PhraseMarkerCopyInfo");

                entity.HasIndex(e => new { e.FormTo, e.FormFrom }, "IdxFormFromTo")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FormFrom, e.FormFromLatestVerWhenCopied, e.PhraseMarkerFrom }, "XUQPhraseMarkerCopyInfo1_")
                    .IsUnique();

                entity.HasIndex(e => e.PhraseMarkerFrom, "ix_PhraseMarkerCopyInfo_PhraseMarkerFrom")
                    .HasFillFactor(90);

                entity.Property(e => e.PhraseMarkerTo).ValueGeneratedNever();

                entity.HasOne(d => d.FormToNavigation)
                    .WithMany(p => p.PhraseMarkerCopyInfos)
                    .HasForeignKey(d => d.FormTo)
                    .HasConstraintName("FK__PhraseMar__FormT__686C721B");

                entity.HasOne(d => d.FormFromNavigation)
                    .WithMany(p => p.PhraseMarkerCopyInfos)
                    .HasForeignKey(d => new { d.FormFrom, d.FormFromLatestVerWhenCopied })
                    .HasConstraintName("PhraseMarkerCopyInfoFK1_");
            });

            modelBuilder.Entity<PhraseMarkerDeleted>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PhraseMarker_Deleted");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.PhraseMarkerFormId).HasColumnName("PhraseMarkerFormID");

                entity.Property(e => e.PhraseMarkerId).HasColumnName("PhraseMarkerID");
            });

            modelBuilder.Entity<PhraseMarkerForm>(entity =>
            {
                entity.ToTable("PhraseMarkerForm");

                entity.HasIndex(e => new { e.FileName, e.InstanceNumber }, "PhraseMarkerFormUK1")
                    .IsUnique();

                entity.HasIndex(e => new { e.Name, e.InstanceNumber }, "PhraseMarkerFormUK2")
                    .IsUnique();

                entity.Property(e => e.PhraseMarkerFormId).HasColumnName("PhraseMarkerFormID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.CheckedOutById).HasColumnName("CheckedOutByID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.FileName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InstanceNumber).HasDefaultValueSql("((0))");

                entity.Property(e => e.Name)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.StatusCd).HasColumnName("StatusCD");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.PhraseMarkerForms)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PhraseMarkerFormFK2_");

                entity.HasOne(d => d.CheckedOutBy)
                    .WithMany(p => p.PhraseMarkerForms)
                    .HasForeignKey(d => d.CheckedOutById)
                    .HasConstraintName("PhraseMarkerFormFK5_");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.PhraseMarkerForms)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PhraseMarkerFormFK1_");
            });

            modelBuilder.Entity<PhraseMarkerFormVersion>(entity =>
            {
                entity.HasKey(e => new { e.PhraseMarkerFormId, e.VersionNumber })
                    .HasName("XPKPhraseMarkerFormVersions_")
                    .IsClustered(false);

                entity.HasIndex(e => e.Comments, "IX_Clust_PhraseMarkerFormVersions")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.Property(e => e.PhraseMarkerFormId).HasColumnName("PhraseMarkerFormID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.HasOne(d => d.CreationUser)
                    .WithMany(p => p.PhraseMarkerFormVersions)
                    .HasForeignKey(d => d.CreationUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PhraseMarkerFormVersionsFK2_");

                entity.HasOne(d => d.PhraseMarkerForm)
                    .WithMany(p => p.PhraseMarkerFormVersions)
                    .HasForeignKey(d => d.PhraseMarkerFormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PhraseMarkerFormVersionsFK1_");
            });

            modelBuilder.Entity<PhraseMarkerNotInUse>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PhraseMarker_NotInUse");

                entity.HasIndex(e => e.PhraseMarkerId, "IX_PhraseMarker_NotInUse")
                    .IsClustered();

                entity.Property(e => e.PhraseMarkerId).HasColumnName("PhraseMarkerID");
            });

            modelBuilder.Entity<PhraseMarkerToKeep2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PhraseMarker_ToKeep2");

                entity.HasIndex(e => e.PhraseMarkerId, "IX_PhraseMarker_ToKeep2")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.Property(e => e.PhraseMarkerId).HasColumnName("PhraseMarkerID");
            });

            modelBuilder.Entity<PhysicalAddr>(entity =>
            {
                entity.ToTable("PhysicalAddr");

                entity.HasIndex(e => e.EnterpriseId, "CLX_AddrEnterpriseID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.UpdTs, "DW_IXN01_PhysicalAddr_UpdTS")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.City, e.PhysicalAddrId, e.AddrLine1, e.State, e.ZipCode }, "IDXPhysicalAddrCity")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.City, "IDXPhysicalAddrGeo1")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.County, "IDXPhysicalAddrGeo2")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.Country, "IDXPhysicalAddrGeo3")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ContextTypeCdId, "Ind_PhysicalAddr_ContextTypeCdID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CityVanityName, "_WA_Sys_CityVanityName_73BA3083")
                    .HasFillFactor(90);

                entity.Property(e => e.PhysicalAddrId).HasColumnName("PhysicalAddrID");

                entity.Property(e => e.AddrLine1)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.AddrLine2)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.AddrLine3)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.AddrLine4)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.AlphaIndex)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AreaLocator)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CensusTract)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CityVanityName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ContextTypeCdId).HasColumnName("ContextTypeCdID");

                entity.Property(e => e.Country)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.County)
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.EnterpriseId).HasColumnName("EnterpriseID");

                entity.Property(e => e.FastprimaryFlag).HasColumnName("FASTPrimaryFlag");

                entity.Property(e => e.MdmprimaryFlag).HasColumnName("MDMPrimaryFlag");

                entity.Property(e => e.Msa)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MSA");

                entity.Property(e => e.NumericIndex)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TaxRoleCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.ZipCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.PhysicalAddrs)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPhysicalAddr2Fk");
            });

            modelBuilder.Entity<PolicyPhysicalAddrXref>(entity =>
            {
                entity.HasKey(e => new { e.PolicyId, e.PhysicalAddrId })
                    .HasName("conPolicyPhysicalAddrXrefPK");

                entity.ToTable("PolicyPhysicalAddrXref");

                entity.HasIndex(e => e.PhysicalAddrId, "ixn_PolicyPhysicalAddrXref_1")
                    .HasFillFactor(90);

                entity.Property(e => e.PolicyId).HasColumnName("PolicyID");

                entity.Property(e => e.PhysicalAddrId).HasColumnName("PhysicalAddrID");

                entity.HasOne(d => d.PhysicalAddr)
                    .WithMany(p => p.PolicyPhysicalAddrXrefs)
                    .HasForeignKey(d => d.PhysicalAddrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPolicyPhysicalAddrXref_FK2");
            });

            modelBuilder.Entity<PolicyPhysicalAddrXrefDocPrepInsert>(entity =>
            {
                entity.HasKey(e => new { e.PolicyId, e.PhysicalAddrId })
                    .HasName("conPolicyPhysicalAddrXref_DocPrepPK_Insert");

                entity.ToTable("PolicyPhysicalAddrXref_DocPrep_Insert");

                entity.Property(e => e.PolicyId).HasColumnName("PolicyID");

                entity.Property(e => e.PhysicalAddrId).HasColumnName("PhysicalAddrID");
            });

            modelBuilder.Entity<PolicyPrincipalXrefDocPrep>(entity =>
            {
                entity.HasKey(e => new { e.PolicyId, e.PrincipalId })
                    .HasName("conPolicyPrincipalXref_DocPrepPK");

                entity.ToTable("PolicyPrincipalXref_DocPrep");

                entity.HasIndex(e => e.PrincipalId, "IDX_PolicyPrincipalXref_DocPrep_PrincipalID")
                    .HasFillFactor(90);

                entity.Property(e => e.PolicyId).HasColumnName("PolicyID");

                entity.Property(e => e.PrincipalId).HasColumnName("PrincipalID");

                entity.HasOne(d => d.Principal)
                    .WithMany(p => p.PolicyPrincipalXrefDocPreps)
                    .HasForeignKey(d => d.PrincipalId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_PolicyPrincipalXref_DocPrep_FK_1");
            });

            modelBuilder.Entity<PolicyPrincipalXrefDocPrepInsert>(entity =>
            {
                entity.HasKey(e => new { e.PolicyId, e.PrincipalId })
                    .HasName("conPolicyPrincipalXref_DocPrepPK_Insert");

                entity.ToTable("PolicyPrincipalXref_DocPrep_Insert");

                entity.Property(e => e.PolicyId).HasColumnName("PolicyID");

                entity.Property(e => e.PrincipalId).HasColumnName("PrincipalID");
            });

            modelBuilder.Entity<PolicyUnderWriterXrefDocprep>(entity =>
            {
                entity.HasKey(e => e.DocId)
                    .HasName("conPolicyUnderWriterXRef_DocprepPK");

                entity.ToTable("PolicyUnderWriterXRef_Docprep");

                entity.HasIndex(e => new { e.OfficeUnderwriterId, e.PolicyNumber }, "conPolicyUnderWriterXRef_Docprep_OfficeUnderwriterId_PolicyNumber")
                    .HasFillFactor(90);

                entity.Property(e => e.DocId).ValueGeneratedNever();

                entity.Property(e => e.AgentNetPolicyNumberId).HasColumnName("AgentNetPolicyNumberID");

                entity.Property(e => e.PolicyIssueDate).HasColumnType("datetime");

                entity.Property(e => e.PolicyNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Doc)
                    .WithOne(p => p.PolicyUnderWriterXrefDocprep)
                    .HasForeignKey<PolicyUnderWriterXrefDocprep>(d => d.DocId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_PolicyUnderWriterXRef_Docprep_FK_3");

                entity.HasOne(d => d.OfficeUnderwriter)
                    .WithMany(p => p.PolicyUnderWriterXrefDocpreps)
                    .HasForeignKey(d => d.OfficeUnderwriterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_PolicyUnderWriterXRef_Docprep_FK_1");

                entity.HasOne(d => d.RegionUnderwriter)
                    .WithMany(p => p.PolicyUnderWriterXrefDocpreps)
                    .HasForeignKey(d => d.RegionUnderwriterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_PolicyUnderWriterXRef_Docprep_FK_2");
            });

            modelBuilder.Entity<PolicyUnderWriterXrefDocprepInsert>(entity =>
            {
                entity.HasKey(e => e.DocId)
                    .HasName("conPolicyUnderWriterXRef_DocprepPK_Insert");

                entity.ToTable("PolicyUnderWriterXRef_Docprep_Insert");

                entity.Property(e => e.DocId).ValueGeneratedNever();

                entity.Property(e => e.AgentNetPolicyNumberId).HasColumnName("AgentNetPolicyNumberID");

                entity.Property(e => e.PolicyIssueDate).HasColumnType("datetime");

                entity.Property(e => e.PolicyNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PolicyUnderwriterXref>(entity =>
            {
                entity.HasKey(e => new { e.DocId, e.FileId })
                    .HasName("conPolicyUnderwriterXrefPk");

                entity.ToTable("PolicyUnderwriterXref");

                entity.HasIndex(e => new { e.FileId, e.OfficeUnderwriterId, e.PolicyNumber }, "Idx1PolicyUWXref")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FileId, e.AgentNetPolicyNumberId }, "Idx2AgentNetPolicyNumberID")
                    .HasFillFactor(90);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.AgentNetPolicyNumberId).HasColumnName("AgentNetPolicyNumberID");

                entity.Property(e => e.PolicyIssueDate).HasColumnType("datetime");

                entity.Property(e => e.PolicyNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.AgentNetPolicyNumber)
                    .WithMany(p => p.PolicyUnderwriterXrefs)
                    .HasForeignKey(d => d.AgentNetPolicyNumberId)
                    .HasConstraintName("Fk_PolicyUnderwriterXref_AgentNetPolicyNumberID");

                entity.HasOne(d => d.OfficeUnderwriter)
                    .WithMany(p => p.PolicyUnderwriterXrefs)
                    .HasForeignKey(d => d.OfficeUnderwriterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con1PolicyUWOfficeUWFK");

                entity.HasOne(d => d.RegionUnderwriter)
                    .WithMany(p => p.PolicyUnderwriterXrefs)
                    .HasForeignKey(d => d.RegionUnderwriterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con2PolicyUWRegionUWFK");

                entity.HasOne(d => d.Document)
                    .WithOne(p => p.PolicyUnderwriterXref)
                    .HasForeignKey<PolicyUnderwriterXref>(d => new { d.DocId, d.FileId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con3PolicyUWDocumentFK");
            });

            modelBuilder.Entity<PreferredBusOrgContactXref>(entity =>
            {
                entity.HasKey(e => new { e.ServiceTypeCdId, e.ContactId, e.EmployeeId })
                    .HasName("conPrefBusOrgContactXref1Pk");

                entity.ToTable("PreferredBusOrgContactXref");

                entity.HasIndex(e => e.ContactId, "indPrefBusOrgContactXref3Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.EmployeeId, "indPrefBusOrgContactXref4Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.ServiceTypeCdId).HasColumnName("ServiceTypeCdID");

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.PreferredBusOrgContactXrefs)
                    .HasForeignKey(d => d.ContactId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPrefBusOrgContactXref3FK");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.PreferredBusOrgContactXrefs)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPrefBusOrgContactXref2FK");

                entity.HasOne(d => d.ServiceTypeCd)
                    .WithMany(p => p.PreferredBusOrgContactXrefs)
                    .HasForeignKey(d => d.ServiceTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPrefBusOrgContactXref7Fk");
            });

            modelBuilder.Entity<PreferredDocList>(entity =>
            {
                entity.HasKey(e => e.PreferDocListId)
                    .HasName("conPreferredDocList1Pk");

                entity.ToTable("PreferredDocList");

                entity.HasIndex(e => new { e.ClassTypeId, e.PreferDocListEntityId, e.DocTypeCdId }, "indPreferredDocList2")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DocTypeCdId, "indPreferredDocList4Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.PreferDocListId).HasColumnName("PreferDocListID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.DocOriginTypeCdId).HasColumnName("DocOriginTypeCdID");

                entity.Property(e => e.DocTypeCdId).HasColumnName("DocTypeCdID");

                entity.Property(e => e.PreferDocListEntityId).HasColumnName("PreferDocListEntityID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.PreferredDocLists)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPreferDocList2Fk");
            });

            modelBuilder.Entity<PreferredEmployeeContactXref>(entity =>
            {
                entity.HasKey(e => new { e.ServiceTypeCdId, e.BusOrgId, e.EmployeeId })
                    .HasName("conPrefEmplContactXref1Pk");

                entity.ToTable("PreferredEmployeeContactXref");

                entity.HasIndex(e => e.EmployeeId, "indPrefEmplContactXref3Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BusOrgId, "indPrefEmplContactXref4Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.ServiceTypeCdId).HasColumnName("ServiceTypeCdID");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.HasOne(d => d.BusOrg)
                    .WithMany(p => p.PreferredEmployeeContactXrefs)
                    .HasForeignKey(d => d.BusOrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPrefEmplContactXref3FK");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.PreferredEmployeeContactXrefs)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPrefEmplContactXref2Fk");

                entity.HasOne(d => d.ServiceTypeCd)
                    .WithMany(p => p.PreferredEmployeeContactXrefs)
                    .HasForeignKey(d => d.ServiceTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPrefEmplContactXref4Fk");
            });

            modelBuilder.Entity<PreferredPersonXref>(entity =>
            {
                entity.HasKey(e => new { e.ServiceTypeCdId, e.PersonId, e.EmployeeId })
                    .HasName("conPrefPersonXref1Pk");

                entity.ToTable("PreferredPersonXref");

                entity.Property(e => e.ServiceTypeCdId).HasColumnName("ServiceTypeCdID");

                entity.Property(e => e.PersonId).HasColumnName("PersonID");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.PreferredPersonXrefs)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPrefPersonXref2FK");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.PreferredPersonXrefs)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPrefPersonXref3FK");

                entity.HasOne(d => d.ServiceTypeCd)
                    .WithMany(p => p.PreferredPersonXrefs)
                    .HasForeignKey(d => d.ServiceTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPrefPersonXref7Fk");
            });

            modelBuilder.Entity<Principal>(entity =>
            {
                entity.ToTable("Principal");

                entity.HasIndex(e => e.StaticSeqNum, "IDXPrincipalStaticSeqNum")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FormerAddrBookEntryId, "XIF514Principal")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FinancingStatementId, "XIF515Principal")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TrustShortName, "_WA_Sys_TrustShortName_02FC7413")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BusOrgId, "idxPrincipalBusOrg")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.OrgTypeCdId, "indPrincipal2Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SpouseInfoId, "indPrincipal3Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.AddrBookEntryId, "indPrincipal4Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.VestingTypeCdId, "indPrincipal5Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.VestingMaritalStatusTypeCdId, "indPrincipal6Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TypeCdId, "indPrincipal7Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ClassTypeId, "indPrincipal8Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.StateOfIncGeoRegionId, "indPrincipal9Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.PrincipalId).HasColumnName("PrincipalID");

                entity.Property(e => e.AddrBookEntryId).HasColumnName("AddrBookEntryID");

                entity.Property(e => e.AddtlVestingInfo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.EmployedById).HasColumnName("EmployedByID");

                entity.Property(e => e.FinancingStatementId).HasColumnName("FinancingStatementID");

                entity.Property(e => e.FormerAddrBookEntryId).HasColumnName("FormerAddrBookEntryID");

                entity.Property(e => e.LastName1099S)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(3250)
                    .IsUnicode(false);

                entity.Property(e => e.OrgTypeCdId).HasColumnName("OrgTypeCdID");

                entity.Property(e => e.OtherStatesOfResidence)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OtherStatesOfSolePlaceOfBusiness)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RefNum1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RefNum2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Salutation)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Sms1099classificationCdId).HasColumnName("SMS1099ClassificationCdId");

                entity.Property(e => e.SpouseInfoId).HasColumnName("SpouseInfoID");

                entity.Property(e => e.StateOfIncGeoRegionId).HasColumnName("StateOfIncGeoRegionID");

                entity.Property(e => e.StateOfResidence)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StateOfSolePlaceOfBusiness)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TrustDate).HasColumnType("datetime");

                entity.Property(e => e.TrustNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.TrustShortName)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.TypeCdId).HasColumnName("TypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UseAkawithSigFlag).HasColumnName("UseAKAWithSigFlag");

                entity.Property(e => e.Vesting)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.VestingMaritalStatusTypeCdId).HasColumnName("VestingMaritalStatusTypeCdID");

                entity.Property(e => e.VestingTypeCdId).HasColumnName("VestingTypeCdID");

                entity.HasOne(d => d.AddrBookEntry)
                    .WithMany(p => p.PrincipalAddrBookEntries)
                    .HasForeignKey(d => d.AddrBookEntryId)
                    .HasConstraintName("conPrincipal6FK");

                entity.HasOne(d => d.BusOrg)
                    .WithMany(p => p.Principals)
                    .HasForeignKey(d => d.BusOrgId)
                    .HasConstraintName("conPrincipal13FK");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.Principals)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPrincipal2Fk");

                entity.HasOne(d => d.EmployedBy)
                    .WithMany(p => p.Principals)
                    .HasForeignKey(d => d.EmployedById)
                    .HasConstraintName("con1PrincipalEmployedBytFK");

                entity.HasOne(d => d.FormerAddrBookEntry)
                    .WithMany(p => p.PrincipalFormerAddrBookEntries)
                    .HasForeignKey(d => d.FormerAddrBookEntryId)
                    .HasConstraintName("R_559");

                entity.HasOne(d => d.OrgTypeCd)
                    .WithMany(p => p.PrincipalOrgTypeCds)
                    .HasForeignKey(d => d.OrgTypeCdId)
                    .HasConstraintName("conPrincipal10FK");

                entity.HasOne(d => d.Sms1099classificationCd)
                    .WithMany(p => p.PrincipalSms1099classificationCds)
                    .HasForeignKey(d => d.Sms1099classificationCdId)
                    .HasConstraintName("conPrincipal11FK");

                entity.HasOne(d => d.Spouse1099ClassificationCd)
                    .WithMany(p => p.PrincipalSpouse1099ClassificationCds)
                    .HasForeignKey(d => d.Spouse1099ClassificationCdId)
                    .HasConstraintName("conPrincipal12FK");

                entity.HasOne(d => d.SpouseInfo)
                    .WithMany(p => p.PrincipalSpouseInfos)
                    .HasForeignKey(d => d.SpouseInfoId)
                    .HasConstraintName("conPrincipal7FK");

                entity.HasOne(d => d.StateOfIncGeoRegion)
                    .WithMany(p => p.Principals)
                    .HasForeignKey(d => d.StateOfIncGeoRegionId)
                    .HasConstraintName("conPrincipal9FK");

                entity.HasOne(d => d.TypeCd)
                    .WithMany(p => p.PrincipalTypeCds)
                    .HasForeignKey(d => d.TypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPrincipal3Fk");

                entity.HasOne(d => d.VestingMaritalStatusTypeCd)
                    .WithMany(p => p.PrincipalVestingMaritalStatusTypeCds)
                    .HasForeignKey(d => d.VestingMaritalStatusTypeCdId)
                    .HasConstraintName("conPrincipal4Fk");

                entity.HasOne(d => d.VestingTypeCd)
                    .WithMany(p => p.PrincipalVestingTypeCds)
                    .HasForeignKey(d => d.VestingTypeCdId)
                    .HasConstraintName("conPrincipal5Fk");

                entity.HasMany(d => d.PersonalProperties)
                    .WithMany(p => p.Principals)
                    .UsingEntity<Dictionary<string, object>>(
                        "PersonalProperyPrincipalXref",
                        l => l.HasOne<PersonalProperty>().WithMany().HasForeignKey("PersonalPropertyId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__PersonalP__Perso__631CE1C2"),
                        r => r.HasOne<Principal>().WithMany().HasForeignKey("PrincipalId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__PersonalP__Princ__6228BD89"),
                        j =>
                        {
                            j.HasKey("PrincipalId", "PersonalPropertyId").HasName("PK__Personal__47FC276558AD6A56");

                            j.ToTable("PersonalProperyPrincipalXRef");

                            j.HasIndex(new[] { "PersonalPropertyId" }, "PersonalProperyPrincipalXRefIdx");

                            j.IndexerProperty<int>("PrincipalId").HasColumnName("PrincipalID");

                            j.IndexerProperty<int>("PersonalPropertyId").HasColumnName("PersonalPropertyID");
                        });

                entity.HasMany(d => d.Properties)
                    .WithMany(p => p.Principals)
                    .UsingEntity<Dictionary<string, object>>(
                        "RealPropertyPrincipalXref",
                        l => l.HasOne<RealProperty>().WithMany().HasForeignKey("PropertyId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conRealPropertyPrincipalXref2RealPropertyFK"),
                        r => r.HasOne<Principal>().WithMany().HasForeignKey("PrincipalId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conRealPropertyPrincipalXref2PrincipalFK"),
                        j =>
                        {
                            j.HasKey("PrincipalId", "PropertyId").HasName("pk_RealPropertyPrincipalXref");

                            j.ToTable("RealPropertyPrincipalXref");

                            j.HasIndex(new[] { "PropertyId" }, "nclidx0").HasFillFactor(90);

                            j.IndexerProperty<int>("PrincipalId").HasColumnName("PrincipalID");

                            j.IndexerProperty<int>("PropertyId").HasColumnName("PropertyID");
                        });

                entity.HasMany(d => d.ServiceFileFees)
                    .WithMany(p => p.Principals)
                    .UsingEntity<Dictionary<string, object>>(
                        "ServiceFileFeePrincipalXref",
                        l => l.HasOne<ServiceFileFee>().WithMany().HasForeignKey("ServiceFileFeeId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__ServiceFi__Servi__0D131B8E"),
                        r => r.HasOne<Principal>().WithMany().HasForeignKey("PrincipalId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__ServiceFi__Princ__0C1EF755"),
                        j =>
                        {
                            j.HasKey("PrincipalId", "ServiceFileFeeId").HasName("PK__ServiceF__17360829796DD54B");

                            j.ToTable("ServiceFileFeePrincipalXRef");

                            j.HasIndex(new[] { "ServiceFileFeeId" }, "ServiceFileFeePrincipalXRefIdx").HasFillFactor(90);

                            j.IndexerProperty<int>("PrincipalId").HasColumnName("PrincipalID");

                            j.IndexerProperty<int>("ServiceFileFeeId").HasColumnName("ServiceFileFeeID");
                        });
            });

            modelBuilder.Entity<PrincipalAddInfo>(entity =>
            {
                entity.ToTable("PrincipalAddInfo");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.LangPrefOther)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PrincipalId).HasColumnName("PrincipalID");

                entity.Property(e => e.SpouseLangPrefOther)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.PrincipalAddInfos)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Con_LangPref_ClassTypeID");

                entity.HasOne(d => d.LangPrefTypeCd)
                    .WithMany(p => p.PrincipalAddInfoLangPrefTypeCds)
                    .HasForeignKey(d => d.LangPrefTypeCdId)
                    .HasConstraintName("FK_LangPrefTypeCdID");

                entity.HasOne(d => d.Principal)
                    .WithMany(p => p.PrincipalAddInfos)
                    .HasForeignKey(d => d.PrincipalId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LangPref_PrincipalID");

                entity.HasOne(d => d.SpouseLangPrefTypeCd)
                    .WithMany(p => p.PrincipalAddInfoSpouseLangPrefTypeCds)
                    .HasForeignKey(d => d.SpouseLangPrefTypeCdId)
                    .HasConstraintName("FK_SpouseLangPrefTypeCdId");
            });

            modelBuilder.Entity<PrincipalBusEntity>(entity =>
            {
                entity.HasKey(e => e.PrincipalBusEntityById)
                    .HasName("conPrincipalBusEntity1Pk");

                entity.ToTable("PrincipalBusEntity");

                entity.HasIndex(e => e.PrincipalId, "indPrincipalBusEntity3Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.StateOfIncGeoRegionId, "indPrincipalBusEntity6Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.PrincipalBusEntityById).HasColumnName("PrincipalBusEntityByID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.ContactName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.OrgTypeCdId).HasColumnName("OrgTypeCdID");

                entity.Property(e => e.PrincipalId).HasColumnName("PrincipalID");

                entity.Property(e => e.StateOfIncGeoRegionId).HasColumnName("StateOfIncGeoRegionID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.PrincipalBusEntities)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPrincipalBusEntity2FK");

                entity.HasOne(d => d.OrgTypeCd)
                    .WithMany(p => p.PrincipalBusEntities)
                    .HasForeignKey(d => d.OrgTypeCdId)
                    .HasConstraintName("conPrincipalBusEntity4FK");

                entity.HasOne(d => d.Principal)
                    .WithMany(p => p.PrincipalBusEntities)
                    .HasForeignKey(d => d.PrincipalId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPrincipalBusEntity3FK");

                entity.HasOne(d => d.StateOfIncGeoRegion)
                    .WithMany(p => p.PrincipalBusEntities)
                    .HasForeignKey(d => d.StateOfIncGeoRegionId)
                    .HasConstraintName("conBy5FK");

                entity.HasMany(d => d.AuthSignatures)
                    .WithMany(p => p.PrincipalBusEntityBies)
                    .UsingEntity<Dictionary<string, object>>(
                        "PrincipalBusEntityAuthSignXref",
                        l => l.HasOne<AuthSignature>().WithMany().HasForeignKey("AuthSignatureId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conPrincipalBusEntityAuthSignXref3FK"),
                        r => r.HasOne<PrincipalBusEntity>().WithMany().HasForeignKey("PrincipalBusEntityById").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conPrinciaplBusEntityAuthSignXref2FK"),
                        j =>
                        {
                            j.HasKey("PrincipalBusEntityById", "AuthSignatureId").HasName("conPrincipalBusEntityAuthSignXref1Pk");

                            j.ToTable("PrincipalBusEntityAuthSignXref");

                            j.HasIndex(new[] { "AuthSignatureId" }, "indPrincipalBusEntityAuthSignXref3Fk").HasFillFactor(90);

                            j.IndexerProperty<int>("PrincipalBusEntityById").HasColumnName("PrincipalBusEntityByID");

                            j.IndexerProperty<int>("AuthSignatureId").HasColumnName("AuthSignatureID");
                        });
            });

            modelBuilder.Entity<PrincipalNotification>(entity =>
            {
                entity.ToTable("PrincipalNotification");

                entity.HasIndex(e => new { e.ElectronicAddrId, e.NotificationFlag }, "idx_ElectronicAddrIDFlag")
                    .HasFillFactor(90);

                entity.Property(e => e.PrincipalNotificationId).HasColumnName("PrincipalNotificationID");

                entity.Property(e => e.ElectronicAddrId).HasColumnName("ElectronicAddrID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ElectronicAddr)
                    .WithMany(p => p.PrincipalNotifications)
                    .HasForeignKey(d => d.ElectronicAddrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PrincipalNotification");
            });

            modelBuilder.Entity<PrincipalSignature>(entity =>
            {
                entity.ToTable("PrincipalSignature");

                entity.HasIndex(e => new { e.TitleEscrowInfoId, e.PrincipalTypeCdId }, "ixn_PrincipalSignature_1")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.PrincipalSignatureId).HasColumnName("PrincipalSignatureID");

                entity.Property(e => e.PrincipalTypeCdId).HasColumnName("PrincipalTypeCdID");

                entity.Property(e => e.SignatureHtmltext)
                    .IsUnicode(false)
                    .HasColumnName("SignatureHTMLText");

                entity.Property(e => e.TitleEscrowInfoId).HasColumnName("TitleEscrowInfoID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.PrincipalTypeCd)
                    .WithMany(p => p.PrincipalSignatures)
                    .HasForeignKey(d => d.PrincipalTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_PrincipalSignature_FK_1");

                entity.HasOne(d => d.TitleEscrowInfo)
                    .WithMany(p => p.PrincipalSignatures)
                    .HasForeignKey(d => d.TitleEscrowInfoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_PrincipalSignature_FK_2");
            });

            modelBuilder.Entity<PrintParam>(entity =>
            {
                entity.HasKey(e => e.PrintId)
                    .HasName("PK__PrintPar__26C7BA7D0A443702");

                entity.HasIndex(e => e.IsPrinted, "idx_PrintParams_Isprinted")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PrintDate, "idx_PrintParams_PrintDate");

                entity.Property(e => e.GuidValue)
                    .HasMaxLength(2048)
                    .IsUnicode(false);

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.Isdeleted).HasDefaultValueSql("((0))");

                entity.Property(e => e.PrintDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.PrintDetails)
                    .HasMaxLength(2048)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PrintPreference>(entity =>
            {
                entity.HasKey(e => e.PrintPreferencesId)
                    .HasName("PK_PrintPreferencesID2");

                entity.HasIndex(e => e.EmployeeId, "IDX_PrintPreferences_EmpolyeeId")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.LoginName, "Idx_Loginname")
                    .HasFillFactor(90);

                entity.Property(e => e.PrintPreferencesId).HasColumnName("PrintPreferencesID");

                entity.Property(e => e.ChequePreferenceXml)
                    .IsUnicode(false)
                    .HasColumnName("ChequePreferenceXML");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.LocalPrinterXml)
                    .IsUnicode(false)
                    .HasColumnName("LocalPrinterXML");

                entity.Property(e => e.LoginName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UserPreferenceXml)
                    .IsUnicode(false)
                    .HasColumnName("UserPreferenceXML");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.PrintPreferences)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_PrintPreferences_EmployeeId");
            });

            modelBuilder.Entity<ProcessSelectionEventXref>(entity =>
            {
                entity.HasKey(e => new { e.WorkflowTemplateId, e.TriggerEventTypeCdid })
                    .HasName("PKProcessSelectionEventXref")
                    .IsClustered(false);

                entity.ToTable("ProcessSelectionEventXref");

                entity.HasIndex(e => e.WorkflowTemplateId, "CDXProcessSelectionEventXref")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.Property(e => e.WorkflowTemplateId).HasColumnName("WorkflowTemplateID");

                entity.Property(e => e.TriggerEventTypeCdid).HasColumnName("TriggerEventTypeCDID");

                entity.Property(e => e.TriggerEventRuleId).HasColumnName("TriggerEventRuleID");
            });

            modelBuilder.Entity<ProcessTemplateWebCustomerXref>(entity =>
            {
                entity.HasKey(e => e.ProcessTemplateWebCustomerXrefId)
                    .IsClustered(false);

                entity.ToTable("ProcessTemplateWebCustomerXref");

                entity.HasIndex(e => new { e.WorkFlowTemplateId, e.WebCustomerTypeCdId }, "PK_PTWX")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor(90);

                entity.Property(e => e.ProcessTemplateWebCustomerXrefId).HasColumnName("ProcessTemplateWebCustomerXref_ID");

                entity.Property(e => e.WebCustomerTypeCdId).HasColumnName("WebCustomerTypeCdID");

                entity.Property(e => e.WorkFlowTemplateId).HasColumnName("WorkFlowTemplateID");

                entity.HasOne(d => d.WebCustomerTypeCd)
                    .WithMany(p => p.ProcessTemplateWebCustomerXrefs)
                    .HasForeignKey(d => d.WebCustomerTypeCdId)
                    .HasConstraintName("FK__ProcessTe__WebCu__5E44B4BA");

                entity.HasOne(d => d.WorkFlowTemplate)
                    .WithMany(p => p.ProcessTemplateWebCustomerXrefs)
                    .HasForeignKey(d => d.WorkFlowTemplateId)
                    .HasConstraintName("FK__ProcessTe__WorkF__5F38D8F3");
            });

            modelBuilder.Entity<ProcessType>(entity =>
            {
                entity.ToTable("ProcessType");

                entity.HasIndex(e => e.ProcessTypeId, "IdxProcessTypeName")
                    .HasFillFactor(90);

                entity.Property(e => e.ProcessTypeId).HasColumnName("ProcessTypeID");

                entity.Property(e => e.BusinessunitId).HasColumnName("BusinessunitID");

                entity.Property(e => e.CategoryTypeCdid).HasColumnName("CategoryTypeCDID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedUserId).HasColumnName("CreatedUserID");

                entity.Property(e => e.DeActivatedDate).HasColumnType("datetime");

                entity.Property(e => e.LastActivatedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.StatusCd).HasColumnName("StatusCD");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<ProcessTypeRoleTypeMap>(entity =>
            {
                entity.HasKey(e => e.ProcessTypeRoleTypeId)
                    .HasName("XPKProcessTypeRoleTypeMap");

                entity.ToTable("ProcessTypeRoleTypeMap");

                entity.Property(e => e.ProcessTypeRoleTypeId).HasColumnName("ProcessTypeRoleTypeID");

                entity.Property(e => e.ProcessTypeCdId).HasColumnName("ProcessTypeCdID");

                entity.Property(e => e.RoleTypeCdId).HasColumnName("RoleTypeCdID");

                entity.HasOne(d => d.ProcessTypeCd)
                    .WithMany(p => p.ProcessTypeRoleTypeMapProcessTypeCds)
                    .HasForeignKey(d => d.ProcessTypeCdId)
                    .HasConstraintName("R_488");

                entity.HasOne(d => d.RoleTypeCd)
                    .WithMany(p => p.ProcessTypeRoleTypeMapRoleTypeCds)
                    .HasForeignKey(d => d.RoleTypeCdId)
                    .HasConstraintName("R_486");
            });

            modelBuilder.Entity<ProcessedInterfaceTask>(entity =>
            {
                entity.HasKey(e => e.TaskId)
                    .HasName("IDXProcessedInterfaceTasksTaskIdPK");

                entity.Property(e => e.TaskId).ValueGeneratedNever();

                entity.Property(e => e.ProcessedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ProcessedStarterDoc>(entity =>
            {
                entity.ToTable("ProcessedStarterDoc");

                entity.HasIndex(e => e.FileId, "idxProcessedStarterDoc")
                    .HasFillFactor(90);

                entity.Property(e => e.ProcessedStarterDocId).HasColumnName("ProcessedStarterDocID");

                entity.Property(e => e.DateProcessed).HasColumnType("datetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.LoanLiabilityAmount).HasColumnType("money");

                entity.Property(e => e.Message)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OwningOfficeCountyName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OwningOfficeId).HasColumnName("OwningOfficeID");

                entity.Property(e => e.OwningOfficeObjectCd)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PdffileName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PDFFileName");

                entity.Property(e => e.PropertyCountyName)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyStateCd)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TaxNums)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<ProductTypeBusUnitXref>(entity =>
            {
                entity.HasKey(e => new { e.BusinessUnitId, e.ProductTypeCdId });

                entity.ToTable("ProductTypeBusUnitXref");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.ProductTypeCdId).HasColumnName("ProductTypeCdID");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.ProductTypeBusUnitXrefs)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductTypeBusUnitXref_BusinessunitID");

                entity.HasOne(d => d.ProductTypeCd)
                    .WithMany(p => p.ProductTypeBusUnitXrefs)
                    .HasForeignKey(d => d.ProductTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductTypeBusUnitXref_ProductTypeCdID");
            });

            modelBuilder.Entity<Profile>(entity =>
            {
                entity.ToTable("Profile");

                entity.HasIndex(e => new { e.ProfileId, e.HomeRegionId }, "IdxProfile_ProfileIDHomeRegionID_Ix1")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.ProfileId).HasColumnName("ProfileID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.DeActivationDate).HasColumnType("datetime");

                entity.Property(e => e.HomeRegionId).HasColumnName("HomeRegionID");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.ReActivationDate).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdateEmployeeId).HasColumnName("UpdateEmployeeID");

                entity.HasOne(d => d.HomeRegion)
                    .WithMany(p => p.Profiles)
                    .HasForeignKey(d => d.HomeRegionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBusinessUnit_Profile_BusinessUnitID_FK1");
            });

            modelBuilder.Entity<ProfileBusUnitXref>(entity =>
            {
                entity.HasKey(e => new { e.ProfileId, e.BusinessUnitId })
                    .HasName("conProfileBusUnitXrefPK");

                entity.ToTable("ProfileBusUnitXref");

                entity.HasIndex(e => e.BusinessUnitId, "IdxProfileBusUnitXref_BusinessUnitID_Ix2")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ProfileId, "IdxProfileBusUnitXref_ProfileID_Ix1")
                    .HasFillFactor(90);

                entity.Property(e => e.ProfileId).HasColumnName("ProfileID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.ProfileBusUnitXrefs)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBusinessUnit_ProfileBusUnitXref_BusinessUnitID_FK2");

                entity.HasOne(d => d.Profile)
                    .WithMany(p => p.ProfileBusUnitXrefs)
                    .HasForeignKey(d => d.ProfileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conProfile_ProfileBusUnitXref_ProfileID_FK1");

                entity.HasMany(d => d.Roles)
                    .WithMany(p => p.ProfileBusUnitXrefs)
                    .UsingEntity<Dictionary<string, object>>(
                        "ProfileBusUnitRoleXref",
                        l => l.HasOne<Role>().WithMany().HasForeignKey("RoleId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conRole_ProfileBusUnitRoleXref_RoleID_FK2"),
                        r => r.HasOne<ProfileBusUnitXref>().WithMany().HasForeignKey("ProfileId", "BusinessUnitId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conProfileBusUnitXref_ProfileBusUnitRoleXref_FK1"),
                        j =>
                        {
                            j.HasKey("ProfileId", "BusinessUnitId", "RoleId").HasName("conProfileBusUnitRoleXrefPK");

                            j.ToTable("ProfileBusUnitRoleXref");

                            j.HasIndex(new[] { "BusinessUnitId" }, "IdxProfileBusUnitRoleXref_BusinessUnitID_Ix2").HasFillFactor(90);

                            j.HasIndex(new[] { "ProfileId" }, "IdxProfileBusUnitRoleXref_ProfileID_Ix1").HasFillFactor(90);

                            j.HasIndex(new[] { "RoleId" }, "IdxProfileBusUnitRoleXref_RoleID_Ix3").HasFillFactor(90);

                            j.IndexerProperty<int>("ProfileId").HasColumnName("ProfileID");

                            j.IndexerProperty<int>("BusinessUnitId").HasColumnName("BusinessUnitID");

                            j.IndexerProperty<int>("RoleId").HasColumnName("RoleID");
                        });
            });

            modelBuilder.Entity<ProfileChangeHistory>(entity =>
            {
                entity.HasKey(e => e.ChangeId)
                    .HasName("conProfileChangeHistoryPK");

                entity.ToTable("ProfileChangeHistory");

                entity.HasIndex(e => e.ChangeEventId, "IdxProfileChangeHistory_ChangeEventID_Ix2")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ProfileId, "IdxProfileChangeHistory_ProfileID_Ix1")
                    .HasFillFactor(90);

                entity.Property(e => e.ChangeId).HasColumnName("ChangeID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.ChangeEventId).HasColumnName("ChangeEventID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.EventDate).HasColumnType("datetime");

                entity.Property(e => e.ProfileId).HasColumnName("ProfileID");

                entity.Property(e => e.RoleId).HasColumnName("RoleID");

                entity.Property(e => e.TicketNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.ProfileChangeHistories)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .HasConstraintName("conBusinessUnit_ProfileChangeHistory_BusinessUnitID_FK4");

                entity.HasOne(d => d.ChangeEvent)
                    .WithMany(p => p.ProfileChangeHistories)
                    .HasForeignKey(d => d.ChangeEventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conTypeCdDMT_ProfileChangeHistory_ChangeEventID_FK1");

                entity.HasOne(d => d.Profile)
                    .WithMany(p => p.ProfileChangeHistories)
                    .HasForeignKey(d => d.ProfileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conProfile_ProfileChangeHistory_ProfileID_FK3");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.ProfileChangeHistories)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("conRole_ProfileChangeHistory_RoleID_FK2");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ProfileChangeHistories)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conEmployee_ProfileChangeHistory_UserID_FK5");
            });

            modelBuilder.Entity<ProgramType>(entity =>
            {
                entity.ToTable("ProgramType");

                entity.HasIndex(e => new { e.ProgramTypeName, e.BusinessUnitId }, "Unq_ProgramType_Name")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.ProgramTypeId).HasColumnName("ProgramTypeID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.DeactivationDate).HasColumnType("datetime");

                entity.Property(e => e.MaxLiabilityAmount).HasColumnType("money");

                entity.Property(e => e.ProgramTypeName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Reactivationdate).HasColumnType("datetime");

                entity.Property(e => e.StatusCd).HasColumnName("StatusCD");

                entity.Property(e => e.StatusChangeUserId).HasColumnName("StatusChangeUserID");

                entity.Property(e => e.StatusChangedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UpdateEmployeeId).HasColumnName("UpdateEmployeeID");
            });

            modelBuilder.Entity<ProgramTypeBusOrgXref>(entity =>
            {
                entity.ToTable("ProgramTypeBusOrgXref");

                entity.HasIndex(e => new { e.ProgramTypeId, e.BusOrgId }, "ProgramTypeGeographicXRefId")
                    .HasFillFactor(90);

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.MaxLiabilityAmount).HasColumnType("money");

                entity.Property(e => e.ProgramTypeId).HasColumnName("ProgramTypeID");

                entity.HasOne(d => d.BusOrg)
                    .WithMany(p => p.ProgramTypeBusOrgXrefs)
                    .HasForeignKey(d => d.BusOrgId)
                    .HasConstraintName("FK_ProgramTypeBusOrgXref_BusOrgID");

                entity.HasOne(d => d.ProgramType)
                    .WithMany(p => p.ProgramTypeBusOrgXrefs)
                    .HasForeignKey(d => d.ProgramTypeId)
                    .HasConstraintName("FK_ProgramTypeBusOrgXref_ProgramTypeID");
            });

            modelBuilder.Entity<ProgramTypeGeographicXref>(entity =>
            {
                entity.ToTable("ProgramTypeGeographicXRef");

                entity.HasIndex(e => new { e.ProgramTypeId, e.GeoClassTypeCdId, e.GeoRegionId, e.BusOrgId }, "Unq_ProgramTypeGeographicXRef")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.ProgramTypeGeographicXrefId).HasColumnName("ProgramTypeGeographicXRefId");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.GeoClassTypeCdId).HasColumnName("GeoClassTypeCdID");

                entity.Property(e => e.GeoRegionId).HasColumnName("GeoRegionID");

                entity.Property(e => e.ProgramTypeId).HasColumnName("ProgramTypeID");

                entity.HasOne(d => d.BusOrg)
                    .WithMany(p => p.ProgramTypeGeographicXrefs)
                    .HasForeignKey(d => d.BusOrgId)
                    .HasConstraintName("FK_ProgramTypeGeographicXRef_BusOrgID");

                entity.HasOne(d => d.GeoClassTypeCd)
                    .WithMany(p => p.ProgramTypeGeographicXrefs)
                    .HasForeignKey(d => d.GeoClassTypeCdId)
                    .HasConstraintName("FK_ProgramTypeGeographicXRef_GeoClassTypeCdID");

                entity.HasOne(d => d.GeoRegion)
                    .WithMany(p => p.ProgramTypeGeographicXrefs)
                    .HasForeignKey(d => d.GeoRegionId)
                    .HasConstraintName("FK_ProgramTypeGeographicXRef_GeoRegionID");

                entity.HasOne(d => d.ProgramType)
                    .WithMany(p => p.ProgramTypeGeographicXrefs)
                    .HasForeignKey(d => d.ProgramTypeId)
                    .HasConstraintName("FK_ProgramTypeGeographicXRef_ProgramTypeID");
            });

            modelBuilder.Entity<ProgramTypeProductTypeXref>(entity =>
            {
                entity.ToTable("ProgramTypeProductTypeXref");

                entity.HasIndex(e => new { e.ProgramTypeId, e.ProductTypecdId, e.BusOrgId }, "Unq_ProgramTypeProductTypeXref")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.ProductTypecdId).HasColumnName("ProductTypecdID");

                entity.Property(e => e.ProgramTypeId).HasColumnName("ProgramTypeID");

                entity.HasOne(d => d.BusOrg)
                    .WithMany(p => p.ProgramTypeProductTypeXrefs)
                    .HasForeignKey(d => d.BusOrgId)
                    .HasConstraintName("FK_ProgramTypeProductTypeXref_BusOrgID");

                entity.HasOne(d => d.ProductTypecd)
                    .WithMany(p => p.ProgramTypeProductTypeXrefs)
                    .HasForeignKey(d => d.ProductTypecdId)
                    .HasConstraintName("FK_ProgramTypeProductTypeXref_ProductTypecdID");

                entity.HasOne(d => d.ProgramType)
                    .WithMany(p => p.ProgramTypeProductTypeXrefs)
                    .HasForeignKey(d => d.ProgramTypeId)
                    .HasConstraintName("FK_ProgramTypeProductTypeXref_ProgramTypeID");
            });

            modelBuilder.Entity<ProgramTypeSearchInstruction>(entity =>
            {
                entity.HasKey(e => e.SearchInstructionId)
                    .HasName("PK_ProgramTypeSearchInstruction_SearchInstructionID");

                entity.ToTable("ProgramTypeSearchInstruction");

                entity.HasIndex(e => new { e.FileId, e.SearchVendorTypeCdId, e.SearchTypeTypeCdId }, "Unq_ProgramTypeSearchInstruction")
                    .HasFillFactor(90);

                entity.Property(e => e.SearchInstructionId).HasColumnName("SearchInstructionID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.SearchTypeTypeCdId).HasColumnName("SearchTypeTypeCdID");

                entity.Property(e => e.SearchVendorTypeCdId).HasColumnName("SearchVendorTypeCdID");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.ProgramTypeSearchInstructions)
                    .HasForeignKey(d => d.FileId)
                    .HasConstraintName("FK_ProgramTypeSearchInstruction_FileID");

                entity.HasOne(d => d.SearchTypeTypeCd)
                    .WithMany(p => p.ProgramTypeSearchInstructions)
                    .HasForeignKey(d => d.SearchTypeTypeCdId)
                    .HasConstraintName("FK_ProgramTypeSearchInstruction_SearchTypeTypeCdID");

                entity.HasOne(d => d.SearchVendorTypeCd)
                    .WithMany(p => p.ProgramTypeSearchInstructions)
                    .HasForeignKey(d => d.SearchVendorTypeCdId)
                    .HasConstraintName("FK_ProgramTypeSearchInstruction_SearchVendorTypeCdID");
            });

            modelBuilder.Entity<ProgramTypeSearchInstructionXref>(entity =>
            {
                entity.HasKey(e => e.SearchInstructionXrefId)
                    .HasName("PK_SearchInstructionXref_SearchInstructionXrefID");

                entity.ToTable("ProgramTypeSearchInstructionXref");

                entity.HasIndex(e => e.SearchInstructionId, "IDXSearch")
                    .HasFillFactor(90);

                entity.Property(e => e.SearchInstructionXrefId).HasColumnName("SearchInstructionXrefID");

                entity.Property(e => e.InstructionId).HasColumnName("InstructionID");

                entity.Property(e => e.SearchInstructionId).HasColumnName("SearchInstructionID");

                entity.HasOne(d => d.Instruction)
                    .WithMany(p => p.ProgramTypeSearchInstructionXrefs)
                    .HasForeignKey(d => d.InstructionId)
                    .HasConstraintName("FK_SearchInstructionXref_InstructionID");

                entity.HasOne(d => d.SearchInstruction)
                    .WithMany(p => p.ProgramTypeSearchInstructionXrefs)
                    .HasForeignKey(d => d.SearchInstructionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SearchInstructionXref_SearchInstructionID");
            });

            modelBuilder.Entity<ProgramTypeSearchTypeXref>(entity =>
            {
                entity.ToTable("ProgramTypeSearchTypeXref");

                entity.HasIndex(e => new { e.ProgramTypeId, e.SearchTypeCdId, e.BusOrgId }, "Unq_ProgramTypeSearchTypeXref")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.ProgramTypeId).HasColumnName("ProgramTypeID");

                entity.Property(e => e.SearchTypeCdId).HasColumnName("SearchTypeCdID");

                entity.HasOne(d => d.BusOrg)
                    .WithMany(p => p.ProgramTypeSearchTypeXrefs)
                    .HasForeignKey(d => d.BusOrgId)
                    .HasConstraintName("FK_ProgramTypeSearchTypeXref_BusOrgID");

                entity.HasOne(d => d.ProgramType)
                    .WithMany(p => p.ProgramTypeSearchTypeXrefs)
                    .HasForeignKey(d => d.ProgramTypeId)
                    .HasConstraintName("FK_ProgramTypeSearchTypeXref_ProgramTypeID");

                entity.HasOne(d => d.SearchTypeCd)
                    .WithMany(p => p.ProgramTypeSearchTypeXrefs)
                    .HasForeignKey(d => d.SearchTypeCdId)
                    .HasConstraintName("FK_ProgramTypeSearchTypeXref_SearchTypeCdID");
            });

            modelBuilder.Entity<ProgramTypeTransTypeXref>(entity =>
            {
                entity.ToTable("ProgramTypeTransTypeXref");

                entity.HasIndex(e => new { e.ProgramTypeId, e.TransTypecdId, e.BusOrgId }, "Unq_ProgramTypeTransTypeXref")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.ProgramTypeId).HasColumnName("ProgramTypeID");

                entity.Property(e => e.TransTypecdId).HasColumnName("TransTypecdID");

                entity.HasOne(d => d.BusOrg)
                    .WithMany(p => p.ProgramTypeTransTypeXrefs)
                    .HasForeignKey(d => d.BusOrgId)
                    .HasConstraintName("FK_ProgramTypeTransTypeXref_BusOrgID");

                entity.HasOne(d => d.ProgramType)
                    .WithMany(p => p.ProgramTypeTransTypeXrefs)
                    .HasForeignKey(d => d.ProgramTypeId)
                    .HasConstraintName("FK_ProgramTypeTransTypeXref_ProgramTypeID");

                entity.HasOne(d => d.TransTypecd)
                    .WithMany(p => p.ProgramTypeTransTypeXrefs)
                    .HasForeignKey(d => d.TransTypecdId)
                    .HasConstraintName("FK_ProgramTypeTransTypeXref_TransTypecdID");
            });

            modelBuilder.Entity<ProjectFilePwbfeatureXref>(entity =>
            {
                entity.ToTable("ProjectFilePWBFeatureXref");

                entity.HasIndex(e => e.PwbfeatureId, "IdxProjectFilePWBFeatureXrefPWBFeatureID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ProjectFileId, "IdxUQProjectFilePWBFeatureXrefProjectFileID")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.ProjectFilePwbfeatureXrefId).HasColumnName("ProjectFilePWBFeatureXrefID");

                entity.Property(e => e.ProjectFileId).HasColumnName("ProjectFileID");

                entity.Property(e => e.PwbfeatureId).HasColumnName("PWBFeatureID");

                entity.HasOne(d => d.ProjectFile)
                    .WithOne(p => p.ProjectFilePwbfeatureXref)
                    .HasForeignKey<ProjectFilePwbfeatureXref>(d => d.ProjectFileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPFPWBProjectFileID");

                entity.HasOne(d => d.Pwbfeature)
                    .WithMany(p => p.ProjectFilePwbfeatureXrefs)
                    .HasForeignKey(d => d.PwbfeatureId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPFPWBFeatureID");
            });

            modelBuilder.Entity<ProjectFileSalePriceLiabilityXref>(entity =>
            {
                entity.ToTable("ProjectFileSalePriceLiabilityXref");

                entity.HasIndex(e => e.ProjectFileId, "idxNCPFSPLXProjectFileID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TypeCdId, "idxNCPFSPLXTypeCdID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ProjectFileId, e.TypeCdId }, "idxUQPFSPLXProjectFileIDTypeCdID")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.ProjectFileSalePriceLiabilityXrefId).HasColumnName("ProjectFileSalePriceLiabilityXrefID");

                entity.Property(e => e.ProjectFileId).HasColumnName("ProjectFileID");

                entity.Property(e => e.TypeCdId).HasColumnName("TypeCdID");

                entity.HasOne(d => d.ProjectFile)
                    .WithMany(p => p.ProjectFileSalePriceLiabilityXrefs)
                    .HasForeignKey(d => d.ProjectFileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPFSPLXProjectFileID");

                entity.HasOne(d => d.TypeCd)
                    .WithMany(p => p.ProjectFileSalePriceLiabilityXrefs)
                    .HasForeignKey(d => d.TypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPFSPLXTypeCdID");
            });

            modelBuilder.Entity<ProjectFileSiteFileChargeXref>(entity =>
            {
                entity.ToTable("ProjectFileSiteFileChargeXref");

                entity.HasIndex(e => e.PfchargeId, "idxNCPFSFChargeXPFChargeID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SfchargeId, "idxNCPFSFChargeXSFChargeID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.PfchargeId, e.SfchargeId }, "idxUQPFSFChargeXPFSFChargeID")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.ProjectFileSiteFileChargeXrefId).HasColumnName("ProjectFileSiteFileChargeXrefID");

                entity.Property(e => e.PfchargeId).HasColumnName("PFChargeID");

                entity.Property(e => e.SfbuyerChargePercent)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("SFBuyerChargePercent");

                entity.Property(e => e.SfbuyerCreditPercent)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("SFBuyerCreditPercent");

                entity.Property(e => e.SfchargeId).HasColumnName("SFChargeID");

                entity.Property(e => e.SffileChargePercent)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("SFFileChargePercent");

                entity.Property(e => e.SfsellerChargePercent)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("SFSellerChargePercent");

                entity.Property(e => e.SfsellerCreditPercent)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("SFSellerCreditPercent");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.Pfcharge)
                    .WithMany(p => p.ProjectFileSiteFileChargeXrefPfcharges)
                    .HasForeignKey(d => d.PfchargeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPFChargeIDFK");

                entity.HasOne(d => d.Sfcharge)
                    .WithMany(p => p.ProjectFileSiteFileChargeXrefSfcharges)
                    .HasForeignKey(d => d.SfchargeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conSFChargeIDFK");
            });

            modelBuilder.Entity<ProjectFileSiteFileDepositXref>(entity =>
            {
                entity.ToTable("ProjectFileSiteFileDepositXref");

                entity.HasIndex(e => new { e.PfinEscrowId, e.SfinEscrowId }, "IX_NC_PFInEscrowID_SFInEscrowID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SfinEscrowId, "IX_NC_SFInEscrowID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PfinEscrowId, "idxNCProjectFileSiteFileDepositXref_PFInEscrowID")
                    .HasFillFactor(90);

                entity.Property(e => e.AllocatedPct)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("AllocatedPCT");

                entity.Property(e => e.PfinEscrowId).HasColumnName("PFInEscrowID");

                entity.Property(e => e.SfinEscrowId).HasColumnName("SFInEscrowID");

                entity.HasOne(d => d.PfinEscrow)
                    .WithMany(p => p.ProjectFileSiteFileDepositXrefPfinEscrows)
                    .HasForeignKey(d => d.PfinEscrowId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProjectFileInEscrowID_InEscrowDeposit");

                entity.HasOne(d => d.SfinEscrow)
                    .WithMany(p => p.ProjectFileSiteFileDepositXrefSfinEscrows)
                    .HasForeignKey(d => d.SfinEscrowId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SiteFileInEscrowID_InEscrowDeposit");
            });

            modelBuilder.Entity<ProjectFileSiteFileFbpxref>(entity =>
            {
                entity.ToTable("ProjectFileSiteFileFBPXref");

                entity.HasIndex(e => e.PffileBusinessPartyId, "idxNCPFSFFBPXPFFBPID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SffileBusinessPartyId, "idxUQPFSFFBPXSFFBP")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.ProjectFileSiteFileFbpxrefId).HasColumnName("ProjectFileSiteFileFBPXrefID");

                entity.Property(e => e.PffileBusinessPartyId).HasColumnName("PFFileBusinessPartyID");

                entity.Property(e => e.SffileBusinessPartyId).HasColumnName("SFFileBusinessPartyID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.PffileBusinessParty)
                    .WithMany(p => p.ProjectFileSiteFileFbpxrefPffileBusinessParties)
                    .HasForeignKey(d => d.PffileBusinessPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPFFileBusinessPartyIDFK");

                entity.HasOne(d => d.SffileBusinessParty)
                    .WithOne(p => p.ProjectFileSiteFileFbpxrefSffileBusinessParty)
                    .HasForeignKey<ProjectFileSiteFileFbpxref>(d => d.SffileBusinessPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conSFFileBusinessPartyIDFK");
            });

            modelBuilder.Entity<ProjectFileSiteFileProcessXref>(entity =>
            {
                entity.ToTable("ProjectFileSiteFileProcessXref");

                entity.HasIndex(e => e.PffileProcessId, "Idx_ProjectFileSiteFileProcessXrefID_PFFileProcessID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SffileProcessId, "Idx_ProjectFileSiteFileProcessXref_SFFileProcessID")
                    .HasFillFactor(90);

                entity.Property(e => e.ProjectFileSiteFileProcessXrefId).HasColumnName("ProjectFileSiteFileProcessXrefID");

                entity.Property(e => e.PffileProcessId).HasColumnName("PFFileProcessID");

                entity.Property(e => e.SffileProcessId).HasColumnName("SFFileProcessID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.PffileProcess)
                    .WithMany(p => p.ProjectFileSiteFileProcessXrefPffileProcesses)
                    .HasForeignKey(d => d.PffileProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPFFileProcessIDFK");

                entity.HasOne(d => d.SffileProcess)
                    .WithMany(p => p.ProjectFileSiteFileProcessXrefSffileProcesses)
                    .HasForeignKey(d => d.SffileProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conSFFileProcessIDFK");
            });

            modelBuilder.Entity<ProjectFileSiteFileServiceFileFeeXref>(entity =>
            {
                entity.ToTable("ProjectFileSiteFileServiceFileFeeXref");

                entity.HasIndex(e => e.FaccgroupId, "idxFACCGroupID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PfserviceFileFeeId, "idxNCPFSFSFFXPFServiceFileFeeID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.PfserviceFileFeeId, e.SfserviceFileFeeId }, "idxNCPFSFSFFXPFServiceFileFeeID_SFServiceFileFeeID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SfserviceFileFeeId, "idxNCPFSFSFFXSFServiceFileFeeID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ServiceFileSubFeeId, "idxPFSFSFFServiceFileSubFeeID")
                    .HasFillFactor(90);

                entity.Property(e => e.ProjectFileSiteFileServiceFileFeeXrefId).HasColumnName("ProjectFileSiteFileServiceFileFeeXrefID");

                entity.Property(e => e.FaccgroupId).HasColumnName("FACCGroupID");

                entity.Property(e => e.PfserviceFileFeeId).HasColumnName("PFServiceFileFeeID");

                entity.Property(e => e.ServiceFileSubFeeId).HasColumnName("ServiceFileSubFeeID");

                entity.Property(e => e.SfbuyerChargePercent)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("SFBuyerChargePercent");

                entity.Property(e => e.SfsellerChargePercent)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("SFSellerChargePercent");

                entity.Property(e => e.SfserviceFileFeeId).HasColumnName("SFServiceFileFeeID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.PfserviceFileFee)
                    .WithMany(p => p.ProjectFileSiteFileServiceFileFeeXrefPfserviceFileFees)
                    .HasForeignKey(d => d.PfserviceFileFeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPFServiceFileFeeIDFK");

                entity.HasOne(d => d.ServiceFileSubFee)
                    .WithMany(p => p.ProjectFileSiteFileServiceFileFeeXrefs)
                    .HasForeignKey(d => d.ServiceFileSubFeeId)
                    .HasConstraintName("conPFSFSFFServiceFileSubFeeID");

                entity.HasOne(d => d.SfserviceFileFee)
                    .WithMany(p => p.ProjectFileSiteFileServiceFileFeeXrefSfserviceFileFees)
                    .HasForeignKey(d => d.SfserviceFileFeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conSFServiceFileFeeIDFK");
            });

            modelBuilder.Entity<PropertyCollateral>(entity =>
            {
                entity.HasKey(e => e.CollateralId);

                entity.ToTable("PropertyCollateral");

                entity.HasIndex(e => e.ObjectCd, "PropertyCollateralObjectCdIdx")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TitleEscrowInfoId, "indPropertyCollateral1FK")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TextId, "indPropertyCollateral2FK")
                    .HasFillFactor(90);

                entity.Property(e => e.CollateralId).HasColumnName("CollateralID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.Apn)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("APN");

                entity.Property(e => e.City)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.CollateralTypeCd).HasColumnName("CollateralTypeCD");

                entity.Property(e => e.County)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.HolderInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.HolderLocation)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.HolderName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Intermediary)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InvestmentNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InvestmentUnits)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.OriginDate).HasColumnType("datetime");

                entity.Property(e => e.Originator)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.StreetAddress)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.TextId).HasColumnName("TextID");

                entity.Property(e => e.TitleEscrowInfoId).HasColumnName("TitleEscrowInfoID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.TitleEscrowInfo)
                    .WithMany(p => p.PropertyCollaterals)
                    .HasForeignKey(d => d.TitleEscrowInfoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conPropertyCollateral1FK");
            });

            modelBuilder.Entity<PropertyFsresponseDatum>(entity =>
            {
                entity.HasKey(e => e.PropertyFsresponseDataId)
                    .HasName("PK_PropertyFSResponseDataID");

                entity.ToTable("PropertyFSResponseData");

                entity.HasIndex(e => new { e.PropertyId, e.TaxId }, "IX_PropertyFSResponseData_PropertyID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TaxId, "IX_PropertyFSResponseData_TaxID")
                    .HasFillFactor(90);

                entity.Property(e => e.PropertyFsresponseDataId).HasColumnName("PropertyFSResponseDataID");

                entity.Property(e => e.FsresponseData)
                    .IsUnicode(false)
                    .HasColumnName("FSResponseData");

                entity.Property(e => e.PropertyId).HasColumnName("PropertyID");

                entity.Property(e => e.TaxId).HasColumnName("TaxID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.Property)
                    .WithMany(p => p.PropertyFsresponseData)
                    .HasForeignKey(d => d.PropertyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PropertyFSResponseDataPropertyID");
            });

            modelBuilder.Entity<PropertySearchEventLog>(entity =>
            {
                entity.HasKey(e => e.EventLogId);

                entity.ToTable("PropertySearchEventLog");

                entity.Property(e => e.EventLogId)
                    .ValueGeneratedNever()
                    .HasColumnName("EventLogID");

                entity.Property(e => e.ApplContext)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.DocDeliveryId)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("DocDeliveryID");

                entity.Property(e => e.ErrorMsg)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.EventEndDate).HasColumnType("datetime");

                entity.Property(e => e.EventSourceClassTypeId).HasColumnName("EventSourceClassTypeID");

                entity.Property(e => e.EventSourceId).HasColumnName("EventSourceID");

                entity.Property(e => e.EventStartDate).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.ScheduleDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SuperEventLogId).HasColumnName("SuperEventLogID");

                entity.Property(e => e.UpdSourceClassTypeId).HasColumnName("UpdSourceClassTypeID");

                entity.Property(e => e.UpdSourceId).HasColumnName("UpdSourceID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<PurgeDetail>(entity =>
            {
                entity.Property(e => e.LastPurgeBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastPurgeTimeStamp).HasColumnType("datetime");

                entity.Property(e => e.TableName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TimeStampColName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Pwbfaccgroup>(entity =>
            {
                entity.ToTable("PWBFACCGroup");

                entity.Property(e => e.PwbfaccgroupId).HasColumnName("PWBFACCGroupID");
            });

            modelBuilder.Entity<Pwbfeature>(entity =>
            {
                entity.ToTable("PWBFeature");

                entity.HasIndex(e => e.StatusId, "IdxPWBFeatureStatusID")
                    .HasFillFactor(90);

                entity.Property(e => e.PwbfeatureId)
                    .ValueGeneratedNever()
                    .HasColumnName("PWBFeatureID");

                entity.Property(e => e.FeatureDescription)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.RollOutDate).HasColumnType("datetime");

                entity.Property(e => e.StatusId).HasColumnName("StatusID");
            });

            modelBuilder.Entity<Pwdchanger>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PWDChanger");

                entity.Property(e => e.ConfigId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ConfigID");

                entity.Property(e => e.ConfigName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ConfigXml).HasColumnName("ConfigXML");
            });

            modelBuilder.Entity<QcclosingInfo>(entity =>
            {
                entity.HasKey(e => e.FileProcessId)
                    .HasName("conQCClosingInfoPk");

                entity.ToTable("QCClosingInfo");

                entity.Property(e => e.FileProcessId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileProcessID");

                entity.Property(e => e.AppraisedValue).HasColumnType("money");

                entity.Property(e => e.GovtProgramTypeCdId).HasColumnName("GovtProgramTypeCdID");

                entity.Property(e => e.InvestorNameTypeCdId).HasColumnName("InvestorNameTypeCdID");

                entity.Property(e => e.LoanIntTypeCdId).HasColumnName("LoanIntTypeCdID");

                entity.Property(e => e.OccupancyTypeCdId).HasColumnName("OccupancyTypeCdID");

                entity.Property(e => e.Piggyback2Hud1flag).HasColumnName("Piggyback2HUD1Flag");

                entity.Property(e => e.SecLienInfoTypeCdId).HasColumnName("SecLienInfoTypeCdID");

                entity.Property(e => e.SecLienRecordedDate).HasColumnType("date");

                entity.Property(e => e.SourceOfFundsTypeCdId).HasColumnName("SourceOfFundsTypeCdID");

                entity.Property(e => e.SplInvProductNameTypeCdId).HasColumnName("SplInvProductNameTypeCdID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.FileProcess)
                    .WithOne(p => p.QcclosingInfo)
                    .HasForeignKey<QcclosingInfo>(d => d.FileProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con_FileProcess_FK");
            });

            modelBuilder.Entity<Qcstaging>(entity =>
            {
                entity.ToTable("QCStaging");

                entity.HasIndex(e => e.FileId, "indQCStagingFileID")
                    .HasFillFactor(90);

                entity.Property(e => e.QcstagingId).HasColumnName("QCStagingID");

                entity.Property(e => e.AppId).HasColumnName("AppID");

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.LoanCommentsXml).HasColumnType("xml");

                entity.Property(e => e.MismotypeCdId).HasColumnName("MISMOTypeCdID");

                entity.Property(e => e.QcstatusCdId).HasColumnName("QCStatusCdID");

                entity.Property(e => e.RequestDate).HasColumnType("datetime");

                entity.Property(e => e.RequestXml).HasColumnType("xml");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.App)
                    .WithMany(p => p.Qcstagings)
                    .HasForeignKey(d => d.AppId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conQCStagingAppIDFK");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.Qcstagings)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conQCStagingFileIDFK");

                entity.HasOne(d => d.MismotypeCd)
                    .WithMany(p => p.QcstagingMismotypeCds)
                    .HasForeignKey(d => d.MismotypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conQCStagingMISMOTypeCdIDFK");

                entity.HasOne(d => d.QcstatusCd)
                    .WithMany(p => p.QcstagingQcstatusCds)
                    .HasForeignKey(d => d.QcstatusCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conQCStagingQCStatusCdIDFK");
            });

            modelBuilder.Entity<QcstagingSectionCharge>(entity =>
            {
                entity.ToTable("QCStagingSectionCharges");

                entity.HasIndex(e => e.QcstagingId, "IX_QCStagingSectionCharges_QCStagingID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.QcstagingSectionXrefId, "IX_QCStagingSectionCharges_QCStagingSectionXrefID")
                    .HasFillFactor(90);

                entity.Property(e => e.QcstagingSectionChargeId).HasColumnName("QCStagingSectionChargeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.FeeId).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProcessedDate).HasColumnType("datetime");

                entity.Property(e => e.QcstagingId).HasColumnName("QCStagingID");

                entity.Property(e => e.QcstagingSectionXrefId).HasColumnName("QCStagingSectionXrefID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.Qcstaging)
                    .WithMany(p => p.QcstagingSectionCharges)
                    .HasForeignKey(d => d.QcstagingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conQCStagingSectionChargeQCStagingIDFK");

                entity.HasOne(d => d.QcstagingSectionXref)
                    .WithMany(p => p.QcstagingSectionCharges)
                    .HasForeignKey(d => d.QcstagingSectionXrefId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conQCStagingSectionChargeQCXrefIDFK");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.QcstagingSectionCharges)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conQCStagingSectionChargeUserIDFK");
            });

            modelBuilder.Entity<QcstagingSectionXref>(entity =>
            {
                entity.ToTable("QCStagingSectionXref");

                entity.HasIndex(e => e.QcstagingId, "IX_QCStagingSectionXref_QCStagingID")
                    .HasFillFactor(90);

                entity.Property(e => e.QcstagingSectionXrefId).HasColumnName("QCStagingSectionXrefID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.CommentsSentDate).HasColumnType("datetime");

                entity.Property(e => e.CommentsSentStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProcessedDate).HasColumnType("datetime");

                entity.Property(e => e.QcstagingId).HasColumnName("QCStagingID");

                entity.Property(e => e.SectionTypeCdId).HasColumnName("SectionTypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.Qcstaging)
                    .WithMany(p => p.QcstagingSectionXrefs)
                    .HasForeignKey(d => d.QcstagingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conQCStagingSectionXrefQCStagingIDFK");

                entity.HasOne(d => d.SectionTypeCd)
                    .WithMany(p => p.QcstagingSectionXrefs)
                    .HasForeignKey(d => d.SectionTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conQCStagingSectionXrefSectionTypeCdIDFK");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.QcstagingSectionXrefs)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conQCStagingSectionXrefUserIDFK");
            });

            modelBuilder.Entity<QueueTransactionCoordinator>(entity =>
            {
                entity.ToTable("QueueTransactionCoordinator");

                entity.Property(e => e.QueueTransactionCoordinatorId).HasColumnName("QueueTransactionCoordinator_ID");

                entity.Property(e => e.FilebusinesspartyId).HasColumnName("FilebusinesspartyID");
            });

            modelBuilder.Entity<RateType>(entity =>
            {
                entity.ToTable("RateType");

                entity.HasIndex(e => e.ObjectCd, "IDXRateTypeObjectCd")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.Descr)
                    .HasMaxLength(140)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<RateTypeStateXref>(entity =>
            {
                entity.HasKey(e => new { e.RateTypeId, e.StateCd })
                    .HasName("RateTypeConstraint");

                entity.ToTable("RateTypeStateXref");

                entity.Property(e => e.StateCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RdarchivedFileTemp>(entity =>
            {
                entity.HasKey(e => e.Fileid)
                    .HasName("PK__RDArchiv__C2C7C24453DA178B");

                entity.ToTable("RDArchivedFile_Temp");

                entity.Property(e => e.Fileid)
                    .ValueGeneratedNever()
                    .HasColumnName("fileid");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DocArchivedDate).HasColumnType("datetime");

                entity.Property(e => e.RunDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<RealEstateBrokerSummary>(entity =>
            {
                entity.ToTable("RealEstateBrokerSummary");

                entity.HasIndex(e => e.FileId, "RealEstateBrokerSummary_UniqueKey_FileID")
                    .IsUnique();

                entity.Property(e => e.RealEstateBrokerSummaryId).HasColumnName("RealEstateBrokerSummaryID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.HasOne(d => d.File)
                    .WithOne(p => p.RealEstateBrokerSummary)
                    .HasForeignKey<RealEstateBrokerSummary>(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RealEstateBrokerSummary_ForeignKey_FileID");
            });

            modelBuilder.Entity<RealProperty>(entity =>
            {
                entity.HasKey(e => e.PropertyId)
                    .HasName("conRealProperty1Pk");

                entity.ToTable("RealProperty");

                entity.HasIndex(e => e.StaticSeqNum, "IDXRPropertyStaticSeqNum")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TitleInsuranceMortgageTextId, "idxRealProperty_TitleInsuranceMortgageTextID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ShortLegalDescrId, "indRealProperty2Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FullLegalDescrId, "indRealProperty3Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PhraseId, "indRealProperty6Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TitleVestingTextId, "indRealProperty9Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.PropertyId).HasColumnName("PropertyID");

                entity.Property(e => e.AddtlSectionalDetail)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AmendUpdateDetails)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Block)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Book)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Borough)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Building)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Condominium)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EregFlag).HasColumnName("ERegFlag");

                entity.Property(e => e.EstateInterest)
                    .HasMaxLength(3000)
                    .IsUnicode(false);

                entity.Property(e => e.EstateTypeCdId).HasColumnName("EstateTypeCdID");

                entity.Property(e => e.ExternalSourceTitleMortgagee)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ExternalSourceVesting)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Fee)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FsshortLegalDescFlag).HasColumnName("FSShortLegalDescFlag");

                entity.Property(e => e.FullLegalDescrId).HasColumnName("FullLegalDescrID");

                entity.Property(e => e.GovernmentLotNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Lot)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MapDate).HasColumnType("datetime");

                entity.Property(e => e.MapNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Page)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Parcel)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Parish)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Phase)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PhraseDocPrepId).HasColumnName("Phrase_DocPrepId");

                entity.Property(e => e.PhraseId).HasColumnName("PhraseID");

                entity.Property(e => e.PlantEffectiveDate).HasColumnType("datetime");

                entity.Property(e => e.PropertyOwnerAddress)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyTypeCdId).HasColumnName("PropertyTypeCdID");

                entity.Property(e => e.Province)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Range)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Section)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ShortLegalDescrId).HasColumnName("ShortLegalDescrID");

                entity.Property(e => e.SubdivisionName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SubtractName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TitleInsuranceMortgageTextId).HasColumnName("TitleInsuranceMortgageTextID");

                entity.Property(e => e.TitleVestingTextId).HasColumnName("TitleVestingTextID");

                entity.Property(e => e.Township)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TractNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Unit)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.RealProperties)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conRealProperty7Fk");

                entity.HasOne(d => d.EstateTypeCd)
                    .WithMany(p => p.RealPropertyEstateTypeCds)
                    .HasForeignKey(d => d.EstateTypeCdId)
                    .HasConstraintName("conRealProperty11Fk");

                entity.HasOne(d => d.Phrase)
                    .WithMany(p => p.RealProperties)
                    .HasForeignKey(d => d.PhraseId)
                    .HasConstraintName("conRealProperty5Fk");

                entity.HasOne(d => d.PropertyTypeCd)
                    .WithMany(p => p.RealPropertyPropertyTypeCds)
                    .HasForeignKey(d => d.PropertyTypeCdId)
                    .HasConstraintName("conRealProperty6Fk");

                entity.HasMany(d => d.PhysicalAddrs)
                    .WithMany(p => p.Properties)
                    .UsingEntity<Dictionary<string, object>>(
                        "PropertyAddrXref",
                        l => l.HasOne<PhysicalAddr>().WithMany().HasForeignKey("PhysicalAddrId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conPropertyAddrXref2FK"),
                        r => r.HasOne<RealProperty>().WithMany().HasForeignKey("PropertyId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conPropertyAddrXref3FK"),
                        j =>
                        {
                            j.HasKey("PropertyId", "PhysicalAddrId").HasName("conPropertyAddrXref1Pk");

                            j.ToTable("PropertyAddrXref");

                            j.HasIndex(new[] { "PhysicalAddrId" }, "indPropertyAddrXref2Fk").HasFillFactor(90);

                            j.IndexerProperty<int>("PropertyId").HasColumnName("PropertyID");

                            j.IndexerProperty<int>("PhysicalAddrId").HasColumnName("PhysicalAddrID");
                        });
            });

            modelBuilder.Entity<RealPropertyCloud>(entity =>
            {
                entity.HasKey(e => e.DocId)
                    .HasName("PK__RealProp__3EF1888D8C43E617");

                entity.ToTable("RealProperty_Cloud");

                entity.Property(e => e.DocId)
                    .ValueGeneratedNever()
                    .HasColumnName("DocID");

                entity.Property(e => e.NgDocId).HasColumnName("NG_DocID");
            });

            modelBuilder.Entity<RealTimeMailDetail>(entity =>
            {
                entity.ToTable("RealTimeMailDetail");

                entity.Property(e => e.RealTimeMailDetailId).HasColumnName("RealTimeMailDetailID");

                entity.Property(e => e.Delivery)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PackageType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Tabs)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RebrokerInfo>(entity =>
            {
                entity.HasKey(e => e.FileProcessId)
                    .HasName("XPKREBrokerInfo");

                entity.ToTable("REBrokerInfo");

                entity.HasIndex(e => e.ReagentId, "XIF52REBrokerInfo")
                    .HasFillFactor(90);

                entity.Property(e => e.FileProcessId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileProcessID");

                entity.Property(e => e.CommissionAmount).HasColumnType("money");

                entity.Property(e => e.CommissionPercent).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.CreditToBuyerAmt).HasColumnType("money");

                entity.Property(e => e.CreditToBuyerBrokerAmt).HasColumnType("money");

                entity.Property(e => e.CreditToSellerAmt).HasColumnType("money");

                entity.Property(e => e.CreditToSellerBrokerAmt).HasColumnType("money");

                entity.Property(e => e.ReagentId).HasColumnName("REAgentID");

                entity.HasOne(d => d.FileProcess)
                    .WithOne(p => p.RebrokerInfo)
                    .HasForeignKey<RebrokerInfo>(d => d.FileProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("R_431");

                entity.HasOne(d => d.Reagent)
                    .WithMany(p => p.RebrokerInfos)
                    .HasForeignKey(d => d.ReagentId)
                    .HasConstraintName("R_432");
            });

            modelBuilder.Entity<RecordDocument>(entity =>
            {
                entity.HasKey(e => e.RecordDocId)
                    .HasName("conRecordDocument1Pk");

                entity.ToTable("RecordDocument");

                entity.HasIndex(e => new { e.ClassTypeId, e.AddrBookEntryId, e.BusOrgId, e.InstrumentNumber }, "indRecordDocument2")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.AddrBookEntryId, "indRecordDocument3Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BusOrgId, "indRecordDocument5Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TrustorId, "indRecordDocument6Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.RecordDocId).HasColumnName("RecordDocID");

                entity.Property(e => e.AddrBookEntryId).HasColumnName("AddrBookEntryID");

                entity.Property(e => e.AssigneeBeneficiaryName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.InstrumentNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrigBeneficiaryName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RecordedBook)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RecordedBookPageNum)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RecordedDate).HasColumnType("datetime");

                entity.Property(e => e.TrustDeedDate).HasColumnType("datetime");

                entity.Property(e => e.TrustorId).HasColumnName("TrustorID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.AddrBookEntry)
                    .WithMany(p => p.RecordDocuments)
                    .HasForeignKey(d => d.AddrBookEntryId)
                    .HasConstraintName("conRecordingDocument2FK");

                entity.HasOne(d => d.BusOrg)
                    .WithMany(p => p.RecordDocuments)
                    .HasForeignKey(d => d.BusOrgId)
                    .HasConstraintName("conRecordingDocument4FK");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.RecordDocuments)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conRecordDoc5Fk");
            });

            modelBuilder.Entity<RecordedDocDetail>(entity =>
            {
                entity.ToTable("RecordedDocDetail");

                entity.HasIndex(e => e.FileId, "RecordedDocDetail_ncx_FileId")
                    .HasFillFactor(90);

                entity.Property(e => e.RecordedDocDetailId).HasColumnName("RecordedDocDetailID");

                entity.Property(e => e.CountyFipscd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CountyFIPSCd");

                entity.Property(e => e.CountyName)
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.EreferenceId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EReferenceID");

                entity.Property(e => e.ErequestId).HasColumnName("ERequestID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.RecordedDocTypeId).HasColumnName("RecordedDocTypeID");

                entity.Property(e => e.RecordedDocTypeName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RecordedDocTypeRange)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RecordingInfo1)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RecordingInfo1Value)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.RecordingInfo2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RecordingInfo2Value)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.RecordingInfo3)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RecordingInfo3Value)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.RecordingInfo4)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RecordingInfo4Value)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.RequiredFieldFlag)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.StateFipscd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("StateFIPSCd");

                entity.Property(e => e.StateName)
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.StatusChangedDate).HasColumnType("datetime");

                entity.Property(e => e.VendorTypeCdId).HasColumnName("VendorTypeCdID");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.RecordedDocDetails)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RecordedDocDetail_ServiceFile");

                entity.HasOne(d => d.VendorTypeCd)
                    .WithMany(p => p.RecordedDocDetails)
                    .HasForeignKey(d => d.VendorTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RecordedDocDetail_TypeCdDmt2");
            });

            modelBuilder.Entity<RecordedDocEventLog>(entity =>
            {
                entity.HasKey(e => new { e.EventLogId, e.FileId })
                    .HasName("PK_RecordedDocEventlogXKeyID");

                entity.ToTable("RecordedDocEventLog");

                entity.HasIndex(e => new { e.FileId, e.EventId }, "EventId_IDXRDL")
                    .HasFillFactor(90);

                entity.Property(e => e.EventLogId).HasColumnName("EventLogID");

                entity.Property(e => e.FileId)
                    .HasColumnName("FileID")
                    .HasDefaultValueSql("((1000))");

                entity.Property(e => e.ApplContext)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.DocDeliveryId)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("DocDeliveryID");

                entity.Property(e => e.ErrorMsg)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.EventEndDate).HasColumnType("datetime");

                entity.Property(e => e.EventSourceClassTypeId).HasColumnName("EventSourceClassTypeID");

                entity.Property(e => e.EventSourceId).HasColumnName("EventSourceID");

                entity.Property(e => e.EventStartDate).HasColumnType("datetime");

                entity.Property(e => e.ScheduleDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SuperEventLogId).HasColumnName("SuperEventLogID");

                entity.Property(e => e.UpdSourceClassTypeId).HasColumnName("UpdSourceClassTypeID");

                entity.Property(e => e.UpdSourceId).HasColumnName("UpdSourceID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.RecordedDocEventLogClassTypes)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conRecordedDocEventLog5Fk");

                entity.HasOne(d => d.Event)
                    .WithMany(p => p.RecordedDocEventLogs)
                    .HasForeignKey(d => d.EventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conRecordedDocEventLog2Fk");

                entity.HasOne(d => d.EventSourceClassType)
                    .WithMany(p => p.RecordedDocEventLogEventSourceClassTypes)
                    .HasForeignKey(d => d.EventSourceClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conRecordedDocEventLog4Fk");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.RecordedDocEventLogs)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conRecordedDocEventLog7Fk");

                entity.HasOne(d => d.SuperEventLog)
                    .WithMany(p => p.RecordedDocEventLogs)
                    .HasForeignKey(d => d.SuperEventLogId)
                    .HasConstraintName("conRecordedDocEventLog3R");

                entity.HasOne(d => d.UpdSourceClassType)
                    .WithMany(p => p.RecordedDocEventLogUpdSourceClassTypes)
                    .HasForeignKey(d => d.UpdSourceClassTypeId)
                    .HasConstraintName("conRecordedDocEventLog6FK");
            });

            modelBuilder.Entity<RecordingEventLog>(entity =>
            {
                entity.ToTable("RecordingEventLog");

                entity.HasIndex(e => e.EventId, "idx_RecordingEventLog_EventId")
                    .HasFillFactor(90);

                entity.Property(e => e.RecordingEventLogId)
                    .ValueGeneratedNever()
                    .HasColumnName("RecordingEventLogID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.EventEndDate).HasColumnType("datetime");

                entity.Property(e => e.EventSourceClassTypeId).HasColumnName("EventSourceClassTypeID");

                entity.Property(e => e.EventSourceId).HasColumnName("EventSourceID");

                entity.Property(e => e.EventStartDate).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.UpdSourceClassTypeId).HasColumnName("UpdSourceClassTypeID");

                entity.Property(e => e.UpdSourceId).HasColumnName("UpdSourceID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.RecordingEventLogClassTypes)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK2_RecordingEventLog");

                entity.HasOne(d => d.Event)
                    .WithMany(p => p.RecordingEventLogs)
                    .HasForeignKey(d => d.EventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK4_RecordingEventLog");

                entity.HasOne(d => d.EventSourceClassType)
                    .WithMany(p => p.RecordingEventLogEventSourceClassTypes)
                    .HasForeignKey(d => d.EventSourceClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK5_RecordingEventLog");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.RecordingEventLogs)
                    .HasForeignKey(d => d.FileId)
                    .HasConstraintName("FK3_RecordingEventLog");

                entity.HasOne(d => d.RecordingEventLogNavigation)
                    .WithOne(p => p.RecordingEventLog)
                    .HasForeignKey<RecordingEventLog>(d => d.RecordingEventLogId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK1_RecordingEventLog");

                entity.HasOne(d => d.UpdSourceClassType)
                    .WithMany(p => p.RecordingEventLogUpdSourceClassTypes)
                    .HasForeignKey(d => d.UpdSourceClassTypeId)
                    .HasConstraintName("FK6_RecordingEventLog");
            });

            modelBuilder.Entity<RecordingInfo>(entity =>
            {
                entity.ToTable("RecordingInfo");

                entity.HasIndex(e => e.PropertyId, "XIF7RecordingInfo")
                    .HasFillFactor(90);

                entity.Property(e => e.Block)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.MapDate).HasColumnType("datetime");

                entity.Property(e => e.MapNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Page)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyId).HasColumnName("PropertyID");

                entity.Property(e => e.TypeCdId).HasColumnName("TypeCdID");

                entity.Property(e => e.Updts)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UPDTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.RecordingInfos)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conRecordingInfo2FK");

                entity.HasOne(d => d.Property)
                    .WithMany(p => p.RecordingInfos)
                    .HasForeignKey(d => d.PropertyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conRecordInfo1FK");

                entity.HasOne(d => d.TypeCd)
                    .WithMany(p => p.RecordingInfos)
                    .HasForeignKey(d => d.TypeCdId)
                    .HasConstraintName("conRecordingInfo3FK");
            });

            modelBuilder.Entity<RecordsToDelete>(entity =>
            {
                entity.HasKey(e => e.RecordsToDeleteId)
                    .HasName("PK__RecordsT__2D7B57D61CEE1004")
                    .IsClustered(false);

                entity.ToTable("RecordsToDelete");

                entity.HasIndex(e => e.RowId, "idxRecordsToDelete1")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.Property(e => e.FileId)
                    .HasColumnName("FileID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RowId).HasColumnName("RowID");

                entity.Property(e => e.TableId).HasColumnName("TableID");
            });

            modelBuilder.Entity<RegionFlag>(entity =>
            {
                entity.ToTable("RegionFlag");

                entity.HasIndex(e => new { e.UserId, e.RegionId }, "UQ_RegionFlagUserIdRegionId")
                    .IsUnique();

                entity.Property(e => e.RegionFlagId).HasColumnName("RegionFlagID");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<RegionIdforApplication>(entity =>
            {
                entity.HasKey(e => e.RegionId)
                    .HasName("PK__RegionID__ACD844439BD64E6F");

                entity.ToTable("RegionIDForApplications");

                entity.Property(e => e.RegionId)
                    .ValueGeneratedNever()
                    .HasColumnName("RegionID");

                entity.Property(e => e.FunctionId).HasColumnName("FunctionID");

                entity.HasOne(d => d.Function)
                    .WithMany(p => p.RegionIdforApplications)
                    .HasForeignKey(d => d.FunctionId)
                    .HasConstraintName("FK__RegionIDF__Funct__41736BE2");

                entity.HasOne(d => d.Region)
                    .WithOne(p => p.RegionIdforApplication)
                    .HasForeignKey<RegionIdforApplication>(d => d.RegionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RegionIDF__Regio__3E4526D8");
            });

            modelBuilder.Entity<RegionProblemLogXref>(entity =>
            {
                entity.ToTable("RegionProblemLogXref");

                entity.Property(e => e.RegionProblemLogXrefId).HasColumnName("RegionProblemLogXRef_ID");

                entity.Property(e => e.ProblemLogId).HasColumnName("ProblemLogID");

                entity.Property(e => e.RegionId).HasColumnName("RegionID");

                entity.Property(e => e.Updts)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UPDTS");

                entity.HasOne(d => d.ProblemLog)
                    .WithMany(p => p.RegionProblemLogXrefs)
                    .HasForeignKey(d => d.ProblemLogId)
                    .HasConstraintName("FK__RegionPro__Probl__435BB454");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.RegionProblemLogXrefs)
                    .HasForeignKey(d => d.RegionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RegionPro__Regio__444FD88D");
            });

            modelBuilder.Entity<RegionUnderwriter>(entity =>
            {
                entity.ToTable("RegionUnderwriter");

                entity.HasIndex(e => new { e.BusinessUnitId, e.ObjectCd }, "Idx1RegionUW")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.AddrBookEntryId, "Idx2RegionUWAddrBook")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FullName, "Idx3RegionUWFullName")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.GllookupId, "idx4GLLookupID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DeactivationDate).HasColumnType("datetime");

                entity.Property(e => e.FullName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.GllookupId).HasColumnName("GLLookupID");

                entity.Property(e => e.LogoFileName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ReactivationDate).HasColumnType("datetime");

                entity.Property(e => e.SealFileName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SignatureFileName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.StateOfDomicileGeoRegionId).HasColumnName("StateOfDomicileGeoRegionID");

                entity.Property(e => e.StatusChgComments)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.StatusChgUserId).HasColumnName("StatusChgUserID");

                entity.Property(e => e.UnderwriterCompanyId).HasColumnName("UnderwriterCompanyID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.HasOne(d => d.AddrBookEntry)
                    .WithMany(p => p.RegionUnderwriters)
                    .HasForeignKey(d => d.AddrBookEntryId)
                    .HasConstraintName("con1UnderwriterAddrBookFK");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.RegionUnderwriters)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con2UnderwriterBusinessUnitFK");

                entity.HasOne(d => d.CreationEmployee)
                    .WithMany(p => p.RegionUnderwriterCreationEmployees)
                    .HasForeignKey(d => d.CreationEmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con3UnderwriterEmployeeFK");

                entity.HasOne(d => d.Gllookup)
                    .WithMany(p => p.RegionUnderwriters)
                    .HasForeignKey(d => d.GllookupId)
                    .HasConstraintName("con6UnderwriterGLLookupFK");

                entity.HasOne(d => d.StatusChgUser)
                    .WithMany(p => p.RegionUnderwriterStatusChgUsers)
                    .HasForeignKey(d => d.StatusChgUserId)
                    .HasConstraintName("con5UnderwriterEmployeeFK");

                entity.HasOne(d => d.UpdatedEmployee)
                    .WithMany(p => p.RegionUnderwriterUpdatedEmployees)
                    .HasForeignKey(d => d.UpdatedEmployeeId)
                    .HasConstraintName("con4UnderwriterEmployeeFK");

                entity.HasMany(d => d.Faccunderwriters)
                    .WithMany(p => p.Underwriters)
                    .UsingEntity<Dictionary<string, object>>(
                        "FaccunderwriterXref",
                        l => l.HasOne<Faccunderwriter>().WithMany().HasForeignKey("FaccunderwriterId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_FACCUnderwriterID"),
                        r => r.HasOne<RegionUnderwriter>().WithMany().HasForeignKey("UnderwriterId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_UnderwriterID"),
                        j =>
                        {
                            j.HasKey("UnderwriterId", "FaccunderwriterId").HasName("PK_FACCUnderwriter");

                            j.ToTable("FACCUnderwriterXref");

                            j.IndexerProperty<int>("UnderwriterId").HasColumnName("UnderwriterID");

                            j.IndexerProperty<int>("FaccunderwriterId").HasColumnName("FACCUnderwriterID");
                        });
            });

            modelBuilder.Entity<RegionalDeliveryDestination>(entity =>
            {
                entity.ToTable("RegionalDeliveryDestination");

                entity.HasIndex(e => new { e.StateGeoRegionId, e.CountyGeoRegionId, e.CpuproductionOfficeId }, "RegionalDelivery_ncx1")
                    .HasFillFactor(90);

                entity.Property(e => e.RegionalDeliveryDestinationId).HasColumnName("RegionalDeliveryDestinationID");

                entity.Property(e => e.CountyGeoRegionId).HasColumnName("CountyGeoRegionID");

                entity.Property(e => e.CpuproductionOfficeId).HasColumnName("CPUProductionOfficeID");

                entity.Property(e => e.StateGeoRegionId).HasColumnName("StateGeoRegionID");

                entity.HasOne(d => d.CountyGeoRegion)
                    .WithMany(p => p.RegionalDeliveryDestinationCountyGeoRegions)
                    .HasForeignKey(d => d.CountyGeoRegionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RegionalDeliveryDestination_GeographicRegion1");

                entity.HasOne(d => d.CpuproductionOffice)
                    .WithMany(p => p.RegionalDeliveryDestinationCpuproductionOffices)
                    .HasForeignKey(d => d.CpuproductionOfficeId)
                    .HasConstraintName("FK_RegionalDeliveryDestination_BusinessUnit");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.RegionalDeliveryDestinationRegions)
                    .HasForeignKey(d => d.RegionId)
                    .HasConstraintName("FkRDDRegionId");

                entity.HasOne(d => d.StateGeoRegion)
                    .WithMany(p => p.RegionalDeliveryDestinationStateGeoRegions)
                    .HasForeignKey(d => d.StateGeoRegionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RegionalDeliveryDestination_GeographicRegion");
            });

            modelBuilder.Entity<RegionalSetting>(entity =>
            {
                entity.ToTable("RegionalSetting");

                entity.Property(e => e.Entityid)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.HasOne(d => d.EntityTypeCd)
                    .WithMany(p => p.RegionalSettings)
                    .HasForeignKey(d => d.EntityTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conRegionalSetting3Fk");
            });

            modelBuilder.Entity<RelsTitleDocsAllCopy>(entity =>
            {
                entity.HasKey(e => e.DocId);

                entity.ToTable("RelsTitle_Docs_All_Copy");

                entity.HasIndex(e => new { e.Status, e.BatchId }, "IDX_RelsTitle_Docs_All_Copy_Status_BatchID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BatchId, "idx_RelsTitle_Docs_All_Copy_BatchID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DocName, "idx_RelsTitle_Docs_All_Copy_DocName")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DocId, "idx_RelsTitle_Docs_All_Copy_docid")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileId, "idx_RelsTitle_Docs_All_Copy_fileid")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.Status, "idx_RelsTitle_Docs_All_Copy_status")
                    .HasFillFactor(90);

                entity.Property(e => e.DocId)
                    .ValueGeneratedNever()
                    .HasColumnName("DocID");

                entity.Property(e => e.BatchId).HasColumnName("BatchID");

                entity.Property(e => e.DocName)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.DocTypeCdId).HasColumnName("DocTypeCdID");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OwnerOfficeId).HasColumnName("OwnerOfficeID");

                entity.Property(e => e.Path)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.SuperbusinessUnitId).HasColumnName("SuperbusinessUnitID");
            });

            modelBuilder.Entity<RelsextractFileId>(entity =>
            {
                entity.HasKey(e => e.FileId)
                    .HasName("PK__RELSExtr__6F0F989F925E434D");

                entity.ToTable("RELSExtractFileIDs");

                entity.Property(e => e.FileId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileID");
            });

            modelBuilder.Entity<RemittanceRequestQueue>(entity =>
            {
                entity.HasKey(e => e.RemitBatchId)
                    .HasName("PK_RemittanceRequestQueueRemitBatchId");

                entity.ToTable("RemittanceRequestQueue");

                entity.Property(e => e.ProcessEndTime).HasColumnType("datetime");

                entity.Property(e => e.ProcessStartTime).HasColumnType("datetime");

                entity.Property(e => e.RemitRequestXml)
                    .IsUnicode(false)
                    .HasColumnName("RemitRequestXML");

                entity.Property(e => e.RemitResponseXml)
                    .IsUnicode(false)
                    .HasColumnName("RemitResponseXML");

                entity.Property(e => e.RequestFileIds).IsUnicode(false);
            });

            modelBuilder.Entity<RemittanceSplitDetail>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.ExternalFaccendorsementId).HasColumnName("ExternalFACCEndorsementID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.PropertyState)
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ReserveFile>(entity =>
            {
                entity.HasKey(e => new { e.ReservedFileNumber, e.RegionId })
                    .HasName("conPK_ReserveFile");

                entity.ToTable("ReserveFile");

                entity.Property(e => e.ReservedFileNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ReservedDate).HasColumnType("datetime");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.ReserveFileOffices)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ConOffice_FK");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.ReserveFileRegions)
                    .HasForeignKey(d => d.RegionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ConRegion_FK");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ReserveFiles)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ConEmployee_FK");
            });

            modelBuilder.Entity<ReserveFileUsed>(entity =>
            {
                entity.HasKey(e => new { e.ReservedFileNumber, e.RegionId })
                    .HasName("conPK_ReserveFileUsed");

                entity.ToTable("ReserveFileUsed");

                entity.Property(e => e.ReservedFileNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ReservedDate).HasColumnType("datetime");

                entity.Property(e => e.UsedDate).HasColumnType("datetime");

                entity.HasOne(d => d.UsedByNavigation)
                    .WithMany(p => p.ReserveFileUseds)
                    .HasForeignKey(d => d.UsedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ConUser_FK");
            });

            modelBuilder.Entity<RoadHomeLog>(entity =>
            {
                entity.ToTable("RoadHomeLog");

                entity.HasIndex(e => e.EGrantsAppid, "IX_RoadHomeLog")
                    .HasFillFactor(90);

                entity.Property(e => e.RoadHomeLogId).HasColumnName("RoadHomeLogID");

                entity.Property(e => e.ApplicantDob)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Applicant_DOB");

                entity.Property(e => e.ApplicantEmail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Applicant_Email");

                entity.Property(e => e.ApplicantFax)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Applicant_Fax");

                entity.Property(e => e.ApplicantMailingCity)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Applicant_Mailing_City");

                entity.Property(e => e.ApplicantMailingState)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Applicant_Mailing_State");

                entity.Property(e => e.ApplicantMailingStreet1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Applicant_Mailing_Street1");

                entity.Property(e => e.ApplicantMailingStreet2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Applicant_Mailing_Street2");

                entity.Property(e => e.ApplicantMailingZip)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Applicant_Mailing_ZIP");

                entity.Property(e => e.ApplicantMaritalStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Applicant_Marital_Status");

                entity.Property(e => e.ApplicantNameFirst)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Applicant_Name_First");

                entity.Property(e => e.ApplicantNameLast)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Applicant_Name_Last");

                entity.Property(e => e.ApplicantNameMiddle)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Applicant_Name_Middle");

                entity.Property(e => e.ApplicantNameSuffix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Applicant_Name_Suffix");

                entity.Property(e => e.ApplicantPhoneCell)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Applicant_Phone_Cell");

                entity.Property(e => e.ApplicantPhoneHome)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Applicant_Phone_Home");

                entity.Property(e => e.ApplicantPhoneWork)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Applicant_Phone_Work");

                entity.Property(e => e.ApplicantSsn)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Applicant_SSN");

                entity.Property(e => e.BatchTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CoApplicantDob)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CoApplicant_DOB");

                entity.Property(e => e.CoApplicantEmail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CoApplicant_Email");

                entity.Property(e => e.CoApplicantFax)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CoApplicant_Fax");

                entity.Property(e => e.CoApplicantMailingCity)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CoApplicant_Mailing_City");

                entity.Property(e => e.CoApplicantMailingState)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CoApplicant_Mailing_State");

                entity.Property(e => e.CoApplicantMailingStreet1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CoApplicant_Mailing_Street1");

                entity.Property(e => e.CoApplicantMailingStreet2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CoApplicant_Mailing_Street2");

                entity.Property(e => e.CoApplicantMailingZip)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CoApplicant_Mailing_ZIP");

                entity.Property(e => e.CoApplicantMaritalStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CoApplicant_Marital_Status");

                entity.Property(e => e.CoApplicantNameFirst)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CoApplicant_Name_First");

                entity.Property(e => e.CoApplicantNameLast)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CoApplicant_Name_Last");

                entity.Property(e => e.CoApplicantNameMiddle)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CoApplicant_Name_Middle");

                entity.Property(e => e.CoApplicantNameSuffix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CoApplicant_Name_Suffix");

                entity.Property(e => e.CoApplicantPhoneCell)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CoApplicant_Phone_Cell");

                entity.Property(e => e.CoApplicantPhoneHome)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CoApplicant_Phone_Home");

                entity.Property(e => e.CoApplicantPhoneWork)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CoApplicant_Phone_Work");

                entity.Property(e => e.CoApplicantSsn)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CoApplicant_SSN");

                entity.Property(e => e.EGrantsAppid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("eGrants_Appid");

                entity.Property(e => e.ErrorMsg)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FastId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("FastID");

                entity.Property(e => e.FirstMortgageeLoanBal)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("First_Mortgagee_Loan_Bal");

                entity.Property(e => e.FirstMortgageeLoanNo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("First_Mortgagee_Loan_No");

                entity.Property(e => e.FirstMortgageeName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("First_Mortgagee_Name");

                entity.Property(e => e.FourthMortgageeLoanBal)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Fourth_Mortgagee_Loan_Bal");

                entity.Property(e => e.FourthMortgageeLoanNo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Fourth_Mortgagee_Loan_No");

                entity.Property(e => e.FourthMortgageeName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Fourth_Mortgagee_Name");

                entity.Property(e => e.Owner1Dob)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner1_DOB");

                entity.Property(e => e.Owner1Email)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Owner1_Email");

                entity.Property(e => e.Owner1Fax)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner1_Fax");

                entity.Property(e => e.Owner1MailingCity)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Owner1_Mailing_City");

                entity.Property(e => e.Owner1MailingState)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner1_Mailing_State");

                entity.Property(e => e.Owner1MailingStreet1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Owner1_Mailing_Street1");

                entity.Property(e => e.Owner1MailingStreet2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Owner1_Mailing_Street2");

                entity.Property(e => e.Owner1MailingZip)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner1_Mailing_ZIP");

                entity.Property(e => e.Owner1NameFirst)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Owner1_Name_First");

                entity.Property(e => e.Owner1NameLast)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Owner1_Name_Last");

                entity.Property(e => e.Owner1NameMiddle)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner1_Name_Middle");

                entity.Property(e => e.Owner1NameSuffix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Owner1_Name_Suffix");

                entity.Property(e => e.Owner1PhoneHome)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner1_Phone_Home");

                entity.Property(e => e.Owner1PhoneWork)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner1_Phone_Work");

                entity.Property(e => e.Owner1Ssn)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner1_SSN");

                entity.Property(e => e.Owner2Dob)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner2_DOB");

                entity.Property(e => e.Owner2Email)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Owner2_Email");

                entity.Property(e => e.Owner2Fax)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner2_Fax");

                entity.Property(e => e.Owner2MailingCity)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Owner2_Mailing_City");

                entity.Property(e => e.Owner2MailingState)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner2_Mailing_State");

                entity.Property(e => e.Owner2MailingStreet1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Owner2_Mailing_Street1");

                entity.Property(e => e.Owner2MailingStreet2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Owner2_Mailing_Street2");

                entity.Property(e => e.Owner2MailingZip)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner2_Mailing_ZIP");

                entity.Property(e => e.Owner2NameFirst)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Owner2_Name_First");

                entity.Property(e => e.Owner2NameLast)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Owner2_Name_Last");

                entity.Property(e => e.Owner2NameMiddle)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner2_Name_Middle");

                entity.Property(e => e.Owner2NameSuffix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Owner2_Name_Suffix");

                entity.Property(e => e.Owner2PhoneHome)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner2_Phone_Home");

                entity.Property(e => e.Owner2PhoneWork)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner2_Phone_Work");

                entity.Property(e => e.Owner2Ssn)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner2_SSN");

                entity.Property(e => e.Owner3Dob)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner3_DOB");

                entity.Property(e => e.Owner3Email)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Owner3_Email");

                entity.Property(e => e.Owner3Fax)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner3_Fax");

                entity.Property(e => e.Owner3MailingCity)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Owner3_Mailing_City");

                entity.Property(e => e.Owner3MailingState)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner3_Mailing_State");

                entity.Property(e => e.Owner3MailingStreet1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Owner3_Mailing_Street1");

                entity.Property(e => e.Owner3MailingStreet2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Owner3_Mailing_Street2");

                entity.Property(e => e.Owner3MailingZip)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner3_Mailing_ZIP");

                entity.Property(e => e.Owner3NameFirst)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Owner3_Name_First");

                entity.Property(e => e.Owner3NameLast)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Owner3_Name_Last");

                entity.Property(e => e.Owner3NameMiddle)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner3_Name_Middle");

                entity.Property(e => e.Owner3NameSuffix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Owner3_Name_Suffix");

                entity.Property(e => e.Owner3PhoneHome)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner3_Phone_Home");

                entity.Property(e => e.Owner3PhoneWork)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner3_Phone_Work");

                entity.Property(e => e.Owner3Ssn)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner3_SSN");

                entity.Property(e => e.Owner4Dob)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner4_DOB");

                entity.Property(e => e.Owner4Email)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Owner4_Email");

                entity.Property(e => e.Owner4Fax)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner4_Fax");

                entity.Property(e => e.Owner4MailingCity)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Owner4_Mailing_City");

                entity.Property(e => e.Owner4MailingState)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner4_Mailing_State");

                entity.Property(e => e.Owner4MailingStreet1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Owner4_Mailing_Street1");

                entity.Property(e => e.Owner4MailingStreet2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Owner4_Mailing_Street2");

                entity.Property(e => e.Owner4MailingZip)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner4_Mailing_ZIP");

                entity.Property(e => e.Owner4NameFirst)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Owner4_Name_First");

                entity.Property(e => e.Owner4NameLast)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Owner4_Name_Last");

                entity.Property(e => e.Owner4NameMiddle)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner4_Name_Middle");

                entity.Property(e => e.Owner4NameSuffix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Owner4_Name_Suffix");

                entity.Property(e => e.Owner4PhoneHome)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner4_Phone_Home");

                entity.Property(e => e.Owner4PhoneWork)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner4_Phone_Work");

                entity.Property(e => e.Owner4Ssn)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner4_SSN");

                entity.Property(e => e.Owner5Dob)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner5_DOB");

                entity.Property(e => e.Owner5Email)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Owner5_Email");

                entity.Property(e => e.Owner5Fax)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner5_Fax");

                entity.Property(e => e.Owner5MailingCity)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Owner5_Mailing_City");

                entity.Property(e => e.Owner5MailingState)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner5_Mailing_State");

                entity.Property(e => e.Owner5MailingStreet1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Owner5_Mailing_Street1");

                entity.Property(e => e.Owner5MailingStreet2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Owner5_Mailing_Street2");

                entity.Property(e => e.Owner5MailingZip)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner5_Mailing_ZIP");

                entity.Property(e => e.Owner5NameFirst)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Owner5_Name_First");

                entity.Property(e => e.Owner5NameLast)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Owner5_Name_Last");

                entity.Property(e => e.Owner5NameMiddle)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner5_Name_Middle");

                entity.Property(e => e.Owner5NameSuffix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Owner5_Name_Suffix");

                entity.Property(e => e.Owner5PhoneHome)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner5_Phone_Home");

                entity.Property(e => e.Owner5PhoneWork)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner5_Phone_Work");

                entity.Property(e => e.Owner5Ssn)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner5_SSN");

                entity.Property(e => e.Owner6Dob)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner6_DOB");

                entity.Property(e => e.Owner6Email)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Owner6_Email");

                entity.Property(e => e.Owner6Fax)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner6_Fax");

                entity.Property(e => e.Owner6MailingCity)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Owner6_Mailing_City");

                entity.Property(e => e.Owner6MailingState)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner6_Mailing_State");

                entity.Property(e => e.Owner6MailingStreet1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Owner6_Mailing_Street1");

                entity.Property(e => e.Owner6MailingStreet2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Owner6_Mailing_Street2");

                entity.Property(e => e.Owner6MailingZip)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner6_Mailing_ZIP");

                entity.Property(e => e.Owner6NameFirst)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Owner6_Name_First");

                entity.Property(e => e.Owner6NameLast)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Owner6_Name_Last");

                entity.Property(e => e.Owner6NameMiddle)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner6_Name_Middle");

                entity.Property(e => e.Owner6NameSuffix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Owner6_Name_Suffix");

                entity.Property(e => e.Owner6PhoneHome)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner6_Phone_Home");

                entity.Property(e => e.Owner6PhoneWork)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner6_Phone_Work");

                entity.Property(e => e.Owner6Ssn)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Owner6_SSN");

                entity.Property(e => e.PropertyCity)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Property_City");

                entity.Property(e => e.PropertyFemaId1)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Property_FEMA_ID1");

                entity.Property(e => e.PropertyFemaId2)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Property_FEMA_ID2");

                entity.Property(e => e.PropertyMobileHome)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Property_Mobile_Home");

                entity.Property(e => e.PropertyParish)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Property_Parish");

                entity.Property(e => e.PropertyState)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Property_State");

                entity.Property(e => e.PropertyStreet1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Property_Street1");

                entity.Property(e => e.PropertyStreet2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Property_Street2");

                entity.Property(e => e.PropertyTaxParcelId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Property_Tax_Parcel_ID");

                entity.Property(e => e.PropertyType)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Property_Type");

                entity.Property(e => e.PropertyZip)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Property_ZIP");

                entity.Property(e => e.SbaAppNo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SBA_App_No");

                entity.Property(e => e.SbaLoanNo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SBA_Loan_No");

                entity.Property(e => e.SbaName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SBA_Name");

                entity.Property(e => e.SecondMortgageeLoanBal)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Second_Mortgagee_Loan_Bal");

                entity.Property(e => e.SecondMortgageeLoanNo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Second_Mortgagee_Loan_No");

                entity.Property(e => e.SecondMortgageeName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Second_Mortgagee_Name");

                entity.Property(e => e.SubmittedToFirstAmBatch)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Submitted_to_FirstAm_Batch");

                entity.Property(e => e.SubmittedToFirstAmDate)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Submitted_to_FirstAm_Date");

                entity.Property(e => e.TaxLiens)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Tax_Liens");

                entity.Property(e => e.ThirdMortgageeLoanBal)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Third_Mortgagee_Loan_Bal");

                entity.Property(e => e.ThirdMortgageeLoanNo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Third_Mortgagee_Loan_No");

                entity.Property(e => e.ThirdMortgageeName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Third_Mortgagee_Name");
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.ToTable("Role");

                entity.HasIndex(e => e.SecurityLevelId, "IdxRole_SecurityLevelId_Ix1")
                    .HasFillFactor(90);

                entity.Property(e => e.RoleId).HasColumnName("RoleID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.SecurityLevelId).HasColumnName("SecurityLevelID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.SecurityLevel)
                    .WithMany(p => p.Roles)
                    .HasForeignKey(d => d.SecurityLevelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conClassType_Role_SecurityLevelID_FK1");

                entity.HasMany(d => d.Activities)
                    .WithMany(p => p.Roles)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoleActivityXref",
                        l => l.HasOne<ActivityGrpActivityXref>().WithMany().HasForeignKey("ActivityGrpId", "ActivityId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conActivityGrpActivityXref_RoleActivityXref_ActivityGrpActivityID_FK2"),
                        r => r.HasOne<Role>().WithMany().HasForeignKey("RoleId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conRole_RoleActivityXref_RoleID_FK1"),
                        j =>
                        {
                            j.HasKey("RoleId", "ActivityGrpId", "ActivityId").HasName("conRoleActivityXrefPK");

                            j.ToTable("RoleActivityXref");

                            j.HasIndex(new[] { "ActivityGrpId" }, "IdxRoleActivityXref_ActivityGrpID_Ix1").HasFillFactor(90);

                            j.HasIndex(new[] { "ActivityId" }, "IdxRoleActivityXref_ActivityID_Ix2").HasFillFactor(90);

                            j.IndexerProperty<int>("RoleId").HasColumnName("RoleID");

                            j.IndexerProperty<int>("ActivityGrpId").HasColumnName("ActivityGrpID");

                            j.IndexerProperty<int>("ActivityId").HasColumnName("ActivityID");
                        });
            });

            modelBuilder.Entity<RoleChangeHistory>(entity =>
            {
                entity.HasKey(e => e.ChangeId)
                    .HasName("conRoleChangeHistoryPK");

                entity.ToTable("RoleChangeHistory");

                entity.HasIndex(e => e.ChangeEventId, "IdxRoleChangeHistory_ChangeEventID_Ix2")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.RoleId, "IdxRoleChangeHistory_RoleID_Ix1")
                    .HasFillFactor(90);

                entity.Property(e => e.ChangeId).HasColumnName("ChangeID");

                entity.Property(e => e.ActivityGrpId).HasColumnName("ActivityGrpID");

                entity.Property(e => e.ActivityId).HasColumnName("ActivityID");

                entity.Property(e => e.ChangeEventId).HasColumnName("ChangeEventID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.EventDate).HasColumnType("datetime");

                entity.Property(e => e.RoleId).HasColumnName("RoleID");

                entity.Property(e => e.TicketNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.ActivityGrp)
                    .WithMany(p => p.RoleChangeHistories)
                    .HasForeignKey(d => d.ActivityGrpId)
                    .HasConstraintName("conActivityGrp_RoleChangeHistory_ActivityGrpID_FK3");

                entity.HasOne(d => d.Activity)
                    .WithMany(p => p.RoleChangeHistories)
                    .HasForeignKey(d => d.ActivityId)
                    .HasConstraintName("conActivity_RoleChangeHistory_ActivityID_FK4");

                entity.HasOne(d => d.ChangeEvent)
                    .WithMany(p => p.RoleChangeHistories)
                    .HasForeignKey(d => d.ChangeEventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conTypeCdDMT_RoleChangeHistory_ChangeEventID_FK1");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.RoleChangeHistories)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conTypeCdDMT_RoleChangeHistory_RoleID_FK2");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoleChangeHistories)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conEmployee_RoleChangeHistory_UserID_FK5");
            });

            modelBuilder.Entity<RoleVisibilityXref>(entity =>
            {
                entity.HasKey(e => e.RoleVisibilityId)
                    .HasName("conRoleVisibilityXrefPK");

                entity.ToTable("RoleVisibilityXref");

                entity.HasIndex(e => new { e.RoleId, e.BusinessUnitId }, "IdxRoleVisibilityXref_RoleIDBusinessUnitID_Ix1")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.RoleVisibilityId).HasColumnName("RoleVisibilityID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.RoleId).HasColumnName("RoleID");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.RoleVisibilityXrefs)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .HasConstraintName("conBusinessUnit_RoleVisibilityXref_BusinessUnitID_FK2");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.RoleVisibilityXrefs)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conRole_RoleVisibilityXref_RoleID_FK1");
            });

            modelBuilder.Entity<Rtmaddress>(entity =>
            {
                entity.HasKey(e => e.RtmaddrId)
                    .HasName("conRTMAddress1Pk");

                entity.ToTable("RTMAddress");

                entity.HasIndex(e => new { e.RtmadhocAddrId, e.RtmaddrId, e.RtmpackageId }, "IX_RTMAdHocAddr")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FileServiceId, e.OwningProductionOffice }, "IdxRTMFileServiceId")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BusOrgId, "idxBusOrgID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.EmployeeRoleTypeCdId, "ixn_RTMAddress_EmployeeRoleTypeCdID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FileBusinessPartyId, e.RtmaddrId }, "ixn_RTMAddress_FileBusinessPartyIDPK")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.RtmpackageId, e.MailToReturnTo }, "ixn_RTMAddress_RTMPackageID_MailToReturnTo")
                    .HasFillFactor(90);

                entity.Property(e => e.RtmaddrId).HasColumnName("RTMAddrID");

                entity.Property(e => e.Attention)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.EmployeeRoleTypeCdId).HasColumnName("EmployeeRoleTypeCdID");

                entity.Property(e => e.FileBusinessPartyId).HasColumnName("FileBusinessPartyID");

                entity.Property(e => e.FileServiceId).HasColumnName("FileServiceID");

                entity.Property(e => e.OwningProductionOfficeId).HasColumnName("OwningProductionOfficeID");

                entity.Property(e => e.PhysicalAddrTypeCdId).HasColumnName("PhysicalAddrTypeCdID");

                entity.Property(e => e.Reference)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RtmadhocAddrId).HasColumnName("RTMAdhocAddrID");

                entity.Property(e => e.RtmpackageId).HasColumnName("RTMPackageID");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.HasOne(d => d.BusOrg)
                    .WithMany(p => p.Rtmaddresses)
                    .HasForeignKey(d => d.BusOrgId)
                    .HasConstraintName("FK_RTMAddress_BusOrgID");

                entity.HasOne(d => d.CourierTypeNavigation)
                    .WithMany(p => p.RtmaddressCourierTypeNavigations)
                    .HasForeignKey(d => d.CourierType)
                    .HasConstraintName("conRTMAddrTypeCdDmtFK2");

                entity.HasOne(d => d.EmployeeRoleTypeCd)
                    .WithMany(p => p.RtmaddressEmployeeRoleTypeCds)
                    .HasForeignKey(d => d.EmployeeRoleTypeCdId)
                    .HasConstraintName("conRTMAddress_EmployeeRoleTypeCdID");

                entity.HasOne(d => d.FileBusinessParty)
                    .WithMany(p => p.Rtmaddresses)
                    .HasForeignKey(d => d.FileBusinessPartyId)
                    .HasConstraintName("conRTMAddFileBusPartyFK");

                entity.HasOne(d => d.FileService)
                    .WithMany(p => p.Rtmaddresses)
                    .HasForeignKey(d => d.FileServiceId)
                    .HasConstraintName("conRTMAddFileServiceFK");

                entity.HasOne(d => d.OwningProductionOfficeNavigation)
                    .WithMany(p => p.Rtmaddresses)
                    .HasForeignKey(d => d.OwningProductionOfficeId)
                    .HasConstraintName("conBusinessUnit4Fk");

                entity.HasOne(d => d.PackageTypeNavigation)
                    .WithMany(p => p.RtmaddressPackageTypeNavigations)
                    .HasForeignKey(d => d.PackageType)
                    .HasConstraintName("conRTMAddrTypeCdDmtFK1");

                entity.HasOne(d => d.PhysicalAddrTypeCd)
                    .WithMany(p => p.RtmaddressPhysicalAddrTypeCds)
                    .HasForeignKey(d => d.PhysicalAddrTypeCdId)
                    .HasConstraintName("FK_RTMAddress_PhysicalAddrTypeCdID");

                entity.HasOne(d => d.RtmadhocAddr)
                    .WithMany(p => p.Rtmaddresses)
                    .HasForeignKey(d => d.RtmadhocAddrId)
                    .HasConstraintName("FK_RTMAddress_RTMAdhocAddrID");

                entity.HasOne(d => d.Rtmpackage)
                    .WithMany(p => p.Rtmaddresses)
                    .HasForeignKey(d => d.RtmpackageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conRTMPackage1FK");
            });

            modelBuilder.Entity<Rtmdocument>(entity =>
            {
                entity.HasKey(e => e.RtmdocId)
                    .HasName("conRTMDocument1Pk");

                entity.ToTable("RTMDocument");

                entity.HasIndex(e => e.DocumentId, "ixn_RTMDocument_DocumentID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.RtmpackageId, "ixn_RTMDocument_RTMPackageID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.RtmpackageId, e.DocumentId, e.RtmdocId, e.SeqNum }, "ixn_RTMDocument_RTMPackageID_DocumentID")
                    .HasFillFactor(90);

                entity.Property(e => e.RtmdocId).HasColumnName("RTMDocID");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DocTypeCdId).HasColumnName("DocTypeCdID");

                entity.Property(e => e.DocumentId).HasColumnName("DocumentID");

                entity.Property(e => e.RtmpackageId).HasColumnName("RTMPackageID");

                entity.Property(e => e.TabName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.HasOne(d => d.DocTypeCd)
                    .WithMany(p => p.Rtmdocuments)
                    .HasForeignKey(d => d.DocTypeCdId)
                    .HasConstraintName("conRTMDocTypeCdDmtFK1");

                entity.HasOne(d => d.Rtmpackage)
                    .WithMany(p => p.Rtmdocuments)
                    .HasForeignKey(d => d.RtmpackageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conRTMPackage2FK");
            });

            modelBuilder.Entity<RtmdocumentCloud>(entity =>
            {
                entity.HasKey(e => e.DocId)
                    .HasName("PK__RTMDocum__3EF1888D4D1599FA");

                entity.ToTable("RTMDocument_Cloud");

                entity.Property(e => e.DocId)
                    .ValueGeneratedNever()
                    .HasColumnName("DocID");

                entity.Property(e => e.NgDocId).HasColumnName("NG_DocID");
            });

            modelBuilder.Entity<RtmeventHistory>(entity =>
            {
                entity.HasKey(e => e.EventLogId)
                    .HasName("unq_ixn_RTMEventHistory_EventLogID1");

                entity.ToTable("RTMEventHistory");

                entity.Property(e => e.EventLogId)
                    .ValueGeneratedNever()
                    .HasColumnName("EventLogID");

                entity.Property(e => e.DocumentList)
                    .HasMaxLength(6000)
                    .IsUnicode(false);

                entity.Property(e => e.MailToList).IsUnicode(false);

                entity.Property(e => e.PackageName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReturnToList)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.RtmpackageId).HasColumnName("RTMPackageID");
            });

            modelBuilder.Entity<RtmfileAddress>(entity =>
            {
                entity.HasKey(e => e.RtmadhocAddrId)
                    .HasName("PK_RTMFileAddress_RTMAdhocAddrID");

                entity.ToTable("RTMFileAddress");

                entity.HasIndex(e => new { e.FileId, e.RtmadhocAddrId }, "IX_RTMAddrFileID")
                    .HasFillFactor(90);

                entity.Property(e => e.RtmadhocAddrId).HasColumnName("RTMAdhocAddrID");

                entity.Property(e => e.AddrLine1)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.AddrLine2)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.AreaCode)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Attention)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Zip)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.File)
                    .WithMany(p => p.RtmfileAddresses)
                    .HasForeignKey(d => d.FileId)
                    .HasConstraintName("FK_RTMFileAddress_FileID");
            });

            modelBuilder.Entity<Rtmpackage>(entity =>
            {
                entity.ToTable("RTMPackage");

                entity.HasIndex(e => new { e.RtmpackageId, e.FileId, e.Descr }, "IdxRTMPackageCover")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileId, "ixn_RTMPackage__FileID")
                    .HasFillFactor(90);

                entity.Property(e => e.RtmpackageId).HasColumnName("RTMPackageID");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Descr)
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.Rtmpackages)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conServiceFile1FK");
            });

            modelBuilder.Entity<RuleList>(entity =>
            {
                entity.HasKey(e => e.RuleId)
                    .HasName("conRuleListPk");

                entity.ToTable("RuleList");

                entity.Property(e => e.RuleId).HasColumnName("RuleID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DeActivationDate).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.EffectiveFrom).HasColumnType("datetime");

                entity.Property(e => e.EffectiveTill).HasColumnType("datetime");

                entity.Property(e => e.LastUpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReActivationDate).HasColumnType("datetime");

                entity.Property(e => e.RuleXml)
                    .IsUnicode(false)
                    .HasColumnName("RuleXML");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.RuleLists)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBusinessUnitIDFK");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.RuleListCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("conAddUserFK");

                entity.HasOne(d => d.DeActivationByNavigation)
                    .WithMany(p => p.RuleListDeActivationByNavigations)
                    .HasForeignKey(d => d.DeActivationBy)
                    .HasConstraintName("conDeActivationFK");

                entity.HasOne(d => d.LastUpdatedByNavigation)
                    .WithMany(p => p.RuleListLastUpdatedByNavigations)
                    .HasForeignKey(d => d.LastUpdatedBy)
                    .HasConstraintName("conUpdUserFK");

                entity.HasOne(d => d.ReActivationByNavigation)
                    .WithMany(p => p.RuleListReActivationByNavigations)
                    .HasForeignKey(d => d.ReActivationBy)
                    .HasConstraintName("conReActivationFK");
            });

            modelBuilder.Entity<RuleListBusUnitXref>(entity =>
            {
                entity.ToTable("RuleListBusUnitXref");

                entity.Property(e => e.RuleListBusUnitXrefId).HasColumnName("RuleListBusUnitXrefID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.RuleId).HasColumnName("RuleID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.RuleListBusUnitXrefs)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBusinessUnitFK");

                entity.HasOne(d => d.Rule)
                    .WithMany(p => p.RuleListBusUnitXrefs)
                    .HasForeignKey(d => d.RuleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conRuleListFK");
            });

            modelBuilder.Entity<SafeEscrowTransaction>(entity =>
            {
                entity.HasKey(e => e.SafeEscrowTranId)
                    .HasName("PK_SafeEscrowTranId");

                entity.ToTable("SafeEscrowTransaction");

                entity.HasIndex(e => e.FileId, "idxSafeEscrowtransaction_FileID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.ClearedDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisbursementGuid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DisbursementGUID");

                entity.Property(e => e.DocumentType)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.FileProcessId).HasColumnName("FileProcessID");

                entity.Property(e => e.OrderedDate).HasColumnType("datetime");

                entity.Property(e => e.PayeeName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RefCkNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SafeEscrowId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SafeEscrowID");

                entity.Property(e => e.StatusCdId).HasColumnName("StatusCdID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SalesRepHistory>(entity =>
            {
                entity.HasKey(e => e.EventLogId);

                entity.ToTable("SalesRepHistory");

                entity.HasIndex(e => e.FromBusOrgId, "idxFromBusOrgId")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ToBusOrgId, "idxToBusOrgId")
                    .HasFillFactor(90);

                entity.Property(e => e.EventLogId).ValueGeneratedNever();

                entity.HasOne(d => d.FromBusOrg)
                    .WithMany(p => p.SalesRepHistoryFromBusOrgs)
                    .HasForeignKey(d => d.FromBusOrgId)
                    .HasConstraintName("FK_SalesRepHistory_BusOrg");

                entity.HasOne(d => d.FromSalesRepId1Navigation)
                    .WithMany(p => p.SalesRepHistoryFromSalesRepId1Navigations)
                    .HasForeignKey(d => d.FromSalesRepId1)
                    .HasConstraintName("FK_SalesRepHistory_Employee");

                entity.HasOne(d => d.FromSalesRepId2Navigation)
                    .WithMany(p => p.SalesRepHistoryFromSalesRepId2Navigations)
                    .HasForeignKey(d => d.FromSalesRepId2)
                    .HasConstraintName("FK_SalesRepHistory_Employee2");

                entity.HasOne(d => d.RoleTypeCd)
                    .WithMany(p => p.SalesRepHistories)
                    .HasForeignKey(d => d.RoleTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesRepHistory_TypeCdDmt");

                entity.HasOne(d => d.ToBusOrg)
                    .WithMany(p => p.SalesRepHistoryToBusOrgs)
                    .HasForeignKey(d => d.ToBusOrgId)
                    .HasConstraintName("FK_SalesRepHistory_BusOrg1");

                entity.HasOne(d => d.ToSalesRepId1Navigation)
                    .WithMany(p => p.SalesRepHistoryToSalesRepId1Navigations)
                    .HasForeignKey(d => d.ToSalesRepId1)
                    .HasConstraintName("FK_SalesRepHistory_Employee1");

                entity.HasOne(d => d.ToSalesRepId2Navigation)
                    .WithMany(p => p.SalesRepHistoryToSalesRepId2Navigations)
                    .HasForeignKey(d => d.ToSalesRepId2)
                    .HasConstraintName("FK_SalesRepHistory_Employee3");
            });

            modelBuilder.Entity<ScreenActivityActivityGrpXref>(entity =>
            {
                entity.ToTable("ScreenActivityActivityGrpXref");

                entity.Property(e => e.ScreenActivityActivityGrpXrefId).HasColumnName("ScreenActivityActivityGrpXref_ID");

                entity.Property(e => e.ActivityGrpId).HasColumnName("ActivityGrpID");

                entity.Property(e => e.ActivityId).HasColumnName("ActivityID");

                entity.Property(e => e.ScreenId).HasColumnName("ScreenID");

                entity.HasOne(d => d.ActivityGrp)
                    .WithMany(p => p.ScreenActivityActivityGrpXrefs)
                    .HasForeignKey(d => d.ActivityGrpId)
                    .HasConstraintName("Fk_ScreenActivityActivityGrpXref_ActivityGrpID");

                entity.HasOne(d => d.Activity)
                    .WithMany(p => p.ScreenActivityActivityGrpXrefs)
                    .HasForeignKey(d => d.ActivityId)
                    .HasConstraintName("Fk_ScreenActivityActivityGrpXref_ActivityID");

                entity.HasOne(d => d.Screen)
                    .WithMany(p => p.ScreenActivityActivityGrpXrefs)
                    .HasForeignKey(d => d.ScreenId)
                    .HasConstraintName("Fk_ScreenActivityActivityGrpXref_ScreenID");
            });

            modelBuilder.Entity<ScreenList>(entity =>
            {
                entity.HasKey(e => e.ScreenId)
                    .HasName("PK_ScreenList_ScreenID");

                entity.ToTable("ScreenList");

                entity.Property(e => e.ScreenId).HasColumnName("ScreenID");

                entity.Property(e => e.CssClass)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cssClass");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ToolTip)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Url)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("URL");
            });

            modelBuilder.Entity<Sdn180daySearch>(entity =>
            {
                entity.ToTable("SDN180DaySearch");

                entity.HasIndex(e => e.FileId, "IX_SDN180DaySearch_FileID")
                    .HasFillFactor(90);

                entity.Property(e => e.Sdn180daySearchId).HasColumnName("SDN180DaySearch_ID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.Sdn180dayCounter).HasColumnName("SDN180DayCounter");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.Sdn180daySearches)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conSDN180DaySearch");
            });

            modelBuilder.Entity<Sdnsearch>(entity =>
            {
                entity.ToTable("SDNSearch");

                entity.HasIndex(e => new { e.FileId, e.OriginalName, e.ProcessFlag }, "IDXsdnsearch")
                    .HasFillFactor(90);

                entity.Property(e => e.SdnsearchId).HasColumnName("SDNsearchID");

                entity.Property(e => e.ContactName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.EmailReceipientName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HitNames)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.OriginalName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RoleTypeCdId).HasColumnName("RoleTypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.Updateddate).HasColumnType("datetime");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.Sdnsearches)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conSDNSearchFK1");
            });

            modelBuilder.Entity<SdnsearchHit>(entity =>
            {
                entity.ToTable("SDNSearchHit");

                entity.Property(e => e.SdnsearchHitId).HasColumnName("SDNSearchHit_ID");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EmailReceipientName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HitNames)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.OriginalName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.Updateddate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<SdnsearchPending>(entity =>
            {
                entity.ToTable("SDNSearchPending");

                entity.Property(e => e.SdnsearchPendingId).HasColumnName("SDNSearchPending_ID");

                entity.Property(e => e.ContactName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.EmailReceipientName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HitNames)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.OriginalName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RoleTypeCdId).HasColumnName("RoleTypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.Updateddate).HasColumnType("datetime");
            });

            modelBuilder.Entity<SdnsearchQ>(entity =>
            {
                entity.ToTable("SDNSearchQ");

                entity.HasIndex(e => new { e.FileId, e.SdntrackingId, e.Status }, "IX_SDNSearchQ_FileID_SDNTrackingID_Status")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SdntrackingId, "IX_SDNSearchQ_SDNTrackingID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.Status, "IX_SDNSearchQ_Status")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.Status, e.CreationDate }, "IX_SDNSearchQ_StatusCreationDate")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.Status, e.Server }, "IX_SDNSearchQ_Status_Server")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.Status, e.UniqueKey }, "IX_SDNSearchQ_Status_UniqueKey")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.UniqueKey, e.Status, e.Server }, "SDNSearchQ_UniqueKey_Status")
                    .HasFillFactor(90);

                entity.Property(e => e.SdnsearchQid).HasColumnName("SDNSearchQID");

                entity.Property(e => e.ContactName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.EntityTypeId).HasColumnName("EntityTypeID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RoleTypeCdId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("RoleTypeCdID");

                entity.Property(e => e.SdntrackingId).HasColumnName("SDNTrackingID");

                entity.Property(e => e.Server)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UniqueKey)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.EntityType)
                    .WithMany(p => p.SdnsearchQs)
                    .HasForeignKey(d => d.EntityTypeId)
                    .HasConstraintName("FK_SDNSearchQ_EntityTypeID");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.SdnsearchQs)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conSDNSearch1Q");

                entity.HasOne(d => d.Sdntracking)
                    .WithMany(p => p.SdnsearchQs)
                    .HasForeignKey(d => d.SdntrackingId)
                    .HasConstraintName("conSDNSearchQ");
            });

            modelBuilder.Entity<SdnsearchRoleType>(entity =>
            {
                entity.ToTable("SDNSearchRoleType");

                entity.HasIndex(e => e.FileBusinessPartyId, "IX_SDNSearchRoleType_FileBusinessPartyId")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SdntrackingId, "IX_SDNSearchRoleType_SDNTrackingID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.SeqNo, e.ReferenceId, e.ReferenceClassTypeId }, "IX_SDNSearchRoleType_SeqNo_ReferenceId")
                    .HasFillFactor(90);

                entity.Property(e => e.SdnsearchRoleTypeId).HasColumnName("SDNSearchRoleTypeId");

                entity.Property(e => e.RoleName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RoleTypeCdId).HasColumnName("RoleTypeCdID");

                entity.Property(e => e.SdntrackingId).HasColumnName("SDNTrackingID");

                entity.HasOne(d => d.Sdntracking)
                    .WithMany(p => p.SdnsearchRoleTypes)
                    .HasForeignKey(d => d.SdntrackingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conSDNSearchRoleType1FK");
            });

            modelBuilder.Entity<Sdntracking>(entity =>
            {
                entity.ToTable("SDNTracking");

                entity.HasIndex(e => new { e.FileId, e.EntityId }, "IDXSDNTrackingFileIdEntityId")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileId, "IX_SDNTracking_FileID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FileId, e.Name }, "IX_SDNTracking_FileID_Name")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.OriginalSdntrackingId, "IX_SDNTracking_OriginalSDNTrackingId")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.OriginalSdntrackingId, e.HitFlag }, "IX_SDNTracking_OriginalSDNTrackingIdHitFlag")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SearchedFlag, "IX_SDNTracking_SearchedFlag")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SearchCount, "nidx_SDNTracking_SearchCount");

                entity.Property(e => e.SdntrackingId).HasColumnName("SDNTrackingID");

                entity.Property(e => e.ContactName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DocUpldClearedDate).HasColumnType("datetime");

                entity.Property(e => e.DocUpldNotClearedDate).HasColumnType("datetime");

                entity.Property(e => e.EmailReceipientName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EntityTypeId).HasColumnName("EntityTypeID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.HitDate).HasColumnType("datetime");

                entity.Property(e => e.LastName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NoHitDate).HasColumnType("datetime");

                entity.Property(e => e.OriginalSdntrackingId).HasColumnName("OriginalSDNTrackingId");

                entity.Property(e => e.ProcessCompletedDate).HasColumnType("datetime");

                entity.Property(e => e.SearchedDate).HasColumnType("datetime");

                entity.HasOne(d => d.EntityType)
                    .WithMany(p => p.Sdntrackings)
                    .HasForeignKey(d => d.EntityTypeId)
                    .HasConstraintName("FK_SDNTracking_EntityTypeID");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.Sdntrackings)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conSDNTracking2PK");
            });

            modelBuilder.Entity<SearchChange>(entity =>
            {
                entity.HasKey(e => e.ChangeId)
                    .HasName("PK_SearchChange_BigInt")
                    .IsClustered(false);

                entity.ToTable("SearchChange");

                entity.HasIndex(e => new { e.ChangeId, e.ObjectId, e.ObjectPk }, "CDXSearchChange")
                    .HasFillFactor(90);

                entity.Property(e => e.ObjectId).HasColumnName("ObjectID");

                entity.Property(e => e.ObjectPk).HasColumnName("ObjectPK");
            });

            modelBuilder.Entity<SearchChange2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SearchChange2");

                entity.HasIndex(e => new { e.ObjectId, e.ObjectPk }, "CDXSearchChange2")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ChangeId, "IdxSearchChange2")
                    .HasFillFactor(90);

                entity.Property(e => e.ObjectId).HasColumnName("ObjectID");

                entity.Property(e => e.ObjectPk).HasColumnName("ObjectPK");
            });

            modelBuilder.Entity<SearchChangeCompletedForFastc>(entity =>
            {
                entity.HasKey(e => e.ChangeId)
                    .HasName("PK__SearchCh__0E05C5B7FE36461B");

                entity.ToTable("SearchChangeCompletedForFASTCS");

                entity.Property(e => e.ChangeId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChangeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(3000)
                    .IsUnicode(false);

                entity.Property(e => e.FetchedDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<SearchChangeCompletedForFastcsBakup>(entity =>
            {
                entity.HasKey(e => e.ChangeId)
                    .HasName("PK__SearchCh__0E05C5B7A9479550");

                entity.ToTable("SearchChangeCompletedForFASTCS_Bakup");

                entity.Property(e => e.ChangeId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChangeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(3000)
                    .IsUnicode(false);

                entity.Property(e => e.FetchedDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<SearchChangeName>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.ObjectId, e.ObjectPk }, "CDXSearchChangeNames")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ChangeId, "IdxSearchChangeNames")
                    .HasFillFactor(90);
            });

            modelBuilder.Entity<SearchDependency>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.ObjectId, "CIdxSearchDependencies")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.QueryId, "Idx1SearchDependencies")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ObjectName, "Idx2SearchDependencies")
                    .HasFillFactor(90);

                entity.Property(e => e.ObjectName).HasMaxLength(128);

                entity.Property(e => e.PkcolumnName)
                    .HasMaxLength(128)
                    .HasColumnName("PKColumnName");

                entity.HasOne(d => d.Query)
                    .WithMany()
                    .HasForeignKey(d => d.QueryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ConSearchDependenciesFk1");
            });

            modelBuilder.Entity<SearchFactType>(entity =>
            {
                entity.HasKey(e => e.FactId)
                    .HasName("conSearchFactType1Pk")
                    .IsClustered(false);

                entity.ToTable("SearchFactType");

                entity.HasIndex(e => e.FactName, "indSearchFactType2")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor(90);

                entity.Property(e => e.FactId).HasColumnName("FactID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.ColumnName).HasMaxLength(128);

                entity.Property(e => e.Datatype)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FactContextId).HasColumnName("FactContextID");

                entity.Property(e => e.FactName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TableName).HasMaxLength(128);

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.SearchFactTypes)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conSearchFactType1FK");
            });

            modelBuilder.Entity<SearchKeyword>(entity =>
            {
                entity.HasKey(e => e.KeywordId)
                    .HasName("conSearchKeyword1Pk")
                    .IsClustered(false);

                entity.ToTable("SearchKeyword");

                entity.HasIndex(e => e.Value, "indSearchKeyword2")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor(90);

                entity.Property(e => e.KeywordId).HasColumnName("KeywordID");

                entity.Property(e => e.Value)
                    .HasMaxLength(800)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SearchNameDependency>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.ObjectId, "CIdxSearchNameDependencies")
                    .IsClustered();

                entity.HasIndex(e => e.QueryId, "Idx1SearchNameDependencies")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ObjectName, "Idx2SearchNameDependencies")
                    .HasFillFactor(90);

                entity.Property(e => e.ObjectName).HasMaxLength(128);

                entity.Property(e => e.PkcolumnName)
                    .HasMaxLength(128)
                    .HasColumnName("PKColumnName");
            });

            modelBuilder.Entity<SearchNameOtherQuery>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SearchNameOtherQuery");

                entity.Property(e => e.QueryStr)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SearchNameQuery>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SearchNameQuery");

                entity.Property(e => e.QueryStr)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SearchOrderDatum>(entity =>
            {
                entity.HasKey(e => e.SearchObjectId)
                    .HasName("conSearchOrderData1Pk");

                entity.Property(e => e.SearchObjectId)
                    .ValueGeneratedNever()
                    .HasColumnName("SearchObjectID");

                entity.Property(e => e.Address)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ExternalFileNum)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExternalId)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.OwnerOfficeName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RegionName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.SellerName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.TitleEscrowInfoId).HasColumnName("TitleEscrowInfoID");

                entity.Property(e => e.TitleNum)
                    .HasMaxLength(300)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SearchOtherQuery>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SearchOtherQuery");

                entity.Property(e => e.QueryStr)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SearchPending>(entity =>
            {
                entity.HasKey(e => e.PendingId)
                    .HasName("conSearchPending1Pk");

                entity.ToTable("SearchPending");

                entity.Property(e => e.PendingId).HasColumnName("PendingID");

                entity.Property(e => e.QueryStr)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SearchPendingFromNucleus>(entity =>
            {
                entity.ToTable("SearchPendingFromNucleus");

                entity.Property(e => e.PendingId).HasColumnName("PendingID");

                entity.Property(e => e.QueryStr)
                    .HasMaxLength(7050)
                    .IsUnicode(false);

                entity.Property(e => e.Spstr)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SearchPendingName>(entity =>
            {
                entity.HasKey(e => e.PendingId)
                    .HasName("PK__SearchPe__D811883873CF7C26");

                entity.Property(e => e.QueryStr)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SearchPendingNamesFromNucleus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SearchPendingNamesFromNucleus");

                entity.Property(e => e.QueryStr)
                    .HasMaxLength(7050)
                    .IsUnicode(false);

                entity.Property(e => e.Spstr)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SearchProcessed>(entity =>
            {
                entity.ToTable("SearchProcessed");

                entity.Property(e => e.SearchProcessedId).HasColumnName("SearchProcessed_ID");
            });

            modelBuilder.Entity<SearchQuery>(entity =>
            {
                entity.HasKey(e => e.QueryId)
                    .HasName("conSearchQuery1Pk");

                entity.ToTable("SearchQuery");

                entity.Property(e => e.QueryId).HasColumnName("QueryID");

                entity.Property(e => e.QueryStr)
                    .HasMaxLength(6000)
                    .IsUnicode(false);

                entity.Property(e => e.QueryWhereClause)
                    .HasMaxLength(2000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SearchType>(entity =>
            {
                entity.ToTable("SearchType");

                entity.HasIndex(e => e.ObjectCd, "Unq_SearchType_ObjectCD")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.SearchTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("SearchTypeID");

                entity.Property(e => e.Descr)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ObjectCD");

                entity.Property(e => e.StatusCd).HasColumnName("StatusCD");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SearchTypeTypeCdXref>(entity =>
            {
                entity.ToTable("SearchTypeTypeCdXref");

                entity.HasIndex(e => new { e.TypeCdId, e.SearchTypeId }, "Unq_SearchTypeTypeCdXref")
                    .HasFillFactor(90);

                entity.Property(e => e.SearchTypeId).HasColumnName("SearchTypeID");

                entity.Property(e => e.TypeCdId).HasColumnName("TypeCdID");

                entity.HasOne(d => d.SearchType)
                    .WithMany(p => p.SearchTypeTypeCdXrefs)
                    .HasForeignKey(d => d.SearchTypeId)
                    .HasConstraintName("FK_SearchTypeTypeCdXref_SearchTypeID");

                entity.HasOne(d => d.TypeCd)
                    .WithMany(p => p.SearchTypeTypeCdXrefs)
                    .HasForeignKey(d => d.TypeCdId)
                    .HasConstraintName("FK_SearchTypeTypeCdXref_TypeCdID");
            });

            modelBuilder.Entity<SecOffcGrpChangeHistory>(entity =>
            {
                entity.HasKey(e => e.ChangeId)
                    .HasName("conSecOffcGrpChangeHistoryPK");

                entity.ToTable("SecOffcGrpChangeHistory");

                entity.HasIndex(e => e.ChangeEventId, "IdxSecOffcGrpChangeHistory_ChangeEventID_Ix2")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SecOfficeGroupId, "IdxSecOffcGrpChangeHistory_SecOfficeGroupID_Ix1")
                    .HasFillFactor(90);

                entity.Property(e => e.ChangeId).HasColumnName("ChangeID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.ChangeEventId).HasColumnName("ChangeEventID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.EventDate).HasColumnType("datetime");

                entity.Property(e => e.SecOfficeGroupId).HasColumnName("SecOfficeGroupID");

                entity.Property(e => e.TicketNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.SecOffcGrpChangeHistories)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .HasConstraintName("conBusinessUnit_SecOffcGrpChangeHistory_BusinessUnitID_FK3");

                entity.HasOne(d => d.ChangeEvent)
                    .WithMany(p => p.SecOffcGrpChangeHistories)
                    .HasForeignKey(d => d.ChangeEventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conTypeCdDMT_SecOffcGrpChangeHistory_ChangeEventID_FK1");

                entity.HasOne(d => d.SecOfficeGroup)
                    .WithMany(p => p.SecOffcGrpChangeHistories)
                    .HasForeignKey(d => d.SecOfficeGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conSecOfficeGroup_SecOffcGrpChangeHistory_SecOfficeGroupID_FK2");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.SecOffcGrpChangeHistories)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conEmployee_SecOffcGrpChangeHistory_UserID_FK4");
            });

            modelBuilder.Entity<SecOfficeGroup>(entity =>
            {
                entity.ToTable("SecOfficeGroup");

                entity.HasIndex(e => e.BusinessUnitId, "IdxSecOfficeGroup_SecOfficeGroupIDBusinessUnitID_Ix1")
                    .HasFillFactor(90);

                entity.Property(e => e.SecOfficeGroupId).HasColumnName("SecOfficeGroupID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.SecOfficeGroupsNavigation)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conBusinessUnit_SecOfficeGroup_BusinessUnitID_FK1");

                entity.HasMany(d => d.BusinessUnits)
                    .WithMany(p => p.SecOfficeGroups)
                    .UsingEntity<Dictionary<string, object>>(
                        "SecOffcGrpOfficesXref",
                        l => l.HasOne<BusinessUnit>().WithMany().HasForeignKey("BusinessUnitId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conBusinessUnit_SecOffcGrpOfficesXref_BusinessUnitID_FK2"),
                        r => r.HasOne<SecOfficeGroup>().WithMany().HasForeignKey("SecOfficeGroupId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conSecOfficeGroup_SecOffcGrpOfficesXref_SecOfficeGroupID_FK1"),
                        j =>
                        {
                            j.HasKey("SecOfficeGroupId", "BusinessUnitId").HasName("conSecOffcGrpOfficesXrefPK");

                            j.ToTable("SecOffcGrpOfficesXref");

                            j.HasIndex(new[] { "BusinessUnitId" }, "IdxSecOffcGrpOfficesXref_BusinessUnitID_Ix2").HasFillFactor(90);

                            j.HasIndex(new[] { "SecOfficeGroupId" }, "IdxSecOffcGrpOfficesXref_SecOfficeGroupID_Ix1").HasFillFactor(90);

                            j.IndexerProperty<int>("SecOfficeGroupId").HasColumnName("SecOfficeGroupID");

                            j.IndexerProperty<int>("BusinessUnitId").HasColumnName("BusinessUnitID");
                        });
            });

            modelBuilder.Entity<Section>(entity =>
            {
                entity.ToTable("Section");

                entity.HasIndex(e => e.SeqNum, "idxSectionSeqNum")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ObjectCd, "idxUQSectionObjectCd")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.SectionId).HasColumnName("SectionID");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Descr)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.StatusCd).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<SectionResequence>(entity =>
            {
                entity.ToTable("SectionResequence");

                entity.HasIndex(e => e.FileId, "idxNCSResqFileID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SectionId, "idxNCSResqSectionID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SubTotalFlag, "idxNCSResqSubTotalFlag")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FileId, e.SectionId }, "idxUQSResqSectionIDFileID")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.SectionResequenceId).HasColumnName("SectionResequenceID");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastModifiedUserId).HasColumnName("LastModifiedUserID");

                entity.Property(e => e.SectionId).HasColumnName("SectionID");

                entity.Property(e => e.SubSection)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.CreationUser)
                    .WithMany(p => p.SectionResequenceCreationUsers)
                    .HasForeignKey(d => d.CreationUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conSecResqCreationUserIDFK");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.SectionResequences)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conSecResqFileIDFK");

                entity.HasOne(d => d.LastModifiedUser)
                    .WithMany(p => p.SectionResequenceLastModifiedUsers)
                    .HasForeignKey(d => d.LastModifiedUserId)
                    .HasConstraintName("conSecResqLastModifiedUserIDFK");

                entity.HasOne(d => d.Section)
                    .WithMany(p => p.SectionResequences)
                    .HasForeignKey(d => d.SectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conSecResqSectionIDFK");
            });

            modelBuilder.Entity<SecuredElement>(entity =>
            {
                entity.Property(e => e.SecuredElementId).HasColumnName("SecuredElementID");

                entity.Property(e => e.ActivityGrpId).HasColumnName("ActivityGrpID");

                entity.Property(e => e.ActivityId).HasColumnName("ActivityID");

                entity.Property(e => e.ElementIdentifier)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ScreenId).HasColumnName("ScreenID");

                entity.HasOne(d => d.ActivityGrp)
                    .WithMany(p => p.SecuredElements)
                    .HasForeignKey(d => d.ActivityGrpId)
                    .HasConstraintName("Fk_SecuredElements_ActivityGrpID");

                entity.HasOne(d => d.Activity)
                    .WithMany(p => p.SecuredElements)
                    .HasForeignKey(d => d.ActivityId)
                    .HasConstraintName("Fk_SecuredElements_ActivityID");

                entity.HasOne(d => d.Screen)
                    .WithMany(p => p.SecuredElements)
                    .HasForeignKey(d => d.ScreenId)
                    .HasConstraintName("Fk_SecuredElements_ScreenID");
            });

            modelBuilder.Entity<ServiceBehaviorLog>(entity =>
            {
                entity.ToTable("ServiceBehaviorLog");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ClientIp)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ClientIP");

                entity.Property(e => e.DateTime).HasColumnType("datetime");

                entity.Property(e => e.Exception).IsUnicode(false);

                entity.Property(e => e.LogLevel)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LoggerName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Message).IsUnicode(false);

                entity.Property(e => e.ProcessId).HasColumnName("ProcessID");

                entity.Property(e => e.RequestResponseType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ServerIp)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ServerIP");

                entity.Property(e => e.ServerName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SoapAction)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadId).HasColumnName("ThreadID");

                entity.Property(e => e.TrackingId).HasColumnName("TrackingID");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ServiceFee>(entity =>
            {
                entity.ToTable("ServiceFee");

                entity.HasIndex(e => e.FileId, "ixn_ServiceFeeFileID")
                    .HasFillFactor(90);

                entity.Property(e => e.ServiceFeeId).HasColumnName("ServiceFeeID");

                entity.Property(e => e.FeeAmount).HasColumnType("money");

                entity.Property(e => e.FeeId).HasColumnName("FeeID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.GllookupId).HasColumnName("GLLookupID");

                entity.Property(e => e.PayeeFileBusinessPartyId).HasColumnName("PayeeFileBusinessPartyID");

                entity.Property(e => e.ServiceFeeExtractId).HasColumnName("ServiceFeeExtractID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.Fee)
                    .WithMany(p => p.ServiceFees)
                    .HasForeignKey(d => d.FeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conServiceFee2FeeFK");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.ServiceFees)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conServiceFee2ServiceFileFK");

                entity.HasOne(d => d.Gllookup)
                    .WithMany(p => p.ServiceFees)
                    .HasForeignKey(d => d.GllookupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conServiceFee2GLLookupFK");

                entity.HasOne(d => d.PayeeFileBusinessParty)
                    .WithMany(p => p.ServiceFees)
                    .HasForeignKey(d => d.PayeeFileBusinessPartyId)
                    .HasConstraintName("conServiceFee2FileBusinessPartyFK");
            });

            modelBuilder.Entity<ServiceFeeExtract>(entity =>
            {
                entity.ToTable("ServiceFeeExtract");

                entity.HasIndex(e => e.ExtractCompleteDate, "ixn_ServiceFeeExtractExtractCompleteDate")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ExtractDate, "ixn_ServiceFeeExtractExtractDate")
                    .HasFillFactor(90);

                entity.Property(e => e.ServiceFeeExtractId).HasColumnName("ServiceFeeExtractID");

                entity.Property(e => e.ExtractCompleteDate).HasColumnType("datetime");

                entity.Property(e => e.ExtractDate).HasColumnType("date");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<ServiceFeeExtractedBusinessUnit>(entity =>
            {
                entity.ToTable("ServiceFeeExtractedBusinessUnit");

                entity.HasIndex(e => e.PayeeBusinessUnitId, "ixn_ServiceFeeExtractedBusinessUnitPayeeBusinessUnitID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ServiceFeeExtractId, "ixn_ServiceFeeExtractedBusinessUnitServiceFeeExtractID")
                    .HasFillFactor(90);

                entity.Property(e => e.ServiceFeeExtractedBusinessUnitId).HasColumnName("ServiceFeeExtractedBusinessUnitID");

                entity.Property(e => e.OfficeExtractCompleteDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.PayeeBusinessUnitId).HasColumnName("PayeeBusinessUnitID");

                entity.Property(e => e.ServiceFeeExtractId).HasColumnName("ServiceFeeExtractID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<ServiceFeeStatusHistory>(entity =>
            {
                entity.ToTable("ServiceFeeStatusHistory");

                entity.HasIndex(e => e.ServiceFeeId, "ixn_ServiceFeeStatusHistoryServiceFeeID")
                    .HasFillFactor(90);

                entity.Property(e => e.ServiceFeeStatusHistoryId).HasColumnName("ServiceFeeStatusHistoryID");

                entity.Property(e => e.ServiceFeeExtractId).HasColumnName("ServiceFeeExtractID");

                entity.Property(e => e.ServiceFeeId).HasColumnName("ServiceFeeID");

                entity.Property(e => e.StatusChangedDate).HasColumnType("date");

                entity.Property(e => e.StatusChangedReason)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<ServiceFile>(entity =>
            {
                entity.HasKey(e => e.FileId)
                    .HasName("conServiceFile1Pk");

                entity.ToTable("ServiceFile");

                entity.HasIndex(e => e.UpdTs, "DW_IXN01_ServiceFile_UpdTS")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ExternalFileNum, "IDXExternalFileNumber")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ExternalId, "IDXExternalId")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.OpenDate, e.StatusCd }, "IDXOpenDate")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ProjectFileId, "IDXPrjctFileID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FileId, e.OrderId, e.FileNum }, "IDXServiceFileOrderNum")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.OwnerOfficeId, e.StatusCd, e.OpenDate }, "IDX_ServiceFile_OwnerOfficeID_StatusCd_OpenDate_Incl")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BaseFileFlag, "IX_ServiceFile_BaseFileFlag")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.CreationDate, e.CreationUserId }, "IdxServiceFileCreationDate");

                entity.HasIndex(e => e.SecondExternalFileNum, "idx_ServiceFile_SecondExternalFileNum");

                entity.HasIndex(e => new { e.FileNum, e.OwnerOfficeId }, "indServiceFile2")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.OrderId, "indServiceFile3Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.WorkflowId, "indServiceFile8Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.OwnerOfficeId, "indServiceFile9Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.ActualIdDate).HasColumnType("datetime");

                entity.Property(e => e.AssociatedPartyRoleId).HasColumnName("AssociatedPartyRoleID");

                entity.Property(e => e.BusSegTypeCdId).HasColumnName("BusSegTypeCdID");

                entity.Property(e => e.BusSourceTypeId).HasColumnName("BusSourceTypeID");

                entity.Property(e => e.BusinessSourceRoleId).HasColumnName("BusinessSourceRoleID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(CONVERT([varchar],getdate(),(120)))");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.Property(e => e.DirectedByRoleId).HasColumnName("DirectedByRoleID");

                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

                entity.Property(e => e.ExternalApplId).HasColumnName("ExternalApplID");

                entity.Property(e => e.ExternalFileNum)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ExternalId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ExternalID");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FileNumPrefix)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FileNumSuffix)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FilerContactInfo)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.FilingOffAcctNum)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HudFlag).HasColumnName("HUD_Flag");

                entity.Property(e => e.OpenDate).HasColumnType("datetime");

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.OwnerOfficeId).HasColumnName("OwnerOfficeID");

                entity.Property(e => e.ProjectFileId).HasColumnName("ProjectFileID");

                entity.Property(e => e.ReactivationDate).HasColumnType("datetime");

                entity.Property(e => e.ReturnCopyToInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SalesRepId).HasColumnName("SalesRepID");

                entity.Property(e => e.SecondExternalFileNum)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.StatusChgComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StatusChgDate).HasColumnType("datetime");

                entity.Property(e => e.StatusChgUserId).HasColumnName("StatusChgUserID");

                entity.Property(e => e.TransTypeCdId).HasColumnName("TransTypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.WorkflowId).HasColumnName("WorkflowID");

                entity.HasOne(d => d.BusSegTypeCd)
                    .WithMany(p => p.ServiceFileBusSegTypeCds)
                    .HasForeignKey(d => d.BusSegTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FKBusSegType");

                entity.HasOne(d => d.BusSourceType)
                    .WithMany(p => p.ServiceFiles)
                    .HasForeignKey(d => d.BusSourceTypeId)
                    .HasConstraintName("con1ServiceFileBusinessSourceTypeFK");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.ServiceFiles)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conServiceFile8Fk");

                entity.HasOne(d => d.CreationUser)
                    .WithMany(p => p.ServiceFileCreationUsers)
                    .HasForeignKey(d => d.CreationUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conServiceFile3Fk");

                entity.HasOne(d => d.ExternalAppl)
                    .WithMany(p => p.ServiceFiles)
                    .HasForeignKey(d => d.ExternalApplId)
                    .HasConstraintName("conServiceFile9Fk");

                entity.HasOne(d => d.FileRateType)
                    .WithMany(p => p.ServiceFiles)
                    .HasForeignKey(d => d.FileRateTypeId)
                    .HasConstraintName("conServiceFile13FK");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.ServiceFiles)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conServiceFile5Fk");

                entity.HasOne(d => d.OwnerOffice)
                    .WithMany(p => p.ServiceFiles)
                    .HasForeignKey(d => d.OwnerOfficeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conServiceFile6Fk");

                entity.HasOne(d => d.SalesRep)
                    .WithMany(p => p.ServiceFileSalesReps)
                    .HasForeignKey(d => d.SalesRepId)
                    .HasConstraintName("conServiceFile4Fk");

                entity.HasOne(d => d.StatusChgUser)
                    .WithMany(p => p.ServiceFileStatusChgUsers)
                    .HasForeignKey(d => d.StatusChgUserId)
                    .HasConstraintName("conServiceFile2Fk");

                entity.HasOne(d => d.TransTypeCd)
                    .WithMany(p => p.ServiceFileTransTypeCds)
                    .HasForeignKey(d => d.TransTypeCdId)
                    .HasConstraintName("conServiceFile12Fk");

                entity.HasOne(d => d.Workflow)
                    .WithMany(p => p.ServiceFiles)
                    .HasForeignKey(d => d.WorkflowId)
                    .HasConstraintName("conServiceFile7Fk");

                entity.HasMany(d => d.AddrBookEntries)
                    .WithMany(p => p.Files)
                    .UsingEntity<Dictionary<string, object>>(
                        "ServiceFileMiscAddrBookXref",
                        l => l.HasOne<AddrBookEntry>().WithMany().HasForeignKey("AddrBookEntryId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conServiceFileMiscAddrBkXref3Fk"),
                        r => r.HasOne<ServiceFile>().WithMany().HasForeignKey("FileId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conServiceFileMiscAddrBkXref2Fk"),
                        j =>
                        {
                            j.HasKey("FileId", "AddrBookEntryId").HasName("conServFileMiscAddrBookXref1Pk");

                            j.ToTable("ServiceFileMiscAddrBookXref");

                            j.HasIndex(new[] { "AddrBookEntryId" }, "indServFileMiscAddrBookXref2Fk").HasFillFactor(90);

                            j.IndexerProperty<int>("FileId").HasColumnName("FileID");

                            j.IndexerProperty<int>("AddrBookEntryId").HasColumnName("AddrBookEntryID");
                        });

                entity.HasMany(d => d.BusinessPrograms)
                    .WithMany(p => p.Files)
                    .UsingEntity<Dictionary<string, object>>(
                        "BusinessProgramServiceFileXref",
                        l => l.HasOne<BusinessProgram>().WithMany().HasForeignKey("BusinessProgramId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_BusinessProgramServiceFileXref_BusinessProgram"),
                        r => r.HasOne<ServiceFile>().WithMany().HasForeignKey("FileId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_BusinessProgramServiceFileXref_ServiceFile"),
                        j =>
                        {
                            j.HasKey("FileId", "BusinessProgramId").HasName("Unq_BusinessProgramServiceFileXref_FileID_BPID");

                            j.ToTable("BusinessProgramServiceFileXref");

                            j.IndexerProperty<int>("FileId").HasColumnName("FileID");
                        });

                entity.HasMany(d => d.TitleEscrowInfos)
                    .WithMany(p => p.Files)
                    .UsingEntity<Dictionary<string, object>>(
                        "ServiceFileTitleEscrowXref",
                        l => l.HasOne<TitleEscrowInfo>().WithMany().HasForeignKey("TitleEscrowInfoId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conServiceFileTitleEscrowXref2Fk"),
                        r => r.HasOne<ServiceFile>().WithMany().HasForeignKey("FileId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conServiceFileTitleEscrowXref3Fk"),
                        j =>
                        {
                            j.HasKey("FileId", "TitleEscrowInfoId").HasName("conServFileTitleEscrowXref1Pk");

                            j.ToTable("ServiceFileTitleEscrowXref");

                            j.HasIndex(new[] { "TitleEscrowInfoId" }, "indServFileTitleEscrowXref2Fk").HasFillFactor(90);

                            j.IndexerProperty<int>("FileId").HasColumnName("FileID");

                            j.IndexerProperty<int>("TitleEscrowInfoId").HasColumnName("TitleEscrowInfoID");
                        });
            });

            modelBuilder.Entity<ServiceFileAttribute>(entity =>
            {
                entity.ToTable("ServiceFileAttribute");

                entity.HasIndex(e => new { e.FileId, e.NameTypeCdId }, "UNQ_ServiceFileAttribute_FileID_NameTypeCdID")
                    .IsUnique();

                entity.Property(e => e.ServiceFileAttributeId).HasColumnName("ServiceFileAttributeID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.NameTypeCdId).HasColumnName("NameTypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.Value)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.HasOne(d => d.File)
                    .WithMany(p => p.ServiceFileAttributes)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FileID_ServiceFile_ServiceFileID");

                entity.HasOne(d => d.NameTypeCd)
                    .WithMany(p => p.ServiceFileAttributes)
                    .HasForeignKey(d => d.NameTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NameTypeCdID_TypeCdDmt_TypeCdID");
            });

            modelBuilder.Entity<ServiceFileCloud>(entity =>
            {
                entity.HasKey(e => e.Fileid)
                    .HasName("PK__ServiceF__6F0C8497DE5E27EC");

                entity.ToTable("ServiceFile_Cloud");

                entity.Property(e => e.Fileid).ValueGeneratedNever();
            });

            modelBuilder.Entity<ServiceFileDeliveryInstruction>(entity =>
            {
                entity.HasKey(e => e.DeliveryInstructionId)
                    .HasName("PK_DeliveryInstruction_ID");

                entity.ToTable("ServiceFileDeliveryInstruction");

                entity.HasIndex(e => e.FileBusinessPartyId, "Ind_ServiceFileDeliveryInstruction_FBP")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FileId, e.RoleTypeCdId, e.SeqNum }, "Ind_ServiceFileDeliveryInstruction_FileID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PrincipalId, "idx_SFDI_principalId")
                    .HasFillFactor(90);

                entity.Property(e => e.DeliveryInstructionId).HasColumnName("DeliveryInstructionID");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.CcrsCopies).HasColumnName("CCRsCopies");

                entity.Property(e => e.CcrsDeliveryMethod).HasColumnName("CCRsDeliveryMethod");

                entity.Property(e => e.FileBusinessPartyId).HasColumnName("FileBusinessPartyID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.ImagedFlag).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsEditable).HasDefaultValueSql("((0))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.PrincipalId).HasColumnName("PrincipalID");

                entity.Property(e => e.RoleTypeCdId).HasColumnName("RoleTypeCdID");

                entity.Property(e => e.Updts)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UPDTS");

                entity.HasOne(d => d.BusOrg)
                    .WithMany(p => p.ServiceFileDeliveryInstructions)
                    .HasForeignKey(d => d.BusOrgId)
                    .HasConstraintName("FK_DeliveryInstruction_BusOrgID");

                entity.HasOne(d => d.FileBusinessParty)
                    .WithMany(p => p.ServiceFileDeliveryInstructions)
                    .HasForeignKey(d => d.FileBusinessPartyId)
                    .HasConstraintName("FK_DeliveryInstruction_FileBusinessPartyID");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.ServiceFileDeliveryInstructions)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DeliveryInstruction_FileID");

                entity.HasOne(d => d.Principal)
                    .WithMany(p => p.ServiceFileDeliveryInstructions)
                    .HasForeignKey(d => d.PrincipalId)
                    .HasConstraintName("FK_DeliveryInstruction_PrincipalID");
            });

            modelBuilder.Entity<ServiceFileDocumentXref>(entity =>
            {
                entity.HasKey(e => e.DocId)
                    .HasName("ServiceFileDocumentXref_Pk");

                entity.ToTable("ServiceFileDocumentXref");

                entity.HasIndex(e => e.CommitDocIdforPolicy, "IDX_ServiceFileDocumentXref_CommitDocIDForPolicy")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileId, "IDX_ServiceFileDocumentXref_FileID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.LoanIdforPolicy, "IDX_ServiceFileDocumentXref_LoanIDForPolicy")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.StatusCd, "IDX_ServiceFileDocumentXref_StatusCD")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TemplateId, "IDX_ServiceFileDocumentXref_TemplateID")
                    .HasFillFactor(90);

                entity.Property(e => e.DocId)
                    .ValueGeneratedNever()
                    .HasColumnName("DocID");

                entity.Property(e => e.CommitApprovedChgById).HasColumnName("CommitApprovedChgByID");

                entity.Property(e => e.CommitApprovedChgDate).HasColumnType("datetime");

                entity.Property(e => e.CommitDocIdforPolicy).HasColumnName("CommitDocIDForPolicy");

                entity.Property(e => e.DeliveryEventLogId).HasColumnName("DeliveryEventLogID");

                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.LoanIdforPolicy).HasColumnName("LoanIDForPolicy");

                entity.Property(e => e.Name)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.StatusChgDate).HasColumnType("datetime");

                entity.Property(e => e.TemplateId).HasColumnName("TemplateID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedUserId).HasColumnName("UpdatedUserID");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.ServiceFileDocumentXrefs)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ServiceFileDocumentXref_ServiceFileFK");

                entity.HasMany(d => d.PhysicalAddrs)
                    .WithMany(p => p.Policies)
                    .UsingEntity<Dictionary<string, object>>(
                        "PolicyPhysicalAddrXrefDocPrep",
                        l => l.HasOne<PhysicalAddr>().WithMany().HasForeignKey("PhysicalAddrId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("con_PolicyPhysicalAddrXref_DocPrep_FK_1"),
                        r => r.HasOne<ServiceFileDocumentXref>().WithMany().HasForeignKey("PolicyId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("con_PolicyPhysicalAddrXref_DocPrep_FK_2"),
                        j =>
                        {
                            j.HasKey("PolicyId", "PhysicalAddrId").HasName("conPolicyPhysicalAddrXref_DocPrepPK");

                            j.ToTable("PolicyPhysicalAddrXref_DocPrep");

                            j.HasIndex(new[] { "PhysicalAddrId" }, "IDX_PolicyPhysicalAddrXref_DocPrep_PhysicalAddrID").HasFillFactor(90);

                            j.IndexerProperty<long>("PolicyId").HasColumnName("PolicyID");

                            j.IndexerProperty<int>("PhysicalAddrId").HasColumnName("PhysicalAddrID");
                        });
            });

            modelBuilder.Entity<ServiceFileDocumentXrefCloud>(entity =>
            {
                entity.HasKey(e => e.DocId)
                    .HasName("PK__ServiceF__3EF1888D37765FE2");

                entity.ToTable("ServiceFileDocumentXref_Cloud");

                entity.Property(e => e.DocId)
                    .ValueGeneratedNever()
                    .HasColumnName("DocID");

                entity.Property(e => e.NgDocId).HasColumnName("NG_DocID");
            });

            modelBuilder.Entity<ServiceFileDocumentXrefInsert>(entity =>
            {
                entity.HasKey(e => e.DocId)
                    .HasName("ServiceFileDocumentXref_Pk_Insert");

                entity.ToTable("ServiceFileDocumentXref_Insert");

                entity.Property(e => e.DocId)
                    .ValueGeneratedNever()
                    .HasColumnName("DocID");

                entity.Property(e => e.CommitApprovedChgById).HasColumnName("CommitApprovedChgByID");

                entity.Property(e => e.CommitApprovedChgDate).HasColumnType("datetime");

                entity.Property(e => e.CommitDocIdforPolicy).HasColumnName("CommitDocIDForPolicy");

                entity.Property(e => e.DeliveryEventLogId).HasColumnName("DeliveryEventLogID");

                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.LoanIdforPolicy).HasColumnName("LoanIDForPolicy");

                entity.Property(e => e.Name)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.StatusChgDate).HasColumnType("datetime");

                entity.Property(e => e.TemplateId).HasColumnName("TemplateID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedUserId).HasColumnName("UpdatedUserID");
            });

            modelBuilder.Entity<ServiceFileEfileCpl>(entity =>
            {
                entity.ToTable("ServiceFileEFileCPL");

                entity.HasIndex(e => e.ServiceFileId, "IDX_ServiceFileEFileCPL_ServiceFileID")
                    .HasFillFactor(90);

                entity.Property(e => e.ServiceFileEfileCplid).HasColumnName("ServiceFileEFileCPLID");

                entity.Property(e => e.AgentNetFileId).HasColumnName("AgentNetFileID");

                entity.Property(e => e.AgentNetFirmId).HasColumnName("AgentNetFirmID");

                entity.Property(e => e.AgentNetOfficeId).HasColumnName("AgentNetOfficeID");

                entity.Property(e => e.AgentNetUnderwriterCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ClientRequestIdtext)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ClientRequestIDText");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ElectronicFileId).HasColumnName("ElectronicFileID");

                entity.Property(e => e.ProductResponseId).HasColumnName("ProductResponseID");

                entity.Property(e => e.ServiceFileId).HasColumnName("ServiceFileID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<ServiceFileEfileXref>(entity =>
            {
                entity.ToTable("ServiceFileEFileXref");

                entity.HasIndex(e => e.ServiceFileId, "IdxServiceFileEFileXref_ServiceFileID_IX1")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ServiceFileId, e.ElectronicFileId }, "UNQIDX_ServiceFileEFileXref")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.ServiceFileEfileXrefId).HasColumnName("ServiceFileEFileXrefID");

                entity.Property(e => e.Cvflag).HasColumnName("CVFlag");

                entity.Property(e => e.ElectronicFileId).HasColumnName("ElectronicFileID");

                entity.Property(e => e.ServiceFileId).HasColumnName("ServiceFileID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ServiceFile)
                    .WithMany(p => p.ServiceFileEfileXrefs)
                    .HasForeignKey(d => d.ServiceFileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceFileEFileXref");
            });

            modelBuilder.Entity<ServiceFileEmployeeXref>(entity =>
            {
                entity.HasKey(e => new { e.FunctionTypeCdId, e.FileId, e.EmployeeId })
                    .HasName("conServFileEmplXref1Pk");

                entity.ToTable("ServiceFileEmployeeXref");

                entity.HasIndex(e => new { e.EmployeeId, e.FunctionTypeCdId }, "indServFileEmplXref2Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileId, "indServFileEmplXref3Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.FunctionTypeCdId).HasColumnName("FunctionTypeCdID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.StateLicenseInformationId).HasColumnName("StateLicenseInformationID");

                entity.Property(e => e.StateLicenseNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ServiceFileEmployeeXrefs)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceFileEmployeeXref_Employee");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.ServiceFileEmployeeXrefs)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conServiceFileEmployeeXref1FK");

                entity.HasOne(d => d.FunctionTypeCd)
                    .WithMany(p => p.ServiceFileEmployeeXrefs)
                    .HasForeignKey(d => d.FunctionTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceFileEmployeeXref_TypeCdDmt");
            });

            modelBuilder.Entity<ServiceFileFee>(entity =>
            {
                entity.ToTable("ServiceFileFee");

                entity.HasIndex(e => new { e.FileId, e.FileFeeCategoryTypeCdId, e.PayeeFileBusinessPartyId }, "IdxServiceFileFeePayee")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileProcessId, "XIF252ServiceFileFee")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PayeeFileBusinessPartyId, "XIF255ServiceFileFee")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FeeId, "fee_ix")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ServiceFileFeeId, e.InvoiceId }, "idx_ServiceFileFee_ServiceFileFeeID_InvoiceID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FileId, e.FeeId, e.FileFeeCategoryTypeCdId, e.FeeTypeCdId }, "idx_ServiceFileFee_m4")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileId, "indServiceFileFee2Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.InvoiceId, "indServiceFileFee8bkpFk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PolicyId, "indServiceFileFee9Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FeeRateTypeId, e.TransactionTypeId }, "indServiceFileFeeFeeRateTypeIdTransactionTypeId");

                entity.HasIndex(e => e.LoanId, "indServiceFileFeeLoanId");

                entity.HasIndex(e => e.PolicyFeeId, "indServiceFileFeePolicyFeeId");

                entity.Property(e => e.ServiceFileFeeId).HasColumnName("ServiceFileFeeID");

                entity.Property(e => e.ActionStatusId)
                    .HasColumnName("ActionStatusID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AdditionalDescr)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.AggregateLpolicyFlag).HasColumnName("AggregateLPolicyFlag");

                entity.Property(e => e.BuyerChargeAmt).HasColumnType("money");

                entity.Property(e => e.BuyerChargeSection)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSalesTaxAmt).HasColumnType("money");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DefaultPaymentCategoryTypeCdId).HasColumnName("DefaultPaymentCategoryTypeCdID");

                entity.Property(e => e.DefaultPaymentMethodTypeCdId).HasColumnName("DefaultPaymentMethodTypeCdID");

                entity.Property(e => e.Descr)
                    .HasMaxLength(201)
                    .IsUnicode(false);

                entity.Property(e => e.DiscountAmt).HasColumnType("money");

                entity.Property(e => e.DiscountPercent).HasColumnType("decimal(6, 4)");

                entity.Property(e => e.EndorsementToPrimaryLpolicyFlag).HasColumnName("EndorsementToPrimaryLPolicyFlag");

                entity.Property(e => e.ExchangeFeeAmt).HasColumnType("money");

                entity.Property(e => e.FaccadjustedAmount)
                    .HasColumnType("money")
                    .HasColumnName("FACCAdjustedAmount");

                entity.Property(e => e.Faccflag).HasColumnName("FACCFlag");

                entity.Property(e => e.FeeId).HasColumnName("FeeID");

                entity.Property(e => e.FeeOwningOfficeBuid).HasColumnName("FeeOwningOfficeBUID");

                entity.Property(e => e.FeeOwningOfficeTypeCdId).HasColumnName("FeeOwningOfficeTypeCdID");

                entity.Property(e => e.FeeTypeCdId).HasColumnName("FeeTypeCdID");

                entity.Property(e => e.FileFeeCategoryTypeCdId).HasColumnName("FileFeeCategoryTypeCdID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FileProcessId).HasColumnName("FileProcessID");

                entity.Property(e => e.FileTransactionTypeCdId).HasColumnName("FileTransactionTypeCdID");

                entity.Property(e => e.GeographicTypeCdId).HasColumnName("GeographicTypeCdID");

                entity.Property(e => e.GfeEntryEditableFlag).HasDefaultValueSql("((0))");

                entity.Property(e => e.GfeEntryTypeCdId).HasColumnName("GfeEntryTypeCdID");

                entity.Property(e => e.GfeHudtypeCdId).HasColumnName("GfeHUDTypeCdID");

                entity.Property(e => e.GfeLenderDirEditableFlag).HasDefaultValueSql("((0))");

                entity.Property(e => e.GfeLenderDirectedFlag).HasDefaultValueSql("((1))");

                entity.Property(e => e.GfePobobflag)
                    .HasColumnName("GfePOBOBFlag")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.GfeThirdPartyEditableFlag).HasDefaultValueSql("((0))");

                entity.Property(e => e.GfeThirdPartyNameDefault)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.GllookupId).HasColumnName("GLLookupID");

                entity.Property(e => e.InvoiceId).HasColumnName("InvoiceID");

                entity.Property(e => e.LoanEstimateDescr)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.LoanEstimateUnrounded).HasColumnType("money");

                entity.Property(e => e.LoanestimateRounded).HasColumnType("money");

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Otcflag).HasColumnName("OTCFlag");

                entity.Property(e => e.PayeeFileBusinessPartyId).HasColumnName("PayeeFileBusinessPartyID");

                entity.Property(e => e.PaymentMethodTypeCdId).HasColumnName("PaymentMethodTypeCdID");

                entity.Property(e => e.PolicyId).HasColumnName("PolicyID");

                entity.Property(e => e.SellerChargeAmt).HasColumnType("money");

                entity.Property(e => e.SellerChargeSection)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SellerSalesTaxAmt).HasColumnType("money");

                entity.Property(e => e.ShowOnCdpg3).HasColumnName("ShowOnCDPg3");

                entity.Property(e => e.SimPolicyAdjAmt).HasColumnType("money");

                entity.Property(e => e.T64excludeFlag).HasColumnName("T64ExcludeFlag");

                entity.Property(e => e.TemplateId).HasColumnName("TemplateID");

                entity.Property(e => e.UpdDate).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.ServiceFileFees)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conServiceFileFee7FK");

                entity.HasOne(d => d.DefaultPaymentMethodTypeCd)
                    .WithMany(p => p.ServiceFileFeeDefaultPaymentMethodTypeCds)
                    .HasForeignKey(d => d.DefaultPaymentMethodTypeCdId)
                    .HasConstraintName("R_525");

                entity.HasOne(d => d.Fee)
                    .WithMany(p => p.ServiceFileFees)
                    .HasForeignKey(d => d.FeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conServiceFileFee10FK");

                entity.HasOne(d => d.FeeRateType)
                    .WithMany(p => p.ServiceFileFees)
                    .HasForeignKey(d => d.FeeRateTypeId)
                    .HasConstraintName("conServiceFileFee14FK");

                entity.HasOne(d => d.FeeToBucketNavigation)
                    .WithMany(p => p.ServiceFileFeeFeeToBucketNavigations)
                    .HasForeignKey(d => d.FeeToBucket)
                    .HasConstraintName("conSFFeeToBucketType");

                entity.HasOne(d => d.FeeTypeCd)
                    .WithMany(p => p.ServiceFileFeeFeeTypeCds)
                    .HasForeignKey(d => d.FeeTypeCdId)
                    .HasConstraintName("conServiceFileFee5FK");

                entity.HasOne(d => d.FileFeeCategoryTypeCd)
                    .WithMany(p => p.ServiceFileFeeFileFeeCategoryTypeCds)
                    .HasForeignKey(d => d.FileFeeCategoryTypeCdId)
                    .HasConstraintName("conServiceFileFee8FK");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.ServiceFileFees)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conServiceFileFee2FK");

                entity.HasOne(d => d.FileProcess)
                    .WithMany(p => p.ServiceFileFees)
                    .HasForeignKey(d => d.FileProcessId)
                    .HasConstraintName("R_523");

                entity.HasOne(d => d.FileTransactionTypeCd)
                    .WithMany(p => p.ServiceFileFeeFileTransactionTypeCds)
                    .HasForeignKey(d => d.FileTransactionTypeCdId)
                    .HasConstraintName("R_521");

                entity.HasOne(d => d.GeographicTypeCd)
                    .WithMany(p => p.ServiceFileFeeGeographicTypeCds)
                    .HasForeignKey(d => d.GeographicTypeCdId)
                    .HasConstraintName("conServiceFileFee4FK");

                entity.HasOne(d => d.Invoice)
                    .WithMany(p => p.ServiceFileFees)
                    .HasForeignKey(d => d.InvoiceId)
                    .HasConstraintName("conServiceFileFee9FK");

                entity.HasOne(d => d.Loan)
                    .WithMany(p => p.ServiceFileFees)
                    .HasForeignKey(d => d.LoanId)
                    .HasConstraintName("conServiceFileFee16FK");

                entity.HasOne(d => d.PayeeFileBusinessParty)
                    .WithMany(p => p.ServiceFileFees)
                    .HasForeignKey(d => d.PayeeFileBusinessPartyId)
                    .HasConstraintName("R_526");

                entity.HasOne(d => d.PaymentMethodTypeCd)
                    .WithMany(p => p.ServiceFileFeePaymentMethodTypeCds)
                    .HasForeignKey(d => d.PaymentMethodTypeCdId)
                    .HasConstraintName("R_524");

                entity.HasOne(d => d.PolicyFee)
                    .WithMany(p => p.InversePolicyFee)
                    .HasForeignKey(d => d.PolicyFeeId)
                    .HasConstraintName("conServiceFileFee17FK");

                entity.HasOne(d => d.TransactionType)
                    .WithMany(p => p.ServiceFileFees)
                    .HasForeignKey(d => d.TransactionTypeId)
                    .HasConstraintName("conServiceFileFee15FK");
            });

            modelBuilder.Entity<ServiceFileFeePaymentDetail>(entity =>
            {
                entity.ToTable("ServiceFileFeePaymentDetail");

                entity.HasIndex(e => new { e.ServiceFileFeeId, e.PaymentMethodTypeCdId, e.ChargePaidByTypeCdId, e.PaidChargeAmt, e.SalesTaxAmt }, "idx_ServiceFileFeePaymentDetail_1")
                    .HasFillFactor(90);

                entity.Property(e => e.ServiceFileFeePaymentDetailId).HasColumnName("ServiceFileFeePaymentDetailID");

                entity.Property(e => e.ChargePaidByTypeCdId).HasColumnName("ChargePaidByTypeCdID");

                entity.Property(e => e.PaidChargeAmt).HasColumnType("money");

                entity.Property(e => e.PaymentMethodTypeCdId).HasColumnName("PaymentMethodTypeCdID");

                entity.Property(e => e.SalesTaxAmt).HasColumnType("money");

                entity.Property(e => e.ServiceFileFeeId).HasColumnName("ServiceFileFeeID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ChargePaidByTypeCd)
                    .WithMany(p => p.ServiceFileFeePaymentDetailChargePaidByTypeCds)
                    .HasForeignKey(d => d.ChargePaidByTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conServiceFileFeePaymentDetail2FK");

                entity.HasOne(d => d.PaymentMethodTypeCd)
                    .WithMany(p => p.ServiceFileFeePaymentDetailPaymentMethodTypeCds)
                    .HasForeignKey(d => d.PaymentMethodTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conServiceFileFeePaymentDetail3FK");

                entity.HasOne(d => d.ServiceFileFee)
                    .WithMany(p => p.ServiceFileFeePaymentDetails)
                    .HasForeignKey(d => d.ServiceFileFeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conServiceFileFeePaymentDetail1FK");
            });

            modelBuilder.Entity<ServiceFileFeePromulgatedRate>(entity =>
            {
                entity.HasKey(e => e.ServiceFileFeeId)
                    .HasName("PK__ServiceF__C12DCA4E1369D842");

                entity.Property(e => e.ServiceFileFeeId).ValueGeneratedNever();

                entity.Property(e => e.BuyerPromulgatedRate).HasColumnType("money");

                entity.Property(e => e.SellerPromulgatedRate).HasColumnType("money");

                entity.HasOne(d => d.ServiceFileFee)
                    .WithOne(p => p.ServiceFileFeePromulgatedRate)
                    .HasForeignKey<ServiceFileFeePromulgatedRate>(d => d.ServiceFileFeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("con1ServiceFileFeePromulgatedRatesFK");
            });

            modelBuilder.Entity<ServiceFileFilterDatum>(entity =>
            {
                entity.HasKey(e => e.FileId)
                    .HasName("IDXSFFDfileId");

                entity.HasIndex(e => e.BusSegTypeCdId, "IDXSFFDBusSegTypeCdId")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BusinessSourceRoleId, "IDXSFFDBusinessSourceRoleId")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.Filenum, "IDXSFFDFilenum")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.OrderId, "IDXSFFDOrderId")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.RegionId, "IDXSFFDRegionID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ServiceTypeCdId, "IDXSFFDServiceTypeCdId")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TransTypeCdId, "IDXSFFDTransTypeCdId")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.Workflow2Id, e.OrderId, e.Filenum, e.ServiceTypeCdId }, "IDXSFFDWorkFlow2ID")
                    .HasFillFactor(90);

                entity.Property(e => e.FileId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileID");

                entity.Property(e => e.AssociatedPartyRoleId).HasColumnName("AssociatedPartyRoleID");

                entity.Property(e => e.BusinessSourceRoleId).HasColumnName("BusinessSourceRoleID");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.Property(e => e.DirectedByRoleId).HasColumnName("DirectedByRoleID");

                entity.Property(e => e.Filenum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.OwnerOfficeId).HasColumnName("OwnerOfficeID");

                entity.Property(e => e.ProgramTypeId).HasColumnName("ProgramTypeID");

                entity.Property(e => e.SearchTypeCdId).HasColumnName("SearchTypeCdID");

                entity.Property(e => e.Workflow2Id).HasColumnName("Workflow2ID");
            });

            modelBuilder.Entity<ServiceFileGeoinfo>(entity =>
            {
                entity.HasKey(e => e.PhysicalAddrId)
                    .HasName("IDXSFGPhysicalAddrId");

                entity.ToTable("ServiceFileGeoinfo");

                entity.HasIndex(e => e.PropertyTypeCdId, "IDXPropertyTypeCdId")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.City, "IDXSFGCity")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.Country, "IDXSFGCountry")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.County, "IDXSFGCounty")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FileId, e.Country, e.State, e.County }, "IDXSFGFileID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.State, "IDXSFGState")
                    .HasFillFactor(90);

                entity.Property(e => e.PhysicalAddrId)
                    .ValueGeneratedNever()
                    .HasColumnName("PhysicalAddrID");

                entity.Property(e => e.City)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.County)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.State)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ServiceFileLoanEstimateUnroundedXref>(entity =>
            {
                entity.HasKey(e => e.LoanEstimateUnroundedXrefId)
                    .HasName("PK_ServiceFileLoanEstimateUnroundedXref_UnroundedXrefID");

                entity.ToTable("ServiceFileLoanEstimateUnroundedXref");

                entity.Property(e => e.LoanEstimateUnroundedXrefId).HasColumnName("LoanEstimateUnroundedXrefID");

                entity.Property(e => e.FeeTypeCdId).HasColumnName("FeeTypeCdID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.LenderOwnerLoanEstimateUnrounded).HasColumnType("money");

                entity.Property(e => e.ServiceFileFeeId).HasColumnName("ServiceFileFeeID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.ServiceFileLoanEstimateUnroundedXrefs)
                    .HasForeignKey(d => d.FileId)
                    .HasConstraintName("FK_ServiceFileLoanEstimateUnroundedXref_FileID");
            });

            modelBuilder.Entity<ServiceFileLspflagXref>(entity =>
            {
                entity.HasKey(e => e.FileId)
                    .HasName("PK_ServiceFileLSPFlagXrefFk");

                entity.ToTable("ServiceFileLSPFlagXref");

                entity.Property(e => e.FileId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileID");

                entity.Property(e => e.Gfe4lspflag).HasColumnName("GFE4LSPFlag");

                entity.Property(e => e.Gfe5lspflag).HasColumnName("GFE5LSPFlag");

                entity.HasOne(d => d.File)
                    .WithOne(p => p.ServiceFileLspflagXref)
                    .HasForeignKey<ServiceFileLspflagXref>(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ServiceFi__FileI__413E61B8");
            });

            modelBuilder.Entity<ServiceFileMasterFileNumXref>(entity =>
            {
                entity.HasKey(e => e.FileId)
                    .HasName("Ind_Unq_ServiceFileMasterFileNumXref");

                entity.ToTable("ServiceFileMasterFileNumXref");

                entity.Property(e => e.FileId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileID");

                entity.Property(e => e.MasterFileNumber)
                    .HasMaxLength(22)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.File)
                    .WithOne(p => p.ServiceFileMasterFileNumXref)
                    .HasForeignKey<ServiceFileMasterFileNumXref>(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceFileMasterFileNumXref_FileID");
            });

            modelBuilder.Entity<ServiceFileNote>(entity =>
            {
                entity.ToTable("ServiceFileNote");

                entity.HasIndex(e => e.UpdTs, "IdxServiceFileNote_UpdTS");

                entity.HasIndex(e => e.FileId, "indServiceFileNote7Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.NoteId, e.FileId }, "indServiceFileNote8Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.ServiceFileNoteId).HasColumnName("ServiceFileNoteID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.NoteId).HasColumnName("NoteID");

                entity.Property(e => e.ServiceFileNoteTypeCdId).HasColumnName("ServiceFileNoteTypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.ServiceFileNotes)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conServiceFileNote6FK");

                entity.HasOne(d => d.CreationEmployee)
                    .WithMany(p => p.ServiceFileNoteCreationEmployees)
                    .HasForeignKey(d => d.CreationEmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conServiceFileNote5FK");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.ServiceFileNotes)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conServiceFileNote3FK");

                entity.HasOne(d => d.ServiceFileNoteTypeCd)
                    .WithMany(p => p.ServiceFileNotes)
                    .HasForeignKey(d => d.ServiceFileNoteTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conServiceFileNote7Fk");

                entity.HasOne(d => d.UpdatedEmployee)
                    .WithMany(p => p.ServiceFileNoteUpdatedEmployees)
                    .HasForeignKey(d => d.UpdatedEmployeeId)
                    .HasConstraintName("conServiceFileNote4FK");

                entity.HasOne(d => d.TextDatum)
                    .WithMany(p => p.ServiceFileNotes)
                    .HasForeignKey(d => new { d.NoteId, d.FileId })
                    .HasConstraintName("conServiceFileNote2FK_2TD");
            });

            modelBuilder.Entity<ServiceFileNoteComment>(entity =>
            {
                entity.HasKey(e => e.ServiceFileNoteCommentsId)
                    .HasName("IDXServiceFileNoteCommentsId");

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.EntryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ServiceFileNoteId).HasColumnName("ServiceFileNoteID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UserLevel)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.HasOne(d => d.ServiceFileNote)
                    .WithMany(p => p.ServiceFileNoteComments)
                    .HasForeignKey(d => d.ServiceFileNoteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ServiceFi__Servi__4AC7CBF2");
            });

            modelBuilder.Entity<ServiceFileNoteTextId>(entity =>
            {
                entity.HasKey(e => new { e.ServiceFileNoteId, e.NoteId })
                    .HasName("CDXServiceFileNoteTextIds");

                entity.Property(e => e.ServiceFileNoteId).HasColumnName("ServiceFileNoteID");
            });

            modelBuilder.Entity<ServiceFileProductTypeXref>(entity =>
            {
                entity.HasKey(e => new { e.FileId, e.ProductTypeCdId })
                    .HasName("conServFileProdTypeXref1Pk");

                entity.ToTable("ServiceFileProductTypeXref");

                entity.HasIndex(e => e.ProductTypeCdId, "IDXServiceFileProductTypeXRef")
                    .HasFillFactor(90);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.ProductTypeCdId).HasColumnName("ProductTypeCdID");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.ServiceFileProductTypeXrefs)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("R_562");

                entity.HasOne(d => d.ProductTypeCd)
                    .WithMany(p => p.ServiceFileProductTypeXrefs)
                    .HasForeignKey(d => d.ProductTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("R_563");
            });

            modelBuilder.Entity<ServiceFileProgInstrTypeXref>(entity =>
            {
                entity.ToTable("ServiceFileProgInstrTypeXref");

                entity.HasIndex(e => new { e.FileId, e.ProgramTypeId }, "Unq_ServiceFileProgInstrTypeXref")
                    .HasFillFactor(90);

                entity.Property(e => e.AdditionalInstrNotes)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.ProgramTypeId).HasColumnName("ProgramTypeID");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.ServiceFileProgInstrTypeXrefs)
                    .HasForeignKey(d => d.FileId)
                    .HasConstraintName("FK_ServiceFileProgInstrTypeXref_FileID");

                entity.HasOne(d => d.ProgramType)
                    .WithMany(p => p.ServiceFileProgInstrTypeXrefs)
                    .HasForeignKey(d => d.ProgramTypeId)
                    .HasConstraintName("FK_ServiceFileProgInstrTypeXref_ProgramTypeID");
            });

            modelBuilder.Entity<ServiceFileReverseAccount>(entity =>
            {
                entity.ToTable("ServiceFileReverseAccount");

                entity.HasIndex(e => new { e.FileId, e.BankAcctId }, "idxNCServiceFileReverseAccount1")
                    .HasFillFactor(90);

                entity.Property(e => e.ServiceFileReverseAccountId).HasColumnName("ServiceFileReverseAccountID");

                entity.Property(e => e.BankAcctId).HasColumnName("BankAcctID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.ReverseAccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.ReverseFormattedAccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.BankAcct)
                    .WithMany(p => p.ServiceFileReverseAccounts)
                    .HasForeignKey(d => d.BankAcctId)
                    .HasConstraintName("conServiceFileReverseAccount2BankAccountFK");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.ServiceFileReverseAccounts)
                    .HasForeignKey(d => d.FileId)
                    .HasConstraintName("conServiceFileReverseAccount2ServiceFileFK");
            });

            modelBuilder.Entity<ServiceFileSpeciallAttentionXref>(entity =>
            {
                entity.HasKey(e => e.FileId);

                entity.ToTable("ServiceFileSpeciallAttentionXRef");

                entity.HasIndex(e => new { e.FileId, e.SpecialAttention, e.SplAttentionComment }, "Idx_ServiceFileSpeciallAttentionXRef_FileIDSpecialAttentionComments")
                    .HasFillFactor(90);

                entity.Property(e => e.FileId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileID");

                entity.Property(e => e.SplAttentionComment)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.File)
                    .WithOne(p => p.ServiceFileSpeciallAttentionXref)
                    .HasForeignKey<ServiceFileSpeciallAttentionXref>(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceFileSpeciallAttentionXRef_FileID");
            });

            modelBuilder.Entity<ServiceFileSplitLspflagXref>(entity =>
            {
                entity.HasKey(e => e.FileId)
                    .HasName("PK_ServiceFileLSplitSPFlagXrefFk");

                entity.ToTable("ServiceFileSplitLSPFlagXref");

                entity.Property(e => e.FileId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileID");

                entity.Property(e => e.SplitLspflag).HasColumnName("SplitLSPFlag");

                entity.HasOne(d => d.File)
                    .WithOne(p => p.ServiceFileSplitLspflagXref)
                    .HasForeignKey<ServiceFileSplitLspflagXref>(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ServiceFi__FileI__5268EDBA");
            });

            modelBuilder.Entity<ServiceFileStarterRefXref>(entity =>
            {
                entity.ToTable("ServiceFileStarterRefXref");

                entity.HasIndex(e => e.FileId, "SourceFileIDX")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.InheritFromFileId, "TargetFileIDX")
                    .HasFillFactor(90);

                entity.Property(e => e.Bsource).HasColumnName("BSource");

                entity.Property(e => e.ConvertBs).HasColumnName("ConvertBS");

                entity.Property(e => e.CopyDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ServiceFileSubFee>(entity =>
            {
                entity.ToTable("ServiceFileSubFee");

                entity.HasIndex(e => e.FeeId, "idxNCServiceFileSubFee_FeeID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ServiceFileFeeId, "idxNCServiceFileSubFee_ServiceFileFeeID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ServiceFileFeeId, e.FeeId }, "idxNCServiceFileSubFee_ServiceFileFeeID_FeeID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ServiceFileFeeId, e.FeeId, e.SeqNo }, "idxUQServiceFileSubFee")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.ServiceFileSubFeeId).HasColumnName("ServiceFileSubFeeID");

                entity.Property(e => e.AdditionalDescr)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerChargeAmt).HasColumnType("money");

                entity.Property(e => e.BuyerPromulgatedAmt).HasColumnType("money");

                entity.Property(e => e.BuyerSalesTaxAmt).HasColumnType("money");

                entity.Property(e => e.Descr)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FeeId).HasColumnName("FeeID");

                entity.Property(e => e.PayeeName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SellerChargeAmt).HasColumnType("money");

                entity.Property(e => e.SellerPromulgatedAmt).HasColumnType("money");

                entity.Property(e => e.SellerSalesTaxAmt).HasColumnType("money");

                entity.Property(e => e.ServiceFileFeeId).HasColumnName("ServiceFileFeeID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.Fee)
                    .WithMany(p => p.ServiceFileSubFees)
                    .HasForeignKey(d => d.FeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conSFSFFeeIDFK");

                entity.HasOne(d => d.ServiceFileFee)
                    .WithMany(p => p.ServiceFileSubFees)
                    .HasForeignKey(d => d.ServiceFileFeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conSFSFServiceFileFeeIDFK");
            });

            modelBuilder.Entity<ServiceFileTagFileXref>(entity =>
            {
                entity.ToTable("ServiceFileTagFileXref");

                entity.Property(e => e.ServiceFileTagFileXrefId).HasColumnName("ServiceFileTagFileXrefID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.TypeCdid).HasColumnName("TypeCDID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.ServiceFileTagFileXrefs)
                    .HasForeignKey(d => d.ClassTypeId)
                    .HasConstraintName("FK_ServiceFileTagFileXref_ClassTypeID");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.ServiceFileTagFileXrefs)
                    .HasForeignKey(d => d.FileId)
                    .HasConstraintName("FK_ServiceFileTagFileXref_FileID");

                entity.HasOne(d => d.TypeCd)
                    .WithMany(p => p.ServiceFileTagFileXrefs)
                    .HasForeignKey(d => d.TypeCdid)
                    .HasConstraintName("FK_ServiceFileTagFileXref_TypeCDID");
            });

            modelBuilder.Entity<ServiceFileUnderwriterXref>(entity =>
            {
                entity.HasKey(e => e.FileId)
                    .HasName("PK__ServiceF__6F0F98BF52EC8CB9");

                entity.ToTable("ServiceFileUnderwriterXref");

                entity.HasIndex(e => e.RegionUnderwriterId, "Idx1ServiceFileUWRegionUW")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.OfficeUnderwriterId, "Idx2ServiceFileUWOfficeUW")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TitleOwnerOfficeId, "Idx3ServiceFileUWBusinessUnit")
                    .HasFillFactor(90);

                entity.Property(e => e.FileId).ValueGeneratedNever();

                entity.Property(e => e.UwemployeeId).HasColumnName("UWEmployeeId");

                entity.HasOne(d => d.File)
                    .WithOne(p => p.ServiceFileUnderwriterXref)
                    .HasForeignKey<ServiceFileUnderwriterXref>(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Con3ServiceFileUWServiceFileFK");

                entity.HasOne(d => d.OfficeUnderwriter)
                    .WithMany(p => p.ServiceFileUnderwriterXrefs)
                    .HasForeignKey(d => d.OfficeUnderwriterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Con2ServiceFileUWOfficeUWFK");

                entity.HasOne(d => d.RegionUnderwriter)
                    .WithMany(p => p.ServiceFileUnderwriterXrefs)
                    .HasForeignKey(d => d.RegionUnderwriterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Con1ServiceFileUWRegionUWFK");

                entity.HasOne(d => d.TitleOwnerOffice)
                    .WithMany(p => p.ServiceFileUnderwriterXrefs)
                    .HasForeignKey(d => d.TitleOwnerOfficeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Con4ServiceFileUWBusinessUnitFK");
            });

            modelBuilder.Entity<ServiceFileXref>(entity =>
            {
                entity.HasKey(e => new { e.FileId, e.OrderTypeCdid })
                    .HasName("conServiceFileXrefPk");

                entity.ToTable("ServiceFileXref");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.OrderTypeCdid).HasColumnName("OrderTypeCDID");

                entity.Property(e => e.FileParams)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.LocalCloseDueDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ServiceLog>(entity =>
            {
                entity.ToTable("ServiceLog");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Exception).IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Level)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Logger)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Message).IsUnicode(false);

                entity.Property(e => e.Thread)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ServiceOperation>(entity =>
            {
                entity.ToTable("ServiceOperation");

                entity.HasIndex(e => e.Name, "idxServiceOperation1")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ServiceOperationApplicationXref>(entity =>
            {
                entity.HasKey(e => new { e.OperationId, e.ApplicationId });

                entity.ToTable("ServiceOperationApplicationXref");

                entity.Property(e => e.OperationId).HasColumnName("OperationID");

                entity.Property(e => e.ApplicationId).HasColumnName("ApplicationID");

                entity.Property(e => e.StatusCd).HasColumnName("StatusCD");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.ServiceOperationApplicationXrefs)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceOperationApplicationXref_ApplicationID");

                entity.HasOne(d => d.Operation)
                    .WithMany(p => p.ServiceOperationApplicationXrefs)
                    .HasForeignKey(d => d.OperationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceOperationApplicationXref_OperationID");
            });

            modelBuilder.Entity<ServiceOperationApplicationXrefBackup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ServiceOperationApplicationXref_Backup");

                entity.Property(e => e.ApplicationId).HasColumnName("ApplicationID");

                entity.Property(e => e.OperationAppDeletedDate).HasColumnType("datetime");

                entity.Property(e => e.OperationId).HasColumnName("OperationID");

                entity.Property(e => e.StatusCd).HasColumnName("StatusCD");
            });

            modelBuilder.Entity<ServiceOperationSecurityXref>(entity =>
            {
                entity.HasKey(e => new { e.OperationId, e.SecurityLevelId, e.ActivityGrpId, e.ActivityId });

                entity.ToTable("ServiceOperationSecurityXref");

                entity.Property(e => e.OperationId).HasColumnName("OperationID");

                entity.Property(e => e.SecurityLevelId).HasColumnName("SecurityLevelID");

                entity.Property(e => e.ActivityGrpId).HasColumnName("ActivityGrpID");

                entity.Property(e => e.ActivityId).HasColumnName("ActivityID");

                entity.Property(e => e.UsageType)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Any')");

                entity.HasOne(d => d.ActivityGrp)
                    .WithMany(p => p.ServiceOperationSecurityXrefs)
                    .HasForeignKey(d => d.ActivityGrpId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceOperationSecurityXref_ActivityGrpID");

                entity.HasOne(d => d.Activity)
                    .WithMany(p => p.ServiceOperationSecurityXrefs)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceOperationSecurityXref_ActivityID");

                entity.HasOne(d => d.Operation)
                    .WithMany(p => p.ServiceOperationSecurityXrefs)
                    .HasForeignKey(d => d.OperationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceOperationSecurityXref_OperationID");
            });

            modelBuilder.Entity<ServiceOperationSecurityXrefBackup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ServiceOperationSecurityXref_Backup");

                entity.Property(e => e.ActivityGrpId).HasColumnName("ActivityGrpID");

                entity.Property(e => e.ActivityId).HasColumnName("ActivityID");

                entity.Property(e => e.OperationAppSecurityDeletedDate).HasColumnType("datetime");

                entity.Property(e => e.OperationId).HasColumnName("OperationID");

                entity.Property(e => e.SecurityLevelId).HasColumnName("SecurityLevelID");

                entity.Property(e => e.UsageType)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ServiceUserAccount>(entity =>
            {
                entity.ToTable("ServiceUserAccount");

                entity.HasIndex(e => e.Name, "idxServiceUserAccount1")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FastlinkAccess)
                    .HasColumnName("FASTLinkAccess")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ServiceUserAccountApplicationXref>(entity =>
            {
                entity.HasKey(e => new { e.ApplicationId, e.AccountId, e.Type });

                entity.ToTable("ServiceUserAccountApplicationXref");

                entity.Property(e => e.ApplicationId).HasColumnName("ApplicationID");

                entity.Property(e => e.AccountId).HasColumnName("AccountID");

                entity.Property(e => e.Type)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.ServiceUserAccountApplicationXrefs)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceUserAccountApplicationXref_AccountID");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.ServiceUserAccountApplicationXrefs)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceUserAccountApplicationXref_ApplicationID");
            });

            modelBuilder.Entity<ServiceoperationBackup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Serviceoperation_Backup");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OperationDeletedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<SettlementStatementHeaderDetail>(entity =>
            {
                entity.HasKey(e => e.Ssid)
                    .HasName("PK_SettlementStatementHeaderDetail_SSID");

                entity.ToTable("SettlementStatementHeaderDetail");

                entity.HasIndex(e => e.FileId, "idxNCSSHeaderDetFileID")
                    .HasFillFactor(90);

                entity.Property(e => e.Ssid).HasColumnName("SSID");

                entity.Property(e => e.BuySelLenPropId).HasColumnName("BuySelLenPropID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.ModifiedAddress)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RoleTypeCdId).HasColumnName("RoleTypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.SettlementStatementHeaderDetails)
                    .HasForeignKey(d => d.FileId)
                    .HasConstraintName("FK_SettlementStatementHeaderDetail_FileID");
            });

            modelBuilder.Entity<SffphysicalAddr>(entity =>
            {
                entity.HasKey(e => new { e.ServiceFileFeeId, e.PhysicalAddrId })
                    .HasName("conSFFPhysicalAddrPk");

                entity.ToTable("SFFPhysicalAddr");

                entity.HasIndex(e => e.PhysicalAddrId, "ixn_SFFPhysicalAddr_PhysicalAddrID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ServiceFileFeeId, "ixn_SFFPhysicalAddr_ServiceFileFeeID")
                    .HasFillFactor(90);

                entity.Property(e => e.ServiceFileFeeId).HasColumnName("ServiceFileFeeID");

                entity.Property(e => e.PhysicalAddrId).HasColumnName("PhysicalAddrID");

                entity.Property(e => e.GeoRegionId).HasColumnName("GeoRegionID");

                entity.Property(e => e.SplitFeeAmount).HasColumnType("money");

                entity.Property(e => e.SplitFeePercentage).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.PhysicalAddr)
                    .WithMany(p => p.SffphysicalAddrs)
                    .HasForeignKey(d => d.PhysicalAddrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conSFFPhysicalAddr_PhysicalAddr");

                entity.HasOne(d => d.ServiceFileFee)
                    .WithMany(p => p.SffphysicalAddrs)
                    .HasForeignKey(d => d.ServiceFileFeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conSFFPhysicalAddr_ServiceFileFee");
            });

            modelBuilder.Entity<SffphysicalAddrHistory>(entity =>
            {
                entity.ToTable("SFFPhysicalAddrHistory");

                entity.HasIndex(e => e.DisbursementId, "idx_DisbursementID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ServiceFileFeeId, "idx_ServiceFileFeeID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ServiceFileFeeId, e.DisbursementId }, "ixn_SFFPhysicalAddrHistorySFFIDGeoIDDisbID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ServiceFileFeeId, e.PhysicalAddrId }, "ixn_SFFPhysicalAddrHistorySFFIDPhysicalAddrID")
                    .HasFillFactor(90);

                entity.Property(e => e.SffphysicalAddrHistoryId).HasColumnName("SFFPhysicalAddrHistoryID");

                entity.Property(e => e.DisbursementId)
                    .HasColumnName("DisbursementID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.GeoRegionId).HasColumnName("GeoRegionID");

                entity.Property(e => e.PhysicalAddrId).HasColumnName("PhysicalAddrID");

                entity.Property(e => e.ServiceFileFeeId).HasColumnName("ServiceFileFeeID");

                entity.Property(e => e.SplitFeeAmount).HasColumnType("money");

                entity.Property(e => e.SplitFeePercentage).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<Signing>(entity =>
            {
                entity.ToTable("Signing");

                entity.HasIndex(e => e.OrderId, "IDX_Signing_OrderID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileId, "indFileID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SigningNumber, "indSigningNum")
                    .HasFillFactor(90);

                entity.Property(e => e.SigningId).HasColumnName("SigningID");

                entity.Property(e => e.ActualDate).HasColumnType("datetime");

                entity.Property(e => e.ActualTime).HasColumnType("datetime");

                entity.Property(e => e.AdditionalComments)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ApplId).HasColumnName("ApplID");

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.ConfirmationDate).HasColumnType("datetime");

                entity.Property(e => e.County)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.DocumentPackageId).HasColumnName("DocumentPackageID");

                entity.Property(e => e.ExternalServiceNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.InternalComments).IsUnicode(false);

                entity.Property(e => e.NotaryName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.ProposedDate).HasColumnType("datetime");

                entity.Property(e => e.ProposedEndDate).HasColumnType("datetime");

                entity.Property(e => e.ProposedEndTime).HasColumnType("datetime");

                entity.Property(e => e.ProposedTime).HasColumnType("datetime");

                entity.Property(e => e.SigningCancellationComments)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.SigningCancellationReasonId).HasColumnName("SigningCancellationReasonID");

                entity.Property(e => e.SigningLocOther)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SigningLocTypeCdId).HasColumnName("SigningLocTypeCdID");

                entity.Property(e => e.SigningMethodOther)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SigningMethodTypeCdId).HasColumnName("SigningMethodTypeCdID");

                entity.Property(e => e.SigningQualityId).HasColumnName("SigningQualityID");

                entity.Property(e => e.StatusCd).HasColumnName("StatusCD");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.Appl)
                    .WithMany(p => p.Signings)
                    .HasForeignKey(d => d.ApplId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Signing_ApplID");

                entity.HasOne(d => d.CreationEmployee)
                    .WithMany(p => p.Signings)
                    .HasForeignKey(d => d.CreationEmployeeId)
                    .HasConstraintName("FK_Signing_CreationEmployeeID");

                entity.HasOne(d => d.DocumentPackage)
                    .WithMany(p => p.Signings)
                    .HasForeignKey(d => d.DocumentPackageId)
                    .HasConstraintName("FK_Signing_DocumentPackageID");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.Signings)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Signing_FileID");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.Signings)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Signing_OrderID");

                entity.HasOne(d => d.ProposedTimeRangeTypeCd)
                    .WithMany(p => p.SigningProposedTimeRangeTypeCds)
                    .HasForeignKey(d => d.ProposedTimeRangeTypeCdId)
                    .HasConstraintName("FK_Signing_ProposedTimeRangeTypeCdId");

                entity.HasOne(d => d.ProposedTimeZoneTypeCd)
                    .WithMany(p => p.SigningProposedTimeZoneTypeCds)
                    .HasForeignKey(d => d.ProposedTimeZoneTypeCdId)
                    .HasConstraintName("FK_Signing_ProposedTimeZoneTypeCdId");

                entity.HasOne(d => d.SigningLocTypeCd)
                    .WithMany(p => p.SigningSigningLocTypeCds)
                    .HasForeignKey(d => d.SigningLocTypeCdId)
                    .HasConstraintName("FK_SigningLoc_TypeCdID");

                entity.HasOne(d => d.SigningMethodTypeCd)
                    .WithMany(p => p.SigningSigningMethodTypeCds)
                    .HasForeignKey(d => d.SigningMethodTypeCdId)
                    .HasConstraintName("FK_SigningMethod_TypeCdID");

                entity.HasOne(d => d.SigningQuality)
                    .WithMany(p => p.SigningSigningQualities)
                    .HasForeignKey(d => d.SigningQualityId)
                    .HasConstraintName("FK_Signing_SigningQualityID");

                entity.HasOne(d => d.StatusCdNavigation)
                    .WithMany(p => p.SigningStatusCdNavigations)
                    .HasForeignKey(d => d.StatusCd)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Signing_StatusCD");
            });

            modelBuilder.Entity<SigningAddrXref>(entity =>
            {
                entity.HasKey(e => new { e.SigningId, e.AddrTypeCdId })
                    .HasName("PK_SigningAddrXrefID");

                entity.ToTable("SigningAddrXref");

                entity.Property(e => e.SigningId).HasColumnName("SigningID");

                entity.Property(e => e.AddrTypeCdId).HasColumnName("AddrTypeCdID");

                entity.Property(e => e.BusinessName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OfficeId).HasColumnName("OfficeID");

                entity.Property(e => e.PhysicalAddrId).HasColumnName("PhysicalAddrID");

                entity.HasOne(d => d.AddrTypeCd)
                    .WithMany(p => p.SigningAddrXrefs)
                    .HasForeignKey(d => d.AddrTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SigningAddrXref_PhysicalAddrTypeCdID");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.SigningAddrXrefs)
                    .HasForeignKey(d => d.OfficeId)
                    .HasConstraintName("FK_SigningAddrXref_OfficeID");

                entity.HasOne(d => d.PhysicalAddr)
                    .WithMany(p => p.SigningAddrXrefs)
                    .HasForeignKey(d => d.PhysicalAddrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SigningAddrXref_PhysicalAddrID");

                entity.HasOne(d => d.Signing)
                    .WithMany(p => p.SigningAddrXrefs)
                    .HasForeignKey(d => d.SigningId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SigningAddrXref_SigningID");
            });

            modelBuilder.Entity<SigningEventLog>(entity =>
            {
                entity.ToTable("SigningEventLog");

                entity.HasIndex(e => e.FileId, "ixn_SEL_FileID")
                    .HasFillFactor(90);

                entity.Property(e => e.SigningEventLogId)
                    .ValueGeneratedNever()
                    .HasColumnName("SigningEventLogID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.EventEndDate).HasColumnType("datetime");

                entity.Property(e => e.EventSourceClassTypeId).HasColumnName("EventSourceClassTypeID");

                entity.Property(e => e.EventSourceId).HasColumnName("EventSourceID");

                entity.Property(e => e.EventStartDate).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.UpdSourceClassTypeId).HasColumnName("UpdSourceClassTypeID");

                entity.Property(e => e.UpdSourceId).HasColumnName("UpdSourceID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.SigningEventLogClassTypes)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK2_SigningEventLog");

                entity.HasOne(d => d.Event)
                    .WithMany(p => p.SigningEventLogs)
                    .HasForeignKey(d => d.EventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK4_SigningEventLog");

                entity.HasOne(d => d.EventSourceClassType)
                    .WithMany(p => p.SigningEventLogEventSourceClassTypes)
                    .HasForeignKey(d => d.EventSourceClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK5_SigningEventLog");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.SigningEventLogs)
                    .HasForeignKey(d => d.FileId)
                    .HasConstraintName("FK3_SigningEventLog");

                entity.HasOne(d => d.SigningEventLogNavigation)
                    .WithOne(p => p.SigningEventLog)
                    .HasForeignKey<SigningEventLog>(d => d.SigningEventLogId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK1_SigningEventLog");

                entity.HasOne(d => d.UpdSourceClassType)
                    .WithMany(p => p.SigningEventLogUpdSourceClassTypes)
                    .HasForeignKey(d => d.UpdSourceClassTypeId)
                    .HasConstraintName("FK6_SigningEventLog");
            });

            modelBuilder.Entity<SigningLoan>(entity =>
            {
                entity.HasKey(e => e.LoanId)
                    .HasName("PK_SigningLoan_LoanID");

                entity.ToTable("SigningLoan");

                entity.HasIndex(e => e.SigningId, "indSigningID")
                    .HasFillFactor(90);

                entity.Property(e => e.LoanId).HasColumnName("LoanID");

                entity.Property(e => e.LenderId).HasColumnName("LenderID");

                entity.Property(e => e.LoanAmt).HasColumnType("money");

                entity.Property(e => e.LoanNum)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SigningId).HasColumnName("SigningID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.Lender)
                    .WithMany(p => p.SigningLoans)
                    .HasForeignKey(d => d.LenderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SigningLoan_LenderID");

                entity.HasOne(d => d.Signing)
                    .WithMany(p => p.SigningLoans)
                    .HasForeignKey(d => d.SigningId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SigningLoan_SigningID");
            });

            modelBuilder.Entity<SigningParty>(entity =>
            {
                entity.ToTable("SigningParty");

                entity.HasIndex(e => e.SigningId, "indSigningID")
                    .HasFillFactor(90);

                entity.Property(e => e.SigningPartyId).HasColumnName("SigningPartyID");

                entity.Property(e => e.AuthSignatureId).HasColumnName("AuthSignatureID");

                entity.Property(e => e.CompanyName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.FileBusinessPartyId).HasColumnName("FileBusinessPartyID");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LangPrefOther)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LangPrefTypeCdId).HasColumnName("LangPrefTypeCdID");

                entity.Property(e => e.LastName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PrincipalId).HasColumnName("PrincipalID");

                entity.Property(e => e.SigningId).HasColumnName("SigningID");

                entity.Property(e => e.SigningPartyTypeId).HasColumnName("SigningPartyTypeID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.AuthSignature)
                    .WithMany(p => p.SigningParties)
                    .HasForeignKey(d => d.AuthSignatureId)
                    .HasConstraintName("FK_SigningParty_AuthSignatureID");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.SigningParties)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_SigningParty_EmployeeID");

                entity.HasOne(d => d.FileBusinessParty)
                    .WithMany(p => p.SigningParties)
                    .HasForeignKey(d => d.FileBusinessPartyId)
                    .HasConstraintName("FK_SigningParty_FileBusinessPartyID");

                entity.HasOne(d => d.LangPrefTypeCd)
                    .WithMany(p => p.SigningParties)
                    .HasForeignKey(d => d.LangPrefTypeCdId)
                    .HasConstraintName("FK_LangPrefTypeCdID_TypeCdID_SigningParty");

                entity.HasOne(d => d.Principal)
                    .WithMany(p => p.SigningParties)
                    .HasForeignKey(d => d.PrincipalId)
                    .HasConstraintName("FK_SigningParty_PrincipalID");

                entity.HasOne(d => d.Signing)
                    .WithMany(p => p.SigningParties)
                    .HasForeignKey(d => d.SigningId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SigningParty_SigningID");
            });

            modelBuilder.Entity<SigningPartyElecAddrXref>(entity =>
            {
                entity.HasKey(e => new { e.SigningPartyId, e.ElecAddrTypeCdId })
                    .HasName("PK_SigningPartyElecAddrXrefID");

                entity.ToTable("SigningPartyElecAddrXref");

                entity.Property(e => e.SigningPartyId).HasColumnName("SigningPartyID");

                entity.Property(e => e.ElecAddrTypeCdId).HasColumnName("ElecAddrTypeCdID");

                entity.Property(e => e.ElectronicAddrId).HasColumnName("ElectronicAddrID");

                entity.HasOne(d => d.ElecAddrTypeCd)
                    .WithMany(p => p.SigningPartyElecAddrXrefs)
                    .HasForeignKey(d => d.ElecAddrTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SigningPartyElecAddrXref_ElecAddrTypeCdID");

                entity.HasOne(d => d.ElectronicAddr)
                    .WithMany(p => p.SigningPartyElecAddrXrefs)
                    .HasForeignKey(d => d.ElectronicAddrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SigningPartyElecAddrXref_ElectronicAddrID");

                entity.HasOne(d => d.SigningParty)
                    .WithMany(p => p.SigningPartyElecAddrXrefs)
                    .HasForeignKey(d => d.SigningPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SigningPartyElecAddrXref_SigningPartyID");
            });

            modelBuilder.Entity<SimulatorFbpfilterDatum>(entity =>
            {
                entity.HasKey(e => e.FileBusinessPartyId)
                    .HasName("PK__Simulato__267B358B8FFC02AC");

                entity.ToTable("SimulatorFBPFilterData");

                entity.HasIndex(e => new { e.Fileid, e.BusOrgId }, "indServFileBusOrgId2Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.Fileid, e.RoleTypeCdId }, "indServFileRoleTypeCdId2Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.FileBusinessPartyId).HasColumnName("FileBusinessPartyID");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Updts)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SimulatorServiceFileProcess>(entity =>
            {
                entity.HasKey(e => e.ServiceFileProcessId)
                    .HasName("PK__Simulato__29035B057325A4E3");

                entity.ToTable("SimulatorServiceFileProcess");

                entity.HasIndex(e => new { e.ServiceFileProcessId, e.WorkFlowTemplateId }, "cdxWorkFlowTemplateId")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ServiceFileProcessId, e.Workflow2Id }, "cdxWorkflow2ID")
                    .HasFillFactor(90);

                entity.Property(e => e.ServiceFileProcessId).HasColumnName("ServiceFileProcessID");

                entity.Property(e => e.EventData)
                    .HasMaxLength(7000)
                    .IsUnicode(false);

                entity.Property(e => e.TriggerEventTypeCdId).HasColumnName("TriggerEventTypeCdID");

                entity.Property(e => e.Updts)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Workflow2Id).HasColumnName("Workflow2ID");
            });

            modelBuilder.Entity<SimulatorSffilterDatum>(entity =>
            {
                entity.HasKey(e => e.FileId)
                    .HasName("PK__Simulato__6F0F989F8F3D2158");

                entity.ToTable("SimulatorSFFilterData");

                entity.HasIndex(e => e.BusSegTypeCdId, "IDXSFMF_BusSegTypeCdId")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileId, "IDXSFMF_FileID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.Filenum, "IDXSFMF_Filenum")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.RegionId, "IDXSFMF_RegionID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ServiceTypeCdId, "IDXSFMF_ServiceTypeCdId")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TransTypeCdId, "IDXSFMF_TransTypeCdId")
                    .HasFillFactor(90);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.ApnTypeCdId).HasColumnName("ApnTypeCdID");

                entity.Property(e => e.AssociatedPartyRoleId).HasColumnName("AssociatedPartyRoleID");

                entity.Property(e => e.BusinessSourceRoleId).HasColumnName("BusinessSourceRoleID");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.Property(e => e.DirectedByRoleId).HasColumnName("DirectedByRoleID");

                entity.Property(e => e.Filenum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.OrderSourceId2).HasColumnName("OrderSourceID2");

                entity.Property(e => e.OwnerOfficeId).HasColumnName("OwnerOfficeID");

                entity.Property(e => e.ProgramTypeId).HasColumnName("ProgramTypeID");

                entity.Property(e => e.SearchTypeCdId).HasColumnName("SearchTypeCdID");

                entity.Property(e => e.SecondOrderOriginatorId).HasColumnName("SecondOrderOriginatorID");

                entity.Property(e => e.Updts)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Workflow2Id).HasColumnName("Workflow2ID");

                entity.HasOne(d => d.OrderSourceId2Navigation)
                    .WithMany(p => p.SimulatorSffilterData)
                    .HasForeignKey(d => d.OrderSourceId2)
                    .HasConstraintName("conSimulatorSFFilterData_OrderSourceID2_FK");
            });

            modelBuilder.Entity<SimulatorSfgeoinfo>(entity =>
            {
                entity.HasKey(e => e.PhysicalAddrId)
                    .HasName("PK__Simulato__1B77F4664DC9D9D3");

                entity.ToTable("SimulatorSFGeoinfo");

                entity.HasIndex(e => e.City, "IDXSFG_City")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.Country, "IDXSFG_Country")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.County, "IDXSFG_County")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.State, "IDXSFG_State")
                    .HasFillFactor(90);

                entity.Property(e => e.PhysicalAddrId).HasColumnName("PhysicalAddrID");

                entity.Property(e => e.City)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.County)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.State)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Updts)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SimulatorSfproductTypeXref>(entity =>
            {
                entity.ToTable("SimulatorSFProductTypeXref");

                entity.HasIndex(e => e.ProductTypeCdId, "IDXSimulatorSFProductTypeXref")
                    .HasFillFactor(90);

                entity.Property(e => e.SimulatorSfproductTypeXrefId).HasColumnName("SimulatorSFProductTypeXrefID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.ProductTypeCdId).HasColumnName("ProductTypeCdID");

                entity.Property(e => e.Updts)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SimulatorTask>(entity =>
            {
                entity.HasKey(e => e.TaskId)
                    .HasName("PK__Simulato__7C6949D13D2B7151");

                entity.ToTable("SimulatorTask");

                entity.Property(e => e.TaskId).HasColumnName("TaskID");

                entity.Property(e => e.ActivateDate).HasColumnType("datetime");

                entity.Property(e => e.Comment)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.CompletionDate).HasColumnType("datetime");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.DueDateOrder).HasComputedColumnSql("(case when [DueDate] IS NULL then (99) else (0) end)", false);

                entity.Property(e => e.DueDateTypeCdId).HasColumnName("DueDateTypeCdID");

                entity.Property(e => e.EmployeeHomeOfficeName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.ExternalFileNum)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileEventId).HasColumnName("FileEventID");

                entity.Property(e => e.InitialAssignDate).HasColumnType("datetime");

                entity.Property(e => e.InitialOfficeAssignDate).HasColumnType("datetime");

                entity.Property(e => e.InitialOwnerAssignDate).HasColumnType("datetime");

                entity.Property(e => e.InitialWorkgroupAssignDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OwnerAssignDate).HasColumnType("datetime");

                entity.Property(e => e.OwnerId).HasColumnName("OwnerID");

                entity.Property(e => e.ServiceFileProcessId).HasColumnName("ServiceFileProcessID");

                entity.Property(e => e.ServiceTypeCdId).HasColumnName("ServiceTypeCdID");

                entity.Property(e => e.SourceApplId).HasColumnName("SourceApplID");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StatusCd).HasColumnName("StatusCD");

                entity.Property(e => e.StatusChgDate).HasColumnType("datetime");

                entity.Property(e => e.SuperTaskTemplateId).HasColumnName("SuperTaskTemplateID");

                entity.Property(e => e.TaskCategoryId).HasColumnName("TaskCategoryID");

                entity.Property(e => e.TaskOfficeAssignDate).HasColumnType("datetime");

                entity.Property(e => e.TaskTemplateId).HasColumnName("TaskTemplateID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.Property(e => e.WaiveDate).HasColumnType("datetime");

                entity.Property(e => e.WarnDate).HasColumnType("datetime");

                entity.Property(e => e.WorkFlow2Id).HasColumnName("WorkFlow2ID");

                entity.Property(e => e.WorkgroupAssignDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<SimulatorWorkflow2>(entity =>
            {
                entity.HasKey(e => e.Workflow2Id)
                    .HasName("PK__Simulato__F28F8623FD28356C");

                entity.ToTable("SimulatorWorkflow2");

                entity.HasIndex(e => e.FileId, "IDXw2_FileID")
                    .HasFillFactor(90);

                entity.Property(e => e.Workflow2Id).HasColumnName("Workflow2ID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.Filenum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.OwnerOfficeId).HasColumnName("OwnerOfficeID");

                entity.Property(e => e.ServiceTypeCdId).HasColumnName("ServiceTypeCdID");

                entity.Property(e => e.Updts)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SmstransLog>(entity =>
            {
                entity.ToTable("SMSTransLog");

                entity.HasIndex(e => e.RecordClassTypeId, "IDXSMSTransLogClassTypeID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.RecordClassTypeId, e.RecordRowId }, "IDXSMSTransLogClassTypeIDNew")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.RecordRowId, "IDXSMSTransLogRecordRowID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.UpdateDateTime, e.BusinessUnitId, e.SmstranslogId, e.RecordRowId, e.RecordClassTypeId }, "IDXSMSTranslog4T32ExtractPreProcess")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.BusinessUnitId, e.UpdateDateTime }, "smstranslog0")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ExtractId, "smstranslog00")
                    .HasFillFactor(90);

                entity.Property(e => e.SmstranslogId).HasColumnName("SMSTranslogID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.RecordClassTypeId).HasColumnName("RecordClassTypeID");

                entity.Property(e => e.RecordRowId).HasColumnName("RecordRowID");

                entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<SmstransLogToBeRemoved>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SMSTransLog_To_Be_Removed");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.RecordClassTypeId).HasColumnName("RecordClassTypeID");

                entity.Property(e => e.RecordRowId).HasColumnName("RecordRowID");

                entity.Property(e => e.SmstranslogId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SMSTranslogID");

                entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<SolrBatchNumber>(entity =>
            {
                entity.HasKey(e => e.BatchId);

                entity.ToTable("SolrBatchNumber");

                entity.Property(e => e.BatchId).HasColumnName("BatchID");

                entity.Property(e => e.RegionIds)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("RegionIDs");
            });

            modelBuilder.Entity<SolrBusOrgFileCreationLog>(entity =>
            {
                entity.ToTable("SolrBusOrgFileCreationLog");

                entity.HasIndex(e => e.RegionId, "IDX_SolrBusOrgFileCreationLogRegionID")
                    .HasFillFactor(90);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.EndId).HasColumnName("EndID");

                entity.Property(e => e.RegionId).HasColumnName("RegionID");

                entity.Property(e => e.StartId).HasColumnName("StartID");

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");

                entity.Property(e => e.XmlfileName)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("XMLFileName");
            });

            modelBuilder.Entity<SolrBusOrgsTobeProcessed>(entity =>
            {
                entity.ToTable("SolrBusOrgsTobeProcessed");

                entity.HasIndex(e => e.BusOrgId, "IDX_SolrBusOrgsTobeProcessedBusOrgID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.RegionId, "IDX_SolrBusOrgsTobeProcessedRegionID")
                    .HasFillFactor(90);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.RegionId).HasColumnName("RegionID");
            });

            modelBuilder.Entity<SolrIntermediateXmlDatum>(entity =>
            {
                entity.HasIndex(e => new { e.StepId, e.RegionId }, "IDXSolrIntermediateXmlDataStepIDRegionID")
                    .HasFillFactor(90);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.RegionId).HasColumnName("RegionID");

                entity.Property(e => e.StepId).HasColumnName("StepID");

                entity.Property(e => e.XmlData).IsUnicode(false);
            });

            modelBuilder.Entity<SolrUserFavoriteCustomer>(entity =>
            {
                entity.HasKey(e => e.SolrUserFavoriteCustomersId)
                    .HasName("PK_SolrUserFavoriteCustomersSolrUserFavoriteCustomersID");

                entity.HasIndex(e => e.BusOrgId, "IdxSolrUserFavoriteCustomersBusOrgID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.EmployeeId, "IdxSolrUserFavoriteCustomersEmployeeID")
                    .HasFillFactor(90);

                entity.Property(e => e.SolrUserFavoriteCustomersId).HasColumnName("SolrUserFavoriteCustomersID");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.BusOrg)
                    .WithMany(p => p.SolrUserFavoriteCustomers)
                    .HasForeignKey(d => d.BusOrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SolrUserFavoriteCustomersBusOrgID");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.SolrUserFavoriteCustomers)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SolrUserFavoriteCustomersEmployeeID");
            });

            modelBuilder.Entity<SolrXmlProcessLog>(entity =>
            {
                entity.ToTable("SolrXmlProcessLog");

                entity.HasIndex(e => new { e.BatchId, e.Status }, "IDXSolrXmlProcessLogBatchIDStatus")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.RegionId, e.StepId }, "IDXSolrXmlProcessLogRegionIDStepID")
                    .HasFillFactor(90);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BatchId).HasColumnName("BatchID");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.ErrorCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ErrorDescription).IsUnicode(false);

                entity.Property(e => e.PackageName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RegionId).HasColumnName("RegionID");

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.StatusDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.StepId).HasColumnName("StepID");

                entity.Property(e => e.TaskName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.XmlFilePath)
                    .HasMaxLength(300)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SpecialInstructionServiceFileXref>(entity =>
            {
                entity.ToTable("SpecialInstructionServiceFileXref");

                entity.Property(e => e.SpecialInstructionServiceFileXrefId).HasColumnName("SpecialInstructionServiceFileXrefID");

                entity.Property(e => e.AdhocInstructionName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.InstructionId).HasColumnName("InstructionID");

                entity.Property(e => e.InstructionOptionId).HasColumnName("InstructionOptionID");

                entity.Property(e => e.OptionValue)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.File)
                    .WithMany(p => p.SpecialInstructionServiceFileXrefs)
                    .HasForeignKey(d => d.FileId)
                    .HasConstraintName("FK_SpecialInstructionServiceFileXref_FileID");

                entity.HasOne(d => d.Instruction)
                    .WithMany(p => p.SpecialInstructionServiceFileXrefs)
                    .HasForeignKey(d => d.InstructionId)
                    .HasConstraintName("FK_SpecialInstructionServiceFileXref_InstructionID");

                entity.HasOne(d => d.InstructionOption)
                    .WithMany(p => p.SpecialInstructionServiceFileXrefs)
                    .HasForeignKey(d => d.InstructionOptionId)
                    .HasConstraintName("FK_InstructionOptionID");
            });

            modelBuilder.Entity<SplitFee>(entity =>
            {
                entity.ToTable("SplitFee");

                entity.HasIndex(e => e.FeeOwnerFbpid, "idxSplitFee_2")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FeeSplitFbpid, "idxSplitFee_3")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ServiceFileFeeId, "indSplitFeeSFF")
                    .HasFillFactor(90);

                entity.Property(e => e.FeeOwnerFbpid).HasColumnName("FeeOwnerFBPid");

                entity.Property(e => e.FeeSplitFbpid).HasColumnName("FeeSplitFBPid");

                entity.Property(e => e.SplitAmt).HasColumnType("money");

                entity.Property(e => e.SplitPercentage).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.StandardSplitFeePercentage).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.FeeOwnerFbp)
                    .WithMany(p => p.SplitFeeFeeOwnerFbps)
                    .HasForeignKey(d => d.FeeOwnerFbpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conOwnerFBPFk");

                entity.HasOne(d => d.FeeSplitFbp)
                    .WithMany(p => p.SplitFeeFeeSplitFbps)
                    .HasForeignKey(d => d.FeeSplitFbpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conSplitFBPFk");

                entity.HasOne(d => d.PaymentMethodTypeCd)
                    .WithMany(p => p.SplitFees)
                    .HasForeignKey(d => d.PaymentMethodTypeCdId)
                    .HasConstraintName("conPayTypeFk");

                entity.HasOne(d => d.ServiceFileFee)
                    .WithMany(p => p.SplitFees)
                    .HasForeignKey(d => d.ServiceFileFeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conSplitSFFFK");
            });

            modelBuilder.Entity<SplitLspgfe4>(entity =>
            {
                entity.HasKey(e => e.FileId)
                    .HasName("PK_ServiceFileSplitLSPGFE4Fk");

                entity.ToTable("SplitLSPGFE4");

                entity.Property(e => e.FileId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileID");

                entity.Property(e => e.Lsp1flag).HasColumnName("LSP1Flag");

                entity.Property(e => e.Lsp2flag).HasColumnName("LSP2Flag");

                entity.Property(e => e.Lsp3flag).HasColumnName("LSP3Flag");

                entity.Property(e => e.Lsp4flag).HasColumnName("LSP4Flag");

                entity.Property(e => e.Lsp5flag).HasColumnName("LSP5Flag");

                entity.Property(e => e.Lsp6flag).HasColumnName("LSP6Flag");

                entity.Property(e => e.SplitGfe1)
                    .HasColumnType("money")
                    .HasColumnName("SplitGFE1");

                entity.Property(e => e.SplitGfe2)
                    .HasColumnType("money")
                    .HasColumnName("SplitGFE2");

                entity.Property(e => e.SplitGfe3)
                    .HasColumnType("money")
                    .HasColumnName("SplitGFE3");

                entity.Property(e => e.SplitGfe4)
                    .HasColumnType("money")
                    .HasColumnName("SplitGFE4");

                entity.Property(e => e.SplitGfe5)
                    .HasColumnType("money")
                    .HasColumnName("SplitGFE5");

                entity.Property(e => e.SplitGfe6)
                    .HasColumnType("money")
                    .HasColumnName("SplitGFE6");

                entity.HasOne(d => d.File)
                    .WithOne(p => p.SplitLspgfe4)
                    .HasForeignKey<SplitLspgfe4>(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__SplitLSPG__FileI__0F71FBFA");
            });

            modelBuilder.Entity<SsrolloutLogTobedeleted>(entity =>
            {
                entity.HasKey(e => e.FeatureId)
                    .HasName("conFeatureIDPK");

                entity.ToTable("SSRolloutLog_TOBEDELETED");

                entity.HasIndex(e => e.RollOutDate, "idxSSRolloutLogRollOutDate")
                    .HasFillFactor(90);

                entity.Property(e => e.FeatureId)
                    .ValueGeneratedNever()
                    .HasColumnName("FeatureID");

                entity.Property(e => e.ActualRollOutDate).HasColumnType("datetime");

                entity.Property(e => e.RollOutDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<StagingInvoicePaymentInfo>(entity =>
            {
                entity.HasKey(e => e.InvoicePaymentInfoId)
                    .HasName("conTempInvoicePaymentInfo1PK");

                entity.ToTable("StagingInvoicePaymentInfo");

                entity.HasIndex(e => new { e.ImportInfoId, e.InvoiceId }, "IDXImportInfoID1")
                    .HasFillFactor(90);

                entity.Property(e => e.InvoicePaymentInfoId).HasColumnName("InvoicePaymentInfoID");

                entity.Property(e => e.Action)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BalAmt).HasColumnType("money");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CumulativeAmount).HasColumnType("money");

                entity.Property(e => e.DocumentNum)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ImportInfoId).HasColumnName("ImportInfoID");

                entity.Property(e => e.InvSeqNo).HasDefaultValueSql("((1))");

                entity.Property(e => e.InvoiceId).HasColumnName("InvoiceID");

                entity.Property(e => e.PayerName)
                    .HasMaxLength(360)
                    .IsUnicode(false);

                entity.Property(e => e.Reason)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StartChange>(entity =>
            {
                entity.HasKey(e => e.TicketNum)
                    .HasName("PK__start_ch__4BDCA3406432E295");

                entity.ToTable("start_change");

                entity.Property(e => e.TicketNum)
                    .ValueGeneratedNever()
                    .HasColumnName("ticket_num");
            });

            modelBuilder.Entity<StateBusSegMapping>(entity =>
            {
                entity.ToTable("StateBusSegMapping");

                entity.HasIndex(e => new { e.GeographicRegionId, e.BusinessSegmentId, e.TransactionTypeId }, "StateBusSegMapping_UQ")
                    .IsUnique();

                entity.Property(e => e.StateBusSegMappingId).HasColumnName("StateBusSegMappingID");

                entity.Property(e => e.BusinessSegmentId).HasColumnName("BusinessSegmentID");

                entity.Property(e => e.GeographicRegionId).HasColumnName("GeographicRegionID");

                entity.Property(e => e.TransactionTypeId).HasColumnName("TransactionTypeID");

                entity.HasOne(d => d.BusinessSegment)
                    .WithMany(p => p.StateBusSegMappingBusinessSegments)
                    .HasForeignKey(d => d.BusinessSegmentId)
                    .HasConstraintName("BusinessSegmentID_TypecdID_Fk");

                entity.HasOne(d => d.GeographicRegion)
                    .WithMany(p => p.StateBusSegMappings)
                    .HasForeignKey(d => d.GeographicRegionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("StateBusSegMappingID_Geographicregion_Fk");

                entity.HasOne(d => d.TransactionType)
                    .WithMany(p => p.StateBusSegMappingTransactionTypes)
                    .HasForeignKey(d => d.TransactionTypeId)
                    .HasConstraintName("TransactionTypeID_TypecdID_Fk");
            });

            modelBuilder.Entity<Subordination>(entity =>
            {
                entity.HasKey(e => e.SubOrdinateId)
                    .HasName("PK_Con_Subordination");

                entity.ToTable("Subordination");

                entity.Property(e => e.SubOrdinateId).HasColumnName("SubOrdinateID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.Subordinations)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Con_ServiceFile_Subordination");
            });

            modelBuilder.Entity<SubordinationLenderDetail>(entity =>
            {
                entity.ToTable("SubordinationLenderDetail");

                entity.Property(e => e.AssignmentDate).HasColumnType("datetime");

                entity.Property(e => e.Book)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FileBusinessPartyId).HasColumnName("FileBusinessPartyID");

                entity.Property(e => e.Instrument)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoanAmount).HasColumnType("money");

                entity.Property(e => e.LoanNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Page)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ResponsibleParty)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.SubOrdinateId).HasColumnName("SubOrdinateID");

                entity.Property(e => e.SubOrdinationOrderDate).HasColumnType("datetime");

                entity.Property(e => e.SubRecordedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.FileBusinessParty)
                    .WithMany(p => p.SubordinationLenderDetails)
                    .HasForeignKey(d => d.FileBusinessPartyId)
                    .HasConstraintName("FK3_Cons_FBPID");

                entity.HasOne(d => d.SubOrdinate)
                    .WithMany(p => p.SubordinationLenderDetails)
                    .HasForeignKey(d => d.SubOrdinateId)
                    .HasConstraintName("FK2_Cons_SubOrdinateID");

                entity.HasOne(d => d.SubOrdinateTypeCd)
                    .WithMany(p => p.SubordinationLenderDetails)
                    .HasForeignKey(d => d.SubOrdinateTypeCdId)
                    .HasConstraintName("FK1_Con_SubordinationLenderDetail_TypeCdId");
            });

            modelBuilder.Entity<SuccessorProcessEventXref>(entity =>
            {
                entity.ToTable("SuccessorProcessEventXref");

                entity.HasIndex(e => new { e.WorkflowTemplateId, e.ProcessTypeId }, "CDXSuccessorProcessEventXref")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.WorkflowTemplateId, e.SuccessorStatusCd, e.ProcessTypeId }, "idxSuccessorProcess")
                    .HasFillFactor(90);

                entity.Property(e => e.ProcessTypeId).HasColumnName("ProcessTypeID");

                entity.Property(e => e.SuccessorStatusCd).HasColumnName("SuccessorStatusCD");

                entity.Property(e => e.WorkflowTemplateId).HasColumnName("WorkflowTemplateID");
            });

            modelBuilder.Entity<SurveyInfo>(entity =>
            {
                entity.HasKey(e => e.FileProcessId)
                    .HasName("XPKSurveyInfo");

                entity.ToTable("SurveyInfo");

                entity.Property(e => e.FileProcessId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileProcessID");

                entity.Property(e => e.SurveyNote)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.HasOne(d => d.FileProcess)
                    .WithOne(p => p.SurveyInfo)
                    .HasForeignKey<SurveyInfo>(d => d.FileProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("R_400");
            });

            modelBuilder.Entity<Swiftcode>(entity =>
            {
                entity.HasKey(e => e.Swiftcode1)
                    .HasName("PK_SWIFTCode");

                entity.ToTable("SWIFTCodes");

                entity.HasIndex(e => e.IsInsertOrDelete, "idxSWIFTCodes_IsInsertOrDelete")
                    .HasFillFactor(90);

                entity.Property(e => e.Swiftcode1)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("SWIFTCode");

                entity.Property(e => e.CountryName)
                    .HasMaxLength(256)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SwiftcodesCollection>(entity =>
            {
                entity.ToTable("SWIFTCodesCollection");

                entity.HasIndex(e => e.Swiftcode, "UK_Con_SWIFTCodesCollection")
                    .IsUnique();

                entity.Property(e => e.CountryName)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.Swiftcode)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("SWIFTCode")
                    .IsFixedLength();
            });

            modelBuilder.Entity<SymentecVipauditLog>(entity =>
            {
                entity.HasKey(e => e.AuditLogId)
                    .HasName("PK_SymentecVIPAuditLog_AuditLogID");

                entity.ToTable("SymentecVIPAuditLog");

                entity.Property(e => e.AuditLogId).HasColumnName("AuditLogID");

                entity.Property(e => e.CredentialId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CredentialID");

                entity.Property(e => e.RequestId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RequestID");

                entity.Property(e => e.StatusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.StatusMessage)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Updts)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UPDTS");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.SymentecVipauditLogs)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__SymentecVIPAuditLog__UserID");
            });

            modelBuilder.Entity<T32processedRecord>(entity =>
            {
                entity.HasKey(e => e.T32processedRecordsId)
                    .HasName("IDXT32ProcessedRecordsId");

                entity.ToTable("T32ProcessedRecords");

                entity.Property(e => e.T32processedRecordsId).HasColumnName("T32ProcessedRecordsId");
            });

            modelBuilder.Entity<TaskCategory>(entity =>
            {
                entity.ToTable("TaskCategory");

                entity.HasIndex(e => e.SeqNum, "IDXTaskCatSeqNum")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BusinessUnitId, "IDXTaskCategoryBusinessUnitId")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SuperTaskCategoryId, "IDXTaskCategorySuperCategory")
                    .HasFillFactor(90);

                entity.Property(e => e.TaskCategoryId).HasColumnName("TaskCategoryID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.CategoryName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.InactiveFlag).HasDefaultValueSql("((0))");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.TaskCategories)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conTaskCategoryBUnitFK");

                entity.HasOne(d => d.CreationEmployee)
                    .WithMany(p => p.TaskCategories)
                    .HasForeignKey(d => d.CreationEmployeeId)
                    .HasConstraintName("conTaskCategoryUserFK");
            });

            modelBuilder.Entity<TaskTemplate>(entity =>
            {
                entity.ToTable("TaskTemplate");

                entity.HasIndex(e => new { e.WorkFlowTemplateId, e.StatusCd }, "IDXTaskTemplateStatusCd")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.TaskCategoryId, e.WorkFlowTemplateId, e.StatusCd }, "IDxWorktmpStat")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.WorkFlowTemplateId, "XIF24TaskTemplate")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TaskCategoryId, "XIF25TaskTemplate")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SuperTaskTemplateId, "idxTaskTemplate1")
                    .HasFillFactor(90);

                entity.Property(e => e.TaskTemplateId).HasColumnName("TaskTemplateID");

                entity.Property(e => e.DueDateTypeCdId).HasColumnName("DueDateTypeCdID");

                entity.Property(e => e.ExpirationTypeCdId)
                    .HasColumnName("ExpirationTypeCdID")
                    .HasDefaultValueSql("((3355))");

                entity.Property(e => e.FileEventId).HasColumnName("FileEventID");

                entity.Property(e => e.FriendlyName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.StatusCd).HasDefaultValueSql("((1))");

                entity.Property(e => e.SuperTaskTemplateId).HasColumnName("SuperTaskTemplateID");

                entity.Property(e => e.TaskCategoryId).HasColumnName("TaskCategoryID");

                entity.Property(e => e.Ucflag).HasColumnName("UCFlag");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.WorkFlowTemplateId).HasColumnName("WorkFlowTemplateID");

                entity.HasOne(d => d.DueDateTypeCd)
                    .WithMany(p => p.TaskTemplates)
                    .HasForeignKey(d => d.DueDateTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("R_502");

                entity.HasOne(d => d.SuperTaskTemplate)
                    .WithMany(p => p.InverseSuperTaskTemplate)
                    .HasForeignKey(d => d.SuperTaskTemplateId)
                    .HasConstraintName("FK__TaskTempl__Super__1CCBF718");

                entity.HasOne(d => d.TaskCategory)
                    .WithMany(p => p.TaskTemplates)
                    .HasForeignKey(d => d.TaskCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conTaskTemplate3FK");

                entity.HasOne(d => d.TaskEventRule)
                    .WithMany(p => p.TaskTemplates)
                    .HasForeignKey(d => d.TaskEventRuleId)
                    .HasConstraintName("FK__TaskTempl__TaskE__1DC01B51");

                entity.HasOne(d => d.WorkFlowTemplate)
                    .WithMany(p => p.TaskTemplates)
                    .HasForeignKey(d => d.WorkFlowTemplateId)
                    .HasConstraintName("conTaskTemplate2FK");

                entity.HasMany(d => d.BusinessUnits)
                    .WithMany(p => p.TaskTemplates)
                    .UsingEntity<Dictionary<string, object>>(
                        "TaskTemplateProdOfficeXref",
                        l => l.HasOne<BusinessUnit>().WithMany().HasForeignKey("BusinessUnitId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conTaskTemplateProdOfficeXref2FK"),
                        r => r.HasOne<TaskTemplate>().WithMany().HasForeignKey("TaskTemplateId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conTaskTemplateProdOfficeXref1FK"),
                        j =>
                        {
                            j.HasKey("TaskTemplateId", "BusinessUnitId").HasName("conTaskTemplateProdOfficeXrefPk");

                            j.ToTable("TaskTemplateProdOfficeXref");

                            j.IndexerProperty<int>("TaskTemplateId").HasColumnName("TaskTemplateID");

                            j.IndexerProperty<int>("BusinessUnitId").HasColumnName("BusinessUnitID");
                        });

                entity.HasMany(d => d.WorkGroups)
                    .WithMany(p => p.TaskTemplates)
                    .UsingEntity<Dictionary<string, object>>(
                        "TaskTemplateWorkGroupXref",
                        l => l.HasOne<WorkGroup>().WithMany().HasForeignKey("WorkGroupId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conTaskTemplateWorkGroupXref1FK"),
                        r => r.HasOne<TaskTemplate>().WithMany().HasForeignKey("TaskTemplateId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conTaskTemplateWorkGroupXref2FK"),
                        j =>
                        {
                            j.HasKey("TaskTemplateId", "WorkGroupId").HasName("conTaskTemplateWorkGroupXrefPk");

                            j.ToTable("TaskTemplateWorkGroupXref");

                            j.IndexerProperty<int>("TaskTemplateId").HasColumnName("TaskTemplateID");

                            j.IndexerProperty<int>("WorkGroupId").HasColumnName("WorkGroupID");
                        });
            });

            modelBuilder.Entity<TaskTemplateCommentCodeXref>(entity =>
            {
                entity.ToTable("TaskTemplateCommentCodeXref");

                entity.HasIndex(e => new { e.TaskTemplateId, e.CommentCodeId }, "NCLX_TaskTemplateIDCommentCodeID")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.TaskTemplateCommentCodeXrefId).HasColumnName("TaskTemplateCommentCodeXrefID");

                entity.Property(e => e.CommentCodeId).HasColumnName("CommentCodeID");

                entity.Property(e => e.TaskTemplateId).HasColumnName("TaskTemplateID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<TaskTemplateCustomerXref>(entity =>
            {
                entity.ToTable("TaskTemplateCustomerXref");

                entity.HasIndex(e => e.TaskTemplateId, "idx_TaskTemplateID")
                    .HasFillFactor(90);

                entity.Property(e => e.TaskTemplateCustomerXrefId).HasColumnName("TaskTemplateCustomerXrefID");

                entity.Property(e => e.ResourceString)
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.TaskTemplateId).HasColumnName("TaskTemplateID");

                entity.Property(e => e.TaskTypeCdid).HasColumnName("TaskTypeCDID");

                entity.Property(e => e.UpdDate).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.HasOne(d => d.TaskTemplate)
                    .WithMany(p => p.TaskTemplateCustomerXrefs)
                    .HasForeignKey(d => d.TaskTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TaskTemplateCustomerXref");

                entity.HasOne(d => d.TaskTypeCd)
                    .WithMany(p => p.TaskTemplateCustomerXrefs)
                    .HasForeignKey(d => d.TaskTypeCdid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TaskTypeCDIDcdID");
            });

            modelBuilder.Entity<TaskTemplateNightly>(entity =>
            {
                entity.HasKey(e => e.TaskTemplateId)
                    .HasName("PK__TaskTemp__09EB3247A3C0D6C5");

                entity.ToTable("TaskTemplateNightly");

                entity.Property(e => e.TaskTemplateId)
                    .ValueGeneratedNever()
                    .HasColumnName("TaskTemplateID");

                entity.Property(e => e.FriendlyName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ResourceString)
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.TaskTemplateCustomerXrefId).HasColumnName("TaskTemplateCustomerXrefID");

                entity.Property(e => e.TaskTypeCdid).HasColumnName("TaskTypeCDID");

                entity.Property(e => e.Ucflag).HasColumnName("UCFlag");

                entity.Property(e => e.UpdDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");
            });

            modelBuilder.Entity<TaskTemplatePackage>(entity =>
            {
                entity.ToTable("TaskTemplatePackage");

                entity.HasIndex(e => new { e.TaskTemplateId, e.PackageType }, "IdxTaskTemplate")
                    .HasFillFactor(90);

                entity.Property(e => e.TaskTemplatePackageId).HasColumnName("TaskTemplatePackageID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.PackageName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TaskTemplateSuccessorStatusId).HasColumnName("TaskTemplateSuccessorStatusID");

                entity.HasOne(d => d.TaskTemplateSuccessorStatus)
                    .WithMany(p => p.TaskTemplatePackages)
                    .HasForeignKey(d => d.TaskTemplateSuccessorStatusId)
                    .HasConstraintName("FKTaskTemplateSuccessorStatus");
            });

            modelBuilder.Entity<TaskTemplatePackageDetail>(entity =>
            {
                entity.HasKey(e => e.TaskTemplatePackageDetailsId)
                    .HasName("PkTaskTemplatePackageDetails");

                entity.HasIndex(e => new { e.TaskTemplatePackageId, e.SuccessorTaskTemplateId, e.SuccessorStatusCd }, "IdxPackage")
                    .HasFillFactor(90);

                entity.Property(e => e.TaskTemplatePackageId).HasColumnName("TaskTemplatePackageID");

                entity.HasOne(d => d.SuccessorTaskTemplate)
                    .WithMany(p => p.TaskTemplatePackageDetails)
                    .HasForeignKey(d => d.SuccessorTaskTemplateId)
                    .HasConstraintName("FKTpdet");

                entity.HasOne(d => d.TaskTemplatePackage)
                    .WithMany(p => p.TaskTemplatePackageDetails)
                    .HasForeignKey(d => d.TaskTemplatePackageId)
                    .HasConstraintName("FKTpDet2");
            });

            modelBuilder.Entity<TaskTemplatePackageSuccessorProcess>(entity =>
            {
                entity.HasKey(e => e.TaskTemplatePackageSuccessorProcessesId)
                    .HasName("PK__TaskTemp__A8EE8610811ECC46");

                entity.HasIndex(e => new { e.TaskTemplatePackageId, e.ProcessTypeId, e.SeqNum }, "IdxPackageProcess")
                    .HasFillFactor(90);

                entity.Property(e => e.TaskTemplatePackageId).HasColumnName("TaskTemplatePackageID");

                entity.HasOne(d => d.ProcessType)
                    .WithMany(p => p.TaskTemplatePackageSuccessorProcesses)
                    .HasForeignKey(d => d.ProcessTypeId)
                    .HasConstraintName("FKTPs1");

                entity.HasOne(d => d.TaskTemplatePackage)
                    .WithMany(p => p.TaskTemplatePackageSuccessorProcesses)
                    .HasForeignKey(d => d.TaskTemplatePackageId)
                    .HasConstraintName("FKTsProc1");
            });

            modelBuilder.Entity<TaskTemplateSuccessor>(entity =>
            {
                entity.HasKey(e => e.TaskTemplateSuccessorId)
                    .HasName("PKTaskTemplateSuccessor")
                    .IsClustered(false);

                entity.ToTable("TaskTemplateSuccessor");

                entity.HasIndex(e => e.TaskTemplateId, "CDXTaskTemplateSuccessor")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SuccessorTaskTemplateId, "IDXTaskTemplateSuccessor1")
                    .HasFillFactor(90);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<TaskTemplateSuccessorProcessXref>(entity =>
            {
                entity.ToTable("TaskTemplateSuccessorProcessXref");

                entity.HasIndex(e => e.ProcessTypeId, "CDX2TaskTemplateSuccessorProcessXref")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TaskTemplateId, "CDXTaskTemplateSuccessorProcessXref")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.TaskTemplateId, e.ProcessTypeId, e.SuccessorStatusCd }, "PKTaskTemplateSuccessorProcessXref")
                    .HasFillFactor(90);

                entity.Property(e => e.TaskTemplateSuccessorProcessXrefId).HasColumnName("TaskTemplateSuccessorProcessXref_ID");

                entity.Property(e => e.ProcessTypeId).HasColumnName("ProcessTypeID");

                entity.Property(e => e.SuccessorStatusCd).HasColumnName("SuccessorStatusCD");

                entity.Property(e => e.TaskTemplateId).HasColumnName("TaskTemplateID");
            });

            modelBuilder.Entity<TaskTemplateSuccessorStatus>(entity =>
            {
                entity.ToTable("TaskTemplateSuccessorStatus");

                entity.HasIndex(e => e.TaskTemplateId, "IdxTaskTemplate")
                    .HasFillFactor(90);

                entity.Property(e => e.TaskTemplateSuccessorStatusId).HasColumnName("TaskTemplateSuccessorStatusID");

                entity.HasOne(d => d.TaskTemplate)
                    .WithMany(p => p.TaskTemplateSuccessorStatuses)
                    .HasForeignKey(d => d.TaskTemplateId)
                    .HasConstraintName("FKTaskTemplateSuccessorStatus2");
            });

            modelBuilder.Entity<TaskTemplateTriggerEventRuleXref>(entity =>
            {
                entity.ToTable("TaskTemplateTriggerEventRuleXref");

                entity.HasIndex(e => new { e.TaskTemplateId, e.TaskEventRuleId, e.TaskEventStatusCd }, "IDX_TaskTemplateTriggerEventRuleXref")
                    .HasFillFactor(90);

                entity.Property(e => e.TaskTemplateTriggerEventRuleXrefId).HasColumnName("TaskTemplateTriggerEventRuleXref_ID");

                entity.Property(e => e.TaskTemplateId).HasColumnName("TaskTemplateID");

                entity.HasOne(d => d.TaskEventRule)
                    .WithMany(p => p.TaskTemplateTriggerEventRuleXrefs)
                    .HasForeignKey(d => d.TaskEventRuleId)
                    .HasConstraintName("FK_TaskTempXref_TriggerEventRule");

                entity.HasOne(d => d.TaskTemplate)
                    .WithMany(p => p.TaskTemplateTriggerEventRuleXrefs)
                    .HasForeignKey(d => d.TaskTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TaskTempXref_TaskTemplateID");
            });

            modelBuilder.Entity<Tax>(entity =>
            {
                entity.ToTable("Tax");

                entity.HasIndex(e => new { e.SuperTaxId, e.TaxTypeCdId }, "IX_Tax")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PropertyId, "indTax4Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ClassTypeId, e.PropertyId, e.TaxNum }, "indTax6")
                    .HasFillFactor(90);

                entity.Property(e => e.TaxId).HasColumnName("TaxID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.MiscTaxNum)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyId).HasColumnName("PropertyID");

                entity.Property(e => e.SuperTaxId).HasColumnName("SuperTaxID");

                entity.Property(e => e.SupplementalTaxNum)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TaxNum)
                    .HasMaxLength(45)
                    .IsUnicode(false);

                entity.Property(e => e.TaxRateAreaNum)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TaxYr)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.Taxes)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conTax5Fk");

                entity.HasOne(d => d.Property)
                    .WithMany(p => p.Taxes)
                    .HasForeignKey(d => d.PropertyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conTax4FK");

                entity.HasOne(d => d.SuperTax)
                    .WithMany(p => p.InverseSuperTax)
                    .HasForeignKey(d => d.SuperTaxId)
                    .HasConstraintName("conTax2R");

                entity.HasMany(d => d.FileProcesses)
                    .WithMany(p => p.Taxes)
                    .UsingEntity<Dictionary<string, object>>(
                        "PropertyTaxFileProcessXref",
                        l => l.HasOne<FileProcess>().WithMany().HasForeignKey("FileProcessId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conPropertyTaxFileProcessXref3FK"),
                        r => r.HasOne<Tax>().WithMany().HasForeignKey("TaxId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conPropertyTaxFileProcessXref2FK"),
                        j =>
                        {
                            j.HasKey("TaxId", "FileProcessId");

                            j.ToTable("PropertyTaxFileProcessXREF");

                            j.HasIndex(new[] { "TaxId" }, "IX_PropertyTaxFileProcessXREF").HasFillFactor(90);

                            j.IndexerProperty<int>("TaxId").HasColumnName("TaxID");

                            j.IndexerProperty<int>("FileProcessId").HasColumnName("FileProcessID");
                        });
            });

            modelBuilder.Entity<TaxExemption>(entity =>
            {
                entity.ToTable("TaxExemption");

                entity.HasIndex(e => e.TaxId, "indTaxExemption4Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.TaxExemptionId).HasColumnName("TaxExemptionID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.ExemptionAmt).HasColumnType("money");

                entity.Property(e => e.Other1).HasColumnType("money");

                entity.Property(e => e.Other2).HasColumnType("money");

                entity.Property(e => e.TaxExemptionTypeCdId).HasColumnName("TaxExemptionTypeCdID");

                entity.Property(e => e.TaxId).HasColumnName("TaxID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.TaxExemptions)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conTaxExemption");

                entity.HasOne(d => d.TaxExemptionTypeCd)
                    .WithMany(p => p.TaxExemptions)
                    .HasForeignKey(d => d.TaxExemptionTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conTaxExemption2FK");

                entity.HasOne(d => d.Tax)
                    .WithMany(p => p.TaxExemptions)
                    .HasForeignKey(d => d.TaxId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conTaxExemption3FK");
            });

            modelBuilder.Entity<TaxInstallment>(entity =>
            {
                entity.ToTable("TaxInstallment");

                entity.HasIndex(e => e.TaxId, "indTaxInstallment3Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.TaxInstallmentId).HasColumnName("TaxInstallmentID");

                entity.Property(e => e.AssessedImprovementAmt).HasColumnType("money");

                entity.Property(e => e.AssessedValueAmt).HasColumnType("money");

                entity.Property(e => e.AssessmentDate).HasColumnType("datetime");

                entity.Property(e => e.CertOfPurchase)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DelinquentDate).HasColumnType("datetime");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.GoodThruDate).HasColumnType("datetime");

                entity.Property(e => e.InterestAmt).HasColumnType("money");

                entity.Property(e => e.OverduePenaltyAmt).HasColumnType("money");

                entity.Property(e => e.PartialPmtAmt).HasColumnType("money");

                entity.Property(e => e.PersonalPropertyValueAmt).HasColumnType("money");

                entity.Property(e => e.PymtAmt).HasColumnType("money");

                entity.Property(e => e.PymtDate).HasColumnType("datetime");

                entity.Property(e => e.RedemptionAmt).HasColumnType("money");

                entity.Property(e => e.RedemptionDate).HasColumnType("datetime");

                entity.Property(e => e.SpecialAssessmentAmt).HasColumnType("money");

                entity.Property(e => e.TaxId).HasColumnName("TaxID");

                entity.Property(e => e.TaxPymtStatusTypeCdId).HasColumnName("TaxPymtStatusTypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.VolumeNum)
                    .HasMaxLength(28)
                    .IsUnicode(false);

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.TaxInstallments)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conTaxInstmt4Fk");

                entity.HasOne(d => d.Tax)
                    .WithMany(p => p.TaxInstallments)
                    .HasForeignKey(d => d.TaxId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conTaxInstallment2Fk");

                entity.HasOne(d => d.TaxPymtStatusTypeCd)
                    .WithMany(p => p.TaxInstallments)
                    .HasForeignKey(d => d.TaxPymtStatusTypeCdId)
                    .HasConstraintName("conTaxInstallment3Fk");
            });

            modelBuilder.Entity<TaxRateInfo>(entity =>
            {
                entity.ToTable("TaxRateInfo");

                entity.HasIndex(e => new { e.GeoRegionId, e.TaxRateTypeCdId, e.EffectiveDate }, "indTaxRateInfo2")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.GeoRegionId, "indTaxRateInfo4Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TaxBaseMethodTypeCdId, "indTaxRateInfo6Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.TaxRateInfoId).HasColumnName("TaxRateInfoID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

                entity.Property(e => e.GeoRegionId).HasColumnName("GeoRegionID");

                entity.Property(e => e.PerDollarAmt).HasColumnType("money");

                entity.Property(e => e.TaxBaseMethodTypeCdId).HasColumnName("TaxBaseMethodTypeCdID");

                entity.Property(e => e.TaxRateAmt).HasColumnType("money");

                entity.Property(e => e.TaxRatePercent).HasColumnType("decimal(6, 4)");

                entity.Property(e => e.TaxRateTypeCdId).HasColumnName("TaxRateTypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.TaxRateInfos)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conTaxRateInfo2Fk");

                entity.HasOne(d => d.GeoRegion)
                    .WithMany(p => p.TaxRateInfos)
                    .HasForeignKey(d => d.GeoRegionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conTaxRateInfo3Fk");

                entity.HasOne(d => d.TaxBaseMethodTypeCd)
                    .WithMany(p => p.TaxRateInfoTaxBaseMethodTypeCds)
                    .HasForeignKey(d => d.TaxBaseMethodTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conTaxRateInfo5Fk");

                entity.HasOne(d => d.TaxRateTypeCd)
                    .WithMany(p => p.TaxRateInfoTaxRateTypeCds)
                    .HasForeignKey(d => d.TaxRateTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conTaxRateInfo4Fk");
            });

            modelBuilder.Entity<TaxpayerXref>(entity =>
            {
                entity.HasKey(e => e.FileBusinessPartyId)
                    .HasName("PK_TaxpayerXref_FileBusinessPartyID");

                entity.ToTable("TaxpayerXref");

                entity.Property(e => e.FileBusinessPartyId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileBusinessPartyID");

                entity.Property(e => e.W8flag).HasColumnName("W8Flag");

                entity.Property(e => e.W8flagSpouse).HasColumnName("W8FlagSpouse");

                entity.HasOne(d => d.FileBusinessParty)
                    .WithOne(p => p.TaxpayerXref)
                    .HasForeignKey<TaxpayerXref>(d => d.FileBusinessPartyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TaxpayerXref_FileBusinessPartyID");
            });

            modelBuilder.Entity<TblFile>(entity =>
            {
                entity.ToTable("tblFile");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.VStatus).HasColumnName("vStatus");
            });

            modelBuilder.Entity<TcautoPopulate>(entity =>
            {
                entity.HasKey(e => e.FileBusinessPartyId)
                    .HasName("conTCAutoPopulatePK");

                entity.ToTable("TCAutoPopulate");

                entity.Property(e => e.FileBusinessPartyId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileBusinessPartyID");
            });

            modelBuilder.Entity<TempChargeFile>(entity =>
            {
                entity.ToTable("TempChargeFile");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.TempChargeFiles)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TempChargeFileID");
            });

            modelBuilder.Entity<TempFileBalance>(entity =>
            {
                entity.ToTable("Temp_FileBalance");

                entity.Property(e => e.TempFileBalanceId).HasColumnName("Temp_FileBalanceId");

                entity.Property(e => e.AfterFileBalance)
                    .HasColumnType("money")
                    .HasColumnName("After_FileBalance");

                entity.Property(e => e.BeforeFileBalance)
                    .HasColumnType("money")
                    .HasColumnName("Before_FileBalance");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FileNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OfficeName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.RegionName)
                    .HasMaxLength(70)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempFileXref>(entity =>
            {
                entity.ToTable("TempFileXref");

                entity.Property(e => e.TempFileNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(left(newid(),(20)))");

                entity.HasOne(d => d.FastFile)
                    .WithMany(p => p.TempFileXrefs)
                    .HasForeignKey(d => d.FastFileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TempFileXref_ServiceFile");
            });

            modelBuilder.Entity<TempSearchchange>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_searchchange");

                entity.Property(e => e.ChangeId).ValueGeneratedOnAdd();

                entity.Property(e => e.ObjectId).HasColumnName("ObjectID");

                entity.Property(e => e.ObjectPk).HasColumnName("ObjectPK");
            });

            modelBuilder.Entity<TempServiceFileFeeId>(entity =>
            {
                entity.HasKey(e => e.ServiceFileFeeId)
                    .HasName("PK__TempServ__C12DCA4EA13F1F49");

                entity.ToTable("TempServiceFileFeeId");

                entity.Property(e => e.ServiceFileFeeId).ValueGeneratedNever();

                entity.HasOne(d => d.ServiceFileFee)
                    .WithOne(p => p.TempServiceFileFeeId)
                    .HasForeignKey<TempServiceFileFeeId>(d => d.ServiceFileFeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__TempServi__Servi__0984187A");
            });

            modelBuilder.Entity<TempSsisNcsPostDocumentcopylog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_SSIS_NcsPost_documentcopylog");

                entity.HasIndex(e => e.CopyDocsRequestId, "CIX-CopyDocsRequestID")
                    .IsClustered();

                entity.Property(e => e.CopyDocsRequestId).HasColumnName("CopyDocsRequestID");

                entity.Property(e => e.DocumentCopyLogId).HasColumnName("DocumentCopyLogID");
            });

            modelBuilder.Entity<TempSsisNcsPostDocumentcopylogdetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_SSIS_NcsPost_documentcopylogdetails");

                entity.HasIndex(e => e.DocumentCopyLogId, "CIX-DocumentCopyLogID")
                    .IsClustered();

                entity.Property(e => e.CopyStatusId).HasColumnName("CopyStatusID");

                entity.Property(e => e.DocumentCopyLogId).HasColumnName("DocumentCopyLogID");

                entity.Property(e => e.LegacyDocId).HasColumnName("LegacyDocID");

                entity.Property(e => e.NgDocId).HasColumnName("NG_DocID");
            });

            modelBuilder.Entity<Template>(entity =>
            {
                entity.HasKey(e => e.TemplateId)
                    .HasName("conTemplate1Pk")
                    .IsClustered(false);

                entity.ToTable("Template");

                entity.HasIndex(e => e.UpdTs, "DW_IXN01_Template_UpdTS")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.TemplateId, e.ColorAllowedFlag }, "IDX_Template_2")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.DocTypeCdId, e.BusinessUnitId }, "IDX_Template_DocTypeCdID_BusinessUnitID_Incl")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.Name, "IDX_Template_Name")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.StatusCd, e.UnderConstFlg }, "IDX_Template_StatusCd_UnderConstFlg_Incl")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.BusinessUnitId, e.ObjectCd, e.NextTemplateVersionId, e.UnderConstFlg }, "TemplateUniqueObjectCd")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BusinessUnitId, "idxTemplateBusUnit")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.DocTypeCdId, e.TemplateId, e.BusinessUnitId, e.ObjectCd, e.UnderConstFlg }, "idxTemplateBusUnitDocTypeOthers")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.BusinessUnitId, e.DocTypeCdId }, "idxTemplateBusUnitDocType_Clx")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.UnderConstFlg, e.NextTemplateVersionId, e.BusinessUnitId }, "indTemplate4Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ObjectCd, "indTemplate9")
                    .HasFillFactor(90);

                entity.Property(e => e.TemplateId).HasColumnName("TemplateID");

                entity.Property(e => e.AdhocPhrBottomMarginValue).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.AdhocPhrFontName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AdhocPhrLeftMarginValue).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.AdhocPhrRightMarginValue).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.AdhocPhrTopMarginValue).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.Property(e => e.DeactivationDate).HasColumnType("datetime");

                entity.Property(e => e.DocTypeCdId).HasColumnName("DocTypeCdID");

                entity.Property(e => e.Name)
                    .HasMaxLength(58)
                    .IsUnicode(false);

                entity.Property(e => e.NextTemplateVersionId).HasColumnName("NextTemplateVersionID");

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.ReactivationDate).HasColumnType("datetime");

                entity.Property(e => e.StatusChgComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StatusChgDate).HasColumnType("datetime");

                entity.Property(e => e.StatusChgUserId).HasColumnName("StatusChgUserID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.Templates)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TemplateBusinessUnit");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.Templates)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conDocTemplate4Fk");

                entity.HasOne(d => d.CreationUser)
                    .WithMany(p => p.TemplateCreationUsers)
                    .HasForeignKey(d => d.CreationUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conTemplate5Fk");

                entity.HasOne(d => d.DocTypeCd)
                    .WithMany(p => p.Templates)
                    .HasForeignKey(d => d.DocTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TemplateDocType");

                entity.HasOne(d => d.NextTemplateVersion)
                    .WithMany(p => p.InverseNextTemplateVersion)
                    .HasForeignKey(d => d.NextTemplateVersionId)
                    .HasConstraintName("conTemplate2R");

                entity.HasOne(d => d.StatusChgUser)
                    .WithMany(p => p.TemplateStatusChgUsers)
                    .HasForeignKey(d => d.StatusChgUserId)
                    .HasConstraintName("conTemplate3Fk");
            });

            modelBuilder.Entity<TemplateBusinessParty>(entity =>
            {
                entity.ToTable("TemplateBusinessParty");

                entity.HasIndex(e => e.BusinessUnitId, "XIF80TemplateBusinessParty")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CheckDescriptionDetailId, "XIF82TemplateBusinessParty")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SuperTemplateBusinessPartyId, "XIF83TemplateBusinessParty")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PrincipalId, "XIF84TemplateBusinessParty")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ContactId, "XIF85TemplateBusinessParty")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BusOrgId, "XIF86TemplateBusinessParty")
                    .HasFillFactor(90);

                entity.Property(e => e.TemplateBusinessPartyId).HasColumnName("TemplateBusinessPartyID");

                entity.Property(e => e.AttentionName)
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.BusOrgAlternateNameId).HasColumnName("BusOrgAlternateNameID");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.CheckDescriptionDetailId).HasColumnName("CheckDescriptionDetailID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.EntitySubTypeCdId).HasColumnName("EntitySubTypeCdID");

                entity.Property(e => e.IssueCheckFlag).HasDefaultValueSql("((1))");

                entity.Property(e => e.PhysicalAddrId).HasColumnName("PhysicalAddrID");

                entity.Property(e => e.PrincipalId).HasColumnName("PrincipalID");

                entity.Property(e => e.RefNum)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RoleTypeCdId).HasColumnName("RoleTypeCdID");

                entity.Property(e => e.Sales1EmployeeId).HasColumnName("Sales1EmployeeID");

                entity.Property(e => e.Sales2EmployeeId).HasColumnName("Sales2EmployeeID");

                entity.Property(e => e.SuperTemplateBusinessPartyId).HasColumnName("SuperTemplateBusinessPartyID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.BusOrg)
                    .WithMany(p => p.TemplateBusinessParties)
                    .HasForeignKey(d => d.BusOrgId)
                    .HasConstraintName("conTemplateBusinessParty10FK");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.TemplateBusinessParties)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .HasConstraintName("conTemplateBusinessParty31FK");

                entity.HasOne(d => d.CheckDescriptionDetail)
                    .WithMany(p => p.TemplateBusinessParties)
                    .HasForeignKey(d => d.CheckDescriptionDetailId)
                    .HasConstraintName("conTBPCheckDescriptionDetail1FK");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.TemplateBusinessParties)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conTemplateBusinessParty5FK");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.TemplateBusinessParties)
                    .HasForeignKey(d => d.ContactId)
                    .HasConstraintName("conTemplateBusinessParty11FK");

                entity.HasOne(d => d.EntitySubTypeCd)
                    .WithMany(p => p.TemplateBusinessPartyEntitySubTypeCds)
                    .HasForeignKey(d => d.EntitySubTypeCdId)
                    .HasConstraintName("conTemplateBusinessParty13FK");

                entity.HasOne(d => d.PhysicalAddr)
                    .WithMany(p => p.TemplateBusinessParties)
                    .HasForeignKey(d => d.PhysicalAddrId)
                    .HasConstraintName("conTFBPPhysicalAddrFk");

                entity.HasOne(d => d.Principal)
                    .WithMany(p => p.TemplateBusinessParties)
                    .HasForeignKey(d => d.PrincipalId)
                    .HasConstraintName("conTemplateBusinessParty30FK");

                entity.HasOne(d => d.RoleTypeCd)
                    .WithMany(p => p.TemplateBusinessPartyRoleTypeCds)
                    .HasForeignKey(d => d.RoleTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conTemplateBusinessParty2FK");

                entity.HasOne(d => d.Sales1Employee)
                    .WithMany(p => p.TemplateBusinessPartySales1Employees)
                    .HasForeignKey(d => d.Sales1EmployeeId)
                    .HasConstraintName("conTemplateBusinessParty7Fk");

                entity.HasOne(d => d.Sales2Employee)
                    .WithMany(p => p.TemplateBusinessPartySales2Employees)
                    .HasForeignKey(d => d.Sales2EmployeeId)
                    .HasConstraintName("conTemplateBusinessParty8Fk");

                entity.HasOne(d => d.SuperTemplateBusinessParty)
                    .WithMany(p => p.InverseSuperTemplateBusinessParty)
                    .HasForeignKey(d => d.SuperTemplateBusinessPartyId)
                    .HasConstraintName("conTemplateBusinessParty6FK");
            });

            modelBuilder.Entity<TemplateFilterByBusinessPartyId>(entity =>
            {
                entity.HasKey(e => e.TemplateFilterByBusinessPartyIdid)
                    .HasName("IDXTemplateFilterByBusinessPartyID")
                    .IsClustered(false);

                entity.ToTable("TemplateFilterByBusinessPartyID");

                entity.HasIndex(e => e.TemplateFilterGrpId, "CDX_TemplateFilterByBusinessPartyID")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.Property(e => e.TemplateFilterByBusinessPartyIdid).HasColumnName("TemplateFilterByBusinessPartyIDId");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.TemplateFilterGrpId).HasColumnName("TemplateFilterGrpID");
            });

            modelBuilder.Entity<TemplateFilterByBusinessPartyIdDocPrep>(entity =>
            {
                entity.HasKey(e => e.TemplateFilterByBusinessPartyIdDocPrepId)
                    .HasName("PK_IDXTemplateFilterByBusinessPartyID_DocPrep_ID")
                    .IsClustered(false);

                entity.ToTable("TemplateFilterByBusinessPartyID_DocPrep");

                entity.HasIndex(e => e.TemplateFilterGrpId, "CDX_TemplateFilterByBusinessPartyID_DocPrep_TemplateFilterGrpID")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BusOrgId, "IDX_TemplateFilterByBusinessPartyID_DocPrep_BusOrgID")
                    .HasFillFactor(90);

                entity.Property(e => e.TemplateFilterByBusinessPartyIdDocPrepId).HasColumnName("TemplateFilterByBusinessPartyID_DocPrep_ID");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.TemplateFilterGrpId).HasColumnName("TemplateFilterGrpID");

                entity.HasOne(d => d.TemplateFilterGrp)
                    .WithMany(p => p.TemplateFilterByBusinessPartyIdDocPreps)
                    .HasForeignKey(d => d.TemplateFilterGrpId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TemplateFilterByBusinessPartyID_DocPrep_TemplateFilterGrpID");
            });

            modelBuilder.Entity<TemplateFilterByOwningOfficeId>(entity =>
            {
                entity.HasKey(e => e.TemplateFilterByOwningOfficeIdid)
                    .HasName("IDXTemplateFilterByOwningOfficeIDID")
                    .IsClustered(false);

                entity.ToTable("TemplateFilterByOwningOfficeID");

                entity.HasIndex(e => e.TemplateFilterGrpId, "CDX_TemplateFilterByOwningOfficeID")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.Property(e => e.TemplateFilterByOwningOfficeIdid).HasColumnName("TemplateFilterByOwningOfficeIDId");

                entity.Property(e => e.OwningOfficeId).HasColumnName("OwningOfficeID");

                entity.Property(e => e.ServiceTypeId).HasColumnName("ServiceTypeID");

                entity.Property(e => e.TemplateFilterGrpId).HasColumnName("TemplateFilterGrpID");
            });

            modelBuilder.Entity<TemplateFilterByOwningOfficeIdDocPrep>(entity =>
            {
                entity.HasKey(e => e.TemplateFilterByOwningOfficeIdDocPrepId)
                    .HasName("PK_IDXTemplateFilterByOwningOfficeID_DocPrep_ID")
                    .IsClustered(false);

                entity.ToTable("TemplateFilterByOwningOfficeID_DocPrep");

                entity.HasIndex(e => e.TemplateFilterGrpId, "CDX_TemplateFilterByOwningOfficeID_DocPrep_TemplateFilterGrpID")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.OwningOfficeId, "IDX_TemplateFilterByOwningOfficeID_DocPrep_OwningOfficeID")
                    .HasFillFactor(90);

                entity.Property(e => e.TemplateFilterByOwningOfficeIdDocPrepId).HasColumnName("TemplateFilterByOwningOfficeID_DocPrep_ID");

                entity.Property(e => e.OwningOfficeId).HasColumnName("OwningOfficeID");

                entity.Property(e => e.ServiceTypeId).HasColumnName("ServiceTypeID");

                entity.Property(e => e.TemplateFilterGrpId).HasColumnName("TemplateFilterGrpID");

                entity.HasOne(d => d.TemplateFilterGrp)
                    .WithMany(p => p.TemplateFilterByOwningOfficeIdDocPreps)
                    .HasForeignKey(d => d.TemplateFilterGrpId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TemplateFilterByOwningOfficeID_DocPrep_TemplateFilterGrpID");
            });

            modelBuilder.Entity<TemplateFilterByRegionUnderwriter>(entity =>
            {
                entity.ToTable("TemplateFilterByRegionUnderwriter");

                entity.HasIndex(e => new { e.TemplateFilterGrpId, e.RegionUnderwriterId }, "CdxTemplateFilterByRegionUnderwriter")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.TemplateFilterGrpId).HasColumnName("TemplateFilterGrpID");

                entity.HasOne(d => d.RegionUnderwriter)
                    .WithMany(p => p.TemplateFilterByRegionUnderwriters)
                    .HasForeignKey(d => d.RegionUnderwriterId)
                    .HasConstraintName("FKTemplateFilterByRegionUnderwriter");
            });

            modelBuilder.Entity<TemplateFilterByRegionUnderwriterDocPrep>(entity =>
            {
                entity.HasKey(e => e.TemplateFilterByRegionUnderwriterDocPrepId)
                    .HasName("PK_IDXTemplateFilterByRegionUnderwriter_DocPrep_ID")
                    .IsClustered(false);

                entity.ToTable("TemplateFilterByRegionUnderwriter_DocPrep");

                entity.HasIndex(e => new { e.TemplateFilterGrpId, e.RegionUnderwriterId }, "CDX_TemplateFilterByRegionUnderwriter_DocPrep")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.Property(e => e.TemplateFilterByRegionUnderwriterDocPrepId).HasColumnName("TemplateFilterByRegionUnderwriter_DocPrep_ID");

                entity.Property(e => e.TemplateFilterGrpId).HasColumnName("TemplateFilterGrpID");

                entity.HasOne(d => d.RegionUnderwriter)
                    .WithMany(p => p.TemplateFilterByRegionUnderwriterDocPreps)
                    .HasForeignKey(d => d.RegionUnderwriterId)
                    .HasConstraintName("FK_TemplateFilterByRegionUnderwriter_DocPrep_RegionUnderwriterID");

                entity.HasOne(d => d.TemplateFilterGrp)
                    .WithMany(p => p.TemplateFilterByRegionUnderwriterDocPreps)
                    .HasForeignKey(d => d.TemplateFilterGrpId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TemplateFilterByRegionUnderwriter_DocPrep_TemplateFilterGrpID");
            });

            modelBuilder.Entity<TemplateFilterByType>(entity =>
            {
                entity.HasKey(e => e.TemplateFilterByTypesId)
                    .HasName("IDXTemplateFilterByTypesId")
                    .IsClustered(false);

                entity.HasIndex(e => new { e.FilterType, e.FilterInfo, e.TemplateFilterGrpId }, "idx1TemplateFilterByTypes")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.TemplateFilterGrpId, e.FilterType }, "idxTemplateFilterByTypes")
                    .IsClustered();

                entity.Property(e => e.TemplateFilterGrpId).HasColumnName("TemplateFilterGrpID");

                entity.HasOne(d => d.TemplateFilterGrp)
                    .WithMany(p => p.TemplateFilterByTypes)
                    .HasForeignKey(d => d.TemplateFilterGrpId)
                    .HasConstraintName("FK__TemplateF__Templ__532807C9");

                entity.HasOne(d => d.Filter)
                    .WithMany(p => p.TemplateFilterByTypes)
                    .HasForeignKey(d => new { d.FilterType, d.FilterInfo })
                    .HasConstraintName("conForeignKey");
            });

            modelBuilder.Entity<TemplateFilterByTypesDocPrep>(entity =>
            {
                entity.HasKey(e => e.TemplateFilterByTypesDocPrepId)
                    .HasName("PK_IDXTemplateFilterByTypes_DocPrep_ID")
                    .IsClustered(false);

                entity.ToTable("TemplateFilterByTypes_DocPrep");

                entity.HasIndex(e => new { e.TemplateFilterGrpId, e.FilterType }, "CI_TemplateFilterByTypes_DocPrep_TemplateFilterGrpID_FilterType")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.TemplateFilterGrpId, e.FilterType, e.FilterInfo }, "IDXU_TemplateFilterByTypes_DocPrep")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FilterType, e.FilterInfo, e.TemplateFilterGrpId }, "IDX_TemplateFilterByTypes_DocPrep_3")
                    .HasFillFactor(90);

                entity.Property(e => e.TemplateFilterByTypesDocPrepId).HasColumnName("TemplateFilterByTypes_DocPrep_ID");

                entity.Property(e => e.TemplateFilterGrpId).HasColumnName("TemplateFilterGrpID");

                entity.HasOne(d => d.TemplateFilterGrp)
                    .WithMany(p => p.TemplateFilterByTypesDocPreps)
                    .HasForeignKey(d => d.TemplateFilterGrpId)
                    .HasConstraintName("FK__TemplateF__Templ__541C2C02");

                entity.HasOne(d => d.Filter)
                    .WithMany(p => p.TemplateFilterByTypesDocPreps)
                    .HasForeignKey(d => new { d.FilterType, d.FilterInfo })
                    .HasConstraintName("FK_TemplateFilterByTypes_DocPrep_FilterType_FilterIno");
            });

            modelBuilder.Entity<TemplateFilterGrp>(entity =>
            {
                entity.HasKey(e => e.TemplateFilterGrpId)
                    .HasName("TemplateFilterGrpPK")
                    .IsClustered(false);

                entity.ToTable("TemplateFilterGrp");

                entity.HasIndex(e => e.CityId, "IDX_TemplateFilterGrp_CityID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CountyId, "IDX_TemplateFilterGrp_CountyID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.OwningRegionId, e.TemplateId }, "IDX_TemplateFilterGrp_OwningRegionID_TemplateID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.StateId, "IDX_TemplateFilterGrp_StateID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.TemplateId, e.OwningRegionId }, "IdxOwnerRegion")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TemplateId, "TemplateID_ix")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.Property(e => e.TemplateFilterGrpId).HasColumnName("TemplateFilterGrpID");

                entity.Property(e => e.CityId).HasColumnName("CityID");

                entity.Property(e => e.CountyId).HasColumnName("CountyID");

                entity.Property(e => e.OwningRegion)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OwningRegionId).HasColumnName("OwningRegionID");

                entity.Property(e => e.RoleTypeId).HasColumnName("RoleTypeID");

                entity.Property(e => e.StateId).HasColumnName("StateID");

                entity.Property(e => e.TemplateId).HasColumnName("TemplateID");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.TemplateFilterGrpCities)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK__TemplateF__CityI__56F898AD");

                entity.HasOne(d => d.County)
                    .WithMany(p => p.TemplateFilterGrpCounties)
                    .HasForeignKey(d => d.CountyId)
                    .HasConstraintName("FK__TemplateF__Count__57ECBCE6");

                entity.HasOne(d => d.OwningRegionNavigation)
                    .WithMany(p => p.TemplateFilterGrps)
                    .HasForeignKey(d => d.OwningRegionId)
                    .HasConstraintName("conTemplateFilterGrp_OwningRegionID");

                entity.HasOne(d => d.State)
                    .WithMany(p => p.TemplateFilterGrpStates)
                    .HasForeignKey(d => d.StateId)
                    .HasConstraintName("FK__TemplateF__State__58E0E11F");

                entity.HasOne(d => d.Template)
                    .WithMany(p => p.TemplateFilterGrps)
                    .HasForeignKey(d => d.TemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TemplateID_fk");
            });

            modelBuilder.Entity<TemplateFilterGrpDocPrep>(entity =>
            {
                entity.HasKey(e => e.TemplateFilterGrpId)
                    .IsClustered(false);

                entity.ToTable("TemplateFilterGrp_DocPrep");

                entity.HasIndex(e => e.TemplateId, "CDX_TemplateFilterGrp_DocPrep_TemplateID")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.OwningRegionId, e.TemplateId }, "IDX_TemplateFilterGrp_DocPrep_OwningRegionID_TemplateID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.VisibleFlag, "IDX_TemplateFilterGrp_DocPrep_VisibleFlag")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.TemplateId, e.OwningRegionId }, "IX_TemplateFilterGrp_DocPrep_TemplateID_OwningRegionID")
                    .HasFillFactor(90);

                entity.Property(e => e.TemplateFilterGrpId).HasColumnName("TemplateFilterGrpID");

                entity.Property(e => e.CityId).HasColumnName("CityID");

                entity.Property(e => e.CountyId).HasColumnName("CountyID");

                entity.Property(e => e.OwningRegionId).HasColumnName("OwningRegionID");

                entity.Property(e => e.RoleTypeId).HasColumnName("RoleTypeID");

                entity.Property(e => e.StateId).HasColumnName("StateID");

                entity.Property(e => e.TemplateId).HasColumnName("TemplateID");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.TemplateFilterGrpDocPrepCities)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK__TemplateF__CityI__5AC92991");

                entity.HasOne(d => d.County)
                    .WithMany(p => p.TemplateFilterGrpDocPrepCounties)
                    .HasForeignKey(d => d.CountyId)
                    .HasConstraintName("FK__TemplateF__Count__5BBD4DCA");

                entity.HasOne(d => d.OwningRegion)
                    .WithMany(p => p.TemplateFilterGrpDocPreps)
                    .HasForeignKey(d => d.OwningRegionId)
                    .HasConstraintName("FK_TemplateFilterGrp_DocPrep_OwningRegionID");

                entity.HasOne(d => d.State)
                    .WithMany(p => p.TemplateFilterGrpDocPrepStates)
                    .HasForeignKey(d => d.StateId)
                    .HasConstraintName("FK__TemplateF__State__5CB17203");

                entity.HasOne(d => d.Template)
                    .WithMany(p => p.TemplateFilterGrpDocPreps)
                    .HasForeignKey(d => d.TemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TemplateFilterGrp_DocPrep_TemplateID");
            });

            modelBuilder.Entity<TemplateFilterGrpDocPrepMap>(entity =>
            {
                entity.HasKey(e => e.NewTemplateFilterGrpId)
                    .HasName("PK_TemplateFilterGrp_DocPrep_Map_New_TemplateFilterGrpID");

                entity.ToTable("TemplateFilterGrp_DocPrep_Map", "Migration");

                entity.HasIndex(e => e.NewTemplateFilterGrpId, "IX_TemplateFilterGrp_DocPrep_Map_New_TemplateFilterGrpID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.TemplateFilterGrpId, e.TargetRegionId }, "UI_TemplateFilterGrp_DocPrep_Map_TemplateFilterGrpID_TargetRegionID")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.NewTemplateFilterGrpId).HasColumnName("New_TemplateFilterGrpID");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NewTemplateId).HasColumnName("New_TemplateID");

                entity.Property(e => e.TargetRegionId).HasColumnName("TargetRegionID");

                entity.Property(e => e.TemplateFilterGrpId).HasColumnName("TemplateFilterGrpID");
            });

            modelBuilder.Entity<TemplateFilterGrpGeoRegionXref>(entity =>
            {
                entity.HasKey(e => e.TemplateFilterGrpGeoRegionXrefId)
                    .HasName("PK_IDXTemplateFilterGrpGeoRegionXref_ID")
                    .IsClustered(false);

                entity.ToTable("TemplateFilterGrpGeoRegionXref");

                entity.HasIndex(e => new { e.GeoRegionId, e.TemplateFilterGrpId }, "IDX_TemplateFilterGrpGeoRegionXref_GeoRegionID_TemplateFilterGrpID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.TemplateFilterGrpId, e.ClassTypeId, e.GeoRegionId }, "IDX_TemplateFilterGrpGeoRegionXref_TemplateFilterGrpID_ClassTypeID_GeoRegionID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.TemplateFilterGrpId, e.ClassTypeId }, "clx_TemplateFilterGrpGeoRegionXref")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ClassTypeId, e.GeoRegionId }, "ixn_TemplateFilterGrpGeoRegionXref_1")
                    .HasFillFactor(90);

                entity.Property(e => e.TemplateFilterGrpGeoRegionXrefId).HasColumnName("TemplateFilterGrpGeoRegionXref_ID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.GeoRegionId).HasColumnName("GeoRegionID");

                entity.Property(e => e.TemplateFilterGrpId).HasColumnName("TemplateFilterGrpID");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.TemplateFilterGrpGeoRegionXrefs)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conTemplateFilterGrpGeoRegionXref_FK2");

                entity.HasOne(d => d.GeoRegion)
                    .WithMany(p => p.TemplateFilterGrpGeoRegionXrefs)
                    .HasForeignKey(d => d.GeoRegionId)
                    .HasConstraintName("conTemplateFilterGrpGeoRegionXref_FK3");

                entity.HasOne(d => d.TemplateFilterGrp)
                    .WithMany(p => p.TemplateFilterGrpGeoRegionXrefs)
                    .HasForeignKey(d => d.TemplateFilterGrpId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conTemplateFilterGrpGeoRegionXref_FK1");
            });

            modelBuilder.Entity<TemplateFilterGrpGeoRegionXrefDocPrep>(entity =>
            {
                entity.HasKey(e => e.TemplateFilterGrpGeoRegionXrefDocPrepId)
                    .HasName("PK_IDXTemplateFilterGrpGeoRegionXref_DocPrep_ID")
                    .IsClustered(false);

                entity.ToTable("TemplateFilterGrpGeoRegionXref_DocPrep");

                entity.HasIndex(e => new { e.TemplateFilterGrpId, e.ClassTypeId }, "CDX_TemplateFilterGrpGeoRegionXref_DocPrep")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.GeoRegionId, e.TemplateFilterGrpId }, "IDX_TemplateFilterGrpGeoRegionXref_DocPrep_2")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.TemplateFilterGrpId, e.ClassTypeId, e.GeoRegionId }, "IDX_TemplateFilterGrpGeoRegionXref_DocPrep_3")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ClassTypeId, e.GeoRegionId }, "IX_TemplateFilterGrpGeoRegionXref_DocPrep_ClassTypeID_GeoRegionID")
                    .HasFillFactor(90);

                entity.Property(e => e.TemplateFilterGrpGeoRegionXrefDocPrepId).HasColumnName("TemplateFilterGrpGeoRegionXref_DocPrep_ID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.GeoRegionId).HasColumnName("GeoRegionID");

                entity.Property(e => e.TemplateFilterGrpId).HasColumnName("TemplateFilterGrpID");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.TemplateFilterGrpGeoRegionXrefDocPreps)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TemplateFilterGrpGeoRegionXref_DocPrep_ClassTypeID");

                entity.HasOne(d => d.GeoRegion)
                    .WithMany(p => p.TemplateFilterGrpGeoRegionXrefDocPreps)
                    .HasForeignKey(d => d.GeoRegionId)
                    .HasConstraintName("FK_TemplateFilterGrpGeoRegionXref_DocPrep_GeoRegionID");

                entity.HasOne(d => d.TemplateFilterGrp)
                    .WithMany(p => p.TemplateFilterGrpGeoRegionXrefDocPreps)
                    .HasForeignKey(d => d.TemplateFilterGrpId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TemplateFilterGrpGeoRegionXref_DocPrep_TemplateFilterGrpID");
            });

            modelBuilder.Entity<TemplateFilterGrpHistoryDocprep>(entity =>
            {
                entity.HasKey(e => e.TemplateId)
                    .HasName("PK_TemplateFilterGrpHistory_Docprep_TemplateId");

                entity.ToTable("TemplateFilterGrpHistory_Docprep");

                entity.Property(e => e.TemplateId).ValueGeneratedNever();

                entity.Property(e => e.TemplateFilterDetails).IsUnicode(false);

                entity.Property(e => e.TemplateFilterGrpHistoryId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TemplateFilterGrpHistoryID");
            });

            modelBuilder.Entity<TemplateFilterOwningRegionXref>(entity =>
            {
                entity.HasKey(e => e.TemplateFilterOwningRegionXrefId)
                    .HasName("PK_TemplateFilterOwningRegionXrefID")
                    .IsClustered(false);

                entity.ToTable("TemplateFilterOwningRegionXref");

                entity.HasIndex(e => new { e.TemplateFilterGrpId, e.OwningRegionId }, "IDX_TemplateFilterOwningRegionXref")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor(90);

                entity.Property(e => e.OwningRegionId).HasColumnName("OwningRegionID");

                entity.Property(e => e.TemplateFilterGrpId).HasColumnName("TemplateFilterGrpID");

                entity.HasOne(d => d.OwningRegion)
                    .WithMany(p => p.TemplateFilterOwningRegionXrefs)
                    .HasForeignKey(d => d.OwningRegionId)
                    .HasConstraintName("FK_TemplateFilterOwningRegionXref_OwningRegionID");

                entity.HasOne(d => d.TemplateFilterGrp)
                    .WithMany(p => p.TemplateFilterOwningRegionXrefs)
                    .HasForeignKey(d => d.TemplateFilterGrpId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TemplateFilterOwningRegionXref_TemplateFilterGrpID");
            });

            modelBuilder.Entity<TemplateFilterOwningRegionXrefDocPrep>(entity =>
            {
                entity.HasKey(e => e.TemplateFilterOwningRegionXrefId)
                    .HasName("PK_TemplateFilterOwningRegionXref_DocPrepID")
                    .IsClustered(false);

                entity.ToTable("TemplateFilterOwningRegionXref_DocPrep");

                entity.HasIndex(e => new { e.TemplateFilterGrpId, e.OwningRegionId }, "IDX_TemplateFilterOwningRegionXref_DocPrep")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor(90);

                entity.Property(e => e.OwningRegionId).HasColumnName("OwningRegionID");

                entity.Property(e => e.TemplateFilterGrpId).HasColumnName("TemplateFilterGrpID");

                entity.HasOne(d => d.OwningRegion)
                    .WithMany(p => p.TemplateFilterOwningRegionXrefDocPreps)
                    .HasForeignKey(d => d.OwningRegionId)
                    .HasConstraintName("FK_TemplateFilterOwningRegionXref_DocPrep_OwningRegionID");

                entity.HasOne(d => d.TemplateFilterGrp)
                    .WithMany(p => p.TemplateFilterOwningRegionXrefDocPreps)
                    .HasForeignKey(d => d.TemplateFilterGrpId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TemplateFilterOwningRegionXref_DocPrep_TemplateFilterGrpID");
            });

            modelBuilder.Entity<TemplateFilterProgramTypeXref>(entity =>
            {
                entity.ToTable("TemplateFilterProgramTypeXref");

                entity.HasIndex(e => new { e.TemplateFilterGrpId, e.ProgramTypeId }, "Unq_TemplateFilterProgramTypeXref")
                    .HasFillFactor(90);

                entity.Property(e => e.ProgramTypeId).HasColumnName("ProgramTypeID");

                entity.Property(e => e.TemplateFilterGrpId).HasColumnName("TemplateFilterGrpID");

                entity.HasOne(d => d.ProgramType)
                    .WithMany(p => p.TemplateFilterProgramTypeXrefs)
                    .HasForeignKey(d => d.ProgramTypeId)
                    .HasConstraintName("FK_TemplateFilterProgramTypeXref_ProgramTypeID");

                entity.HasOne(d => d.TemplateFilterGrp)
                    .WithMany(p => p.TemplateFilterProgramTypeXrefs)
                    .HasForeignKey(d => d.TemplateFilterGrpId)
                    .HasConstraintName("FK_TemplateFilterProgramTypeXref_TemplateFilterGrpID");
            });

            modelBuilder.Entity<TemplateFilterProgramTypeXrefDocPrep>(entity =>
            {
                entity.HasKey(e => e.TemplateFilterProgramTypeXrefDocPrepId)
                    .HasName("PK_IDXTemplateFilterProgramTypeXref_DocPrep_ID")
                    .IsClustered(false);

                entity.ToTable("TemplateFilterProgramTypeXref_DocPrep");

                entity.HasIndex(e => new { e.TemplateFilterGrpId, e.ProgramTypeId }, "CDX_TemplateFilterProgramTypeXref_DocPrep")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor(90);

                entity.Property(e => e.TemplateFilterProgramTypeXrefDocPrepId).HasColumnName("TemplateFilterProgramTypeXref_DocPrep_ID");

                entity.Property(e => e.ProgramTypeId).HasColumnName("ProgramTypeID");

                entity.Property(e => e.TemplateFilterGrpId).HasColumnName("TemplateFilterGrpID");

                entity.HasOne(d => d.ProgramType)
                    .WithMany(p => p.TemplateFilterProgramTypeXrefDocPreps)
                    .HasForeignKey(d => d.ProgramTypeId)
                    .HasConstraintName("FK_TemplateFilterProgramTypeXref_DocPrep_ProgramTypeID");

                entity.HasOne(d => d.TemplateFilterGrp)
                    .WithMany(p => p.TemplateFilterProgramTypeXrefDocPreps)
                    .HasForeignKey(d => d.TemplateFilterGrpId)
                    .HasConstraintName("FK_TemplateFilterProgramTypeXref_DocPrep_TemplateFilterGrpID");
            });

            modelBuilder.Entity<TemplateFilterSearchTypeXref>(entity =>
            {
                entity.ToTable("TemplateFilterSearchTypeXref");

                entity.HasIndex(e => new { e.TemplateFilterGrpId, e.SearchTypeId }, "Unq_TemplateFilterSearchTypeXref")
                    .HasFillFactor(90);

                entity.Property(e => e.SearchTypeId).HasColumnName("SearchTypeID");

                entity.Property(e => e.TemplateFilterGrpId).HasColumnName("TemplateFilterGrpID");

                entity.HasOne(d => d.SearchType)
                    .WithMany(p => p.TemplateFilterSearchTypeXrefs)
                    .HasForeignKey(d => d.SearchTypeId)
                    .HasConstraintName("FK_TemplateFilterSearchTypeXref_SearchTypeID");

                entity.HasOne(d => d.TemplateFilterGrp)
                    .WithMany(p => p.TemplateFilterSearchTypeXrefs)
                    .HasForeignKey(d => d.TemplateFilterGrpId)
                    .HasConstraintName("FK_TemplateFilterSearchTypeXref_TemplateFilterGrpID");
            });

            modelBuilder.Entity<TemplateFilterSearchTypeXrefDocPrep>(entity =>
            {
                entity.HasKey(e => e.TemplateFilterSearchTypeXrefDocPrepId)
                    .HasName("PK_IDXTemplateFilterSearchTypeXref_DocPrep_ID")
                    .IsClustered(false);

                entity.ToTable("TemplateFilterSearchTypeXref_DocPrep");

                entity.HasIndex(e => new { e.TemplateFilterGrpId, e.SearchTypeId }, "CDX_TemplateFilterSearchTypeXref_DocPrep")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor(90);

                entity.Property(e => e.TemplateFilterSearchTypeXrefDocPrepId).HasColumnName("TemplateFilterSearchTypeXref_DocPrep_ID");

                entity.Property(e => e.SearchTypeId).HasColumnName("SearchTypeID");

                entity.Property(e => e.TemplateFilterGrpId).HasColumnName("TemplateFilterGrpID");

                entity.HasOne(d => d.SearchType)
                    .WithMany(p => p.TemplateFilterSearchTypeXrefDocPreps)
                    .HasForeignKey(d => d.SearchTypeId)
                    .HasConstraintName("FK_TemplateFilterSearchTypeXref_DocPrep_SearchTypeID");

                entity.HasOne(d => d.TemplateFilterGrp)
                    .WithMany(p => p.TemplateFilterSearchTypeXrefDocPreps)
                    .HasForeignKey(d => d.TemplateFilterGrpId)
                    .HasConstraintName("FK_TemplateFilterSearchTypeXref_DocPrep_TemplateFilterGrpID");
            });

            modelBuilder.Entity<TemplateGeoRegionXref>(entity =>
            {
                entity.HasKey(e => e.TemplateGeoRegionXrefId)
                    .HasName("PK_IDXTemplateGeoRegionXref_ID")
                    .IsClustered(false);

                entity.ToTable("TemplateGeoRegionXref");

                entity.HasIndex(e => e.TemplateId, "clx_TemplateGeoRegionXref")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.Property(e => e.TemplateGeoRegionXrefId).HasColumnName("TemplateGeoRegionXref_ID");

                entity.Property(e => e.GeoRegionId).HasColumnName("GeoRegionID");

                entity.Property(e => e.TemplateId).HasColumnName("TemplateID");

                entity.HasOne(d => d.GeoRegion)
                    .WithMany(p => p.TemplateGeoRegionXrefs)
                    .HasForeignKey(d => d.GeoRegionId)
                    .HasConstraintName("conTemplateGeoRegionXref_FK2");

                entity.HasOne(d => d.Template)
                    .WithMany(p => p.TemplateGeoRegionXrefs)
                    .HasForeignKey(d => d.TemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conTemplateGeoRegionXref_FK1");
            });

            modelBuilder.Entity<TemplateGeoRegionXrefDocPrep>(entity =>
            {
                entity.HasKey(e => e.TemplateGeoRegionXrefDocPrepId)
                    .HasName("PK_IDXTemplateGeoRegionXref_DocPrep_ID")
                    .IsClustered(false);

                entity.ToTable("TemplateGeoRegionXref_DocPrep");

                entity.HasIndex(e => new { e.TemplateId, e.GeoRegionId }, "CDX_TemplateGeoRegionXref_DocPrep")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.Property(e => e.TemplateGeoRegionXrefDocPrepId).HasColumnName("TemplateGeoRegionXref_DocPrep_ID");

                entity.Property(e => e.GeoRegionId).HasColumnName("GeoRegionID");

                entity.Property(e => e.TemplateId).HasColumnName("TemplateID");

                entity.HasOne(d => d.GeoRegion)
                    .WithMany(p => p.TemplateGeoRegionXrefDocPreps)
                    .HasForeignKey(d => d.GeoRegionId)
                    .HasConstraintName("FK_TemplateGeoRegionXref_DocPrep_GeoRegionID");

                entity.HasOne(d => d.Template)
                    .WithMany(p => p.TemplateGeoRegionXrefDocPreps)
                    .HasForeignKey(d => d.TemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TemplateGeoRegionXref_DocPrep_TemplateID");
            });

            modelBuilder.Entity<TemplateHistory>(entity =>
            {
                entity.ToTable("TemplateHistory");

                entity.HasIndex(e => e.TemplateId, "idxTemplateHistoryTemplateID")
                    .HasFillFactor(90);

                entity.Property(e => e.TemplateHistoryId).HasColumnName("TemplateHistoryID");

                entity.Property(e => e.ChangeDate).HasColumnType("datetime");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StatusCd).HasColumnName("StatusCD");

                entity.Property(e => e.TemplateId).HasColumnName("TemplateID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.Template)
                    .WithMany(p => p.TemplateHistories)
                    .HasForeignKey(d => d.TemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TemplateFK");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.TemplateHistories)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("EmployeeTemplateHistoryFK");
            });

            modelBuilder.Entity<TemplateInfoXref>(entity =>
            {
                entity.HasKey(e => e.TemplateId)
                    .HasName("TemplateInfoXref_Pk");

                entity.ToTable("TemplateInfoXref");

                entity.HasIndex(e => new { e.BusinessUnitId, e.DocTypeCdId, e.NextTemplateVersionId, e.UnderConstFlg, e.StatusCd, e.Name }, "IDX_TemplateInfoXref_MultipleCols")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.UnderConstFlg, e.NextTemplateVersionId, e.BusinessUnitId }, "idxTemplateInfoXref_4Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ObjectCd, "idxTemplateInfoXref_9")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.DocTypeCdId, e.TemplateId, e.BusinessUnitId, e.ObjectCd, e.UnderConstFlg }, "idxTemplateInfoXref_BusUnitDocTypeOthers")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.BusinessUnitId, e.DocTypeCdId }, "idxTemplateInfoXref_BusUnitDocType_Clx")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BusinessUnitId, "idxTemplateInfoXref_BusinessUnitID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.Name, "idxTemplateInfoXref_Name")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.StatusCd, e.UnderConstFlg }, "idxTemplateInfoXref_UnderConstFlg_Incl")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.BusinessUnitId, e.ObjectCd, e.NextTemplateVersionId, e.UnderConstFlg }, "idxTemplateInfoXref_UniqueObjectCd")
                    .HasFillFactor(90);

                entity.Property(e => e.TemplateId)
                    .ValueGeneratedNever()
                    .HasColumnName("TemplateID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DocTypeCdId).HasColumnName("DocTypeCdID");

                entity.Property(e => e.Name)
                    .HasMaxLength(140)
                    .IsUnicode(false);

                entity.Property(e => e.NextTemplateVersionId).HasColumnName("NextTemplateVersionID");

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.HasOne(d => d.NextTemplateVersion)
                    .WithMany(p => p.InverseNextTemplateVersion)
                    .HasForeignKey(d => d.NextTemplateVersionId)
                    .HasConstraintName("FK_TemplateInfoXref_TemplateID");
            });

            modelBuilder.Entity<TemplateInfoXrefInsert>(entity =>
            {
                entity.HasKey(e => e.TemplateId)
                    .HasName("TemplateInfoXref_Pk_Insert");

                entity.ToTable("TemplateInfoXref_Insert");

                entity.Property(e => e.TemplateId)
                    .ValueGeneratedNever()
                    .HasColumnName("TemplateID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DocTypeCdId).HasColumnName("DocTypeCdID");

                entity.Property(e => e.Name)
                    .HasMaxLength(140)
                    .IsUnicode(false);

                entity.Property(e => e.NextTemplateVersionId).HasColumnName("NextTemplateVersionID");

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TemplateMap>(entity =>
            {
                entity.HasKey(e => e.NewTemplateId);

                entity.ToTable("Template_Map", "Migration");

                entity.HasIndex(e => new { e.TemplateId, e.TargetRegionId }, "UI_Template_Map_TemplateID_TargetRegionID")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.NewTemplateId)
                    .ValueGeneratedNever()
                    .HasColumnName("New_TemplateID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.TargetRegionId).HasColumnName("TargetRegionID");

                entity.Property(e => e.TemplateId).HasColumnName("TemplateID");
            });

            modelBuilder.Entity<TemplatePageLayout>(entity =>
            {
                entity.ToTable("TemplatePageLayout");

                entity.HasIndex(e => new { e.ClassTypeId, e.TemplateId, e.PageTypeCdId, e.PageRangeStart }, "indTempatePgLayout2")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TemplateId, "indTemplatePgLayout3Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FooterPhraseId, "indTemplatePgLayout5Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ContinueOnPhraseId, "indTemplatePgLayout6Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.HeaderPhraseId, "indTemplatePgLayout7Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ContinueFromPhraseId, "indTemplatePgLayout8Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.TemplatePageLayoutId).HasColumnName("TemplatePageLayoutID");

                entity.Property(e => e.BottomMarginValue).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ContinueFromPhraseId).HasColumnName("ContinueFromPhraseID");

                entity.Property(e => e.ContinueOnPhraseId).HasColumnName("ContinueOnPhraseID");

                entity.Property(e => e.FooterPhraseId).HasColumnName("FooterPhraseID");

                entity.Property(e => e.HeaderPhraseId).HasColumnName("HeaderPhraseID");

                entity.Property(e => e.LeftMarginValue).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.PageRangeEnd)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PageRangeStart)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PageTypeCdId).HasColumnName("PageTypeCdID");

                entity.Property(e => e.RightMarginValue).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.TemplateId).HasColumnName("TemplateID");

                entity.Property(e => e.TopMarginValue).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.TemplatePageLayouts)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conTemplatePgLayout9Fk");

                entity.HasOne(d => d.ContinueFromPhrase)
                    .WithMany(p => p.TemplatePageLayoutContinueFromPhrases)
                    .HasForeignKey(d => d.ContinueFromPhraseId)
                    .HasConstraintName("conTemplatePgLayout5Fk");

                entity.HasOne(d => d.ContinueOnPhrase)
                    .WithMany(p => p.TemplatePageLayoutContinueOnPhrases)
                    .HasForeignKey(d => d.ContinueOnPhraseId)
                    .HasConstraintName("conTemplatePgLayout7Fk");

                entity.HasOne(d => d.FooterPhrase)
                    .WithMany(p => p.TemplatePageLayoutFooterPhrases)
                    .HasForeignKey(d => d.FooterPhraseId)
                    .HasConstraintName("conTemplatePgLayout8Fk");

                entity.HasOne(d => d.HeaderPhrase)
                    .WithMany(p => p.TemplatePageLayoutHeaderPhrases)
                    .HasForeignKey(d => d.HeaderPhraseId)
                    .HasConstraintName("conTemplatePgLayout6Fk");

                entity.HasOne(d => d.PageTypeCd)
                    .WithMany(p => p.TemplatePageLayouts)
                    .HasForeignKey(d => d.PageTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conTemplatePgLayout4Fk");

                entity.HasOne(d => d.Template)
                    .WithMany(p => p.TemplatePageLayouts)
                    .HasForeignKey(d => d.TemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conTemplatePgLayout3Fk");
            });

            modelBuilder.Entity<TemplatePhrase>(entity =>
            {
                entity.ToTable("TemplatePhrase");

                entity.HasIndex(e => e.SeqNum, "IDXTemplatePhraseSeqNum")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PhraseMarkerId, "XIF173TemplatePhrase")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ClassTypeId, e.TemplateId, e.PhraseId, e.SeqNum }, "indTemplatePhrase2")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PhraseId, "indTemplatePhrase3Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TemplateId, "indTemplatePhrase5Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.TemplatePhraseId).HasColumnName("TemplatePhraseID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.PhraseId).HasColumnName("PhraseID");

                entity.Property(e => e.PhraseMarkerId).HasColumnName("PhraseMarkerID");

                entity.Property(e => e.TemplateId).HasColumnName("TemplateID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.TemplatePhrases)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conTemplatePhrase5Fk");

                entity.HasOne(d => d.Phrase)
                    .WithMany(p => p.TemplatePhrases)
                    .HasForeignKey(d => d.PhraseId)
                    .HasConstraintName("conTemplatePhrXref2Fk");

                entity.HasOne(d => d.Template)
                    .WithMany(p => p.TemplatePhrases)
                    .HasForeignKey(d => d.TemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conTemplatePhrXref3Fk");
            });

            modelBuilder.Entity<TemplatePhraseElement>(entity =>
            {
                entity.ToTable("TemplatePhraseElement");

                entity.HasIndex(e => e.TemplatePhraseId, "TemplatePhraseID_ix")
                    .HasFillFactor(90);

                entity.Property(e => e.TemplatePhraseElementId).HasColumnName("TemplatePhraseElementID");

                entity.Property(e => e.ConcatOperator)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ConditionalValue)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DataElementId).HasColumnName("DataElementID");

                entity.Property(e => e.ElementIndex)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TemplatePhraseId).HasColumnName("TemplatePhraseID");

                entity.HasOne(d => d.DataElement)
                    .WithMany(p => p.TemplatePhraseElements)
                    .HasForeignKey(d => d.DataElementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TemplatePhraseElementFK2");

                entity.HasOne(d => d.TemplatePhrase)
                    .WithMany(p => p.TemplatePhraseElements)
                    .HasForeignKey(d => d.TemplatePhraseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TemplatePhraseElementFK1");
            });

            modelBuilder.Entity<TemplateProductTypeXref>(entity =>
            {
                entity.HasKey(e => e.TemplateProductTypeXrefId)
                    .HasName("PK_IDXTemplateProductTypeXref_ID")
                    .IsClustered(false);

                entity.ToTable("TemplateProductTypeXref");

                entity.HasIndex(e => e.TemplateId, "clx_TemplateProductTypeXref")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.Property(e => e.TemplateProductTypeXrefId).HasColumnName("TemplateProductTypeXref_ID");

                entity.Property(e => e.ProductTypeCdId).HasColumnName("ProductTypeCdID");

                entity.Property(e => e.TemplateId).HasColumnName("TemplateID");

                entity.HasOne(d => d.ProductTypeCd)
                    .WithMany(p => p.TemplateProductTypeXrefs)
                    .HasForeignKey(d => d.ProductTypeCdId)
                    .HasConstraintName("conTemplateProductTypeXref_FK2");

                entity.HasOne(d => d.Template)
                    .WithMany(p => p.TemplateProductTypeXrefs)
                    .HasForeignKey(d => d.TemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conTemplateProductTypeXref_FK1");
            });

            modelBuilder.Entity<TemplateProductTypeXrefDocPrep>(entity =>
            {
                entity.HasKey(e => e.TemplateProductTypeXrefDocPrepId)
                    .HasName("PK_IDXTemplateProductTypeXref_DocPrep_ID")
                    .IsClustered(false);

                entity.ToTable("TemplateProductTypeXref_DocPrep");

                entity.HasIndex(e => new { e.TemplateId, e.ProductTypeCdId }, "CDX_TemplateProductTypeXref_DocPrep")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.Property(e => e.TemplateProductTypeXrefDocPrepId).HasColumnName("TemplateProductTypeXref_DocPrep_ID");

                entity.Property(e => e.ProductTypeCdId).HasColumnName("ProductTypeCdID");

                entity.Property(e => e.TemplateId).HasColumnName("TemplateID");

                entity.HasOne(d => d.ProductTypeCd)
                    .WithMany(p => p.TemplateProductTypeXrefDocPreps)
                    .HasForeignKey(d => d.ProductTypeCdId)
                    .HasConstraintName("FK_TemplateProductTypeXref_DocPrep_ProductTypeCdID");

                entity.HasOne(d => d.Template)
                    .WithMany(p => p.TemplateProductTypeXrefDocPreps)
                    .HasForeignKey(d => d.TemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TemplateProductTypeXref_DocPrep_TemplateID");
            });

            modelBuilder.Entity<TemplateValidationByRegionDocprep>(entity =>
            {
                entity.HasKey(e => e.TemplateValidationId)
                    .HasName("PK_TemplateValidationID_TemplateValidationByRegion_Docprep");

                entity.ToTable("TemplateValidationByRegion_Docprep");

                entity.HasIndex(e => new { e.TemplateObjectCd, e.BusinessunitId }, "NC_TemplateObjectCdBusinessunitId_TemplateValidationByRegion_Docprep")
                    .HasFillFactor(90);

                entity.Property(e => e.TemplateValidationId).HasColumnName("TemplateValidationID");

                entity.Property(e => e.TemplateObjectCd)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.HasOne(d => d.Validator)
                    .WithMany(p => p.TemplateValidationByRegionDocpreps)
                    .HasForeignKey(d => d.ValidatorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ValidatorId_TemplateValidationByRegion_Docprep");
            });

            modelBuilder.Entity<TemplateValidationByStateDocprep>(entity =>
            {
                entity.HasKey(e => e.TemplateValidationId)
                    .HasName("PK_TemplateValidationID_TemplateValidationByState_Docprep");

                entity.ToTable("TemplateValidationByState_Docprep");

                entity.HasIndex(e => new { e.TemplateObjectCd, e.BusinessunitId }, "NC_TemplateObjectCdBusinessunitId_TemplateValidationByState_Docprep")
                    .HasFillFactor(90);

                entity.Property(e => e.TemplateValidationId).HasColumnName("TemplateValidationID");

                entity.Property(e => e.TemplateObjectCd)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.HasOne(d => d.Validator)
                    .WithMany(p => p.TemplateValidationByStateDocpreps)
                    .HasForeignKey(d => d.ValidatorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ValidatorId_TemplateValidationByState_Docprep");
            });

            modelBuilder.Entity<TemplateValidationByUnderWriterDocprep>(entity =>
            {
                entity.HasKey(e => e.TemplateValidationId)
                    .HasName("PK_TemplateValidationID_TemplateValidationByUnderWriter_Docprep");

                entity.ToTable("TemplateValidationByUnderWriter_Docprep");

                entity.HasIndex(e => new { e.TemplateObjectCd, e.BusinessunitId }, "NC_TemplateObjectCdBusinessunitId_TemplateValidationByUnderWriter_Docprep")
                    .HasFillFactor(90);

                entity.Property(e => e.TemplateValidationId).HasColumnName("TemplateValidationID");

                entity.Property(e => e.TemplateObjectCd)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.HasOne(d => d.Validator)
                    .WithMany(p => p.TemplateValidationByUnderWriterDocpreps)
                    .HasForeignKey(d => d.ValidatorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ValidatorId_TemplateValidationByUnderWriter_Docprep");
            });

            modelBuilder.Entity<TestingTable>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TestingTable");

                entity.Property(e => e.Description)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<TextDatum>(entity =>
            {
                entity.HasKey(e => new { e.TextId, e.FileId })
                    .HasName("conTextData1Pk");

                entity.Property(e => e.TextId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TextID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.TextData).IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<ThresholdAmount>(entity =>
            {
                entity.HasKey(e => e.BusSegTypeCdId)
                    .HasName("PK_ThresholdAmount_BusSegTypeCdID");

                entity.ToTable("ThresholdAmount");

                entity.Property(e => e.BusSegTypeCdId)
                    .ValueGeneratedNever()
                    .HasColumnName("BusSegTypeCdID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.Updts)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UPDTS");

                entity.HasOne(d => d.BusSegTypeCd)
                    .WithOne(p => p.ThresholdAmount)
                    .HasForeignKey<ThresholdAmount>(d => d.BusSegTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ThresholdAmount__BusSegTypeCdID");
            });

            modelBuilder.Entity<ThresholdAmountChangeHistory>(entity =>
            {
                entity.ToTable("ThresholdAmountChangeHistory");

                entity.Property(e => e.ThresholdAmountChangeHistoryId).HasColumnName("ThresholdAmountChangeHistory_ID");

                entity.Property(e => e.BusSegTypeCdId).HasColumnName("BusSegTypeCdID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.Event)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.BusSegTypeCd)
                    .WithMany(p => p.ThresholdAmountChangeHistories)
                    .HasForeignKey(d => d.BusSegTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ThresholdAmountChangeHistory__BusSegTypeCdID");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ThresholdAmountChangeHistories)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ThresholdAmountChangeHistory__UserID");
            });

            modelBuilder.Entity<TimeDay>(entity =>
            {
                entity.HasKey(e => e.DwdayKey)
                    .HasName("pk_TimeDay_DWDayKey");

                entity.ToTable("TimeDay");

                entity.Property(e => e.DwdayKey)
                    .ValueGeneratedNever()
                    .HasColumnName("DWDayKey");

                entity.Property(e => e.BegOfDayTs)
                    .HasColumnType("datetime")
                    .HasColumnName("BegOfDayTS");

                entity.Property(e => e.DayAbbr)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DayDt).HasColumnType("datetime");

                entity.Property(e => e.DayNm)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.EndOfDayTs)
                    .HasColumnType("datetime")
                    .HasColumnName("EndOfDayTS");

                entity.Property(e => e.ExtrctDt).HasColumnType("datetime");

                entity.Property(e => e.LastDayInMthFlg)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MthAbbr)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.MthNm)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.WkBegDt).HasColumnType("datetime");

                entity.Property(e => e.WkDayFlg)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TitleAgentsService>(entity =>
            {
                entity.ToTable("TitleAgentsService");

                entity.Property(e => e.TitleAgentsServiceId).HasColumnName("TitleAgentsServiceID");

                entity.Property(e => e.ServiceTypeCdid).HasColumnName("ServiceTypeCDId");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.TitleAgentsServices)
                    .HasForeignKey(d => d.FileId)
                    .HasConstraintName("FK_TitleAgentsService_FileID");
            });

            modelBuilder.Entity<TitleEscrowInfo>(entity =>
            {
                entity.ToTable("TitleEscrowInfo");

                entity.HasIndex(e => e.FeeOwnerOfficeFileBusinessPartyId, "XIF528TitleEscrowInfo")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TaxPayerFullConsolidateVestId, "idxTitleEscrowInfo_TaxPayerFullConsolidateVestID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TaxPayerShortConsolidateVestId, "idxTitleEscrowInfo_TaxPayerShortConsolidateVestID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SellerFullConsolidateVestId, "indTitleEscrowInfo2Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BuyerFullConsolidateVestId, "indTitleEscrowInfo3Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SellerShortConsolidateVestId, "indTitleEscrowInfo5Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BuyerShortConsolidateVestId, "indTitleEscrowInfo6Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.TitleEscrowInfoId).HasColumnName("TitleEscrowInfoID");

                entity.Property(e => e.ActualCloseDate).HasColumnType("datetime");

                entity.Property(e => e.BuyerFullConsolidateVestId).HasColumnName("BuyerFullConsolidateVestID");

                entity.Property(e => e.BuyerShortConsolidateVestId).HasColumnName("BuyerShortConsolidateVestID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.ClosingAppointmentDate1).HasColumnType("smalldatetime");

                entity.Property(e => e.ClosingAppointmentDate2).HasColumnType("smalldatetime");

                entity.Property(e => e.ClosingAppointmentTime1)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ClosingAppointmentTime2)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DateOfContract).HasColumnType("datetime");

                entity.Property(e => e.DateOfContractAcceptance).HasColumnType("datetime");

                entity.Property(e => e.DisbursementDate).HasColumnType("datetime");

                entity.Property(e => e.EstimatedCloseDate).HasColumnType("datetime");

                entity.Property(e => e.FastSearchType)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FeeDate).HasColumnType("datetime");

                entity.Property(e => e.FeeOwnerOfficeFileBusinessPartyId).HasColumnName("FeeOwnerOfficeFileBusinessPartyID");

                entity.Property(e => e.FeeReductionAmount).HasColumnType("money");

                entity.Property(e => e.FsbuyerFullVestFlag).HasColumnName("FSBuyerFullVestFlag");

                entity.Property(e => e.Hud1lenderCoverageDefault)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("HUD1LenderCoverageDefault");

                entity.Property(e => e.Hud1lenderCoverageText)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("HUD1LenderCoverageText");

                entity.Property(e => e.Hud1line1107Text)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("HUD1Line1107Text");

                entity.Property(e => e.Hud1line1108Text)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("HUD1Line1108Text");

                entity.Property(e => e.Hud1ownerCoverageDefault)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("HUD1OwnerCoverageDefault");

                entity.Property(e => e.Hud1ownerCoverageText)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("HUD1OwnerCoverageText");

                entity.Property(e => e.InstructionalDate).HasColumnType("datetime");

                entity.Property(e => e.InsuranceAmtRequested).HasColumnType("money");

                entity.Property(e => e.IsOrderWithFirstAm).HasColumnName("IsOrderWithFirstAM");

                entity.Property(e => e.LoanDocumentDate).HasColumnType("datetime");

                entity.Property(e => e.PropertyTotalValue).HasColumnType("money");

                entity.Property(e => e.PropertyValue).HasColumnType("money");

                entity.Property(e => e.PropertyValueTypeCdId).HasColumnName("PropertyValueTypeCdID");

                entity.Property(e => e.ProrateAsOf).HasColumnType("datetime");

                entity.Property(e => e.SalesPriceAmt).HasColumnType("money");

                entity.Property(e => e.SalesPriceLiabilityAmt).HasColumnType("money");

                entity.Property(e => e.SellerFullConsolidateVestId).HasColumnName("SellerFullConsolidateVestID");

                entity.Property(e => e.SellerShortConsolidateVestId).HasColumnName("SellerShortConsolidateVestID");

                entity.Property(e => e.SettlementDate).HasColumnType("datetime");

                entity.Property(e => e.TaxPayerFullConsolidateVestId).HasColumnName("TaxPayerFullConsolidateVestID");

                entity.Property(e => e.TaxPayerShortConsolidateVestId).HasColumnName("TaxPayerShortConsolidateVestID");

                entity.Property(e => e.UccloanAmt)
                    .HasColumnType("money")
                    .HasColumnName("UCCLoanAmt");

                entity.Property(e => e.UnRoundedSalePrice).HasColumnType("money");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.TitleEscrowInfos)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conTitleEscrowInfo4Fk");

                entity.HasOne(d => d.FeeOwnerOfficeFileBusinessParty)
                    .WithMany(p => p.TitleEscrowInfos)
                    .HasForeignKey(d => d.FeeOwnerOfficeFileBusinessPartyId)
                    .HasConstraintName("conTitleEscrowInfo9Fk");

                entity.HasMany(d => d.ExchangeTdsinfos)
                    .WithMany(p => p.TitleEscrowInfos)
                    .UsingEntity<Dictionary<string, object>>(
                        "TitleEscrowInfoExchangeTdsinfoXref",
                        l => l.HasOne<ExchangeTdsinfo>().WithMany().HasForeignKey("ExchangeTdsinfoId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conTEInfoETDSInfoXref2ExchangeTDSInfoFK"),
                        r => r.HasOne<TitleEscrowInfo>().WithMany().HasForeignKey("TitleEscrowInfoId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conTEInfoETDSInfoXref2TitleEscrowInfoFK"),
                        j =>
                        {
                            j.HasKey("TitleEscrowInfoId", "ExchangeTdsinfoId").HasName("pk_TitleEscrowInfoExchangeTDSInfoXref");

                            j.ToTable("TitleEscrowInfoExchangeTDSInfoXref");

                            j.IndexerProperty<int>("TitleEscrowInfoId").HasColumnName("TitleEscrowInfoID");

                            j.IndexerProperty<int>("ExchangeTdsinfoId").HasColumnName("ExchangeTDSInfoID");
                        });

                entity.HasMany(d => d.OtherBusOrgs)
                    .WithMany(p => p.TitleEscrowInfos)
                    .UsingEntity<Dictionary<string, object>>(
                        "TitleEscrowOtherBusOrgXref",
                        l => l.HasOne<OtherBusOrg>().WithMany().HasForeignKey("OtherBusOrgId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conTEOtherBusOrgXref2Fk"),
                        r => r.HasOne<TitleEscrowInfo>().WithMany().HasForeignKey("TitleEscrowInfoId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conTEOtherBusOrgXref3Fk"),
                        j =>
                        {
                            j.HasKey("TitleEscrowInfoId", "OtherBusOrgId").HasName("conTEOtherBusOrgXref1Pk");

                            j.ToTable("TitleEscrowOtherBusOrgXref");

                            j.HasIndex(new[] { "OtherBusOrgId" }, "indTEOtherBusOrgXref3Fk").HasFillFactor(90);

                            j.IndexerProperty<int>("TitleEscrowInfoId").HasColumnName("TitleEscrowInfoID");

                            j.IndexerProperty<int>("OtherBusOrgId").HasColumnName("OtherBusOrgID");
                        });

                entity.HasMany(d => d.Principals)
                    .WithMany(p => p.TitleEscrowInfos)
                    .UsingEntity<Dictionary<string, object>>(
                        "TitleEscrowPrincipalXref",
                        l => l.HasOne<Principal>().WithMany().HasForeignKey("PrincipalId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conTitleEscrowPrincipalXref2Fk"),
                        r => r.HasOne<TitleEscrowInfo>().WithMany().HasForeignKey("TitleEscrowInfoId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conTitleEscrowPrincipalXref3Fk"),
                        j =>
                        {
                            j.HasKey("TitleEscrowInfoId", "PrincipalId").HasName("conTitleEscrowPrinXref1Pk");

                            j.ToTable("TitleEscrowPrincipalXref");

                            j.HasIndex(new[] { "PrincipalId" }, "indTitleEscrowPrinlXref3Fk").HasFillFactor(90);

                            j.IndexerProperty<int>("TitleEscrowInfoId").HasColumnName("TitleEscrowInfoID");

                            j.IndexerProperty<int>("PrincipalId").HasColumnName("PrincipalID");
                        });

                entity.HasMany(d => d.Properties)
                    .WithMany(p => p.TitleEscrowInfos)
                    .UsingEntity<Dictionary<string, object>>(
                        "TitleEscrowRealPropertyXref",
                        l => l.HasOne<RealProperty>().WithMany().HasForeignKey("PropertyId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conTitleEscrowRealPropertyXref2FK"),
                        r => r.HasOne<TitleEscrowInfo>().WithMany().HasForeignKey("TitleEscrowInfoId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conTitleEscrowRealPropertyXref1FK"),
                        j =>
                        {
                            j.HasKey("TitleEscrowInfoId", "PropertyId").HasName("conTitleEscrowRealPropXref1Pk");

                            j.ToTable("TitleEscrowRealPropertyXref");

                            j.HasIndex(new[] { "PropertyId" }, "indTitleEscrowRealPropXref2Fk").HasFillFactor(90);

                            j.IndexerProperty<int>("TitleEscrowInfoId").HasColumnName("TitleEscrowInfoID");

                            j.IndexerProperty<int>("PropertyId").HasColumnName("PropertyID");
                        });
            });

            modelBuilder.Entity<TitleEscrowInfoEstLiabilityXref>(entity =>
            {
                entity.HasKey(e => e.TitleEscrowInfoId);

                entity.ToTable("TitleEscrowInfoEstLiabilityXref");

                entity.Property(e => e.TitleEscrowInfoId)
                    .ValueGeneratedNever()
                    .HasColumnName("TitleEscrowInfoID");

                entity.Property(e => e.EstFirstLenderPolicyLiability).HasColumnType("money");

                entity.Property(e => e.EstOwnerPolicyLiability).HasColumnType("money");

                entity.Property(e => e.EstSecondLenderPolicyLiability).HasColumnType("money");

                entity.Property(e => e.EstTitlePremium).HasColumnType("money");

                entity.Property(e => e.Notes)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.TitleEscrowInfo)
                    .WithOne(p => p.TitleEscrowInfoEstLiabilityXref)
                    .HasForeignKey<TitleEscrowInfoEstLiabilityXref>(d => d.TitleEscrowInfoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TitleEscrowInfoID");
            });

            modelBuilder.Entity<TitleEscrowInfoLiabilityXref>(entity =>
            {
                entity.ToTable("TitleEscrowInfoLiabilityXRef");

                entity.HasIndex(e => e.TitleEscrowInfoId, "IdxTitleEscrowInfoLiabilityXRefTitleEscrowInfoID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.TitleEscrowInfoId, e.LiabilityTypeCdId }, "UK_TitleEscrowInfoLiabilityXRefTitleEscrowInfoIDLiabilityTypeCdID")
                    .IsUnique();

                entity.Property(e => e.TitleEscrowInfoLiabilityXrefId).HasColumnName("TitleEscrowInfoLiabilityXRefID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.LiabilityTypeCdId).HasColumnName("LiabilityTypeCdID");

                entity.Property(e => e.TitleEscrowInfoId).HasColumnName("TitleEscrowInfoID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.LiabilityTypeCd)
                    .WithMany(p => p.TitleEscrowInfoLiabilityXrefs)
                    .HasForeignKey(d => d.LiabilityTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TitleEscrowInfoLiabilityXRefLiabilityTypeCdID");

                entity.HasOne(d => d.TitleEscrowInfo)
                    .WithMany(p => p.TitleEscrowInfoLiabilityXrefs)
                    .HasForeignKey(d => d.TitleEscrowInfoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TitleEscrowInfoLiabilityXRefTitleEscrowInfoID");
            });

            modelBuilder.Entity<TitleEscrowInfoSalesPriceXref>(entity =>
            {
                entity.ToTable("TitleEscrowInfoSalesPriceXRef");

                entity.HasIndex(e => e.TitleEscrowInfoId, "IdxTitleEscrowInfoSalesPriceXRefTitleEscrowInfoID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.TitleEscrowInfoId, e.SalePriceTypeCdId }, "UK_TitleEscrowInfoSalesPriceXRefTitleEscrowInfoIDSalePriceTypeCdID")
                    .IsUnique();

                entity.Property(e => e.TitleEscrowInfoSalesPriceXrefId).HasColumnName("TitleEscrowInfoSalesPriceXRefId");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.Descr)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TitleEscrowInfoId).HasColumnName("TitleEscrowInfoID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.SalePriceTypeCd)
                    .WithMany(p => p.TitleEscrowInfoSalesPriceXrefs)
                    .HasForeignKey(d => d.SalePriceTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TitleEscrowInfoSalesPriceXRefSalePriceTypeCdID");

                entity.HasOne(d => d.TitleEscrowInfo)
                    .WithMany(p => p.TitleEscrowInfoSalesPriceXrefs)
                    .HasForeignKey(d => d.TitleEscrowInfoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TitleEscrowInfoSalesPriceXRefTitleEscrowInfoID");
            });

            modelBuilder.Entity<TmpEventLogWfbcp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmpEventLogWFBCP");

                entity.Property(e => e.BeginId).HasColumnName("BeginID");

                entity.Property(e => e.DelTxt)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.EndId).HasColumnName("EndID");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.SqlFormat)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SqlIn)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SqlOut)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.TableName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ThreadID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<TmpEventMsgQueue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmpEventMsgQueue");

                entity.Property(e => e.Comments)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.EventData).IsUnicode(false);

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.EventMsqId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("EventMsqID");

                entity.Property(e => e.EventServer)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessEndTime).HasColumnType("datetime");

                entity.Property(e => e.ProcessStartTime).HasColumnType("datetime");

                entity.Property(e => e.ReceivedTime).HasColumnType("datetime");

                entity.Property(e => e.UniqueKey).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<TmpSourceApplQueueName>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmpSourceApplQueueName");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstSourceBusinessPartyName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OpenDate).HasColumnType("datetime");

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.OrderOriginatorId).HasColumnName("OrderOriginatorID");

                entity.Property(e => e.OwnerOfficeId).HasColumnName("OwnerOfficeID");

                entity.Property(e => e.RefNum)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RegionId).HasColumnName("RegionID");

                entity.Property(e => e.RelatedTransaction)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.ReverseEntity)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.SecondOrderOriginatorId).HasColumnName("SecondOrderOriginatorID");

                entity.Property(e => e.SecondSourceApplId).HasColumnName("SecondSourceApplID");

                entity.Property(e => e.SecondSourceApplQueueName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SecondSourceBusinessPartyName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SourceApplId).HasColumnName("SourceApplID");

                entity.Property(e => e.SourceApplQueueName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StatusChgDate).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<TmpTaskBcp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmpTaskBCP");

                entity.Property(e => e.BeginId).HasColumnName("BeginID");

                entity.Property(e => e.DelTxt)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.EndId).HasColumnName("EndID");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.SqlFormat)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SqlIn)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SqlOut)
                    .HasMaxLength(1500)
                    .IsUnicode(false);

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.TableName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ThreadID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<TmpTaskLegacyBcp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmpTaskLegacyBCP");

                entity.Property(e => e.BeginId).HasColumnName("BeginID");

                entity.Property(e => e.DelTxt)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.EndId).HasColumnName("EndID");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.SqlFormat)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SqlIn)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SqlOut)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.TableName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ThreadID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<TmpTaskUnassignedBcp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmpTaskUnassignedBCP");

                entity.Property(e => e.BeginId).HasColumnName("BeginID");

                entity.Property(e => e.DelTxt)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.EndId).HasColumnName("EndID");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.SqlFormat)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SqlIn)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SqlOut)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.TableName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ThreadID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<TmpTaskWorkGroupBcp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmpTaskWorkGroupBCP");

                entity.Property(e => e.BeginId).HasColumnName("BeginID");

                entity.Property(e => e.DelTxt)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.EndId).HasColumnName("EndID");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.SqlFormat)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SqlIn)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SqlOut)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.TableName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ThreadID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<TmpTasksToCancel>(entity =>
            {
                entity.HasKey(e => e.Fileid)
                    .HasName("PK__TmpTasks__6F0C849735B9EFE5");

                entity.ToTable("TmpTasksToCancel");

                entity.Property(e => e.Fileid).ValueGeneratedNever();

                entity.Property(e => e.ErrorMsg)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessDate).HasColumnType("datetime");

                entity.Property(e => e.Rowid).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Tmpfbpcontact>(entity =>
            {
                entity.HasKey(e => e.FileBusinessPartyId)
                    .HasName("PK__TMPFBPCo__267B358B62D21C57");

                entity.ToTable("TMPFBPContact");

                entity.Property(e => e.FileBusinessPartyId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileBusinessPartyID");
            });

            modelBuilder.Entity<ToleranceCure>(entity =>
            {
                entity.ToTable("ToleranceCure");

                entity.HasIndex(e => e.FileId, "IX_ToleranceCure_01")
                    .HasFillFactor(90);

                entity.Property(e => e.ToleranceCureId).HasColumnName("ToleranceCureID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.CuredAmount).HasColumnType("money");

                entity.Property(e => e.CuredByEntityTypeCdId).HasColumnName("CuredByEntityTypeCdID");

                entity.Property(e => e.CurerName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.ToleranceTypeCdId).HasColumnName("ToleranceTypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.ToleranceCures)
                    .HasForeignKey(d => d.ClassTypeId)
                    .HasConstraintName("conTCClassType1FK");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.ToleranceCures)
                    .HasForeignKey(d => d.FileId)
                    .HasConstraintName("conTCServiceFile1FK");
            });

            modelBuilder.Entity<TransactionType>(entity =>
            {
                entity.ToTable("TransactionType");

                entity.Property(e => e.Descr)
                    .HasMaxLength(140)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<TransactionTypeStateXref>(entity =>
            {
                entity.HasKey(e => new { e.TransactionTypeId, e.StateCd })
                    .HasName("TranType");

                entity.ToTable("TransactionTypeStateXref");

                entity.Property(e => e.StateCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TriggerEventMsgQueue>(entity =>
            {
                entity.HasKey(e => e.EventMsqId)
                    .HasName("CDX_TriggerEventMsgQueue");

                entity.ToTable("TriggerEventMsgQueue");

                entity.HasIndex(e => e.ProcessStartTime, "IDX_TriggerEventMsgQueue1")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.EventStatus, "IDX_TriggerEventMsgQueue2")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.EventServer, e.EventStatus }, "idx_TriggerEventMsgQueue3")
                    .HasFillFactor(90);

                entity.Property(e => e.EventMsqId).HasColumnName("EventMsqID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(800)
                    .IsUnicode(false);

                entity.Property(e => e.EventData)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.EventServer)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessEndTime).HasColumnType("datetime");

                entity.Property(e => e.ProcessStartTime).HasColumnType("datetime");

                entity.Property(e => e.ReceivedTime).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<TriggerEventMsgQueueFparchive>(entity =>
            {
                entity.HasKey(e => e.EventMsqId);

                entity.ToTable("TriggerEventMsgQueueFPArchive");

                entity.HasIndex(e => e.ReceivedTime, "idx_ReDate")
                    .HasFillFactor(90);

                entity.Property(e => e.EventMsqId)
                    .ValueGeneratedNever()
                    .HasColumnName("EventMsqID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(800)
                    .IsUnicode(false);

                entity.Property(e => e.EventData)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.EventServer)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessEndTime).HasColumnType("datetime");

                entity.Property(e => e.ProcessStartTime).HasColumnType("datetime");

                entity.Property(e => e.ReceivedTime).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<TriggerEventMsgQueueToProcess>(entity =>
            {
                entity.HasKey(e => e.EventMsqId)
                    .HasName("CDX_TriggerEventMsgQueueToProcess");

                entity.ToTable("TriggerEventMsgQueueToProcess");

                entity.HasIndex(e => e.ProcessStartTime, "IDX_TriggerEventMsgQueue1")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.EventStatus, "IDX_TriggerEventMsgQueue2")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.EventServer, e.EventStatus }, "idx_TriggerEventMsgQueue3")
                    .HasFillFactor(90);

                entity.Property(e => e.EventMsqId)
                    .ValueGeneratedNever()
                    .HasColumnName("EventMsqID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(800)
                    .IsUnicode(false);

                entity.Property(e => e.EventData)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.EventServer)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessEndTime).HasColumnType("datetime");

                entity.Property(e => e.ProcessStartTime).HasColumnType("datetime");

                entity.Property(e => e.ReceivedTime).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<TriggerEventRule>(entity =>
            {
                entity.ToTable("TriggerEventRule");

                entity.HasIndex(e => new { e.BusinessUnitId, e.TriggerEventId }, "IDXTriggerEventRule")
                    .HasFillFactor(90);

                entity.Property(e => e.RuleText)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Trust32AutoExtractProcess>(entity =>
            {
                entity.ToTable("Trust32AutoExtractProcess");

                entity.Property(e => e.Trust32AutoExtractProcessId).HasColumnName("Trust32AutoExtractProcessID");

                entity.Property(e => e.LastUpdatedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<Trust32Extract>(entity =>
            {
                entity.HasKey(e => e.ExtractId)
                    .IsClustered(false);

                entity.ToTable("Trust32Extract");

                entity.HasIndex(e => e.BusinessUnitId, "IDXTrust32ExtractBusinessUnitID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TransmissionDateTime, "IDX_Trust32_TDT")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ClassTypeId, "IX_Clust_Trust32Extract")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.CompanyOfficeNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CutOffDate).HasColumnType("datetime");

                entity.Property(e => e.ExtractCompleteDateTime).HasColumnType("datetime");

                entity.Property(e => e.ExtractDateTime).HasColumnType("datetime");

                entity.Property(e => e.ExtractType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('M')")
                    .IsFixedLength();

                entity.Property(e => e.TransmissionDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<Trust32ExtractFile>(entity =>
            {
                entity.ToTable("Trust32ExtractFile");

                entity.Property(e => e.FileInfo)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Trust32ExtractParameter>(entity =>
            {
                entity.HasKey(e => e.BusinessUnitId);

                entity.Property(e => e.BusinessUnitId)
                    .ValueGeneratedNever()
                    .HasColumnName("BusinessUnitID");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExtractCutOffDateTime).HasColumnType("datetime");

                entity.Property(e => e.ExtractType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('M')")
                    .IsFixedLength();

                entity.Property(e => e.StatusCd).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Trust32ExtractSubmissionHistory>(entity =>
            {
                entity.HasKey(e => e.Trust32ExtractSubmissionHistoryId)
                    .HasName("IDXTrust32ExtractSubmissionHistoryId")
                    .IsClustered(false);

                entity.ToTable("Trust32ExtractSubmissionHistory");

                entity.HasIndex(e => new { e.BusinessUnitId, e.ExtractCutOffDateTime }, "idxTrust32ExtractSubmissionHistory")
                    .IsClustered();

                entity.HasIndex(e => e.SubmittedTime, "idxTrust32ExtractSubmissionHistory1")
                    .HasFillFactor(90);

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.ExecEndTime).HasColumnType("datetime");

                entity.Property(e => e.ExecStartTime).HasColumnType("datetime");

                entity.Property(e => e.ExtractCutOffDateTime).HasColumnType("datetime");

                entity.Property(e => e.ExtractType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.SubmittedTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<Trust32Financial>(entity =>
            {
                entity.ToTable("Trust32Financial");

                entity.HasIndex(e => e.DocumentNum, "IDXTrust32FinancialDocumentNum")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.LineDefinition, "IDXTrust32FinancialLineDefinition")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ExtractId, "TF_ExtractID");

                entity.HasIndex(e => new { e.ExtractId, e.RecordClassTypeId, e.RecordRowId }, "TF_ExtractID1")
                    .HasFillFactor(90);

                entity.Property(e => e.Trust32FinancialId).HasColumnName("Trust32FinancialID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BankAcctNum)
                    .HasMaxLength(96)
                    .IsUnicode(false);

                entity.Property(e => e.BankName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Bso)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BSO")
                    .IsFixedLength();

                entity.Property(e => e.DetailRecord)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.LineDefinition)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.PayorPayeeDescr)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RecordClassTypeId).HasColumnName("RecordClassTypeID");

                entity.Property(e => e.RecordRowId).HasColumnName("RecordRowID");

                entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<Trust32FinancialNew>(entity =>
            {
                entity.HasKey(e => e.Trust32FinancialId)
                    .HasName("PK_Trust32Financial_New_KR");

                entity.ToTable("Trust32Financial_New");

                entity.Property(e => e.Trust32FinancialId).HasColumnName("Trust32FinancialID");

                entity.Property(e => e.BankAcctNum)
                    .HasMaxLength(96)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Trust32NonFinancial>(entity =>
            {
                entity.ToTable("Trust32NonFinancial");

                entity.HasIndex(e => e.ExtractId, "TNF_ExtractID")
                    .HasFillFactor(90);

                entity.Property(e => e.Trust32NonFinancialId).HasColumnName("Trust32NonFinancialID");

                entity.Property(e => e.Buyer)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DetailRecord)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Officer)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OpenDate).HasColumnType("datetime");

                entity.Property(e => e.PropertyAddress)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.RecordClassTypeId).HasColumnName("RecordClassTypeID");

                entity.Property(e => e.RecordRowId).HasColumnName("RecordRowID");

                entity.Property(e => e.Seller)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<Trust32PreProcess>(entity =>
            {
                entity.ToTable("Trust32PreProcess");

                entity.Property(e => e.Trust32PreProcessId).HasColumnName("Trust32PreProcessID");

                entity.Property(e => e.DisableSqljobProcessing).HasColumnName("DisableSQLJobProcessing");

                entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<Tutemp>(entity =>
            {
                entity.HasKey(e => e.Taskid)
                    .HasName("TUtemp_Pk");

                entity.ToTable("TUtemp");

                entity.Property(e => e.Taskid).ValueGeneratedNever();
            });

            modelBuilder.Entity<TypeCdDmt>(entity =>
            {
                entity.HasKey(e => e.TypeCdId)
                    .HasName("conTypeCdDmt1Pk");

                entity.ToTable("TypeCdDmt");

                entity.HasIndex(e => e.UpdTs, "DW_IXN01_TypeCdDmt_UpdTS")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.StatusCd, "IDX_TypeCdDmt_StatusCD")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.SuperTypeCdId, e.ObjectCd }, "indTypeCdDmt2")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ClassTypeId, e.ObjectCd }, "indTypeCdDmt3")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.SuperTypeCdId, e.Descr }, "indTypeCdDmt4")
                    .HasFillFactor(90);

                entity.Property(e => e.TypeCdId)
                    .ValueGeneratedNever()
                    .HasColumnName("TypeCdID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Descr)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SuperTypeCdId).HasColumnName("SuperTypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.TypeCdDmts)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conTypeDmtT2Fk");

                entity.HasOne(d => d.SuperTypeCd)
                    .WithMany(p => p.InverseSuperTypeCd)
                    .HasForeignKey(d => d.SuperTypeCdId)
                    .HasConstraintName("conTypeDmt3R");
            });

            modelBuilder.Entity<UndeliveredEmailDetail>(entity =>
            {
                entity.ToTable("UndeliveredEmailDetail");

                entity.Property(e => e.UndeliveredEmailDetailId).HasColumnName("UndeliveredEmailDetailID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryEventLogId).HasColumnName("DeliveryEventLogID");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RecipientEmailAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SenderEmailAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.SubjectLine)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.UndeliveredEmailDetails)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .HasConstraintName("FK__Undeliver__Busin__20677DD2");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.UndeliveredEmailDetails)
                    .HasForeignKey(d => d.FileId)
                    .HasConstraintName("FK__Undeliver__FileI__215BA20B");
            });

            modelBuilder.Entity<Us2054369Employee>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("US#2054369_Employee");

                entity.Property(e => e.AddrBookEntryId).HasColumnName("AddrBookEntryID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.EmployeeOverDraftAmt).HasColumnType("money");

                entity.Property(e => e.FromDate).HasColumnType("datetime");

                entity.Property(e => e.HomeOfficeId).HasColumnName("HomeOfficeID");

                entity.Property(e => e.ImageName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Initials)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.LoginName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("modified_date");

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PersonnelCd)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Rundate)
                    .HasColumnType("datetime")
                    .HasColumnName("rundate");

                entity.Property(e => e.SignatureFile)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SymantecLoginName)
                    .HasMaxLength(45)
                    .IsUnicode(false);

                entity.Property(e => e.TitleLine1)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TitleLine2)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TitleLine3)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ToDate).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.Updateflg).HasColumnName("updateflg");

                entity.Property(e => e.UwemailNotify).HasColumnName("UWEmailNotify");

                entity.Property(e => e.UwliabilityLimit)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("UWLiabilityLimit");
            });

            modelBuilder.Entity<Us2061899Employee>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("US#2061899_Employee");

                entity.Property(e => e.AddrBookEntryId).HasColumnName("AddrBookEntryID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.EmployeeOverDraftAmt).HasColumnType("money");

                entity.Property(e => e.FromDate).HasColumnType("datetime");

                entity.Property(e => e.HomeOfficeId).HasColumnName("HomeOfficeID");

                entity.Property(e => e.ImageName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Initials)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.LoginName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("modified_date");

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PersonnelCd)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Rundate)
                    .HasColumnType("datetime")
                    .HasColumnName("rundate");

                entity.Property(e => e.SignatureFile)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SymantecLoginName)
                    .HasMaxLength(45)
                    .IsUnicode(false);

                entity.Property(e => e.TitleLine1)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TitleLine2)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TitleLine3)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ToDate).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.Updateflg).HasColumnName("updateflg");

                entity.Property(e => e.UwemailNotify).HasColumnName("UWEmailNotify");

                entity.Property(e => e.UwliabilityLimit)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("UWLiabilityLimit");
            });

            modelBuilder.Entity<Us2064786Employee>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("US#2064786_Employee");

                entity.Property(e => e.AddrBookEntryId).HasColumnName("AddrBookEntryID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.EmployeeOverDraftAmt).HasColumnType("money");

                entity.Property(e => e.FromDate).HasColumnType("datetime");

                entity.Property(e => e.HomeOfficeId).HasColumnName("HomeOfficeID");

                entity.Property(e => e.ImageName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Initials)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.LoginName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("modified_date");

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PersonnelCd)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Rundate)
                    .HasColumnType("datetime")
                    .HasColumnName("rundate");

                entity.Property(e => e.SignatureFile)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SymantecLoginName)
                    .HasMaxLength(45)
                    .IsUnicode(false);

                entity.Property(e => e.TitleLine1)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TitleLine2)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TitleLine3)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ToDate).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.Updateflg).HasColumnName("updateflg");

                entity.Property(e => e.UwemailNotify).HasColumnName("UWEmailNotify");

                entity.Property(e => e.UwliabilityLimit)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("UWLiabilityLimit");
            });

            modelBuilder.Entity<Us2071023Employee>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("US#2071023_Employee");

                entity.Property(e => e.AddrBookEntryId).HasColumnName("AddrBookEntryID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.EmployeeOverDraftAmt).HasColumnType("money");

                entity.Property(e => e.FromDate).HasColumnType("datetime");

                entity.Property(e => e.HomeOfficeId).HasColumnName("HomeOfficeID");

                entity.Property(e => e.ImageName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Initials)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.LoginName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("modified_date");

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PersonnelCd)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Rundate)
                    .HasColumnType("datetime")
                    .HasColumnName("rundate");

                entity.Property(e => e.SignatureFile)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SymantecLoginName)
                    .HasMaxLength(45)
                    .IsUnicode(false);

                entity.Property(e => e.TitleLine1)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TitleLine2)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TitleLine3)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ToDate).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.Updateflg).HasColumnName("updateflg");

                entity.Property(e => e.UwemailNotify).HasColumnName("UWEmailNotify");

                entity.Property(e => e.UwliabilityLimit)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("UWLiabilityLimit");
            });

            modelBuilder.Entity<Us2112722Employee>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("US#2112722_Employee");

                entity.Property(e => e.AddrBookEntryId).HasColumnName("AddrBookEntryID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.EmployeeOverDraftAmt).HasColumnType("money");

                entity.Property(e => e.FromDate).HasColumnType("datetime");

                entity.Property(e => e.HomeOfficeId).HasColumnName("HomeOfficeID");

                entity.Property(e => e.ImageName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Initials)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.LoginName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("modified_date");

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PersonnelCd)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Rundate)
                    .HasColumnType("datetime")
                    .HasColumnName("rundate");

                entity.Property(e => e.SignatureFile)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SymantecLoginName)
                    .HasMaxLength(45)
                    .IsUnicode(false);

                entity.Property(e => e.TitleLine1)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TitleLine2)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TitleLine3)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ToDate).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.Updateflg).HasColumnName("updateflg");

                entity.Property(e => e.UwemailNotify).HasColumnName("UWEmailNotify");

                entity.Property(e => e.UwliabilityLimit)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("UWLiabilityLimit");
            });

            modelBuilder.Entity<UserBusUnitXref>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.BusinessUnitId })
                    .HasName("conUserBusUnitXref1Pk");

                entity.ToTable("UserBusUnitXref");

                entity.HasIndex(e => e.BusinessUnitId, "indUserBusUnitXref3Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.UserBusUnitXrefs)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conUserBusUnitXref3Fk");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserBusUnitXrefs)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conUserBusUnitXref2Fk");

                entity.HasMany(d => d.Roles)
                    .WithMany(p => p.UserBusUnitXrefs)
                    .UsingEntity<Dictionary<string, object>>(
                        "UserBusUnitRoleXref",
                        l => l.HasOne<Role>().WithMany().HasForeignKey("RoleId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conRole_UserBusUnitRoleXref_RoleID_FK2"),
                        r => r.HasOne<UserBusUnitXref>().WithMany().HasForeignKey("UserId", "BusinessUnitId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conUserBusUnitXref_UserBusUnitRoleXref_UserBusinessUnitID_FK1"),
                        j =>
                        {
                            j.HasKey("UserId", "BusinessUnitId", "RoleId").HasName("conUserBusUnitRoleXrefPK");

                            j.ToTable("UserBusUnitRoleXref");

                            j.HasIndex(new[] { "BusinessUnitId" }, "IdxUserBusUnitRoleXref_BusinessUnitID_Ix1").HasFillFactor(90);

                            j.HasIndex(new[] { "RoleId" }, "IdxUserBusUnitRoleXref_RoleID_Ix2").HasFillFactor(90);

                            j.IndexerProperty<int>("UserId").HasColumnName("UserID");

                            j.IndexerProperty<int>("BusinessUnitId").HasColumnName("BusinessUnitID");

                            j.IndexerProperty<int>("RoleId").HasColumnName("RoleID");
                        });
            });

            modelBuilder.Entity<UserFavorite>(entity =>
            {
                entity.HasIndex(e => new { e.EmployeeId, e.ClassTypeId, e.ValueId }, "IX_UserFavorites_EmployeeID")
                    .HasFillFactor(90);

                entity.Property(e => e.UserFavoriteId).HasColumnName("UserFavoriteID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.ParentFavoriteId).HasColumnName("ParentFavoriteID");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ValueId).HasColumnName("ValueID");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.UserFavorites)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserFavorites_ClassType");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.UserFavorites)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserFavorites_Employee");

                entity.HasOne(d => d.ParentFavorite)
                    .WithMany(p => p.InverseParentFavorite)
                    .HasForeignKey(d => d.ParentFavoriteId)
                    .HasConstraintName("FK_UserFavorites_ParentFavoriteID");
            });

            modelBuilder.Entity<UserGuipreference>(entity =>
            {
                entity.HasKey(e => e.UserGuipreferencesId)
                    .HasName("conUserGUIPreferencesIDPk");

                entity.ToTable("UserGUIPreferences");

                entity.HasIndex(e => e.UserId, "IX_UserGUIPreferences_UserID_Inc")
                    .HasFillFactor(90);

                entity.Property(e => e.UserGuipreferencesId).HasColumnName("UserGUIPreferencesID");

                entity.Property(e => e.GridId).HasColumnName("GridID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.Grid)
                    .WithMany(p => p.UserGuipreferences)
                    .HasForeignKey(d => d.GridId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conUserGUIPreferencesGridIDFK");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserGuipreferences)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conUserGUIPreferencesUserIDFK");
            });

            modelBuilder.Entity<UserLoginHistory>(entity =>
            {
                entity.ToTable("UserLoginHistory");

                entity.HasIndex(e => new { e.EmployeeId, e.ModuleType }, "IdxCover")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.EmployeeId, e.LoginDate }, "x")
                    .HasFillFactor(90);

                entity.Property(e => e.BrowserInfo)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.ClientMachineIp)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ClientMachineIP");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.HostName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LoginDate).HasColumnType("datetime");

                entity.Property(e => e.LoginName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LogoutDate).HasColumnType("datetime");

                entity.Property(e => e.ModuleType)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Type).HasDefaultValueSql("((808))");

                entity.Property(e => e.UserAgentInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.StatusCdNavigation)
                    .WithMany(p => p.UserLoginHistories)
                    .HasForeignKey(d => d.StatusCd)
                    .HasConstraintName("conUserLoginHistory5Fk");
            });

            modelBuilder.Entity<UserOwningOfficeSecurityOld>(entity =>
            {
                entity.HasKey(e => new { e.BusinessUnitId, e.UserId, e.ActivityId })
                    .HasName("PkUserOwningOfficeSecurity");

                entity.ToTable("UserOwningOfficeSecurity_old");

                entity.HasIndex(e => new { e.ActivityGrpId, e.ActivityId }, "IDXActivityGrpIDActivityID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.UserId, "IDXUserId")
                    .HasFillFactor(90);

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.ActivityId).HasColumnName("ActivityID");

                entity.Property(e => e.ActivityGrpId).HasColumnName("ActivityGrpID");
            });

            modelBuilder.Entity<UserRegionActivity>(entity =>
            {
                entity.HasKey(e => e.UserRegionActivityId)
                    .HasName("UserRegionActivity_PK")
                    .IsClustered(false);

                entity.ToTable("UserRegionActivity");

                entity.HasIndex(e => new { e.RegionId, e.UserId, e.ActivityId }, "IDXClustered")
                    .IsClustered()
                    .HasFillFactor(90);
            });

            modelBuilder.Entity<UserSecOffcGrpXref>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.SecOfficeGroupId })
                    .HasName("conUserSecOffcGrpXrefPK");

                entity.ToTable("UserSecOffcGrpXref");

                entity.HasIndex(e => e.SecOfficeGroupId, "IdxUserSecOffcGrpXref_SecOfficeGroupID_Ix2")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.UserId, "IdxUserSecOffcGrpXref_UserID_Ix1")
                    .HasFillFactor(90);

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.SecOfficeGroupId).HasColumnName("SecOfficeGroupID");

                entity.HasOne(d => d.SecOfficeGroup)
                    .WithMany(p => p.UserSecOffcGrpXrefs)
                    .HasForeignKey(d => d.SecOfficeGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conSecOfficeGroup_UserSecOffcGrpXref_SecOfficeGroupID_FK2");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserSecOffcGrpXrefs)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conEmployee_UserSecOffcGrpXref_EmployeID_FK1");

                entity.HasMany(d => d.Roles)
                    .WithMany(p => p.UserSecOffcGrpXrefs)
                    .UsingEntity<Dictionary<string, object>>(
                        "UserSecOffcGrpRoleXref",
                        l => l.HasOne<Role>().WithMany().HasForeignKey("RoleId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conRole_UserSecOffcGrpRoleXref_RoleID_FK2"),
                        r => r.HasOne<UserSecOffcGrpXref>().WithMany().HasForeignKey("UserId", "SecOfficeGroupId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("conUserSecOffcGrpXref_UserSecOffcGrpRoleXref_FK1"),
                        j =>
                        {
                            j.HasKey("UserId", "SecOfficeGroupId", "RoleId").HasName("conUserSecOffcGrpRoleXrefPK");

                            j.ToTable("UserSecOffcGrpRoleXref");

                            j.HasIndex(new[] { "RoleId" }, "IdxUserSecOffcGrpRoleXref_RoleID_Ix3").HasFillFactor(90);

                            j.HasIndex(new[] { "SecOfficeGroupId" }, "IdxUserSecOffcGrpRoleXref_SecOfficeGroupID_Ix1").HasFillFactor(90);

                            j.HasIndex(new[] { "UserId" }, "IdxUserSecOffcGrpRoleXref_UserID_Ix2").HasFillFactor(90);

                            j.IndexerProperty<int>("UserId").HasColumnName("UserID");

                            j.IndexerProperty<int>("SecOfficeGroupId").HasColumnName("SecOfficeGroupID");

                            j.IndexerProperty<int>("RoleId").HasColumnName("RoleID");
                        });
            });

            modelBuilder.Entity<UserSecurityXrefOld>(entity =>
            {
                entity.HasKey(e => e.UserSecurityXrefId)
                    .HasName("IDXUserSecurityXrefId")
                    .IsClustered(false);

                entity.ToTable("UserSecurityXref_old");

                entity.HasIndex(e => new { e.UserId, e.BusinessUnitId, e.ActivityGrpId, e.ActivityId }, "conUserSecurityXref1Pk")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor(95);

                entity.HasIndex(e => e.UserId, "idxUserSecurityXRefUserID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.BusinessUnitId, e.UserId }, "indUserSecurityXref2Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ActivityGrpId, e.BusinessUnitId }, "indUserSecurityXref3Fk")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ActivityGrpId, e.ActivityId }, "indUserSecurityXref4Fk")
                    .HasFillFactor(90);

                entity.Property(e => e.ActivityGrpId).HasColumnName("ActivityGrpID");

                entity.Property(e => e.ActivityId).HasColumnName("ActivityID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<UserSessionDatum>(entity =>
            {
                entity.HasIndex(e => new { e.LoginName, e.SessionId }, "IDX_LoginName_SessionID")
                    .HasFillFactor(90);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AuthToken)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.LoginDate).HasColumnType("datetime");

                entity.Property(e => e.LoginName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LogoutDate).HasColumnType("datetime");

                entity.Property(e => e.ModuleType)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SessionId)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<VDw01loadApplication>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadApplication");

                entity.Property(e => e.ApplId).HasColumnName("ApplID");

                entity.Property(e => e.ApplType)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDw01loadAuthSignature>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadAuthSignature");

                entity.Property(e => e.AuthSignatureId).HasColumnName("AuthSignatureID");

                entity.Property(e => e.AuthSignatureName)
                    .HasMaxLength(85)
                    .IsUnicode(false);

                entity.Property(e => e.AuthSignatureTypeDescr)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.OtherTitle)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.PrincipalId).HasColumnName("PrincipalID");
            });

            modelBuilder.Entity<VDw01loadBankAccount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadBankAccount");

                entity.Property(e => e.AccountDescr)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNum2)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.BankAcctId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BankAcctID");

                entity.Property(e => e.BankId).HasColumnName("BankID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.FormattedAcctNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.SignatureText)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.SignatureText2)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.StatusUpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.StatusUpdatedEmployeeId).HasColumnName("StatusUpdatedEmployeeID");

                entity.Property(e => e.TwoSignatureReqAmt).HasColumnType("money");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");
            });

            modelBuilder.Entity<VDw01loadBankBranch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadBankBranch");

                entity.Property(e => e.AddrLine1)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.AddrLine2)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.AddrLine3)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.AddrLine4)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.AreaCode)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.BankId).HasColumnName("BankID");

                entity.Property(e => e.BankName)
                    .HasMaxLength(101)
                    .IsUnicode(false);

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.City)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.County)
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.FastBankCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FaxNum)
                    .HasMaxLength(39)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneNum)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RoutingNum)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.SmsbankCd)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SMSBankCd");

                entity.Property(e => e.State)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.Property(e => e.WireInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ZipCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDw01loadBusOrg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadBusOrg");

                entity.Property(e => e.AddrLine1)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.AddrLine2)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.AddrLine3)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.AddrLine4)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.AreaCode)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.BusOrgContactName)
                    .HasMaxLength(165)
                    .IsUnicode(false);

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.BusOrgName)
                    .HasMaxLength(165)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.County)
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Extension)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.OrgTypeCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.OrgTypeName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneNum)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ZipCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDw01loadBusOrgSecurityAgreement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadBusOrgSecurityAgreement");

                entity.Property(e => e.AgreementId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AgreementID");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DeactivationDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ReactivationDate).HasColumnType("datetime");

                entity.Property(e => e.StatusChgComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDw01loadBusinessUnit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadBusinessUnit");

                entity.Property(e => e.AreaCode)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.BusUnitTypeName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.CorpBusUnitId).HasColumnName("CorpBusUnitID");

                entity.Property(e => e.CorporationName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Extension)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.OfficeName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneNum)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RegionBusUnitId).HasColumnName("RegionBusUnitID");

                entity.Property(e => e.RegionName)
                    .HasMaxLength(70)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDw01loadCharge>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadCharge");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.AnnualInterestRate).HasColumnType("decimal(9, 6)");

                entity.Property(e => e.BasisAmount).HasColumnType("money");

                entity.Property(e => e.BuyerChargeAmount).HasColumnType("money");

                entity.Property(e => e.BuyerCreditAmount).HasColumnType("money");

                entity.Property(e => e.BuyerPaymentMethodTypeCdId).HasColumnName("BuyerPaymentMethodTypeCdID");

                entity.Property(e => e.ChargeCategoryTypeCdId).HasColumnName("ChargeCategoryTypeCdID");

                entity.Property(e => e.ChargeCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ChargeId).HasColumnName("ChargeID");

                entity.Property(e => e.ChargeProcessTypeCdId).HasColumnName("ChargeProcessTypeCdID");

                entity.Property(e => e.ClassTypeDescr)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EscrowChargeTemplateId).HasColumnName("EscrowChargeTemplateID");

                entity.Property(e => e.FileBusinessPartyId).HasColumnName("FileBusinessPartyID");

                entity.Property(e => e.FileChargeAmount).HasColumnType("money");

                entity.Property(e => e.FileCreditAmount).HasColumnType("money");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FileProcessId).HasColumnName("FileProcessID");

                entity.Property(e => e.FromDate).HasColumnType("datetime");

                entity.Property(e => e.InterestTypeCdId).HasColumnName("InterestTypeCdID");

                entity.Property(e => e.MonthlyChargeAmount).HasColumnType("money");

                entity.Property(e => e.PayeeName)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentTermTypeCdId).HasColumnName("PaymentTermTypeCdID");

                entity.Property(e => e.PerDiemAmount).HasColumnType("decimal(19, 6)");

                entity.Property(e => e.SellerChargeAmount).HasColumnType("money");

                entity.Property(e => e.SellerCreditAmount).HasColumnType("money");

                entity.Property(e => e.SellerPaymentMethodTypeCdId).HasColumnName("SellerPaymentMethodTypeCdID");

                entity.Property(e => e.SourceTypeCdId).HasColumnName("SourceTypeCdID");

                entity.Property(e => e.StatusTypeCdId).HasColumnName("StatusTypeCdID");

                entity.Property(e => e.ToDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");
            });

            modelBuilder.Entity<VDw01loadCheckDescriptionDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadCheckDescriptionDetail");

                entity.Property(e => e.CheckDescriptionDetailId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CheckDescriptionDetailID");

                entity.Property(e => e.CheckVoucherInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(45)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDw01loadCheckDisbursement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadCheckDisbursement");

                entity.Property(e => e.CheckDisbursementId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CheckDisbursementID");

                entity.Property(e => e.DisbursementId).HasColumnName("DisbursementID");

                entity.Property(e => e.ErrorMsg)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.EventLogId).HasColumnName("EventLogID");
            });

            modelBuilder.Entity<VDw01loadCountyInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadCountyInfo");

                entity.Property(e => e.CountyInfoId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CountyInfoID");

                entity.Property(e => e.DefaultOwnerOfficeId).HasColumnName("DefaultOwnerOfficeID");

                entity.Property(e => e.DefaultProductionOfficeId).HasColumnName("DefaultProductionOfficeID");

                entity.Property(e => e.GeoRegionId).HasColumnName("GeoRegionID");
            });

            modelBuilder.Entity<VDw01loadDisbursement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadDisbursement");

                entity.Property(e => e.AdjustmentDate).HasColumnType("datetime");

                entity.Property(e => e.AdjustmentReasonTypeCdId).HasColumnName("AdjustmentReasonTypeCdID");

                entity.Property(e => e.AdjustmentTypeCdId).HasColumnName("AdjustmentTypeCdID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BankAcctId).HasColumnName("BankAcctID");

                entity.Property(e => e.ClassTypeDescr)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CorrectingTransactionId).HasColumnName("CorrectingTransactionID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DisbursementId).HasColumnName("DisbursementID");

                entity.Property(e => e.DisbursementMethodTypeCdId).HasColumnName("DisbursementMethodTypeCdID");

                entity.Property(e => e.DocumentNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FileBusinessPartyId).HasColumnName("FileBusinessPartyID");

                entity.Property(e => e.FileFeeDisbursementCauseTypeCdId).HasColumnName("FileFeeDisbursementCauseTypeCdID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FileProcessId).HasColumnName("FileProcessID");

                entity.Property(e => e.HeldByEmployeeId).HasColumnName("HeldByEmployeeID");

                entity.Property(e => e.HoldDate).HasColumnType("datetime");

                entity.Property(e => e.HoldPurpose)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.HoldUntilDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.IssuedByEmployeeId).HasColumnName("IssuedByEmployeeID");

                entity.Property(e => e.PayeeName)
                    .HasMaxLength(430)
                    .IsUnicode(false);

                entity.Property(e => e.Reference)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReleaseDate).HasColumnType("datetime");

                entity.Property(e => e.ReleasedByEmployeeId).HasColumnName("ReleasedByEmployeeID");

                entity.Property(e => e.SourceTypeCdId).HasColumnName("SourceTypeCdID");

                entity.Property(e => e.SplitByEmployeeId).HasColumnName("SplitByEmployeeID");

                entity.Property(e => e.SplitDate).HasColumnType("datetime");

                entity.Property(e => e.StatusTypeCdId).HasColumnName("StatusTypeCdID");

                entity.Property(e => e.TasupdateDate).HasColumnName("TASUpdateDate");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.Property(e => e.VoucherChargeDetails)
                    .HasMaxLength(910)
                    .IsUnicode(false);

                entity.Property(e => e.VoucherDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.VoucherMemo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.WireDisbursementDetailId).HasColumnName("WireDisbursementDetailID");
            });

            modelBuilder.Entity<VDw01loadDisbursementAllocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadDisbursementAllocation");

                entity.Property(e => e.AllocationAmount).HasColumnType("money");

                entity.Property(e => e.CheckAmount).HasColumnType("money");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DisbursementAllocationId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DisbursementAllocationID");

                entity.Property(e => e.DisbursementId).HasColumnName("DisbursementID");

                entity.Property(e => e.TransactionId).HasColumnName("TransactionID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");
            });

            modelBuilder.Entity<VDw01loadEarnestDeposit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadEarnestDeposit");

                entity.Property(e => e.ClassTypeDescr)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.EarnestAmount).HasColumnType("money");

                entity.Property(e => e.EarnestDepositHolderId).HasColumnName("EarnestDepositHolderID");

                entity.Property(e => e.HolderEntityTypeCdId).HasColumnName("HolderEntityTypeCdID");

                entity.Property(e => e.HolderName)
                    .HasMaxLength(72)
                    .IsUnicode(false);

                entity.Property(e => e.OutOfEscrowId).HasColumnName("OutOfEscrowID");
            });

            modelBuilder.Entity<VDw01loadEmployee>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadEmployee");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.HomeOfficeId).HasColumnName("HomeOfficeID");

                entity.Property(e => e.Initials)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LoginName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PersonnelCd)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TitleLine1)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TitleLine2)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TitleLine3)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDw01loadEmployeeCountyInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadEmployeeCountyInfo");

                entity.Property(e => e.CountyInfoId).HasColumnName("CountyInfoID");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.FunctionTypeCdId).HasColumnName("FunctionTypeCdID");

                entity.Property(e => e.OfficeRoleName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.OfficeRoleObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDw01loadEscrowChargeTemplate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadEscrowChargeTemplate");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.CalcBasePeriodTypeCdId).HasColumnName("CalcBasePeriodTypeCdID");

                entity.Property(e => e.ChargeCategoryTypeCdId).HasColumnName("ChargeCategoryTypeCdID");

                entity.Property(e => e.ChargeProcessTypeCdId).HasColumnName("ChargeProcessTypeCdID");

                entity.Property(e => e.ClassTypeDescr)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.DefaultPmtMethodTypeCdId).HasColumnName("DefaultPmtMethodTypeCdID");

                entity.Property(e => e.Descr)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EscrowChargeTemplateId).HasColumnName("EscrowChargeTemplateID");

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");
            });

            modelBuilder.Entity<VDw01loadEvent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadEvent");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.EventTypeName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(55)
                    .IsUnicode(false);

                entity.Property(e => e.SuperEventId).HasColumnName("SuperEventID");
            });

            modelBuilder.Entity<VDw01loadEventLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadEventLog");

                entity.Property(e => e.ApplContext)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Dwdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DWDate");

                entity.Property(e => e.ErrorMsg)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.EventEndDate).HasColumnType("datetime");

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.EventLogId).HasColumnName("EventLogID");

                entity.Property(e => e.EventSourceId).HasColumnName("EventSourceID");

                entity.Property(e => e.EventSourceTypeName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.EventStartDate).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.ScheduleDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SuperEventLogId).HasColumnName("SuperEventLogID");
            });

            modelBuilder.Entity<VDw01loadFileBusinessParty>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadFileBusinessParty");

                entity.Property(e => e.AttentionName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.CheckDescrDetailId).HasColumnName("CheckDescrDetailID");

                entity.Property(e => e.ClassTypeDescr)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Dwdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DWDate");

                entity.Property(e => e.FileBusinessPartyId).HasColumnName("FileBusinessPartyID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.PrincipalId).HasColumnName("PrincipalID");

                entity.Property(e => e.RefNum)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RoleTypeDescr)
                    .HasMaxLength(70)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDw01loadFileProcess>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadFileProcess");

                entity.Property(e => e.ActualReleaseDate).HasColumnType("datetime");

                entity.Property(e => e.AmountDue).HasColumnType("money");

                entity.Property(e => e.AmtDuePeriodTypeDescr)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.ChargeAmtNotToExceed).HasColumnType("money");

                entity.Property(e => e.ClassTypeDescr)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.CommissionPercent).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.CreditToBuyerAmt).HasColumnType("money");

                entity.Property(e => e.CreditToBuyerBrokerAmt).HasColumnType("money");

                entity.Property(e => e.CreditToSellerBrokerAmt).HasColumnType("money");

                entity.Property(e => e.CreditTosellerAmt).HasColumnType("money");

                entity.Property(e => e.EstReleaseDate).HasColumnType("datetime");

                entity.Property(e => e.FileBusinessPartyId).HasColumnName("FileBusinessPartyID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FileProcessId).HasColumnName("FileProcessID");

                entity.Property(e => e.Fromdate).HasColumnType("datetime");

                entity.Property(e => e.FurnishedByTypeDescr)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.HoldDate).HasColumnType("datetime");

                entity.Property(e => e.InspCompleteDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Insp_CompleteDate");

                entity.Property(e => e.InspDuedate)
                    .HasColumnType("datetime")
                    .HasColumnName("Insp_Duedate");

                entity.Property(e => e.InspFollowUpDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Insp_FollowUpDate");

                entity.Property(e => e.InspOrderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Insp_OrderDate");

                entity.Property(e => e.InspReportDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Insp_ReportDate");

                entity.Property(e => e.LeaseAmt).HasColumnType("money");

                entity.Property(e => e.LeasePeriodTypeCdId).HasColumnName("LeasePeriodTypeCdID");

                entity.Property(e => e.PaidByTypeCdId).HasColumnName("PaidByTypeCdID");

                entity.Property(e => e.PerDiemAmount).HasColumnType("money");

                entity.Property(e => e.PremiumAmt).HasColumnType("money");

                entity.Property(e => e.PremiumPeriodTypeCdId).HasColumnName("PremiumPeriodTypeCdID");

                entity.Property(e => e.ProcessTypeCdDescr)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.RetainedAmtByAttorney).HasColumnType("money");

                entity.Property(e => e.SurveyNote)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Todate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.Property(e => e.UwfileBusinessPartyId).HasColumnName("UWFileBusinessPartyID");
            });

            modelBuilder.Entity<VDw01loadFileService>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadFileService");

                entity.Property(e => e.Dwdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DWDate");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FileServiceId).HasColumnName("FileServiceID");

                entity.Property(e => e.OwnerOfficeId).HasColumnName("OwnerOfficeID");

                entity.Property(e => e.OwnerOfficename)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.ProductionOfficeId).HasColumnName("ProductionOfficeID");

                entity.Property(e => e.ProductionOfficeName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceTypeDescr)
                    .HasMaxLength(70)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDw01loadGeographicRegion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadGeographicRegion");

                entity.Property(e => e.CityName)
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.CountyName)
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.GeoRegionId).HasColumnName("GeoRegionID");

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.StateName)
                    .HasMaxLength(65)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDw01loadInEscrowDeposit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadInEscrowDeposit");

                entity.Property(e => e.AdjustedTransactionId).HasColumnName("AdjustedTransactionID");

                entity.Property(e => e.AdjustmentDate).HasColumnType("datetime");

                entity.Property(e => e.AdjustmentReasonTypeCdId).HasColumnName("AdjustmentReasonTypeCdID");

                entity.Property(e => e.AdjustmentTypeCdId).HasColumnName("AdjustmentTypeCdID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BankAcctId).HasColumnName("BankAcctID");

                entity.Property(e => e.ClassTypeDescr)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.CreditToTypeCdId).HasColumnName("CreditToTypeCdID");

                entity.Property(e => e.DepositDate).HasColumnType("datetime");

                entity.Property(e => e.DepositTicketNum)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DepositorName)
                    .HasMaxLength(130)
                    .IsUnicode(false);

                entity.Property(e => e.DepositorTypeCdId).HasColumnName("DepositorTypeCdID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.InEscrowId).HasColumnName("InEscrowID");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.PaymentId).HasColumnName("PaymentID");

                entity.Property(e => e.ReceiptNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RepresentingTypeCdId).HasColumnName("RepresentingTypeCdID");

                entity.Property(e => e.SourceTypeCdId).HasColumnName("SourceTypeCdID");

                entity.Property(e => e.StatusTypeCdId).HasColumnName("StatusTypeCdID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");
            });

            modelBuilder.Entity<VDw01loadInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadInvoice");

                entity.Property(e => e.BillToEntityRoleTypeCdDescr)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ExportEndDate).HasColumnType("datetime");

                entity.Property(e => e.ExportRequestDate).HasColumnType("datetime");

                entity.Property(e => e.ExportStartDate).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.InvoiceClassTypeDescr)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceId).HasColumnName("invoiceID");

                entity.Property(e => e.InvoiceNum).HasColumnName("invoiceNum");

                entity.Property(e => e.InvoiceStatus)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("invoiceStatus");

                entity.Property(e => e.InvoiceStatusDate)
                    .HasColumnType("datetime")
                    .HasColumnName("invoiceStatusDate");

                entity.Property(e => e.InvoicedByEmployeeId).HasColumnName("invoicedByEmployeeID");

                entity.Property(e => e.OrderId).HasColumnName("OrderID");
            });

            modelBuilder.Entity<VDw01loadLastEventLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadLastEventLog");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.EventComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.EventEndDate).HasColumnType("datetime");

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.EventLogComments)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.EventLogId).HasColumnName("EventLogID");

                entity.Property(e => e.EventName)
                    .HasMaxLength(55)
                    .IsUnicode(false);

                entity.Property(e => e.EventSourceId).HasColumnName("EventSourceID");

                entity.Property(e => e.EventStartDate).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.LastEvent)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDw01loadLoanInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadLoanInfo");

                entity.Property(e => e.AssignBenMortgageeTextId).HasColumnName("AssignBenMortgageeTextID");

                entity.Property(e => e.BenMortgageeTextId).HasColumnName("BenMortgageeTextID");

                entity.Property(e => e.DiscountPointAdjAmt).HasColumnType("money");

                entity.Property(e => e.DiscountPointPercent).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.FileProcessId).HasColumnName("FileProcessID");

                entity.Property(e => e.FirstPmtDue).HasColumnType("datetime");

                entity.Property(e => e.FundingAmt).HasColumnType("money");

                entity.Property(e => e.FundingDate).HasColumnType("datetime");

                entity.Property(e => e.HazardInsLossPayeeTextId).HasColumnName("HazardInsLossPayeeTextID");

                entity.Property(e => e.InterestFrom).HasColumnType("datetime");

                entity.Property(e => e.InterestPaidThru).HasColumnType("datetime");

                entity.Property(e => e.LateChargeAmt).HasColumnType("money");

                entity.Property(e => e.LateChargePercent).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.LoanAmt).HasColumnType("money");

                entity.Property(e => e.LoanDueDate).HasColumnType("datetime");

                entity.Property(e => e.LoanLiability).HasColumnType("money");

                entity.Property(e => e.LoanTermTypeDescr)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.LoanTypeDescr)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.MortgageBrokerId).HasColumnName("MortgageBrokerID");

                entity.Property(e => e.NameOfInsuredPerson)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NextPmtDue).HasColumnType("datetime");

                entity.Property(e => e.NoteDated).HasColumnType("datetime");

                entity.Property(e => e.OrigNoteAmt).HasColumnType("money");

                entity.Property(e => e.OriginationFeeAdjAmt).HasColumnType("money");

                entity.Property(e => e.OriginationFeePercent).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.PayablePeriodTypeCdId).HasColumnName("PayablePeriodTypeCdID");

                entity.Property(e => e.PmtAmt).HasColumnType("money");

                entity.Property(e => e.PmtTypeDescr)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.RecordDocId).HasColumnName("RecordDocID");

                entity.Property(e => e.RescissionEnd).HasColumnType("datetime");

                entity.Property(e => e.RescissionEndOwflag).HasColumnName("RescissionEndOWFlag");

                entity.Property(e => e.RescissionStart).HasColumnType("datetime");

                entity.Property(e => e.SigningDate).HasColumnType("datetime");

                entity.Property(e => e.TitleInsMortgageeClauseTextId).HasColumnName("TitleInsMortgageeClauseTextID");

                entity.Property(e => e.TrustorMortgagerTextId).HasColumnName("TrustorMortgagerTextID");
            });

            modelBuilder.Entity<VDw01loadOtherBusOrg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadOtherBusOrg");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.ClassTypeName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Dwdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DWDate");

                entity.Property(e => e.FileId).HasColumnName("FileID");
            });

            modelBuilder.Entity<VDw01loadOutOfEscrowDeposit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadOutOfEscrowDeposit");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.ClassTypeDescr)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.DisbursedAsProceedsAmount).HasColumnType("money");

                entity.Property(e => e.ExcessDepositAmount).HasColumnType("money");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.OutOfEscrowId).HasColumnName("OutOfEscrowID");

                entity.Property(e => e.SourceTypeCdId).HasColumnName("SourceTypeCdID");

                entity.Property(e => e.StatusTypeCdId).HasColumnName("StatusTypeCdID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");
            });

            modelBuilder.Entity<VDw01loadPayment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadPayment");

                entity.Property(e => e.Abanum)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ABANum");

                entity.Property(e => e.AccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.AuthorizationNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BankContactName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.BankName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.CardTypeCdId).HasColumnName("CardTypeCdID");

                entity.Property(e => e.CheckNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ClassTypeDescr)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.ConfirmationDate).HasColumnType("datetime");

                entity.Property(e => e.ConfirmationNum)
                    .HasMaxLength(22)
                    .IsUnicode(false);

                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");

                entity.Property(e => e.FederalRoutingNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NameOnCard)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentDate).HasColumnType("datetime");

                entity.Property(e => e.PaymentId).HasColumnName("PaymentID");

                entity.Property(e => e.PaymentMethodTypeCdId).HasColumnName("PaymentMethodTypeCdID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");
            });

            modelBuilder.Entity<VDw01loadPolicyPrincipalXref>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadPolicyPrincipalXref");

                entity.Property(e => e.PolicyId).HasColumnName("PolicyID");

                entity.Property(e => e.PrincipalId).HasColumnName("PrincipalID");
            });

            modelBuilder.Entity<VDw01loadRealProperty>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadRealProperty");

                entity.Property(e => e.AddtlSectionalDetail)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Block)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Book)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Borough)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Building)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Condominium)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Fee)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FullLegalDescrId).HasColumnName("FullLegalDescrID");

                entity.Property(e => e.GovernmentLotNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Lot)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MapDate).HasColumnType("datetime");

                entity.Property(e => e.MapNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Page)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Parcel)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Parish)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Phase)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyId).HasColumnName("PropertyID");

                entity.Property(e => e.PropertyTypeDescr)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Province)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Range)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Section)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ShortLegalDescrId).HasColumnName("ShortLegalDescrID");

                entity.Property(e => e.SubdivisionName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SubtractName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Township)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TractNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Unit)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDw01loadRecordingInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadRecordingInfo");

                entity.Property(e => e.Block)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ClassTypeDescr)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.MapDate).HasColumnType("datetime");

                entity.Property(e => e.MapNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Page)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyId).HasColumnName("PropertyID");

                entity.Property(e => e.RecordingInfoId).HasColumnName("RecordingInfoID");

                entity.Property(e => e.TypeCdDescr)
                    .HasMaxLength(70)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDw01loadServiceFile>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadServiceFile");

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.DisbursementDate).HasColumnType("datetime");

                entity.Property(e => e.Dwdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DWDate");

                entity.Property(e => e.EstimatedCloseDate).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Note).IsUnicode(false);

                entity.Property(e => e.OpenDate).HasColumnType("datetime");

                entity.Property(e => e.OrderApplSourceId).HasColumnName("OrderApplSourceID");

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.OrderRefNum)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OwnerOfficeId).HasColumnName("OwnerOfficeID");

                entity.Property(e => e.SalesPriceAmt).HasColumnType("money");

                entity.Property(e => e.SalesPriceLiabilityAmt).HasColumnType("money");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.SettlementDate).HasColumnType("datetime");

                entity.Property(e => e.StatusDescr)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.WorkflowId).HasColumnName("WorkflowID");
            });

            modelBuilder.Entity<VDw01loadServiceFileEmployeeFunction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadServiceFileEmployeeFunction");

                entity.Property(e => e.Dwdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DWDate");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FunctionTypeName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.FunctionTypeObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDw01loadServiceFileFee>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadServiceFileFee");

                entity.Property(e => e.BuyerChargeAmt).HasColumnType("money");

                entity.Property(e => e.BuyerSalesTaxAmt).HasColumnType("money");

                entity.Property(e => e.Descr)
                    .HasMaxLength(201)
                    .IsUnicode(false);

                entity.Property(e => e.DiscountAmt).HasColumnType("money");

                entity.Property(e => e.DiscountPercent).HasColumnType("decimal(6, 4)");

                entity.Property(e => e.Dwdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DWDate");

                entity.Property(e => e.FeeTypeName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.FileFeeCategoryName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.GeographicTypeName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PolicyId).HasColumnName("PolicyID");

                entity.Property(e => e.SellerChargeAmt).HasColumnType("money");

                entity.Property(e => e.SellerSalesTaxAmt).HasColumnType("money");

                entity.Property(e => e.ServiceFileFeeId).HasColumnName("ServiceFileFeeID");
            });

            modelBuilder.Entity<VDw01loadServiceFileLoan>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadServiceFileLoan");

                entity.Property(e => e.Dwdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DWDate");

                entity.Property(e => e.LenderId).HasColumnName("LenderID");

                entity.Property(e => e.LenderRefNum)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LiabilityAmt).HasColumnType("money");

                entity.Property(e => e.LoanAmt).HasColumnType("money");

                entity.Property(e => e.LoanId).HasColumnName("LoanID");

                entity.Property(e => e.LoanTypeName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.MortgageBrokerRefNum)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReferenceName)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDw01loadServiceFileProductType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadServiceFileProductType");

                entity.Property(e => e.Dwdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DWDate");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.ProductTypeName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.ProductTypeObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDw01loadServiceFileProductionOffice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadServiceFileProductionOffice");

                entity.Property(e => e.Dwdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DWDate");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.ProductionOfficeId).HasColumnName("ProductionOfficeID");
            });

            modelBuilder.Entity<VDw01loadServiceFileTransType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadServiceFileTransType");

                entity.Property(e => e.Dwdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DWDate");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.TransTypeObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionTypeName)
                    .HasMaxLength(70)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDw01loadServicefilePropertyInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadServicefilePropertyInfo");

                entity.Property(e => e.CityOfProperty)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Dwdate).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.PropertyAddress1)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyAddress2)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyName)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyTypeName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.TaxNum)
                    .HasMaxLength(45)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDw01loadTextDatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadTextData");

                entity.Property(e => e.TextData).IsUnicode(false);

                entity.Property(e => e.TextId).HasColumnName("TextID");
            });

            modelBuilder.Entity<VDw01loadTime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadTime");

                entity.Property(e => e.Dwdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DWDate");
            });

            modelBuilder.Entity<VDw01loadTypeCdDmt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadTypeCdDmt");

                entity.Property(e => e.Descr)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TypeCdId).HasColumnName("TypeCdID");
            });

            modelBuilder.Entity<VDw01loadUserSecurity>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadUserSecurity");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            });

            modelBuilder.Entity<VDw01loadWireDisbursement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadWireDisbursement");

                entity.Property(e => e.BeneficiaryAccountNum)
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryAdditionalInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryAdviceInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OriginatorInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OriginatorName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ReceivingBankAbanum)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ReceivingBankABANum");

                entity.Property(e => e.ReceivingBankAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ReceivingBankName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.WireDisbursementDetailId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("WireDisbursementDetailID");
            });

            modelBuilder.Entity<VDw01loadWorkflow>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadWorkflow");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.Name)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.WorkflowId).HasColumnName("WorkflowID");
            });

            modelBuilder.Entity<VDw01loadWorkflowSequence>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01LoadWorkflowSequence");

                entity.Property(e => e.NextUnitId).HasColumnName("NextUnitID");

                entity.Property(e => e.NextUnitTypeName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.UnitId).HasColumnName("UnitID");

                entity.Property(e => e.UnitTypeName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.WorkflowId).HasColumnName("WorkflowID");

                entity.Property(e => e.WorkflowSeqId).HasColumnName("WorkflowSeqID");
            });

            modelBuilder.Entity<VDw01maxEventLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01MaxEventLog");

                entity.Property(e => e.EventLogId).HasColumnName("EventLogID");
            });

            modelBuilder.Entity<VDw01textId>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDW01TextID");

                entity.Property(e => e.TextId).HasColumnName("TextID");
            });

            modelBuilder.Entity<VDwMaxEventLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDwMaxEventLog");

                entity.Property(e => e.EventLogId).HasColumnName("EventLogID");
            });

            modelBuilder.Entity<VDwloadApplication>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadApplication");

                entity.Property(e => e.ApplId).HasColumnName("ApplID");

                entity.Property(e => e.ApplType)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDwloadAuthSignature>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadAuthSignature");

                entity.Property(e => e.AuthSignatureId).HasColumnName("AuthSignatureID");

                entity.Property(e => e.AuthSignatureName)
                    .HasMaxLength(85)
                    .IsUnicode(false);

                entity.Property(e => e.AuthSignatureTypeDescr)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.OtherTitle)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.PrincipalId).HasColumnName("PrincipalID");
            });

            modelBuilder.Entity<VDwloadBankAccount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadBankAccount");

                entity.Property(e => e.AccountDescr)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNum2)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.BankAcctId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BankAcctID");

                entity.Property(e => e.BankId).HasColumnName("BankID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.FormattedAcctNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.SignatureText)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.SignatureText2)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.StatusUpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.StatusUpdatedEmployeeId).HasColumnName("StatusUpdatedEmployeeID");

                entity.Property(e => e.TwoSignatureReqAmt).HasColumnType("money");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");
            });

            modelBuilder.Entity<VDwloadBankBranch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadBankBranch");

                entity.Property(e => e.AddrLine1)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.AddrLine2)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.AddrLine3)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.AddrLine4)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.AreaCode)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.BankId).HasColumnName("BankID");

                entity.Property(e => e.BankName)
                    .HasMaxLength(101)
                    .IsUnicode(false);

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.City)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.County)
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.FastBankCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FaxNum)
                    .HasMaxLength(39)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneNum)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RoutingNum)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.SmsbankCd)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SMSBankCd");

                entity.Property(e => e.State)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.Property(e => e.WireInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ZipCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDwloadBusOrg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadBusOrg");

                entity.Property(e => e.AddrLine1)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.AddrLine2)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.AddrLine3)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.AddrLine4)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.AreaCode)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.BillToBusOrgName1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BillToBusOrgName2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BillToPersonName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BusOrgContactName)
                    .HasMaxLength(165)
                    .IsUnicode(false);

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.BusOrgName)
                    .HasMaxLength(165)
                    .IsUnicode(false);

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.City)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.County)
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.DelegateName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Extension)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FaxNum)
                    .HasMaxLength(39)
                    .IsUnicode(false);

                entity.Property(e => e.OrgTypeCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.OrgTypeName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneNum)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PrimarySalesEmployeeId).HasColumnName("PrimarySalesEmployeeID");

                entity.Property(e => e.State)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ZipCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDwloadBusOrgSecurityAgreement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadBusOrgSecurityAgreement");

                entity.Property(e => e.AgreementId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AgreementID");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DeactivationDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ReactivationDate).HasColumnType("datetime");

                entity.Property(e => e.StatusChgComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDwloadBusinessUnit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadBusinessUnit");

                entity.Property(e => e.AddrLine1)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.AddrLine2)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.AddrLine3)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.AddrLine4)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.AreaCode)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.BusUnitTypeName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.City)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CorpBusUnitId).HasColumnName("CorpBusUnitID");

                entity.Property(e => e.CorporationName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.County)
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EscrowProdOfficeId).HasColumnName("EscrowProdOfficeID");

                entity.Property(e => e.Extension)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FaxNum)
                    .HasMaxLength(39)
                    .IsUnicode(false);

                entity.Property(e => e.FeeTransmittalTypeDescr)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.LogoFileName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.OfficeName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.OverDraftAmt).HasColumnType("money");

                entity.Property(e => e.OverDraftPwd)
                    .HasMaxLength(96)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneNum)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RegionBusUnitId).HasColumnName("RegionBusUnitID");

                entity.Property(e => e.RegionName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.StatusChgComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StatusChgUserId).HasColumnName("StatusChgUserID");

                entity.Property(e => e.TitleProdOfficeId).HasColumnName("TitleProdOfficeID");

                entity.Property(e => e.TrustnetOfficePrefix)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.TrustnetRegionCd)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.ZipCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDwloadCharge>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadCharge");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.AnnualInterestRate).HasColumnType("decimal(9, 6)");

                entity.Property(e => e.BasisAmount).HasColumnType("money");

                entity.Property(e => e.BuyerChargeAmount).HasColumnType("money");

                entity.Property(e => e.BuyerCreditAmount).HasColumnType("money");

                entity.Property(e => e.BuyerPaymentMethodTypeCdId).HasColumnName("BuyerPaymentMethodTypeCdID");

                entity.Property(e => e.ChargeCategoryTypeCdId).HasColumnName("ChargeCategoryTypeCdID");

                entity.Property(e => e.ChargeCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ChargeId).HasColumnName("ChargeID");

                entity.Property(e => e.ChargeProcessTypeCdId).HasColumnName("ChargeProcessTypeCdID");

                entity.Property(e => e.ClassTypeDescr)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EscrowChargeTemplateId).HasColumnName("EscrowChargeTemplateID");

                entity.Property(e => e.FileBusinessPartyId).HasColumnName("FileBusinessPartyID");

                entity.Property(e => e.FileChargeAmount).HasColumnType("money");

                entity.Property(e => e.FileCreditAmount).HasColumnType("money");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FileProcessId).HasColumnName("FileProcessID");

                entity.Property(e => e.FromDate).HasColumnType("datetime");

                entity.Property(e => e.InterestTypeCdId).HasColumnName("InterestTypeCdID");

                entity.Property(e => e.MonthlyChargeAmount).HasColumnType("money");

                entity.Property(e => e.PayeeName)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentTermTypeCdId).HasColumnName("PaymentTermTypeCdID");

                entity.Property(e => e.PerDiemAmount).HasColumnType("decimal(19, 6)");

                entity.Property(e => e.SellerChargeAmount).HasColumnType("money");

                entity.Property(e => e.SellerCreditAmount).HasColumnType("money");

                entity.Property(e => e.SellerPaymentMethodTypeCdId).HasColumnName("SellerPaymentMethodTypeCdID");

                entity.Property(e => e.SourceTypeCdId).HasColumnName("SourceTypeCdID");

                entity.Property(e => e.StatusTypeCdId).HasColumnName("StatusTypeCdID");

                entity.Property(e => e.ToDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");
            });

            modelBuilder.Entity<VDwloadCheckDescriptionDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadCheckDescriptionDetail");

                entity.Property(e => e.CheckDescriptionDetailId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CheckDescriptionDetailID");

                entity.Property(e => e.CheckVoucherInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(45)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDwloadCheckDisbursement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadCheckDisbursement");

                entity.Property(e => e.CheckDisbursementId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CheckDisbursementID");

                entity.Property(e => e.DisbursementId).HasColumnName("DisbursementID");

                entity.Property(e => e.ErrorMsg)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.EventLogId).HasColumnName("EventLogID");
            });

            modelBuilder.Entity<VDwloadCommitment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadCommitment");

                entity.Property(e => e.ApprovedDate).HasColumnType("datetime");

                entity.Property(e => e.CommitmentId).HasColumnName("CommitmentID");

                entity.Property(e => e.Descr)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.DocTypeName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Dwdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DWDate");

                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");
            });

            modelBuilder.Entity<VDwloadCountyInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadCountyInfo");

                entity.Property(e => e.CountyInfoId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CountyInfoID");

                entity.Property(e => e.DefaultOwnerOfficeId).HasColumnName("DefaultOwnerOfficeID");

                entity.Property(e => e.DefaultProductionOfficeId).HasColumnName("DefaultProductionOfficeID");

                entity.Property(e => e.GeoRegionId).HasColumnName("GeoRegionID");
            });

            modelBuilder.Entity<VDwloadDisbursement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadDisbursement");

                entity.Property(e => e.AdjustmentDate).HasColumnType("datetime");

                entity.Property(e => e.AdjustmentReasonTypeCdId).HasColumnName("AdjustmentReasonTypeCdID");

                entity.Property(e => e.AdjustmentTypeCdId).HasColumnName("AdjustmentTypeCdID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BankAcctId).HasColumnName("BankAcctID");

                entity.Property(e => e.ClassTypeDescr)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CorrectingTransactionId).HasColumnName("CorrectingTransactionID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DisbursementId).HasColumnName("DisbursementID");

                entity.Property(e => e.DisbursementMethodTypeCdId).HasColumnName("DisbursementMethodTypeCdID");

                entity.Property(e => e.DocumentNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FileBusinessPartyId).HasColumnName("FileBusinessPartyID");

                entity.Property(e => e.FileFeeDisbursementCauseTypeCdId).HasColumnName("FileFeeDisbursementCauseTypeCdID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FileProcessId).HasColumnName("FileProcessID");

                entity.Property(e => e.HeldByEmployeeId).HasColumnName("HeldByEmployeeID");

                entity.Property(e => e.HoldDate).HasColumnType("datetime");

                entity.Property(e => e.HoldPurpose)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.HoldUntilDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.IssuedByEmployeeId).HasColumnName("IssuedByEmployeeID");

                entity.Property(e => e.PayeeName)
                    .HasMaxLength(430)
                    .IsUnicode(false);

                entity.Property(e => e.Reference)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReleaseDate).HasColumnType("datetime");

                entity.Property(e => e.ReleasedByEmployeeId).HasColumnName("ReleasedByEmployeeID");

                entity.Property(e => e.SourceTypeCdId).HasColumnName("SourceTypeCdID");

                entity.Property(e => e.SplitByEmployeeId).HasColumnName("SplitByEmployeeID");

                entity.Property(e => e.SplitDate).HasColumnType("datetime");

                entity.Property(e => e.StatusTypeCdId).HasColumnName("StatusTypeCdID");

                entity.Property(e => e.TasupdateDate).HasColumnName("TASUpdateDate");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.Property(e => e.VoucherChargeDetails)
                    .HasMaxLength(910)
                    .IsUnicode(false);

                entity.Property(e => e.VoucherDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.VoucherMemo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.WireDisbursementDetailId).HasColumnName("WireDisbursementDetailID");
            });

            modelBuilder.Entity<VDwloadDisbursementAllocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadDisbursementAllocation");

                entity.Property(e => e.AllocationAmount).HasColumnType("money");

                entity.Property(e => e.CheckAmount).HasColumnType("money");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DisbursementAllocationId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DisbursementAllocationID");

                entity.Property(e => e.DisbursementId).HasColumnName("DisbursementID");

                entity.Property(e => e.TransactionId).HasColumnName("TransactionID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");
            });

            modelBuilder.Entity<VDwloadEarnestDeposit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadEarnestDeposit");

                entity.Property(e => e.ClassTypeDescr)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.EarnestAmount).HasColumnType("money");

                entity.Property(e => e.EarnestDepositHolderId).HasColumnName("EarnestDepositHolderID");

                entity.Property(e => e.HolderEntityTypeCdId).HasColumnName("HolderEntityTypeCdID");

                entity.Property(e => e.HolderName)
                    .HasMaxLength(72)
                    .IsUnicode(false);

                entity.Property(e => e.OutOfEscrowId).HasColumnName("OutOfEscrowID");
            });

            modelBuilder.Entity<VDwloadEmployee>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadEmployee");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.HomeOfficeId).HasColumnName("HomeOfficeID");

                entity.Property(e => e.Initials)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LoginName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PersonnelCd)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TitleLine1)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TitleLine2)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TitleLine3)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDwloadEmployeeCountyInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadEmployeeCountyInfo");

                entity.Property(e => e.CountyInfoId).HasColumnName("CountyInfoID");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.FunctionTypeCdId).HasColumnName("FunctionTypeCdID");

                entity.Property(e => e.OfficeRoleName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.OfficeRoleObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDwloadEscrowChargeTemplate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadEscrowChargeTemplate");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.CalcBasePeriodTypeCdId).HasColumnName("CalcBasePeriodTypeCdID");

                entity.Property(e => e.ChargeCategoryTypeCdId).HasColumnName("ChargeCategoryTypeCdID");

                entity.Property(e => e.ChargeProcessTypeCdId).HasColumnName("ChargeProcessTypeCdID");

                entity.Property(e => e.ClassTypeDescr)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.DefaultPmtMethodTypeCdId).HasColumnName("DefaultPmtMethodTypeCdID");

                entity.Property(e => e.Descr)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EscrowChargeTemplateId).HasColumnName("EscrowChargeTemplateID");

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");
            });

            modelBuilder.Entity<VDwloadEvent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadEvent");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.EventTypeName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(55)
                    .IsUnicode(false);

                entity.Property(e => e.StatusChgComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StatusChgDate).HasColumnType("datetime");

                entity.Property(e => e.StatusChgUserId).HasColumnName("StatusChgUserID");

                entity.Property(e => e.SuperEventId).HasColumnName("SuperEventID");
            });

            modelBuilder.Entity<VDwloadEventLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadEventLog");

                entity.Property(e => e.ApplContext)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Dwdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DWDate");

                entity.Property(e => e.ErrorMsg)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.EventEndDate).HasColumnType("datetime");

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.EventLogId).HasColumnName("EventLogID");

                entity.Property(e => e.EventSourceId).HasColumnName("EventSourceID");

                entity.Property(e => e.EventSourceTypeName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.EventStartDate).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.ScheduleDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VDwloadFileBusinessParty>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadFileBusinessParty");

                entity.Property(e => e.AttentionName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.CheckDescrDetailId).HasColumnName("CheckDescrDetailID");

                entity.Property(e => e.ClassTypeDescr)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Dwdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DWDate");

                entity.Property(e => e.FileBusinessPartyId).HasColumnName("FileBusinessPartyID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.PrincipalId).HasColumnName("PrincipalID");

                entity.Property(e => e.RefNum)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RoleTypeDescr)
                    .HasMaxLength(70)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDwloadFileProcess>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadFileProcess");

                entity.Property(e => e.ActualReleaseDate).HasColumnType("datetime");

                entity.Property(e => e.AmountDue).HasColumnType("money");

                entity.Property(e => e.AmtDuePeriodTypeDescr)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.ChargeAmtNotToExceed).HasColumnType("money");

                entity.Property(e => e.ClassTypeDescr)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.CommissionPercent).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.CreditToBuyerAmt).HasColumnType("money");

                entity.Property(e => e.CreditToBuyerBrokerAmt).HasColumnType("money");

                entity.Property(e => e.CreditToSellerBrokerAmt).HasColumnType("money");

                entity.Property(e => e.CreditTosellerAmt).HasColumnType("money");

                entity.Property(e => e.EstReleaseDate).HasColumnType("datetime");

                entity.Property(e => e.FileBusinessPartyId).HasColumnName("FileBusinessPartyID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FileProcessId).HasColumnName("FileProcessID");

                entity.Property(e => e.Fromdate).HasColumnType("datetime");

                entity.Property(e => e.FurnishedByTypeDescr)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.HoldDate).HasColumnType("datetime");

                entity.Property(e => e.InspCompleteDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Insp_CompleteDate");

                entity.Property(e => e.InspDuedate)
                    .HasColumnType("datetime")
                    .HasColumnName("Insp_Duedate");

                entity.Property(e => e.InspFollowUpDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Insp_FollowUpDate");

                entity.Property(e => e.InspOrderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Insp_OrderDate");

                entity.Property(e => e.InspReportDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Insp_ReportDate");

                entity.Property(e => e.LeaseAmt).HasColumnType("money");

                entity.Property(e => e.LeasePeriodTypeCdId).HasColumnName("LeasePeriodTypeCdID");

                entity.Property(e => e.PaidByTypeCdId).HasColumnName("PaidByTypeCdID");

                entity.Property(e => e.PerDiemAmount).HasColumnType("money");

                entity.Property(e => e.PremiumAmt).HasColumnType("money");

                entity.Property(e => e.PremiumPeriodTypeCdId).HasColumnName("PremiumPeriodTypeCdID");

                entity.Property(e => e.ProcessTypeCdDescr)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.RetainedAmtByAttorney).HasColumnType("money");

                entity.Property(e => e.SurveyNote)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Todate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.Property(e => e.UwfileBusinessPartyId).HasColumnName("UWFileBusinessPartyID");
            });

            modelBuilder.Entity<VDwloadFileService>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadFileService");

                entity.Property(e => e.Dwdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DWDate");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FileServiceId).HasColumnName("FileServiceID");

                entity.Property(e => e.OwnerOfficeId).HasColumnName("OwnerOfficeID");

                entity.Property(e => e.OwnerOfficename)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.ProductionOfficeId).HasColumnName("ProductionOfficeID");

                entity.Property(e => e.ProductionOfficeName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceTypeDescr)
                    .HasMaxLength(70)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDwloadGeographicRegion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadGeographicRegion");

                entity.Property(e => e.CityName)
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.CountyName)
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.GeoRegionId).HasColumnName("GeoRegionID");

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.StateName)
                    .HasMaxLength(65)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDwloadInEscrowDeposit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadInEscrowDeposit");

                entity.Property(e => e.AdjustedTransactionId).HasColumnName("AdjustedTransactionID");

                entity.Property(e => e.AdjustmentDate).HasColumnType("datetime");

                entity.Property(e => e.AdjustmentReasonTypeCdId).HasColumnName("AdjustmentReasonTypeCdID");

                entity.Property(e => e.AdjustmentTypeCdId).HasColumnName("AdjustmentTypeCdID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BankAcctId).HasColumnName("BankAcctID");

                entity.Property(e => e.ClassTypeDescr)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.CreditToTypeCdId).HasColumnName("CreditToTypeCdID");

                entity.Property(e => e.DepositDate).HasColumnType("datetime");

                entity.Property(e => e.DepositTicketNum)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DepositorName)
                    .HasMaxLength(130)
                    .IsUnicode(false);

                entity.Property(e => e.DepositorTypeCdId).HasColumnName("DepositorTypeCdID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.InEscrowId).HasColumnName("InEscrowID");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.PaymentId).HasColumnName("PaymentID");

                entity.Property(e => e.ReceiptNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RepresentingTypeCdId).HasColumnName("RepresentingTypeCdID");

                entity.Property(e => e.SourceTypeCdId).HasColumnName("SourceTypeCdID");

                entity.Property(e => e.StatusTypeCdId).HasColumnName("StatusTypeCdID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");
            });

            modelBuilder.Entity<VDwloadInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadInvoice");

                entity.Property(e => e.BillToEntityRoleTypeCdDescr)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ExportEndDate).HasColumnType("datetime");

                entity.Property(e => e.ExportRequestDate).HasColumnType("datetime");

                entity.Property(e => e.ExportStartDate).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.InvoiceClassTypeDescr)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceId).HasColumnName("invoiceID");

                entity.Property(e => e.InvoiceNum).HasColumnName("invoiceNum");

                entity.Property(e => e.InvoiceStatus)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("invoiceStatus");

                entity.Property(e => e.InvoiceStatusDate)
                    .HasColumnType("datetime")
                    .HasColumnName("invoiceStatusDate");

                entity.Property(e => e.InvoicedByEmployeeId).HasColumnName("invoicedByEmployeeID");

                entity.Property(e => e.OrderId).HasColumnName("OrderID");
            });

            modelBuilder.Entity<VDwloadLastEventLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadLastEventLog");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.EventComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.EventEndDate).HasColumnType("datetime");

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.EventLogComments)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.EventLogId).HasColumnName("EventLogID");

                entity.Property(e => e.EventName)
                    .HasMaxLength(55)
                    .IsUnicode(false);

                entity.Property(e => e.EventSourceId).HasColumnName("EventSourceID");

                entity.Property(e => e.EventStartDate).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.LastEvent)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDwloadLoanInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadLoanInfo");

                entity.Property(e => e.AssignBenMortgageeTextId).HasColumnName("AssignBenMortgageeTextID");

                entity.Property(e => e.BenMortgageeTextId).HasColumnName("BenMortgageeTextID");

                entity.Property(e => e.DiscountPointAdjAmt).HasColumnType("money");

                entity.Property(e => e.DiscountPointPercent).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.FileProcessId).HasColumnName("FileProcessID");

                entity.Property(e => e.FirstPmtDue).HasColumnType("datetime");

                entity.Property(e => e.FundingAmt).HasColumnType("money");

                entity.Property(e => e.FundingDate).HasColumnType("datetime");

                entity.Property(e => e.HazardInsLossPayeeTextId).HasColumnName("HazardInsLossPayeeTextID");

                entity.Property(e => e.InterestFrom).HasColumnType("datetime");

                entity.Property(e => e.InterestPaidThru).HasColumnType("datetime");

                entity.Property(e => e.LateChargeAmt).HasColumnType("money");

                entity.Property(e => e.LateChargePercent).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.LoanAmt).HasColumnType("money");

                entity.Property(e => e.LoanDueDate).HasColumnType("datetime");

                entity.Property(e => e.LoanLiability).HasColumnType("money");

                entity.Property(e => e.LoanTermTypeDescr)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.LoanTypeDescr)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.MortgageBrokerId).HasColumnName("MortgageBrokerID");

                entity.Property(e => e.NameOfInsuredPerson)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NextPmtDue).HasColumnType("datetime");

                entity.Property(e => e.NoteDated).HasColumnType("datetime");

                entity.Property(e => e.OrigNoteAmt).HasColumnType("money");

                entity.Property(e => e.OriginationFeeAdjAmt).HasColumnType("money");

                entity.Property(e => e.OriginationFeePercent).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.PayablePeriodTypeCdId).HasColumnName("PayablePeriodTypeCdID");

                entity.Property(e => e.PmtAmt).HasColumnType("money");

                entity.Property(e => e.PmtTypeDescr)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.RecordDocId).HasColumnName("RecordDocID");

                entity.Property(e => e.RescissionEnd).HasColumnType("datetime");

                entity.Property(e => e.RescissionEndOwflag).HasColumnName("RescissionEndOWFlag");

                entity.Property(e => e.RescissionStart).HasColumnType("datetime");

                entity.Property(e => e.SigningDate).HasColumnType("datetime");

                entity.Property(e => e.TitleInsMortgageeClauseTextId).HasColumnName("TitleInsMortgageeClauseTextID");

                entity.Property(e => e.TrustorMortgagerTextId).HasColumnName("TrustorMortgagerTextID");
            });

            modelBuilder.Entity<VDwloadOutOfEscrowDeposit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadOutOfEscrowDeposit");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.ClassTypeDescr)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.DisbursedAsProceedsAmount).HasColumnType("money");

                entity.Property(e => e.ExcessDepositAmount).HasColumnType("money");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.OutOfEscrowId).HasColumnName("OutOfEscrowID");

                entity.Property(e => e.SourceTypeCdId).HasColumnName("SourceTypeCdID");

                entity.Property(e => e.StatusTypeCdId).HasColumnName("StatusTypeCdID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");
            });

            modelBuilder.Entity<VDwloadPayment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadPayment");

                entity.Property(e => e.Abanum)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ABANum");

                entity.Property(e => e.AccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.AuthorizationNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BankContactName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.BankName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.CardTypeCdId).HasColumnName("CardTypeCdID");

                entity.Property(e => e.CheckNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ClassTypeDescr)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.ConfirmationDate).HasColumnType("datetime");

                entity.Property(e => e.ConfirmationNum)
                    .HasMaxLength(22)
                    .IsUnicode(false);

                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");

                entity.Property(e => e.FederalRoutingNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NameOnCard)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentDate).HasColumnType("datetime");

                entity.Property(e => e.PaymentId).HasColumnName("PaymentID");

                entity.Property(e => e.PaymentMethodTypeCdId).HasColumnName("PaymentMethodTypeCdID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");
            });

            modelBuilder.Entity<VDwloadPolicy>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadPolicy");

                entity.Property(e => e.CommitmentId).HasColumnName("CommitmentID");

                entity.Property(e => e.Descr)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.DocTypeName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Dwdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DWDate");

                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.LoanId).HasColumnName("LoanID");

                entity.Property(e => e.PolicyId).HasColumnName("PolicyID");
            });

            modelBuilder.Entity<VDwloadPolicyPrincipalXref>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadPolicyPrincipalXref");

                entity.Property(e => e.PolicyId).HasColumnName("PolicyID");

                entity.Property(e => e.PrincipalId).HasColumnName("PrincipalID");
            });

            modelBuilder.Entity<VDwloadPropertyCollateral>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadPropertyCollateral");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.Apn)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("APN");

                entity.Property(e => e.City)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CollateralId).HasColumnName("CollateralID");

                entity.Property(e => e.CollateralTypeDescr)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.County)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Dwdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DWDate");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.HolderInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.HolderLocation)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.HolderName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Intermediary)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InvestmentNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InvestmentUnits)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OriginDate).HasColumnType("datetime");

                entity.Property(e => e.Originator)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PropCollateralTextId).HasColumnName("PropCollateralTextID");

                entity.Property(e => e.State)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.StreetAddress)
                    .HasMaxLength(35)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDwloadRealProperty>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadRealProperty");

                entity.Property(e => e.AddtlSectionalDetail)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Block)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Book)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Borough)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Building)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Condominium)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Fee)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FullLegalDescrId).HasColumnName("FullLegalDescrID");

                entity.Property(e => e.GovernmentLotNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Lot)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MapDate).HasColumnType("datetime");

                entity.Property(e => e.MapNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Page)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Parcel)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Parish)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Phase)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyId).HasColumnName("PropertyID");

                entity.Property(e => e.PropertyTypeDescr)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Province)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Range)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Section)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ShortLegalDescrId).HasColumnName("ShortLegalDescrID");

                entity.Property(e => e.SubdivisionName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SubtractName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Township)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TractNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Unit)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDwloadRecordingInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadRecordingInfo");

                entity.Property(e => e.Block)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ClassTypeDescr)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.MapDate).HasColumnType("datetime");

                entity.Property(e => e.MapNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Page)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyId).HasColumnName("PropertyID");

                entity.Property(e => e.RecordingInfoId).HasColumnName("RecordingInfoID");

                entity.Property(e => e.TypeCdDescr)
                    .HasMaxLength(70)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDwloadServiceFile>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadServiceFile");

                entity.Property(e => e.BusinessSourceRoleDescr)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.CancelledDate).HasColumnType("datetime");

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.DirectedByRoleDescr)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.DisbursementDate).HasColumnType("datetime");

                entity.Property(e => e.Dwdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DWDate");

                entity.Property(e => e.EscrowFileNum)
                    .HasMaxLength(62)
                    .IsUnicode(false);

                entity.Property(e => e.EstimatedCloseDate).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FilerContactInfo)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.FilingOffAcctNum)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Note).IsUnicode(false);

                entity.Property(e => e.OpenDate).HasColumnType("datetime");

                entity.Property(e => e.OrderApplSourceId).HasColumnName("OrderApplSourceID");

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.OrderRefNum)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OwnerOfficeId).HasColumnName("OwnerOfficeID");

                entity.Property(e => e.ReturnCopyToInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SalesPriceAmt).HasColumnType("money");

                entity.Property(e => e.SalesPriceLiabilityAmt).HasColumnType("money");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.SettlementDate).HasColumnType("datetime");

                entity.Property(e => e.StatusDescr)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.WorkflowId).HasColumnName("WorkflowID");
            });

            modelBuilder.Entity<VDwloadServiceFileEmployeeFunction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadServiceFileEmployeeFunction");

                entity.Property(e => e.Dwdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DWDate");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FunctionTypeName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.FunctionTypeObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDwloadServiceFileFee>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadServiceFileFee");

                entity.Property(e => e.BuyerChargeAmt).HasColumnType("money");

                entity.Property(e => e.BuyerSalesTaxAmt).HasColumnType("money");

                entity.Property(e => e.DefaultChargeAmt).HasColumnType("money");

                entity.Property(e => e.DiscountAmt).HasColumnType("money");

                entity.Property(e => e.DiscountPercent).HasColumnType("decimal(6, 4)");

                entity.Property(e => e.Dwdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DWDate");

                entity.Property(e => e.FeeDescr)
                    .HasMaxLength(201)
                    .IsUnicode(false);

                entity.Property(e => e.FeeTypeName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.FileFeeCategoryName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.GeographicTypeName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.GlDescr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GL_Descr");

                entity.Property(e => e.LedgerNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PolicyId).HasColumnName("PolicyID");

                entity.Property(e => e.SellerChargeAmt).HasColumnType("money");

                entity.Property(e => e.SellerSalesTaxAmt).HasColumnType("money");

                entity.Property(e => e.ServiceFileFeeId).HasColumnName("ServiceFileFeeID");
            });

            modelBuilder.Entity<VDwloadServiceFileLoan>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadServiceFileLoan");

                entity.Property(e => e.Dwdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DWDate");

                entity.Property(e => e.LenderId).HasColumnName("LenderID");

                entity.Property(e => e.LenderRefNum)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LiabilityAmt).HasColumnType("money");

                entity.Property(e => e.LoanAmt).HasColumnType("money");

                entity.Property(e => e.LoanId).HasColumnName("LoanID");

                entity.Property(e => e.LoanTypeName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.MortgageBrokerRefNum)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReferenceName)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDwloadServiceFileProductType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadServiceFileProductType");

                entity.Property(e => e.Dwdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DWDate");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.ProductTypeName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.ProductTypeObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDwloadServiceFilePropertyInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadServiceFilePropertyInfo");

                entity.Property(e => e.CityOfProperty)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.County)
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.Dwdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DWDate");

                entity.Property(e => e.Fee)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FullLegalDescrId).HasColumnName("FullLegalDescrID");

                entity.Property(e => e.MiscTaxNum)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyAddress1)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyAddress2)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyName)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyTypeName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.ShortLegalDescrId).HasColumnName("ShortLegalDescrID");

                entity.Property(e => e.State)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SupplementalTaxNum)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TaxExemptionAmt).HasColumnType("money");

                entity.Property(e => e.TaxExemptionTypeDescr)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.TaxNum)
                    .HasMaxLength(45)
                    .IsUnicode(false);

                entity.Property(e => e.TaxRateAreaNum)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TaxTypeDescr)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.TaxYr)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ZipCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDwloadServiceFileTransType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadServiceFileTransType");

                entity.Property(e => e.Dwdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DWDate");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.TransTypeObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionTypeName)
                    .HasMaxLength(70)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDwloadTextDatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadTextData");

                entity.Property(e => e.TextData).IsUnicode(false);

                entity.Property(e => e.TextId).HasColumnName("TextID");
            });

            modelBuilder.Entity<VDwloadTime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadTime");

                entity.Property(e => e.Dwdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DWDate");
            });

            modelBuilder.Entity<VDwloadTypeCdDmt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadTypeCdDmt");

                entity.Property(e => e.Descr)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TypeCdId).HasColumnName("TypeCdID");
            });

            modelBuilder.Entity<VDwloadUserSecurity>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadUserSecurity");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            });

            modelBuilder.Entity<VDwloadWireDisbursement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWLoadWireDisbursement");

                entity.Property(e => e.BeneficiaryAccountNum)
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryAdditionalInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryAdviceInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OriginatorInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OriginatorName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ReceivingBankAbanum)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ReceivingBankABANum");

                entity.Property(e => e.ReceivingBankAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ReceivingBankName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.WireDisbursementDetailId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("WireDisbursementDetailID");
            });

            modelBuilder.Entity<VDwtextId>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDWTextID");

                entity.Property(e => e.TextId).HasColumnName("TextID");
            });

            modelBuilder.Entity<VSmstranslogTbl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vSMSTranslogTbl");

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.RecordClassTypeId).HasColumnName("RecordClassTypeID");

                entity.Property(e => e.RecordRowId).HasColumnName("RecordRowID");

                entity.Property(e => e.SmstranslogId).HasColumnName("SMSTranslogID");

                entity.Property(e => e.TableName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<VTextIdFileIdOnDocPhraseDocPhraseElement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vTextID_FileID_On_DocPhrase_DocPhraseElement");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FkId)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("FK_ID");

                entity.Property(e => e.ReferencingTb)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("referencing_tb");

                entity.Property(e => e.ReferencingTbShort)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("referencing_tb_short");

                entity.Property(e => e.TextId).HasColumnName("TextID");
            });

            modelBuilder.Entity<VTextIdFileIdOnDocPhraseDocPhraseElementDirectly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vTextID_FileID_On_DocPhrase_DocPhraseElement_Directly");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FkId)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("FK_ID");

                entity.Property(e => e.ReferencingTb)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("referencing_tb");

                entity.Property(e => e.ReferencingTbShort)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("referencing_tb_short");

                entity.Property(e => e.TextId).HasColumnName("TextID");
            });

            modelBuilder.Entity<VTextIdreferencedInTable>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vTextIDReferencedInTables");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FkId)
                    .HasMaxLength(29)
                    .IsUnicode(false)
                    .HasColumnName("FK_ID");

                entity.Property(e => e.ReferencingTb)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("referencing_tb");

                entity.Property(e => e.TextId).HasColumnName("TextID");
            });

            modelBuilder.Entity<VWaddrBookEntryGlobalSearchIngrian>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vWAddrBookEntryGlobalSearch_Ingrian");

                entity.Property(e => e.AddrBookEntryId).HasColumnName("AddrBookEntryID");

                entity.Property(e => e.Aka)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("AKA");

                entity.Property(e => e.BirthDate).HasColumnType("datetime");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.DeactivationDate).HasColumnType("datetime");

                entity.Property(e => e.Descr)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Name1)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Name2)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Occupation)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ReactivationDate).HasColumnType("datetime");

                entity.Property(e => e.RefNumber)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Salutation)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Ssn)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("SSN");

                entity.Property(e => e.Ssn2)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("SSN_2");

                entity.Property(e => e.StatusChgComments)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.StatusChgDate).HasColumnType("datetime");

                entity.Property(e => e.StatusChgEmployeeId).HasColumnName("StatusChgEmployeeID");

                entity.Property(e => e.Suffix)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TaxIdnum)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("TaxIDNum");

                entity.Property(e => e.TaxIdnum2)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("TaxIDNum_2");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<VWaddrBookEntryGlobalSearchIngrianSsnDecrypt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vWAddrBookEntryGlobalSearch_Ingrian_SSN_Decrypt");

                entity.Property(e => e.AddrBookEntryId).HasColumnName("AddrBookEntryID");

                entity.Property(e => e.Ssn2)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("SSN_2");
            });

            modelBuilder.Entity<VWaddrBookEntryGlobalSearchIngrianTinDecrypt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vWAddrBookEntryGlobalSearch_Ingrian_TIN_Decrypt");

                entity.Property(e => e.AddrBookEntryId).HasColumnName("AddrBookEntryID");

                entity.Property(e => e.TaxIdnum2)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("TaxIDNum_2");
            });

            modelBuilder.Entity<VWaddrBookEntryIngrian>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vWAddrBookEntry_Ingrian");

                entity.Property(e => e.AddrBookEntryId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AddrBookEntryID");

                entity.Property(e => e.Aka)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("AKA");

                entity.Property(e => e.BirthDate).HasColumnType("datetime");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.DeactivationDate).HasColumnType("datetime");

                entity.Property(e => e.Descr)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Name1)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Name2)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Occupation)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ReactivationDate).HasColumnType("datetime");

                entity.Property(e => e.RefNumber)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Salutation)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Ssn)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("SSN");

                entity.Property(e => e.Ssn2)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("SSN_2");

                entity.Property(e => e.StatusChgComments)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.StatusChgDate).HasColumnType("datetime");

                entity.Property(e => e.StatusChgEmployeeId).HasColumnName("StatusChgEmployeeID");

                entity.Property(e => e.Suffix)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TaxIdnum)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("TaxIDNum");

                entity.Property(e => e.TaxIdnum2)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("TaxIDNum_2");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<VWaddrBookEntryIngrianSsnDecrypt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vWAddrBookEntry_Ingrian_SSN_Decrypt");

                entity.Property(e => e.AddrBookEntryId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AddrBookEntryID");

                entity.Property(e => e.Ssn2)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("SSN_2");
            });

            modelBuilder.Entity<VWaddrBookEntryIngrianTinDecrypt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vWAddrBookEntry_Ingrian_TIN_Decrypt");

                entity.Property(e => e.AddrBookEntryId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AddrBookEntryID");

                entity.Property(e => e.TaxIdnum2)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("TaxIDNum_2");
            });

            modelBuilder.Entity<VWbusOrgWireInstructionIngrian>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vWBusOrgWireInstruction_Ingrian");

                entity.Property(e => e.Abanum)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("ABANum");

                entity.Property(e => e.AcctNum)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.AcctNum2)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("AcctNum_2");

                entity.Property(e => e.BankAddr)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.BankName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.BranchTransitNum)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Ficode)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("FICode");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.WireInstId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VWbusOrgWireInstructionIngrianDecrypt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vWBusOrgWireInstruction_Ingrian_Decrypt");

                entity.Property(e => e.AcctNum2)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("AcctNum_2");

                entity.Property(e => e.WireInstId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VWpaymentIngrian>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vWPayment_Ingrian");

                entity.Property(e => e.Abanum)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("ABANum");

                entity.Property(e => e.AccountNum)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNum2)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("AccountNum_2");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.AuthorizationNum)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.BankContactName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.BankName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.CardTypeCdId).HasColumnName("CardTypeCdID");

                entity.Property(e => e.CheckNum)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.ConfirmationDate).HasColumnType("datetime");

                entity.Property(e => e.ConfirmationNum)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");

                entity.Property(e => e.FederalRoutingNum)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.NameOnCard)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentDate).HasColumnType("datetime");

                entity.Property(e => e.PaymentId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PaymentID");

                entity.Property(e => e.PaymentMethodTypeCdId).HasColumnName("PaymentMethodTypeCdID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<VWpaymentIngrianDecrypt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vWPayment_Ingrian_Decrypt");

                entity.Property(e => e.AccountNum2)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("AccountNum_2");

                entity.Property(e => e.PaymentId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PaymentID");
            });

            modelBuilder.Entity<VWwireDisbursementDetailIngrian>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vWWireDisbursementDetail_Ingrian");

                entity.Property(e => e.BeneficiaryAccountNum)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryAccountNum2)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("BeneficiaryAccountNum_2");

                entity.Property(e => e.BeneficiaryAdditionalInfo)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryAddress)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryAdviceInfo)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryNote1)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryNote2)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryNote3)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryNote4)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Estatus)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("EStatus");

                entity.Property(e => e.EventLogId).HasColumnName("EventLogID");

                entity.Property(e => e.Istatus).HasColumnName("IStatus");

                entity.Property(e => e.OriginatorInfo)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.OriginatorName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ReceivingBankAbanum)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("ReceivingBankABANum");

                entity.Property(e => e.ReceivingBankAddress)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ReceivingBankBranchTransitNumber)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ReceivingBankFicode)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("ReceivingBankFICode");

                entity.Property(e => e.ReceivingBankName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.TrnfedId)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("TRNfedId");

                entity.Property(e => e.WireDisbursementDetailId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("WireDisbursementDetailID");

                entity.Property(e => e.WireTransmittalDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<VWwireDisbursementDetailIngrianDecrypt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vWWireDisbursementDetail_Ingrian_Decrypt");

                entity.Property(e => e.BeneficiaryAccountNum2)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("BeneficiaryAccountNum_2");

                entity.Property(e => e.WireDisbursementDetailId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("WireDisbursementDetailID");
            });

            modelBuilder.Entity<VdwLoadFileContactName>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vdwLoadFileContactName");

                entity.Property(e => e.BusOrgId).HasColumnName("BusOrgID");

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.ContactName)
                    .HasMaxLength(42)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VendorInfo>(entity =>
            {
                entity.HasKey(e => e.VendorId);

                entity.ToTable("VendorInfo");

                entity.HasIndex(e => e.EmployeeId, "VendorInfo_ncx_EmployeeId")
                    .HasFillFactor(90);

                entity.Property(e => e.VendorId).HasColumnName("VendorID");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.VendorAcctNum)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.VendorPassword)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.VendorTypeCdId).HasColumnName("VendorTypeCdID");

                entity.Property(e => e.VendorUserName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.VendorInfos)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VendorInfo_Employee");

                entity.HasOne(d => d.VendorTypeCd)
                    .WithMany(p => p.VendorInfos)
                    .HasForeignKey(d => d.VendorTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VendorInfo_TypeCdDmt");
            });

            modelBuilder.Entity<VendorProblemLog>(entity =>
            {
                entity.HasKey(e => e.ProblemLogId)
                    .HasName("PK__VendorPr__766E8037613668E1");

                entity.ToTable("VendorProblemLog");

                entity.Property(e => e.ProblemLogId).HasColumnName("ProblemLogID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.Property(e => e.Descr)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Updts)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UPDTS");
            });

            modelBuilder.Entity<VwBankAccountIngrian>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwBankAccount_Ingrian");

                entity.Property(e => e.AccountDescr)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNum)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNum2)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNum21)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("AccountNum_2");

                entity.Property(e => e.AccountNum22)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("AccountNum2_2");

                entity.Property(e => e.BankAcctId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BankAcctID");

                entity.Property(e => e.BankId).HasColumnName("BankID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.DeactivationDate).HasColumnType("datetime");

                entity.Property(e => e.FormattedAcctNum)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.FormattedAcctNum2)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("FormattedAcctNum_2");

                entity.Property(e => e.ReactivationDate).HasColumnType("datetime");

                entity.Property(e => e.Signature1)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Signature2)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.SignatureText)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.SignatureText2)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.StatusChgComments)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.StatusUpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.StatusUpdatedEmployeeId).HasColumnName("StatusUpdatedEmployeeID");

                entity.Property(e => e.TwoSignatureReqAmt).HasColumnType("money");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");
            });

            modelBuilder.Entity<VwBankAccountIngrianAccountNum2Decrypt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwBankAccount_Ingrian_AccountNum2_Decrypt");

                entity.Property(e => e.AccountNum2)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.BankAcctId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BankAcctID");
            });

            modelBuilder.Entity<VwBankAccountIngrianAccountNumDecrypt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwBankAccount_Ingrian_AccountNum_Decrypt");

                entity.Property(e => e.AccountNum)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.BankAcctId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BankAcctID");
            });

            modelBuilder.Entity<VwBankAccountIngrianFormattedAcctNumDecrypt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwBankAccount_Ingrian_FormattedAcctNum_Decrypt");

                entity.Property(e => e.BankAcctId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BankAcctID");

                entity.Property(e => e.FormattedAcctNum)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwBusinessUnitIngrian>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_BusinessUnit_Ingrian");

                entity.Property(e => e.AccountingFtpIp)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.AddrBookEntryId).HasColumnName("AddrBookEntryID");

                entity.Property(e => e.BusinessUnitId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BusinessUnitID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.ClientIpaddress)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ClientIPAddress");

                entity.Property(e => e.ClientNetworkDomain)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.Property(e => e.DeactivationDate).HasColumnType("datetime");

                entity.Property(e => e.DisplayInQfeflag).HasColumnName("DisplayInQFEFlag");

                entity.Property(e => e.Division)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EscrowProdOfficeId).HasColumnName("EscrowProdOfficeID");

                entity.Property(e => e.FastStatCode)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.FispayoffDemandFlag).HasColumnName("FISPayoffDemandFlag");

                entity.Property(e => e.GlclientCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("GLClientCode");

                entity.Property(e => e.GldivisionCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("GLDivisionCode");

                entity.Property(e => e.LineOfBus)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LogoFileName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.LogoFileName2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LogoFileName3)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.NpsproductionOfficeFlag).HasColumnName("NPSProductionOfficeFlag");

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.OverDraftAmt).HasColumnType("money");

                entity.Property(e => e.OverDraftPwd)
                    .HasMaxLength(96)
                    .IsUnicode(false);

                entity.Property(e => e.OverDraftPwd2)
                    .HasMaxLength(96)
                    .IsUnicode(false)
                    .HasColumnName("OverDraftPwd_2");

                entity.Property(e => e.Password)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Pdcflag).HasColumnName("PDCFlag");

                entity.Property(e => e.ProdSystemTypeCdId).HasColumnName("ProdSystemTypeCdID");

                entity.Property(e => e.ReactivationDate).HasColumnType("datetime");

                entity.Property(e => e.RecFeeTemplateBusinessPartyId).HasColumnName("RecFeeTemplateBusinessPartyID");

                entity.Property(e => e.RecipientId)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("RecipientID");

                entity.Property(e => e.RecipientType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RemoteDirectory)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ReportingOffTypeCdId).HasColumnName("ReportingOffTypeCdID");

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.Property(e => e.Sms1099sActivityDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SMS1099sActivityDate");

                entity.Property(e => e.StatusChgComments)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.StatusChgDate).HasColumnType("datetime");

                entity.Property(e => e.StatusChgUserId).HasColumnName("StatusChgUserID");

                entity.Property(e => e.SuperBusinessUnitId).HasColumnName("SuperBusinessUnitID");

                entity.Property(e => e.SystemDocumentLogoFile)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TitleProdOfficeId).HasColumnName("TitleProdOfficeID");

                entity.Property(e => e.TransferTaxesTemplateBusinessPartyId).HasColumnName("TransferTaxesTemplateBusinessPartyID");

                entity.Property(e => e.TrustNetOfficePrefix)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.TrustNetRegionCd)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UserName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwBusinessUnitIngrianDecrypt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_BusinessUnit_Ingrian_Decrypt");

                entity.Property(e => e.BusinessUnitId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BusinessUnitID");

                entity.Property(e => e.OverDraftPwd2)
                    .HasMaxLength(96)
                    .IsUnicode(false)
                    .HasColumnName("OverDraftPwd_2");
            });

            modelBuilder.Entity<VwChargeAllocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwChargeAllocation");

                entity.Property(e => e.IsBcdollarAllocated).HasColumnName("IsBCDollarAllocated");

                entity.Property(e => e.IsBcrdollarAllocated).HasColumnName("IsBCRDollarAllocated");

                entity.Property(e => e.IsFcdollarAllocated).HasColumnName("IsFCDollarAllocated");

                entity.Property(e => e.IsScdollarAllocated).HasColumnName("IsSCDollarAllocated");

                entity.Property(e => e.IsScrdollarAllocated).HasColumnName("IsSCRDollarAllocated");

                entity.Property(e => e.IsSfallocated).HasColumnName("IsSFAllocated");

                entity.Property(e => e.PfchargeId).HasColumnName("PFChargeID");
            });

            modelBuilder.Entity<VwCopyDocInsertPhraseRequest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_CopyDocInsertPhraseRequest");

                entity.Property(e => e.CopyDocsRequestId).HasColumnName("CopyDocsRequestID");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.DocPhraseId).HasColumnName("DocPhraseID");

                entity.Property(e => e.PhraseId).HasColumnName("PhraseID");

                entity.Property(e => e.SourceFileId).HasColumnName("SourceFileID");
            });

            modelBuilder.Entity<VwCopyDocRequestDoc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_CopyDocRequestDocs");

                entity.Property(e => e.CopyDocsRequestId).HasColumnName("CopyDocsRequestID");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.SourceFileId).HasColumnName("SourceFileID");
            });

            modelBuilder.Entity<VwCpCreateDisbursementAdjRecord>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_cpCreateDisbursementAdjRecord");

                entity.Property(e => e.AccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.AdjustmentReasonTypeCdId).HasColumnName("AdjustmentReasonTypeCdID");

                entity.Property(e => e.AdjustmentTypeCdId).HasColumnName("AdjustmentTypeCdID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CorrAccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.CorrAmount).HasColumnType("money");

                entity.Property(e => e.CorrClassTypeId).HasColumnName("CorrClassTypeID");

                entity.Property(e => e.CorrComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CorrDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CorrDisbId).HasColumnName("CorrDisbID");

                entity.Property(e => e.CorrDocumentNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CorrIssueDate).HasColumnType("datetime");

                entity.Property(e => e.CorrName1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CorrSmsbankCd)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CorrSMSBankCd");

                entity.Property(e => e.CorrectingTransactionId).HasColumnName("CorrectingTransactionID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DisbursementMethodTypeCdId).HasColumnName("DisbursementMethodTypeCdID");

                entity.Property(e => e.DocumentNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PayeeName)
                    .HasMaxLength(430)
                    .IsUnicode(false);

                entity.Property(e => e.RecordClassTypeId).HasColumnName("RecordClassTypeID");

                entity.Property(e => e.RecordRowId).HasColumnName("RecordRowID");

                entity.Property(e => e.SmsbankCd)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SMSBankCd");

                entity.Property(e => e.SmstranslogId).HasColumnName("SMSTranslogID");

                entity.Property(e => e.StatusTypeCdId).HasColumnName("StatusTypeCdID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCpCreateDisbursementRecord>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_cpCreateDisbursementRecord");

                entity.Property(e => e.AccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.AdjustmentReasonTypeCdId).HasColumnName("AdjustmentReasonTypeCdID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.CheckType)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DisbursementMethodTypeCdId).HasColumnName("DisbursementMethodTypeCdID");

                entity.Property(e => e.DocumentNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.ManualCheckFlag)
                    .HasMaxLength(17)
                    .IsUnicode(false);

                entity.Property(e => e.ManualCheckReason)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Name1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PayeeAddr)
                    .HasMaxLength(93)
                    .IsUnicode(false);

                entity.Property(e => e.PayeeName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.PayeeName1)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PayeeName2)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PayeeName3)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PayeeName4)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RecordClassTypeId).HasColumnName("RecordClassTypeID");

                entity.Property(e => e.RecordRowId).HasColumnName("RecordRowID");

                entity.Property(e => e.RoutingNum)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.SmsbankCd)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SMSBankCd");

                entity.Property(e => e.SmstranslogId).HasColumnName("SMSTranslogID");

                entity.Property(e => e.SourceTypeCdId).HasColumnName("SourceTypeCdID");

                entity.Property(e => e.StatusTypeCdId).HasColumnName("StatusTypeCdID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCpCreateDisbursementRepostRecord>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_cpCreateDisbursementRepostRecord");

                entity.Property(e => e.AccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.AdjIssueDate).HasColumnType("datetime");

                entity.Property(e => e.AdjustedTransactionId).HasColumnName("AdjustedTransactionID");

                entity.Property(e => e.AdjustmentTypeCdId).HasColumnName("AdjustmentTypeCdID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BankName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CorrectingTransactionId).HasColumnName("CorrectingTransactionID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DisbursementMethodTypeCdId).HasColumnName("DisbursementMethodTypeCdID");

                entity.Property(e => e.Disbursementid).HasColumnName("disbursementid");

                entity.Property(e => e.DocumentNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.RecordClassTypeId).HasColumnName("RecordClassTypeID");

                entity.Property(e => e.RecordRowId).HasColumnName("RecordRowID");

                entity.Property(e => e.SmsbankCd)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SMSBankCd");

                entity.Property(e => e.SmstranslogId).HasColumnName("SMSTranslogID");

                entity.Property(e => e.SourceTypeCdId).HasColumnName("SourceTypeCdID");

                entity.Property(e => e.StatusTypeCdId).HasColumnName("StatusTypeCdID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCpCreateFeeTransferDisbursementAdjRecord>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_cpCreateFeeTransferDisbursementAdjRecord");

                entity.Property(e => e.AccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.AdjustedTransactionId).HasColumnName("AdjustedTransactionID");

                entity.Property(e => e.AdjustmentReasonTypeCdId).HasColumnName("AdjustmentReasonTypeCdID");

                entity.Property(e => e.AdjustmentTypeCdId).HasColumnName("AdjustmentTypeCdID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CorrectingTransactionId).HasColumnName("CorrectingTransactionID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DisbursementMethodTypeCdId).HasColumnName("DisbursementMethodTypeCdID");

                entity.Property(e => e.DocumentNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PayeeName)
                    .HasMaxLength(430)
                    .IsUnicode(false);

                entity.Property(e => e.RecordClassTypeId).HasColumnName("RecordClassTypeID");

                entity.Property(e => e.RecordRowId).HasColumnName("RecordRowID");

                entity.Property(e => e.SmsbankCd)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SMSBankCd");

                entity.Property(e => e.SmstranslogId).HasColumnName("SMSTranslogID");

                entity.Property(e => e.StatusTypeCdId).HasColumnName("StatusTypeCdID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCpCreateFeeTransferDisbursementAdjRecordForR>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_cpCreateFeeTransferDisbursementAdjRecord_For_r");

                entity.Property(e => e.AccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.AdjustedTransactionId).HasColumnName("AdjustedTransactionID");

                entity.Property(e => e.AdjustmentReasonTypeCdId).HasColumnName("AdjustmentReasonTypeCdID");

                entity.Property(e => e.AdjustmentTypeCdId).HasColumnName("AdjustmentTypeCdID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.CorrectingTransactionId).HasColumnName("CorrectingTransactionID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DisbursementId).HasColumnName("DisbursementID");

                entity.Property(e => e.DisbursementMethodTypeCdId).HasColumnName("DisbursementMethodTypeCdID");

                entity.Property(e => e.DocumentNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PhysicalAddrId).HasColumnName("PhysicalAddrID");

                entity.Property(e => e.RecordClassTypeId).HasColumnName("RecordClassTypeID");

                entity.Property(e => e.RecordRowId).HasColumnName("RecordRowID");

                entity.Property(e => e.SmsbankCd)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SMSBankCd");

                entity.Property(e => e.StatusTypeCdId).HasColumnName("StatusTypeCdID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCpCreateFeeTransferDisbursementAdjRecordForZ>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_cpCreateFeeTransferDisbursementAdjRecord_For_z");

                entity.Property(e => e.AccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.AdjustedTransactionId).HasColumnName("AdjustedTransactionID");

                entity.Property(e => e.AdjustmentReasonTypeCdId).HasColumnName("AdjustmentReasonTypeCdID");

                entity.Property(e => e.AdjustmentTypeCdId).HasColumnName("AdjustmentTypeCdID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.CorrectingTransactionId).HasColumnName("CorrectingTransactionID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DisbursementId).HasColumnName("DisbursementID");

                entity.Property(e => e.DisbursementMethodTypeCdId).HasColumnName("DisbursementMethodTypeCdID");

                entity.Property(e => e.DocumentNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RecordClassTypeId).HasColumnName("RecordClassTypeID");

                entity.Property(e => e.RecordRowId).HasColumnName("RecordRowID");

                entity.Property(e => e.SmsbankCd)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SMSBankCd");

                entity.Property(e => e.StatusTypeCdId).HasColumnName("StatusTypeCdID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCpCreateFeeTransferDisbursementRecord>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_cpCreateFeeTransferDisbursementRecord");

                entity.Property(e => e.AccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.AdjustedTransactionId).HasColumnName("AdjustedTransactionID");

                entity.Property(e => e.AdjustmentReasonTypeCdId).HasColumnName("AdjustmentReasonTypeCdID");

                entity.Property(e => e.AdjustmentTypeCdId).HasColumnName("AdjustmentTypeCdID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.CorrectingTransactionId).HasColumnName("CorrectingTransactionID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DisbursementMethodTypeCdId).HasColumnName("DisbursementMethodTypeCdID");

                entity.Property(e => e.Disbursementid).HasColumnName("disbursementid");

                entity.Property(e => e.DocumentNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PayeeName)
                    .HasMaxLength(430)
                    .IsUnicode(false);

                entity.Property(e => e.RecordClassTypeId).HasColumnName("RecordClassTypeID");

                entity.Property(e => e.RecordRowId).HasColumnName("RecordRowID");

                entity.Property(e => e.RoutingNum)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.SmsbankCd)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SMSBankCd");

                entity.Property(e => e.SmstranslogId).HasColumnName("SMSTranslogID");

                entity.Property(e => e.SourceTypeCdId).HasColumnName("SourceTypeCdID");

                entity.Property(e => e.StatusTypeCdId).HasColumnName("StatusTypeCdID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCpCreateFeeTransferDisbursementRecordForR>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_cpCreateFeeTransferDisbursementRecord_For_R");

                entity.Property(e => e.AccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.AdjustmentReasonTypeCdId).HasColumnName("AdjustmentReasonTypeCdID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DisbursementId).HasColumnName("DisbursementID");

                entity.Property(e => e.DisbursementMethodTypeCdId).HasColumnName("DisbursementMethodTypeCdID");

                entity.Property(e => e.DocumentNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PayeeName)
                    .HasMaxLength(430)
                    .IsUnicode(false);

                entity.Property(e => e.PhysicalAddrId).HasColumnName("PhysicalAddrID");

                entity.Property(e => e.RecordClassTypeId).HasColumnName("RecordClassTypeID");

                entity.Property(e => e.RecordRowId).HasColumnName("RecordRowID");

                entity.Property(e => e.SmsbankCd)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SMSBankCd");

                entity.Property(e => e.SourceTypeCdId).HasColumnName("SourceTypeCdID");

                entity.Property(e => e.StatusTypeCdId).HasColumnName("StatusTypeCdID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCpCreateFeeTransferDisbursementRecordForZ>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_cpCreateFeeTransferDisbursementRecord_For_Z");

                entity.Property(e => e.AccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.AdjustmentReasonTypeCdId).HasColumnName("AdjustmentReasonTypeCdID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DisbursementId).HasColumnName("DisbursementID");

                entity.Property(e => e.DisbursementMethodTypeCdId).HasColumnName("DisbursementMethodTypeCdID");

                entity.Property(e => e.DocumentNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PayeeName)
                    .HasMaxLength(430)
                    .IsUnicode(false);

                entity.Property(e => e.RecordClassTypeId).HasColumnName("RecordClassTypeID");

                entity.Property(e => e.RecordRowId).HasColumnName("RecordRowID");

                entity.Property(e => e.SmsbankCd)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SMSBankCd");

                entity.Property(e => e.SourceTypeCdId).HasColumnName("SourceTypeCdID");

                entity.Property(e => e.StatusTypeCdId).HasColumnName("StatusTypeCdID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCpCreateFeeTransferDisbursementRepostRecord>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_cpCreateFeeTransferDisbursementRepostRecord");

                entity.Property(e => e.AccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.AdjAmount).HasColumnType("money");

                entity.Property(e => e.AdjBusinessunitId).HasColumnName("AdjBusinessunitID");

                entity.Property(e => e.AdjDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AdjDocumentNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AdjIssueDate).HasColumnType("datetime");

                entity.Property(e => e.AdjustedTransactionId).HasColumnName("AdjustedTransactionID");

                entity.Property(e => e.AdjustmentReasonTypeCdId).HasColumnName("AdjustmentReasonTypeCdID");

                entity.Property(e => e.AdjustmentTypeCdId).HasColumnName("AdjustmentTypeCdID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.CorrectingTransactionId).HasColumnName("CorrectingTransactionID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DisbursementMethodTypeCdId).HasColumnName("DisbursementMethodTypeCdID");

                entity.Property(e => e.Disbursementid).HasColumnName("disbursementid");

                entity.Property(e => e.DocumentNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.Feeid).HasColumnName("feeid");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PayeeName)
                    .HasMaxLength(430)
                    .IsUnicode(false);

                entity.Property(e => e.RecordClassTypeId).HasColumnName("RecordClassTypeID");

                entity.Property(e => e.RecordRowId).HasColumnName("RecordRowID");

                entity.Property(e => e.RegionBuid).HasColumnName("RegionBUID");

                entity.Property(e => e.SmsbankCd)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SMSBankCd");

                entity.Property(e => e.SmstranslogId).HasColumnName("SMSTranslogID");

                entity.Property(e => e.SourceTypeCdId).HasColumnName("SourceTypeCdID");

                entity.Property(e => e.StatusTypeCdId).HasColumnName("StatusTypeCdID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCpCreateFeeTransferDisbursementRepostRecordForR>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_cpCreateFeeTransferDisbursementRepostRecord_For_r");

                entity.Property(e => e.AccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.AdjAmount).HasColumnType("money");

                entity.Property(e => e.AdjDisbursementId).HasColumnName("AdjDisbursementID");

                entity.Property(e => e.AdjDocumentNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AdjustedTransactionId).HasColumnName("AdjustedTransactionID");

                entity.Property(e => e.AdjustmentReasonTypeCdId).HasColumnName("AdjustmentReasonTypeCdID");

                entity.Property(e => e.AdjustmentTypeCdId).HasColumnName("AdjustmentTypeCdID");

                entity.Property(e => e.CorrectingTransactionId).HasColumnName("CorrectingTransactionID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DisbursementId).HasColumnName("DisbursementID");

                entity.Property(e => e.DisbursementMethodTypeCdId).HasColumnName("DisbursementMethodTypeCdID");

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PhysicalAddrId).HasColumnName("PhysicalAddrID");

                entity.Property(e => e.RecordClassTypeId).HasColumnName("RecordClassTypeID");

                entity.Property(e => e.RecordRowId).HasColumnName("RecordRowID");

                entity.Property(e => e.SmsbankCd)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SMSBankCd");

                entity.Property(e => e.SourceTypeCdId).HasColumnName("SourceTypeCdID");

                entity.Property(e => e.StatusTypeCdId).HasColumnName("StatusTypeCdID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCpCreateFeeTransferDisbursementRepostRecordForZ>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_cpCreateFeeTransferDisbursementRepostRecord_For_z");

                entity.Property(e => e.AccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.AdjAmount).HasColumnType("money");

                entity.Property(e => e.AdjDisbursementId).HasColumnName("AdjDisbursementID");

                entity.Property(e => e.AdjDocumentNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AdjustedTransactionId).HasColumnName("AdjustedTransactionID");

                entity.Property(e => e.AdjustmentReasonTypeCdId).HasColumnName("AdjustmentReasonTypeCdID");

                entity.Property(e => e.AdjustmentTypeCdId).HasColumnName("AdjustmentTypeCdID");

                entity.Property(e => e.CorrectingTransactionId).HasColumnName("CorrectingTransactionID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DisbursementId).HasColumnName("DisbursementID");

                entity.Property(e => e.DisbursementMethodTypeCdId).HasColumnName("DisbursementMethodTypeCdID");

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RecordClassTypeId).HasColumnName("RecordClassTypeID");

                entity.Property(e => e.RecordRowId).HasColumnName("RecordRowID");

                entity.Property(e => e.SmsbankCd)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SMSBankCd");

                entity.Property(e => e.SourceTypeCdId).HasColumnName("SourceTypeCdID");

                entity.Property(e => e.StatusTypeCdId).HasColumnName("StatusTypeCdID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCpCreateMemoAdjRecordDisb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_cpCreateMemoAdjRecord_Disb");

                entity.Property(e => e.AccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.AdjaccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("ADJAccountNum");

                entity.Property(e => e.Adjname1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADJName1");

                entity.Property(e => e.AdjsmsbankCd)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("ADJSMSBankCd");

                entity.Property(e => e.AdjustedTransactionId).HasColumnName("AdjustedTransactionID");

                entity.Property(e => e.AdjustmentReasonTypeCdId).HasColumnName("AdjustmentReasonTypeCdID");

                entity.Property(e => e.AdjustmentTypeCdId).HasColumnName("AdjustmentTypeCdID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.DisbursementId).HasColumnName("DisbursementID");

                entity.Property(e => e.DisbursementMethodTypeCdId).HasColumnName("DisbursementMethodTypeCdID");

                entity.Property(e => e.DocumentNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RecordClassTypeId).HasColumnName("RecordClassTypeID");

                entity.Property(e => e.RecordRowId).HasColumnName("RecordRowID");

                entity.Property(e => e.SmsbankCd)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SMSBankCd");

                entity.Property(e => e.SmstranslogId).HasColumnName("SMSTranslogID");

                entity.Property(e => e.StatusTypeCdId).HasColumnName("StatusTypeCdID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCpCreateMemoRecord>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_cpCreateMemoRecord");

                entity.Property(e => e.ActualReleaseDate).HasColumnType("datetime");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Fpcount).HasColumnName("FPCount");

                entity.Property(e => e.HoldDate).HasColumnType("datetime");

                entity.Property(e => e.RecordClassTypeId).HasColumnName("RecordClassTypeID");

                entity.Property(e => e.RecordRowId).HasColumnName("RecordRowID");

                entity.Property(e => e.SmstranslogId).HasColumnName("SMSTranslogID");

                entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCpCreateWireTransferRecord>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_cpCreateWireTransferRecord");

                entity.Property(e => e.AccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.AdjustedTransactionId).HasColumnName("AdjustedTransactionID");

                entity.Property(e => e.AdjustmentReasonTypeCdId).HasColumnName("AdjustmentReasonTypeCdID");

                entity.Property(e => e.AdjustmentTypeCdId).HasColumnName("AdjustmentTypeCdID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.CorrectingTransactionId).HasColumnName("CorrectingTransactionID");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Description2)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DisbursementMethodTypeCdId).HasColumnName("DisbursementMethodTypeCdID");

                entity.Property(e => e.Disbursementid).HasColumnName("disbursementid");

                entity.Property(e => e.DocumentNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IbabankAccNum)
                    .HasMaxLength(130)
                    .IsUnicode(false)
                    .HasColumnName("IBABankAccNum");

                entity.Property(e => e.IbabankName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("IBABankName");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PayeeName)
                    .HasMaxLength(430)
                    .IsUnicode(false);

                entity.Property(e => e.RecordClassTypeId).HasColumnName("RecordClassTypeID");

                entity.Property(e => e.RecordRowId).HasColumnName("RecordRowID");

                entity.Property(e => e.RoutingNum)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.SmsbankCd)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SMSBankCd");

                entity.Property(e => e.SmstranslogId).HasColumnName("SMSTranslogID");

                entity.Property(e => e.SourceTypeCdId).HasColumnName("SourceTypeCdID");

                entity.Property(e => e.StatusTypeCdId).HasColumnName("StatusTypeCdID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwExchangeFeeTransferDisbFeeAlloc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ExchangeFeeTransferDisb_FEE_ALLOC");

                entity.Property(e => e.AllocationAmount).HasColumnType("money");

                entity.Property(e => e.BssalesTaxAmt)
                    .HasColumnType("money")
                    .HasColumnName("BSSalesTaxAmt");

                entity.Property(e => e.Disbursementid).HasColumnName("disbursementid");
            });

            modelBuilder.Entity<VwFast1099sDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwFast1099sDetails");

                entity.Property(e => e.Address)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerRetax)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("BuyerRETax");

                entity.Property(e => e.BuyerRetaxPerc)
                    .HasColumnType("decimal(7, 4)")
                    .HasColumnName("BuyerRETaxPerc");

                entity.Property(e => e.City)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedUserId).HasColumnName("CreatedUserID");

                entity.Property(e => e.CurrentSeqNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Fast1099sDetailsId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FAST1099sDetailsId");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ForeignAddress)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.GrossProceeds).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.GrossProceedsPerc).HasColumnType("decimal(7, 4)");

                entity.Property(e => e.LastDeliveredDate).HasColumnType("datetime");

                entity.Property(e => e.LastExportedDate).HasColumnType("datetime");

                entity.Property(e => e.LastName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.OrigSeqNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ShortName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Ssntintype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SSNTINType")
                    .IsFixedLength();

                entity.Property(e => e.Ssntinvalue)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("SSNTINValue");

                entity.Property(e => e.Ssntinvalue2)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("SSNTINValue_2");

                entity.Property(e => e.State)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.VoidDate).HasColumnType("datetime");

                entity.Property(e => e.Zip)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwFast1099sDetailsIngrianDecrypt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwFast1099sDetails_Ingrian_Decrypt");

                entity.Property(e => e.Fast1099sDetailsId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FAST1099sDetailsId");

                entity.Property(e => e.Ssntinvalue2)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("SSNTINValue_2");
            });

            modelBuilder.Entity<VwFbpsalesPerson>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwFBPSalesPerson");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.SalesEmployeeId).HasColumnName("SalesEmployeeID");
            });

            modelBuilder.Entity<VwFeeTransferDisbFeeAlloc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_FeeTransferDisb_FEE_ALLOC");

                entity.Property(e => e.AllocationAmount).HasColumnType("money");

                entity.Property(e => e.BssalesTaxAmt)
                    .HasColumnType("money")
                    .HasColumnName("BSSalesTaxAmt");

                entity.Property(e => e.Disbursementid).HasColumnName("disbursementid");
            });

            modelBuilder.Entity<VwFileBusinessPartyName>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwFileBusinessPartyName");

                entity.Property(e => e.FileBusinessPartyId).HasColumnName("FileBusinessPartyID");

                entity.Property(e => e.Name)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.Name1)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.Name2)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.RoleTypeCdId).HasColumnName("RoleTypeCdID");
            });

            modelBuilder.Entity<VwIbaaccruedInterest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_IBAAccruedInterest");

                entity.Property(e => e.AccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BeneficaryTin)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("BeneficaryTIN");

                entity.Property(e => e.BeneficaryTintype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BeneficaryTINType");

                entity.Property(e => e.BeneficiaryAddress1)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryAddress2)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryCity)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryName)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryState)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryZip)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DepositorName)
                    .HasMaxLength(130)
                    .IsUnicode(false);

                entity.Property(e => e.Descr)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EscrowAccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.EscrowTrustBankAccount)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.Fastbuid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("FASTBUID");

                entity.Property(e => e.InvestmentBankName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.OrderNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RecordClassTypeId).HasColumnName("RecordClassTypeID");

                entity.Property(e => e.RecordRowId).HasColumnName("RecordRowID");

                entity.Property(e => e.SmsbankCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SMSBankCode");

                entity.Property(e => e.SmstranslogId).HasColumnName("SMSTranslogID");

                entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwIbadisbursementRecord>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_IBADisbursementRecord");

                entity.Property(e => e.AccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.AdjustmentReasonTypeCdId).HasColumnName("AdjustmentReasonTypeCdID");

                entity.Property(e => e.AdjustmentTypeCdId).HasColumnName("AdjustmentTypeCdID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BeneficaryTin)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("BeneficaryTIN");

                entity.Property(e => e.BeneficaryTintype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BeneficaryTINType");

                entity.Property(e => e.BeneficiaryAddress1)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryAddress2)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryCity)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryName)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryState)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryZip)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.Descr)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DisbursementMethodTypeCdId).HasColumnName("DisbursementMethodTypeCdID");

                entity.Property(e => e.DocumentNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EscrowAccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.EscrowTrustBankAccount)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.Fastbuid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("FASTBUID");

                entity.Property(e => e.InvestmentBankName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.OrderNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PayeeName)
                    .HasMaxLength(430)
                    .IsUnicode(false);

                entity.Property(e => e.RecordClassTypeId).HasColumnName("RecordClassTypeID");

                entity.Property(e => e.RecordRowId).HasColumnName("RecordRowID");

                entity.Property(e => e.SmsbankCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SMSBankCode");

                entity.Property(e => e.SmstranslogId).HasColumnName("SMSTranslogID");

                entity.Property(e => e.SourceTypeCdId).HasColumnName("SourceTypeCdID");

                entity.Property(e => e.StatusTypeCdId).HasColumnName("StatusTypeCdID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwIbainescrowDeposit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_IBAInescrowDeposit");

                entity.Property(e => e.AccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.AdjustedTransactionId).HasColumnName("AdjustedTransactionID");

                entity.Property(e => e.AdjustmentReasonTypeCdId).HasColumnName("AdjustmentReasonTypeCdID");

                entity.Property(e => e.AdjustmentTypeCdId).HasColumnName("AdjustmentTypeCdID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BeneficaryTin)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("BeneficaryTIN");

                entity.Property(e => e.BeneficaryTintype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BeneficaryTINType");

                entity.Property(e => e.BeneficiaryAddress1)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryAddress2)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryCity)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryName)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryState)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryZip)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CorrectingTransactionId).HasColumnName("CorrectingTransactionID");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.DepositorName)
                    .HasMaxLength(130)
                    .IsUnicode(false);

                entity.Property(e => e.DepositorTypeCdId).HasColumnName("DepositorTypeCdID");

                entity.Property(e => e.Descr)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EscrowAccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.EscrowTrustBankAccount)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.Fastbuid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("FASTBUID");

                entity.Property(e => e.InEscrowId).HasColumnName("InEscrowID");

                entity.Property(e => e.InvestmentBankName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.OrderNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RecordClassTypeId).HasColumnName("RecordClassTypeID");

                entity.Property(e => e.RecordRowId).HasColumnName("RecordRowID");

                entity.Property(e => e.RepresentingTypeCdId).HasColumnName("RepresentingTypeCdID");

                entity.Property(e => e.SmsbankCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SMSBankCode");

                entity.Property(e => e.SmstranslogId).HasColumnName("SMSTranslogID");

                entity.Property(e => e.SourceTypeCdId).HasColumnName("SourceTypeCdID");

                entity.Property(e => e.StatusTypeCdId).HasColumnName("StatusTypeCdID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwIbatransaction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_IBATransaction");

                entity.Property(e => e.AccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BeneficaryTin)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("BeneficaryTIN");

                entity.Property(e => e.BeneficaryTintype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BeneficaryTINType");

                entity.Property(e => e.BeneficiaryAddress1)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryAddress2)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryCity)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryName)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryState)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryZip)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Descr)
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.Fastbuid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("FASTBUID");

                entity.Property(e => e.IbaaccBalance)
                    .HasColumnType("money")
                    .HasColumnName("IBAAccBalance");

                entity.Property(e => e.IbatransactionId).HasColumnName("IBATransactionID");

                entity.Property(e => e.InvestmentBankName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsoldBankFlag).HasColumnName("ISOldBankFlag");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.OldAccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.OldInvestmentBankName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RecordClassTypeId).HasColumnName("RecordClassTypeID");

                entity.Property(e => e.RecordRowId).HasColumnName("RecordRowID");

                entity.Property(e => e.SmstranslogId).HasColumnName("SMSTranslogID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwInEscrowDepositForExchange>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_InEscrowDepositForExchange");

                entity.Property(e => e.Abanum)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ABANum");

                entity.Property(e => e.AccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Adjamount)
                    .HasColumnType("money")
                    .HasColumnName("ADJAmount");

                entity.Property(e => e.AdjclassTypeId).HasColumnName("ADJClassTypeID");

                entity.Property(e => e.Adjcomments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ADJComments");

                entity.Property(e => e.Adjdescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ADJDescription");

                entity.Property(e => e.AdjissueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADJIssueDate");

                entity.Property(e => e.AdjreceiptNum)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ADJReceiptNum");

                entity.Property(e => e.AdjustedTransactionId).HasColumnName("AdjustedTransactionID");

                entity.Property(e => e.AdjustmentReasonTypeCdId).HasColumnName("AdjustmentReasonTypeCdID");

                entity.Property(e => e.AdjustmentTypeCdId).HasColumnName("AdjustmentTypeCdID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BankName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CorrectingTransactionId).HasColumnName("CorrectingTransactionID");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.CreditToTypeCdId).HasColumnName("CreditToTypeCdID");

                entity.Property(e => e.DepositorName)
                    .HasMaxLength(130)
                    .IsUnicode(false);

                entity.Property(e => e.DepositorTypeCdId).HasColumnName("DepositorTypeCdID");

                entity.Property(e => e.Descr)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IbabankAccNum)
                    .HasMaxLength(90)
                    .IsUnicode(false)
                    .HasColumnName("IBABankAccNum");

                entity.Property(e => e.InEscrowId).HasColumnName("InEscrowID");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.ManualReceiptReason)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MemaccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("MEMAccountNum");

                entity.Property(e => e.MemdepositorTypeCdId).HasColumnName("MEMDepositorTypeCdID");

                entity.Property(e => e.Memname1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MEMName1");

                entity.Property(e => e.MemsmsbankCd)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("MEMSMSBankCd");

                entity.Property(e => e.Name1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ObjectCD");

                entity.Property(e => e.ReceiptNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RecordClassTypeId).HasColumnName("RecordClassTypeID");

                entity.Property(e => e.RecordRowId).HasColumnName("RecordRowID");

                entity.Property(e => e.RepresentingTypecdId).HasColumnName("RepresentingTypecdID");

                entity.Property(e => e.RoutingNum)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.SmsbankCd)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SMSBankCd");

                entity.Property(e => e.SmstranslogId).HasColumnName("SMSTranslogID");

                entity.Property(e => e.SourceTypeCdId).HasColumnName("SourceTypeCdID");

                entity.Property(e => e.StatusTypeCdId).HasColumnName("StatusTypeCdID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.Property(e => e.UserId).HasColumnName("userID");

                entity.Property(e => e.UserName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwInescrowdeposit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_inescrowdeposit");

                entity.Property(e => e.Abanum)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ABANum");

                entity.Property(e => e.AccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Adjamount)
                    .HasColumnType("money")
                    .HasColumnName("ADJAmount");

                entity.Property(e => e.AdjclassTypeId).HasColumnName("ADJClassTypeID");

                entity.Property(e => e.Adjcomments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ADJComments");

                entity.Property(e => e.Adjdescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ADJDescription");

                entity.Property(e => e.AdjissueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADJIssueDate");

                entity.Property(e => e.AdjreceiptNum)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ADJReceiptNum");

                entity.Property(e => e.AdjustedTransactionId).HasColumnName("AdjustedTransactionID");

                entity.Property(e => e.AdjustmentReasonTypeCdId).HasColumnName("AdjustmentReasonTypeCdID");

                entity.Property(e => e.AdjustmentTypeCdId).HasColumnName("AdjustmentTypeCdID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BankName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CorrectingTransactionId).HasColumnName("CorrectingTransactionID");

                entity.Property(e => e.CrFileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.CreditToTypeCdId).HasColumnName("CreditToTypeCdID");

                entity.Property(e => e.DepositorName)
                    .HasMaxLength(130)
                    .IsUnicode(false);

                entity.Property(e => e.DepositorTypeCdId).HasColumnName("DepositorTypeCdID");

                entity.Property(e => e.Descr)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InEscrowId).HasColumnName("InEscrowID");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.ManualReceiptReason)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MemaccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("MEMAccountNum");

                entity.Property(e => e.MemdepositorTypeCdId).HasColumnName("MEMDepositorTypeCdID");

                entity.Property(e => e.Memname1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MEMName1");

                entity.Property(e => e.MemsmsbankCd)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("MEMSMSBankCd");

                entity.Property(e => e.Name1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NewDepositor)
                    .HasMaxLength(130)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectCd)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ObjectCD");

                entity.Property(e => e.OldDepositor)
                    .HasMaxLength(130)
                    .IsUnicode(false);

                entity.Property(e => e.ReceiptNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RecordClassTypeId).HasColumnName("RecordClassTypeID");

                entity.Property(e => e.RecordRowId).HasColumnName("RecordRowID");

                entity.Property(e => e.RepresentingTypecdId).HasColumnName("RepresentingTypecdID");

                entity.Property(e => e.RoutingNum)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.SmsbankCd)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SMSBankCd");

                entity.Property(e => e.SmstranslogId).HasColumnName("SMSTranslogID");

                entity.Property(e => e.SourceTypeCdId).HasColumnName("SourceTypeCdID");

                entity.Property(e => e.StatusTypeCdId).HasColumnName("StatusTypeCdID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedEmployeeId).HasColumnName("UpdatedEmployeeID");

                entity.Property(e => e.UserId).HasColumnName("userID");

                entity.Property(e => e.UserName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwInescrowdepositRepost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_inescrowdeposit_Repost");

                entity.Property(e => e.AccountNum)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.AdjustmentTypeCdId).HasColumnName("AdjustmentTypeCdID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BankName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ExtractId).HasColumnName("ExtractID");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.ReceiptNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RecordClassTypeId).HasColumnName("RecordClassTypeID");

                entity.Property(e => e.RecordRowId).HasColumnName("RecordRowID");

                entity.Property(e => e.SmsbankCd)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SMSBankCd");

                entity.Property(e => e.SmstranslogId).HasColumnName("SMSTranslogID");

                entity.Property(e => e.SourceTypeCdId).HasColumnName("SourceTypeCdID");

                entity.Property(e => e.StatusTypeCdId).HasColumnName("StatusTypeCdID");

                entity.Property(e => e.TransactionTypeCdId).HasColumnName("TransactionTypeCdID");

                entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("userID");

                entity.Property(e => e.UserName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwServiceFileFeePaymentDetail1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwServiceFileFeePaymentDetail_1");

                entity.Property(e => e.BuyerChargeAmt).HasColumnType("money");

                entity.Property(e => e.SellerChargeAmt).HasColumnType("money");

                entity.Property(e => e.ServiceFileFeeId).HasColumnName("ServiceFileFeeID");
            });

            modelBuilder.Entity<VwServiceFileFeePaymentDetail2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwServiceFileFeePaymentDetail_2");

                entity.Property(e => e.BuyerChargeAmt).HasColumnType("money");

                entity.Property(e => e.BuyerNonPocchargeAmt)
                    .HasColumnType("money")
                    .HasColumnName("BuyerNonPOCChargeAmt");

                entity.Property(e => e.BuyerNonPocsalesTaxAmt)
                    .HasColumnType("money")
                    .HasColumnName("BuyerNonPOCSalesTaxAmt");

                entity.Property(e => e.BuyerSalesTaxAmt).HasColumnType("money");

                entity.Property(e => e.Poc)
                    .HasColumnType("money")
                    .HasColumnName("POC");

                entity.Property(e => e.Pocb)
                    .HasColumnType("money")
                    .HasColumnName("POCB");

                entity.Property(e => e.PocbforBuyerOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCBForBuyerOnly");

                entity.Property(e => e.PocbforSellerOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCBForSellerOnly");

                entity.Property(e => e.PocforBuyerOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCForBuyerOnly");

                entity.Property(e => e.PocforSellerOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCForSellerOnly");

                entity.Property(e => e.Poclender)
                    .HasColumnType("money")
                    .HasColumnName("POCLender");

                entity.Property(e => e.PoclenderBuyerChargeOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCLenderBuyerChargeOnly");

                entity.Property(e => e.PoclenderSellerChargeOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCLenderSellerChargeOnly");

                entity.Property(e => e.Pocmb)
                    .HasColumnType("money")
                    .HasColumnName("POCMB");

                entity.Property(e => e.PocmbbuyerChargeOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCMBBuyerChargeOnly");

                entity.Property(e => e.PocmbsellerChargeOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCMBSellerChargeOnly");

                entity.Property(e => e.Pocs)
                    .HasColumnType("money")
                    .HasColumnName("POCS");

                entity.Property(e => e.PocsforBuyerOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCSForBuyerOnly");

                entity.Property(e => e.PocsforSellerOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCSForSellerOnly");

                entity.Property(e => e.SellerChargeAmt).HasColumnType("money");

                entity.Property(e => e.SellerNonPocchargeAmt)
                    .HasColumnType("money")
                    .HasColumnName("SellerNonPOCChargeAmt");

                entity.Property(e => e.SellerNonPocsalesTaxAmt)
                    .HasColumnType("money")
                    .HasColumnName("SellerNonPOCSalesTaxAmt");

                entity.Property(e => e.SellerSalesTaxAmt).HasColumnType("money");

                entity.Property(e => e.ServiceFileFeeId).HasColumnName("ServiceFileFeeID");

                entity.Property(e => e.TotalBuyerPocchargeAmt)
                    .HasColumnType("money")
                    .HasColumnName("TotalBuyerPOCChargeAmt");

                entity.Property(e => e.TotalBuyerPocsalesTaxAmt)
                    .HasColumnType("money")
                    .HasColumnName("TotalBuyerPOCSalesTaxAmt");

                entity.Property(e => e.TotalPocchargeAmt)
                    .HasColumnType("money")
                    .HasColumnName("TotalPOCChargeAmt");

                entity.Property(e => e.TotalSellerPocchargeAmt)
                    .HasColumnType("money")
                    .HasColumnName("TotalSellerPOCChargeAmt");

                entity.Property(e => e.TotalSellerPocsalesTaxAmt)
                    .HasColumnType("money")
                    .HasColumnName("TotalSellerPOCSalesTaxAmt");
            });

            modelBuilder.Entity<VwServiceFileFeePaymentDetail3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwServiceFileFeePaymentDetail_3");

                entity.Property(e => e.BuyerChargeAmt).HasColumnType("money");

                entity.Property(e => e.BuyerNonPocchargeAmtAndTaxAmt)
                    .HasColumnType("money")
                    .HasColumnName("BuyerNonPOCChargeAmtAndTaxAmt");

                entity.Property(e => e.BuyerSalesTaxAmt).HasColumnType("money");

                entity.Property(e => e.Poc)
                    .HasColumnType("money")
                    .HasColumnName("POC");

                entity.Property(e => e.Pocb)
                    .HasColumnType("money")
                    .HasColumnName("POCB");

                entity.Property(e => e.PocbforBuyerOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCBForBuyerOnly");

                entity.Property(e => e.PocbforSellerOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCBForSellerOnly");

                entity.Property(e => e.PocforBuyerOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCForBuyerOnly");

                entity.Property(e => e.PocforSellerOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCForSellerOnly");

                entity.Property(e => e.Poclender)
                    .HasColumnType("money")
                    .HasColumnName("POCLender");

                entity.Property(e => e.PoclenderBuyerChargeOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCLenderBuyerChargeOnly");

                entity.Property(e => e.PoclenderSellerChargeOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCLenderSellerChargeOnly");

                entity.Property(e => e.Pocmb)
                    .HasColumnType("money")
                    .HasColumnName("POCMB");

                entity.Property(e => e.PocmbbuyerChargeOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCMBBuyerChargeOnly");

                entity.Property(e => e.PocmbsellerChargeOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCMBSellerChargeOnly");

                entity.Property(e => e.Pocs)
                    .HasColumnType("money")
                    .HasColumnName("POCS");

                entity.Property(e => e.PocsforBuyerOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCSForBuyerOnly");

                entity.Property(e => e.PocsforSellerOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCSForSellerOnly");

                entity.Property(e => e.SellerChargeAmt).HasColumnType("money");

                entity.Property(e => e.SellerNonPocchargeAmtAndTaxAmt)
                    .HasColumnType("money")
                    .HasColumnName("SellerNonPOCChargeAmtAndTaxAmt");

                entity.Property(e => e.SellerSalesTaxAmt).HasColumnType("money");

                entity.Property(e => e.ServiceFileFeeId).HasColumnName("ServiceFileFeeID");
            });

            modelBuilder.Entity<VwServiceFileFeePaymentDetail4>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwServiceFileFeePaymentDetail_4");

                entity.Property(e => e.BuyerNonPocchargeAmtAndTaxAmt)
                    .HasColumnType("money")
                    .HasColumnName("BuyerNonPOCChargeAmtAndTaxAmt");

                entity.Property(e => e.SellerNonPocchargeAmtAndTaxAmt)
                    .HasColumnType("money")
                    .HasColumnName("SellerNonPOCChargeAmtAndTaxAmt");

                entity.Property(e => e.ServiceFileFeeId).HasColumnName("ServiceFileFeeID");
            });

            modelBuilder.Entity<VwServiceFileFeePaymentDetailCd2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwServiceFileFeePaymentDetail_CD_2");

                entity.Property(e => e.BuyerChargeAmt).HasColumnType("money");

                entity.Property(e => e.BuyerNonPocchargeAmt)
                    .HasColumnType("money")
                    .HasColumnName("BuyerNonPOCChargeAmt");

                entity.Property(e => e.BuyerNonPocsalesTaxAmt)
                    .HasColumnType("money")
                    .HasColumnName("BuyerNonPOCSalesTaxAmt");

                entity.Property(e => e.BuyerSalesTaxAmt).HasColumnType("money");

                entity.Property(e => e.Poc)
                    .HasColumnType("money")
                    .HasColumnName("POC");

                entity.Property(e => e.Pocb)
                    .HasColumnType("money")
                    .HasColumnName("POCB");

                entity.Property(e => e.PocbforBuyerOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCBForBuyerOnly");

                entity.Property(e => e.PocbforSellerOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCBForSellerOnly");

                entity.Property(e => e.PocforBuyerOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCForBuyerOnly");

                entity.Property(e => e.PocforSellerOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCForSellerOnly");

                entity.Property(e => e.Poclender)
                    .HasColumnType("money")
                    .HasColumnName("POCLender");

                entity.Property(e => e.PoclenderBuyerChargeOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCLenderBuyerChargeOnly");

                entity.Property(e => e.PoclenderSellerChargeOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCLenderSellerChargeOnly");

                entity.Property(e => e.Pocmb)
                    .HasColumnType("money")
                    .HasColumnName("POCMB");

                entity.Property(e => e.PocmbbuyerChargeOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCMBBuyerChargeOnly");

                entity.Property(e => e.PocmbsellerChargeOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCMBSellerChargeOnly");

                entity.Property(e => e.Pocs)
                    .HasColumnType("money")
                    .HasColumnName("POCS");

                entity.Property(e => e.PocsforBuyerOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCSForBuyerOnly");

                entity.Property(e => e.PocsforSellerOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCSForSellerOnly");

                entity.Property(e => e.SellerChargeAmt).HasColumnType("money");

                entity.Property(e => e.SellerNonPocchargeAmt)
                    .HasColumnType("money")
                    .HasColumnName("SellerNonPOCChargeAmt");

                entity.Property(e => e.SellerNonPocsalesTaxAmt)
                    .HasColumnType("money")
                    .HasColumnName("SellerNonPOCSalesTaxAmt");

                entity.Property(e => e.SellerSalesTaxAmt).HasColumnType("money");

                entity.Property(e => e.ServiceFileFeeId).HasColumnName("ServiceFileFeeID");

                entity.Property(e => e.TotalBuyerPocchargeAmt)
                    .HasColumnType("money")
                    .HasColumnName("TotalBuyerPOCChargeAmt");

                entity.Property(e => e.TotalBuyerPocsalesTaxAmt)
                    .HasColumnType("money")
                    .HasColumnName("TotalBuyerPOCSalesTaxAmt");

                entity.Property(e => e.TotalPocchargeAmt)
                    .HasColumnType("money")
                    .HasColumnName("TotalPOCChargeAmt");

                entity.Property(e => e.TotalSellerPocchargeAmt)
                    .HasColumnType("money")
                    .HasColumnName("TotalSellerPOCChargeAmt");

                entity.Property(e => e.TotalSellerPocsalesTaxAmt)
                    .HasColumnType("money")
                    .HasColumnName("TotalSellerPOCSalesTaxAmt");
            });

            modelBuilder.Entity<VwServiceFileFeePaymentDetailCd3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwServiceFileFeePaymentDetail_CD_3");

                entity.Property(e => e.BuyerChargeAmt).HasColumnType("money");

                entity.Property(e => e.BuyerNonPocchargeAmtAndTaxAmt)
                    .HasColumnType("money")
                    .HasColumnName("BuyerNonPOCChargeAmtAndTaxAmt");

                entity.Property(e => e.BuyerSalesTaxAmt).HasColumnType("money");

                entity.Property(e => e.Poc)
                    .HasColumnType("money")
                    .HasColumnName("POC");

                entity.Property(e => e.Pocb)
                    .HasColumnType("money")
                    .HasColumnName("POCB");

                entity.Property(e => e.Pocbbrkr)
                    .HasColumnType("money")
                    .HasColumnName("POCBBrkr");

                entity.Property(e => e.PocbbrkrBuyerChargeOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCBBrkrBuyerChargeOnly");

                entity.Property(e => e.PocbbrkrSellerChargeOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCBBrkrSellerChargeOnly");

                entity.Property(e => e.PocbforBuyerOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCBForBuyerOnly");

                entity.Property(e => e.PocbforSellerOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCBForSellerOnly");

                entity.Property(e => e.PocforBuyerOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCForBuyerOnly");

                entity.Property(e => e.PocforSellerOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCForSellerOnly");

                entity.Property(e => e.Poclender)
                    .HasColumnType("money")
                    .HasColumnName("POCLender");

                entity.Property(e => e.PoclenderBuyerChargeOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCLenderBuyerChargeOnly");

                entity.Property(e => e.PoclenderSellerChargeOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCLenderSellerChargeOnly");

                entity.Property(e => e.Pocmb)
                    .HasColumnType("money")
                    .HasColumnName("POCMB");

                entity.Property(e => e.PocmbbuyerChargeOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCMBBuyerChargeOnly");

                entity.Property(e => e.PocmbsellerChargeOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCMBSellerChargeOnly");

                entity.Property(e => e.Pocs)
                    .HasColumnType("money")
                    .HasColumnName("POCS");

                entity.Property(e => e.Pocsa)
                    .HasColumnType("money")
                    .HasColumnName("POCSA");

                entity.Property(e => e.PocsabuyerChargeOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCSABuyerChargeOnly");

                entity.Property(e => e.PocsasellerChargeOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCSASellerChargeOnly");

                entity.Property(e => e.Pocsbrkr)
                    .HasColumnType("money")
                    .HasColumnName("POCSBrkr");

                entity.Property(e => e.PocsbrkrBuyerChargeOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCSBrkrBuyerChargeOnly");

                entity.Property(e => e.PocsbrkrSellerChargeOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCSBrkrSellerChargeOnly");

                entity.Property(e => e.PocsforBuyerOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCSForBuyerOnly");

                entity.Property(e => e.PocsforSellerOnly)
                    .HasColumnType("money")
                    .HasColumnName("POCSForSellerOnly");

                entity.Property(e => e.SellerChargeAmt).HasColumnType("money");

                entity.Property(e => e.SellerNonPocchargeAmtAndTaxAmt)
                    .HasColumnType("money")
                    .HasColumnName("SellerNonPOCChargeAmtAndTaxAmt");

                entity.Property(e => e.SellerSalesTaxAmt).HasColumnType("money");

                entity.Property(e => e.ServiceFileFeeId).HasColumnName("ServiceFileFeeID");
            });

            modelBuilder.Entity<VwServiceFileFeePaymentDetailPocSupp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwServiceFileFeePaymentDetail_POC_SUPP");

                entity.Property(e => e.Fileid).HasColumnName("fileid");

                entity.Property(e => e.Hud1buyercharge).HasColumnName("hud1buyercharge");

                entity.Property(e => e.Hud1sellercharge).HasColumnName("hud1sellercharge");

                entity.Property(e => e.Pocbflg).HasColumnName("POCBFlg");

                entity.Property(e => e.PocbflgBuyerOnly).HasColumnName("POCBFlgBuyerOnly");

                entity.Property(e => e.PocbflgSellerOnly).HasColumnName("POCBFlgSellerOnly");

                entity.Property(e => e.Pocflg).HasColumnName("POCFlg");

                entity.Property(e => e.PocflgBuyerOnly).HasColumnName("POCFlgBuyerOnly");

                entity.Property(e => e.PocflgSellerOnly).HasColumnName("POCFlgSellerOnly");

                entity.Property(e => e.PoclenderFlg).HasColumnName("POCLenderFlg");

                entity.Property(e => e.PoclenderFlgBuyerOnly).HasColumnName("POCLenderFlgBuyerOnly");

                entity.Property(e => e.PoclenderFlgSellerOnly).HasColumnName("POCLenderFlgSellerOnly");

                entity.Property(e => e.Pocmbflg).HasColumnName("POCMBFlg");

                entity.Property(e => e.PocmbflgBuyerOnly).HasColumnName("POCMBFlgBuyerOnly");

                entity.Property(e => e.PocmbflgSellerOnly).HasColumnName("POCMBFlgSellerOnly");

                entity.Property(e => e.Pocsflg).HasColumnName("POCSFlg");

                entity.Property(e => e.PocsflgBuyerOnly).HasColumnName("POCSFlgBuyerOnly");

                entity.Property(e => e.PocsflgSellerOnly).HasColumnName("POCSFlgSellerOnly");

                entity.Property(e => e.TotPoc)
                    .HasColumnType("money")
                    .HasColumnName("TotPOC");

                entity.Property(e => e.TotPocb)
                    .HasColumnType("money")
                    .HasColumnName("TotPOCB");

                entity.Property(e => e.TotPocbbuyerOnly)
                    .HasColumnType("money")
                    .HasColumnName("TotPOCBBuyerOnly");

                entity.Property(e => e.TotPocbsellerOnly)
                    .HasColumnType("money")
                    .HasColumnName("TotPOCBSellerOnly");

                entity.Property(e => e.TotPocbuyerOnly)
                    .HasColumnType("money")
                    .HasColumnName("TotPOCBuyerOnly");

                entity.Property(e => e.TotPoclender)
                    .HasColumnType("money")
                    .HasColumnName("TotPOCLender");

                entity.Property(e => e.TotPoclenderBuyerOnly)
                    .HasColumnType("money")
                    .HasColumnName("TotPOCLenderBuyerOnly");

                entity.Property(e => e.TotPoclenderSellerOnly)
                    .HasColumnType("money")
                    .HasColumnName("TotPOCLenderSellerOnly");

                entity.Property(e => e.TotPocmb)
                    .HasColumnType("money")
                    .HasColumnName("TotPOCMB");

                entity.Property(e => e.TotPocmbbuyerOnly)
                    .HasColumnType("money")
                    .HasColumnName("TotPOCMBBuyerOnly");

                entity.Property(e => e.TotPocmbsellerOnly)
                    .HasColumnType("money")
                    .HasColumnName("TotPOCMBSellerOnly");

                entity.Property(e => e.TotPocs)
                    .HasColumnType("money")
                    .HasColumnName("TotPOCS");

                entity.Property(e => e.TotPocsbuyerOnly)
                    .HasColumnType("money")
                    .HasColumnName("TotPOCSBuyerOnly");

                entity.Property(e => e.TotPocsellerOnly)
                    .HasColumnType("money")
                    .HasColumnName("TotPOCSellerOnly");

                entity.Property(e => e.TotPocssellerOnly)
                    .HasColumnType("money")
                    .HasColumnName("TotPOCSSellerOnly");
            });

            modelBuilder.Entity<VwSsCdcharge>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SS_CDCharge");

                entity.Property(e => e.ChargeId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ChargeID");

                entity.Property(e => e.TotPoc)
                    .HasColumnType("money")
                    .HasColumnName("TotPOC");
            });

            modelBuilder.Entity<VwTemplateValidation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwTemplateValidation");

                entity.Property(e => e.TemplateObjectCd)
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwTrust32FinancialIngrian>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwTrust32Financial_Ingrian");

                entity.Property(e => e.BankAcctNum)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Trust32FinancialId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Trust32FinancialID");
            });

            modelBuilder.Entity<VwTrust32FinancialIngrianDecrypt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwTrust32Financial_Ingrian_Decrypt");

                entity.Property(e => e.BankAcctNum)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Trust32FinancialId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Trust32FinancialID");
            });

            modelBuilder.Entity<VwUserBusUnitXref>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwUserBusUnitXref");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<VwUserBusUnitXrefWithOoactivity>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwUserBusUnitXrefWithOOActivity");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<VwUserOwningOfficeSecurity>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwUserOwningOfficeSecurity");

                entity.Property(e => e.ActivityGrpId).HasColumnName("ActivityGrpID");

                entity.Property(e => e.ActivityId).HasColumnName("ActivityID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<VwUserSecurityXref>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwUserSecurityXref");

                entity.Property(e => e.ActivityGrpId).HasColumnName("ActivityGrpID");

                entity.Property(e => e.ActivityId).HasColumnName("ActivityID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<VwUserSecurityXrefEcheck>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwUserSecurityXref_Echeck");

                entity.Property(e => e.ActivityGrpId).HasColumnName("ActivityGrpID");

                entity.Property(e => e.ActivityId).HasColumnName("ActivityID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<WffCountry>(entity =>
            {
                entity.HasKey(e => e.CountryId)
                    .HasName("PK__WFF_Coun__10D160BECF5ACAB5")
                    .IsClustered(false);

                entity.ToTable("WFF_Country");

                entity.HasIndex(e => e.CountryName, "CDX_WFF_Country")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.Property(e => e.CountryId).HasColumnName("CountryID");

                entity.Property(e => e.CountryName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<WffCounty>(entity =>
            {
                entity.HasKey(e => e.CountyId)
                    .HasName("PK__WFF_Coun__B68F9DF68A26EB01")
                    .IsClustered(false);

                entity.ToTable("WFF_County");

                entity.HasIndex(e => e.CountyName, "CDX_WFF_County")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.GeoCountyId, "CDX_WFF_GeoCountyID")
                    .HasFillFactor(90);

                entity.Property(e => e.CountyId).HasColumnName("CountyID");

                entity.Property(e => e.CountyName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.GeoCountyId).HasColumnName("GeoCountyID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.GeoCounty)
                    .WithMany(p => p.WffCounties)
                    .HasForeignKey(d => d.GeoCountyId)
                    .HasConstraintName("FK__WFF_Count__GeoCo__337A5246");
            });

            modelBuilder.Entity<WffGeoFilter>(entity =>
            {
                entity.HasKey(e => e.GeoFilterId)
                    .HasName("IDX_GeoFilter_2")
                    .IsClustered(false);

                entity.ToTable("WFF_GeoFilter");

                entity.HasIndex(e => e.WorkFlow2Id, "CDX_GeoFilter_2")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.GeoLocationId, "IDX_GeoFilter_1")
                    .HasFillFactor(90);

                entity.Property(e => e.GeoFilterId).HasColumnName("GeoFilterID");

                entity.Property(e => e.GeoLocationId).HasColumnName("GeoLocationID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.WorkFlow2Id).HasColumnName("WorkFlow2ID");

                entity.HasOne(d => d.GeoLocation)
                    .WithMany(p => p.WffGeoFilters)
                    .HasForeignKey(d => d.GeoLocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__WFF_GeoFi__GeoLo__346E767F");
            });

            modelBuilder.Entity<WffGeoLocation>(entity =>
            {
                entity.HasKey(e => e.GeoLocationId)
                    .HasName("PK__WFF_GeoL__81B96642A1D60B1C")
                    .IsClustered(false);

                entity.ToTable("WFF_GeoLocation");

                entity.HasIndex(e => new { e.CountryId, e.StateId, e.CountyId }, "UQ_GeoLocation_1")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.GeoLocationId).HasColumnName("GeoLocationID");

                entity.Property(e => e.CountryId).HasColumnName("CountryID");

                entity.Property(e => e.CountyId).HasColumnName("CountyID");

                entity.Property(e => e.StateId).HasColumnName("StateID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.WffGeoLocations)
                    .HasForeignKey(d => d.CountryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__WFF_GeoLo__Count__35629AB8");

                entity.HasOne(d => d.County)
                    .WithMany(p => p.WffGeoLocations)
                    .HasForeignKey(d => d.CountyId)
                    .HasConstraintName("FK__WFF_GeoLo__Count__3656BEF1");

                entity.HasOne(d => d.State)
                    .WithMany(p => p.WffGeoLocations)
                    .HasForeignKey(d => d.StateId)
                    .HasConstraintName("FK__WFF_GeoLo__State__374AE32A");
            });

            modelBuilder.Entity<WffState>(entity =>
            {
                entity.HasKey(e => e.StateId)
                    .HasName("PK__WFF_Stat__C3BA3B5B63EE5F2F")
                    .IsClustered(false);

                entity.ToTable("WFF_State");

                entity.HasIndex(e => e.StateName, "CDX_WFF_State")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.GeoStateId, "IDX_WFF_GeoStateID")
                    .HasFillFactor(90);

                entity.Property(e => e.StateId).HasColumnName("StateID");

                entity.Property(e => e.GeoStateId).HasColumnName("GeoStateID");

                entity.Property(e => e.StateName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.GeoState)
                    .WithMany(p => p.WffStates)
                    .HasForeignKey(d => d.GeoStateId)
                    .HasConstraintName("FK__WFF_State__GeoSt__383F0763");
            });

            modelBuilder.Entity<WireDisbursementDetail>(entity =>
            {
                entity.ToTable("WireDisbursementDetail");

                entity.HasIndex(e => e.WireTransmittalDate, "IX_WireDisbursementDetail_WireTransmittalDate")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.WireTypeCdId, "IX_WireDisbursementDetail_WireTypeCdId")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.EventLogId, "ixn_WDD_EventLogID")
                    .HasFillFactor(90);

                entity.Property(e => e.WireDisbursementDetailId).HasColumnName("WireDisbursementDetailID");

                entity.Property(e => e.Approval1Date).HasColumnType("datetime");

                entity.Property(e => e.Approval1UserId).HasColumnName("Approval1UserID");

                entity.Property(e => e.Approval2Date).HasColumnType("datetime");

                entity.Property(e => e.Approval2UserId).HasColumnName("Approval2UserID");

                entity.Property(e => e.ApprovedAmount).HasColumnType("money");

                entity.Property(e => e.BeneficiaryAccountNum)
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryAdditionalInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryAdviceInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryBankAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryBankName)
                    .HasMaxLength(34)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryBic)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("BeneficiaryBIC");

                entity.Property(e => e.BeneficiaryName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryNote1)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryNote2)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryNote3)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.BeneficiaryNote4)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DocExtn)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ElectronicFileId).HasColumnName("ElectronicFileID");

                entity.Property(e => e.Estatus)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("EStatus");

                entity.Property(e => e.EventLogId).HasColumnName("EventLogID");

                entity.Property(e => e.ImgCreatedDate).HasColumnType("date");

                entity.Property(e => e.ImgName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ImgTypeCdId).HasColumnName("ImgTypeCdID");

                entity.Property(e => e.IntermediaryBankAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.IntermediaryBankName)
                    .HasMaxLength(34)
                    .IsUnicode(false);

                entity.Property(e => e.IntermediaryBic)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("IntermediaryBIC");

                entity.Property(e => e.Istatus).HasColumnName("IStatus");

                entity.Property(e => e.OriginatorInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OriginatorName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ReceivingBankAbanum)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ReceivingBankABANum");

                entity.Property(e => e.ReceivingBankAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ReceivingBankBranchTransitNumber)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ReceivingBankFicode)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("ReceivingBankFICode");

                entity.Property(e => e.ReceivingBankName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RejectedDate).HasColumnType("datetime");

                entity.Property(e => e.RejectedUserId).HasColumnName("RejectedUserID");

                entity.Property(e => e.TrnfedId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TRNfedId");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.WireApprovalTypeCdId).HasColumnName("WireApprovalTypeCdID");

                entity.Property(e => e.WireInsSourceTypeCdId).HasColumnName("WireInsSourceTypeCdID");

                entity.Property(e => e.WireTransmittalDate).HasColumnType("datetime");

                entity.HasOne(d => d.WireTypeCd)
                    .WithMany(p => p.WireDisbursementDetails)
                    .HasForeignKey(d => d.WireTypeCdId)
                    .HasConstraintName("FK__WireDisbu__WireT__4C3E4074");
            });

            modelBuilder.Entity<WireHistory>(entity =>
            {
                entity.ToTable("WireHistory");

                entity.Property(e => e.WireHistoryId).HasColumnName("WireHistoryID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.WireDisbursementDetailId).HasColumnName("WireDisbursementDetailID");

                entity.Property(e => e.WireTypeCdid).HasColumnName("WireTypeCDID");

                entity.HasOne(d => d.WireDisbursementDetail)
                    .WithMany(p => p.WireHistories)
                    .HasForeignKey(d => d.WireDisbursementDetailId)
                    .HasConstraintName("WireHistoryWireDisbursementDetailt2FK");

                entity.HasOne(d => d.WireTypeCd)
                    .WithMany(p => p.WireHistories)
                    .HasForeignKey(d => d.WireTypeCdid)
                    .HasConstraintName("WireHistoryTypeCdDmt1FK");
            });

            modelBuilder.Entity<WireInstructionValidation>(entity =>
            {
                entity.HasKey(e => e.WireAuthPayeeXrefId)
                    .HasName("PK_WireAuthPayeeXrefID");

                entity.ToTable("WireInstructionValidation");

                entity.Property(e => e.WireAuthPayeeXrefId).HasColumnName("WireAuthPayeeXrefID");

                entity.Property(e => e.BankAccountAuthenticationId).HasColumnName("BankAccountAuthenticationID");

                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.PayeeIdentificationId).HasColumnName("PayeeIdentificationID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.WireDisbursementDetailId).HasColumnName("WireDisbursementDetailID");

                entity.HasOne(d => d.BankAccountAuthentication)
                    .WithMany(p => p.WireInstructionValidations)
                    .HasForeignKey(d => d.BankAccountAuthenticationId)
                    .HasConstraintName("FK_BankAccountAuthenticationID");

                entity.HasOne(d => d.PayeeIdentification)
                    .WithMany(p => p.WireInstructionValidations)
                    .HasForeignKey(d => d.PayeeIdentificationId)
                    .HasConstraintName("FK_PayeeIdentificationID");

                entity.HasOne(d => d.WireDisbursementDetail)
                    .WithMany(p => p.WireInstructionValidations)
                    .HasForeignKey(d => d.WireDisbursementDetailId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WireDisbursementDetailID");
            });

            modelBuilder.Entity<WireReceipt>(entity =>
            {
                entity.ToTable("WireReceipt");

                entity.HasIndex(e => e.FileId, "IX_WireReceipt_FileID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.FileId, e.ReceiptNum }, "IX_WireReceipt_FileIDReceiptNum")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.InEscrowId, "IX_WireReceipt_InEscrowID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.IncomingWireDetailId, "IX_WireReceipt_IncomingWireDetailId")
                    .HasFillFactor(90);

                entity.Property(e => e.WireReceiptId).HasColumnName("WireReceiptID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CreditTo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.InEscrowId).HasColumnName("InEscrowID");

                entity.Property(e => e.IncomingWireDetailId).HasColumnName("IncomingWireDetailID");

                entity.Property(e => e.Mrflag).HasColumnName("MRFlag");

                entity.Property(e => e.ReceiptNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.File)
                    .WithMany(p => p.WireReceipts)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conWireReceipt4FK");

                entity.HasOne(d => d.InEscrow)
                    .WithMany(p => p.WireReceipts)
                    .HasForeignKey(d => d.InEscrowId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conWireReceipt3FK");

                entity.HasOne(d => d.IncomingWireDetail)
                    .WithMany(p => p.WireReceipts)
                    .HasForeignKey(d => d.IncomingWireDetailId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conWireReceipt2FK");
            });

            modelBuilder.Entity<WorkFlowTemplate>(entity =>
            {
                entity.ToTable("WorkFlowTemplate");

                entity.HasIndex(e => new { e.BusinessUnitId, e.Name, e.StatusCd, e.WorkFlowTemplateId }, "IdxBuWFTID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ProcessOwnerRegionId, "IdxProcessOwnerRegion")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BusinessUnitId, "XIF29WorkFlowTemplate")
                    .HasFillFactor(90);

                entity.Property(e => e.WorkFlowTemplateId).HasColumnName("WorkFlowTemplateID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationEmployeeId).HasColumnName("CreationEmployeeID");

                entity.Property(e => e.DeActivationDate).HasColumnType("datetime");

                entity.Property(e => e.Descr)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

                entity.Property(e => e.IsPrioritizedFlag).HasDefaultValueSql("((0))");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessAttributeCdId).HasColumnName("ProcessAttributeCdID");

                entity.Property(e => e.ProcessOwnerRegionId).HasColumnName("ProcessOwnerRegionID");

                entity.Property(e => e.ProcessTypeId).HasColumnName("ProcessTypeID");

                entity.Property(e => e.ProductTypeCdId).HasColumnName("ProductTypeCdID");

                entity.Property(e => e.ReActivationDate).HasColumnType("datetime");

                entity.Property(e => e.RoleTypeCdId).HasColumnName("RoleTypeCdID");

                entity.Property(e => e.ServiceTypeCdId).HasColumnName("ServiceTypeCdID");

                entity.Property(e => e.StatusCd).HasColumnName("StatusCD");

                entity.Property(e => e.StatusChangeDate).HasColumnType("datetime");

                entity.Property(e => e.StatusChangeUserId).HasColumnName("StatusChangeUserID");

                entity.Property(e => e.Ucflag).HasColumnName("UCFlag");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UpdateEmployeeId).HasColumnName("UpdateEmployeeID");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.WorkFlowTemplateBusinessUnits)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conWorkFlowTemplate5FK");

                entity.HasOne(d => d.ProcessOwnerRegion)
                    .WithMany(p => p.WorkFlowTemplateProcessOwnerRegions)
                    .HasForeignKey(d => d.ProcessOwnerRegionId)
                    .HasConstraintName("FkPoBusinessunit");

                entity.HasOne(d => d.ProcessType)
                    .WithMany(p => p.WorkFlowTemplates)
                    .HasForeignKey(d => d.ProcessTypeId)
                    .HasConstraintName("FkPoProcessType");

                entity.HasOne(d => d.ProductTypeCd)
                    .WithMany(p => p.WorkFlowTemplateProductTypeCds)
                    .HasForeignKey(d => d.ProductTypeCdId)
                    .HasConstraintName("conWorkFlowTemplate3FK");

                entity.HasOne(d => d.RoleTypeCd)
                    .WithMany(p => p.WorkFlowTemplateRoleTypeCds)
                    .HasForeignKey(d => d.RoleTypeCdId)
                    .HasConstraintName("FK__WorkFlowT__RoleT__4C460010");

                entity.HasOne(d => d.UpdateEmployee)
                    .WithMany(p => p.WorkFlowTemplates)
                    .HasForeignKey(d => d.UpdateEmployeeId)
                    .HasConstraintName("FK__WorkFlowT__Updat__4D3A2449");
            });

            modelBuilder.Entity<WorkFlowTemplateAdditionalRoleTypeXref>(entity =>
            {
                entity.HasKey(e => e.WorkFlowTemplateAdditionalRoleTypeXrefId)
                    .HasName("IDXWorkFlowTemplateAdditionalRoleTypeXrefID")
                    .IsClustered(false);

                entity.ToTable("WorkFlowTemplateAdditionalRoleTypeXref");

                entity.HasIndex(e => e.WorkFlowTemplateId, "IdxPkWFTAddlRole")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.Property(e => e.AddlRoleTypeCdId).HasColumnName("AddlRoleTypeCdID");

                entity.Property(e => e.WorkFlowTemplateId).HasColumnName("WorkFlowTemplateID");

                entity.HasOne(d => d.AddlRoleTypeCd)
                    .WithMany(p => p.WorkFlowTemplateAdditionalRoleTypeXrefs)
                    .HasForeignKey(d => d.AddlRoleTypeCdId)
                    .HasConstraintName("WorkFlowTemplateAdditionalRoleTypeXref_TypeCddmt_Fk");

                entity.HasOne(d => d.WorkFlowTemplate)
                    .WithMany(p => p.WorkFlowTemplateAdditionalRoleTypeXrefs)
                    .HasForeignKey(d => d.WorkFlowTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WorkFlowTemplateAdditionalRoleTypeXref_WorkFlowTemplate_Fk");
            });

            modelBuilder.Entity<WorkFlowTemplateApnxref>(entity =>
            {
                entity.ToTable("WorkFlowTemplateAPNXRef");

                entity.HasIndex(e => e.ApntypeCdId, "idx_WorkFlowTemplateAPNXRef_APNTypeCdId");

                entity.HasIndex(e => e.WorkFlowTemplateId, "idx_WorkFlowTemplateAPNXRef_WorkFlowTemplateId");

                entity.Property(e => e.WorkFlowTemplateApnxrefId).HasColumnName("WorkFlowTemplateAPNXRefId");

                entity.Property(e => e.ApntypeCdId).HasColumnName("APNTypeCdId");

                entity.HasOne(d => d.ApntypeCd)
                    .WithMany(p => p.WorkFlowTemplateApnxrefs)
                    .HasForeignKey(d => d.ApntypeCdId)
                    .HasConstraintName("FK_WorkFlowTemplateAPNXRef_APNTypeCdId");

                entity.HasOne(d => d.WorkFlowTemplate)
                    .WithMany(p => p.WorkFlowTemplateApnxrefs)
                    .HasForeignKey(d => d.WorkFlowTemplateId)
                    .HasConstraintName("FK_WorkFlowTemplateAPNXRef_WorkFlowTemplateId");
            });

            modelBuilder.Entity<WorkFlowTemplateApplicationXref>(entity =>
            {
                entity.HasKey(e => e.WorkFlowTemplateApplicationXrefId)
                    .IsClustered(false);

                entity.ToTable("WorkFlowTemplateApplicationXref");

                entity.HasIndex(e => e.WorkFlowtemplateId, "IdxClustWFTAppl")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.WorkFlowtemplateId, e.ApplicationId }, "IdxWFTAookId")
                    .HasFillFactor(90);

                entity.Property(e => e.WorkFlowTemplateApplicationXrefId).HasColumnName("WorkFlowTemplateApplicationXref_ID");

                entity.Property(e => e.SourceTypeCdId).HasColumnName("SourceTypeCdID");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.WorkFlowTemplateApplicationXrefs)
                    .HasForeignKey(d => d.ApplicationId)
                    .HasConstraintName("FK2Apl");

                entity.HasOne(d => d.WorkFlowtemplate)
                    .WithMany(p => p.WorkFlowTemplateApplicationXrefs)
                    .HasForeignKey(d => d.WorkFlowtemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK1Wft");
            });

            modelBuilder.Entity<WorkFlowTemplateBusOrgXref>(entity =>
            {
                entity.HasKey(e => e.WorkFlowTemplateBusOrgXrefId)
                    .HasName("IDXWorkFlowTemplateBusOrgXrefID")
                    .IsClustered(false);

                entity.ToTable("WorkFlowTemplateBusOrgXref");

                entity.HasIndex(e => new { e.WorkFlowTemplateId, e.BusOrgId }, "IX_WorkFlowTemplateBusOrgXref_WFID_BOID")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.BusOrgId, e.WorkFlowTemplateId }, "IdxBusOrgWFT")
                    .HasFillFactor(90);

                entity.Property(e => e.WorkFlowTemplateId).HasColumnName("WorkFlowTemplateID");

                entity.HasOne(d => d.BusOrg)
                    .WithMany(p => p.WorkFlowTemplateBusOrgXrefs)
                    .HasForeignKey(d => d.BusOrgId)
                    .HasConstraintName("WorkFlowTemplateBusOrgXref_BusOrg_FK");

                entity.HasOne(d => d.WorkFlowTemplate)
                    .WithMany(p => p.WorkFlowTemplateBusOrgXrefs)
                    .HasForeignKey(d => d.WorkFlowTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkFlowTemplateBusOrgXRef");
            });

            modelBuilder.Entity<WorkFlowTemplateBusSegXref>(entity =>
            {
                entity.HasKey(e => e.WorkFlowTemplateBusSegXrefId)
                    .HasName("IDXWorkFlowTemplateBusSegXRefID")
                    .IsClustered(false);

                entity.ToTable("WorkFlowTemplateBusSegXRef");

                entity.HasIndex(e => e.WorkFlowTemplateId, "CDXWorkFlowTemplateBusSegXRef")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.WorkFlowTemplateId, e.BusSegTypeCdId }, "PKWorkFlowTemplateBusSegXRef")
                    .IsUnique();

                entity.Property(e => e.WorkFlowTemplateBusSegXrefId).HasColumnName("WorkFlowTemplateBusSegXRefId");
            });

            modelBuilder.Entity<WorkFlowTemplateChangeHistory>(entity =>
            {
                entity.HasKey(e => e.WorkFlowTemplateHistoryId)
                    .HasName("WorkFlowTemplateChangeHistory_pk");

                entity.ToTable("WorkFlowTemplateChangeHistory");

                entity.Property(e => e.WorkFlowTemplateHistoryId).HasColumnName("WorkFlowTemplateHistoryID");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Notes)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.WorkFlowTemplateId).HasColumnName("WorkFlowTemplateID");

                entity.HasOne(d => d.EventTypeCd)
                    .WithMany(p => p.WorkFlowTemplateChangeHistories)
                    .HasForeignKey(d => d.EventTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WorkFlowTemplateChangeHistory_TypeCdDmt_Fk");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WorkFlowTemplateChangeHistories)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WorkFlowTemplateChangeHistory_Employee_Fk");

                entity.HasOne(d => d.WorkFlowTemplate)
                    .WithMany(p => p.WorkFlowTemplateChangeHistories)
                    .HasForeignKey(d => d.WorkFlowTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("WorkFlowTemplateChangeHistory_WorkFlowTemplateID_Fk");
            });

            modelBuilder.Entity<WorkFlowTemplateGeographicXref>(entity =>
            {
                entity.HasKey(e => e.WorkFlowTemplateGeographicXrefId)
                    .HasName("IDXWorkFlowTemplateGeographicXRefID")
                    .IsClustered(false);

                entity.ToTable("WorkFlowTemplateGeographicXRef");

                entity.HasIndex(e => e.WorkFlowTemplateId, "CDXWorkFlowTemplateGeographicXRef")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.WorkFlowTemplateId, e.GeoClassTypeCdId, e.GeoRegionId }, "PKWorkFlowTemplateGeographicXRef")
                    .IsUnique();

                entity.Property(e => e.WorkFlowTemplateGeographicXrefId).HasColumnName("WorkFlowTemplateGeographicXRefId");
            });

            modelBuilder.Entity<WorkFlowTemplateNightly>(entity =>
            {
                entity.HasKey(e => e.WorkFlowTemplateId)
                    .HasName("PK__WorkFlow__F0446D27BB4DB5DF");

                entity.ToTable("WorkFlowTemplateNightly");

                entity.Property(e => e.WorkFlowTemplateId)
                    .ValueGeneratedNever()
                    .HasColumnName("WorkFlowTemplateID");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StatusCd).HasColumnName("StatusCD");
            });

            modelBuilder.Entity<WorkFlowTemplateOfficeString>(entity =>
            {
                entity.HasKey(e => e.WorkFlowTemplateOfficeStringsId)
                    .HasName("IDXWorkFlowTemplateOfficeStringsID1")
                    .IsClustered(false);

                entity.HasIndex(e => e.WorkFlowTemplateId, "IdxWFTOCluster")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.Property(e => e.OfficeIds).IsUnicode(false);

                entity.Property(e => e.OfficeNames).IsUnicode(false);
            });

            modelBuilder.Entity<WorkFlowTemplateOfficesXref>(entity =>
            {
                entity.HasKey(e => e.WorkFlowTemplateOfficesXrefId)
                    .HasName("IDXWorkFlowTemplateOfficesXrefID")
                    .IsClustered(false);

                entity.ToTable("WorkFlowTemplateOfficesXref");

                entity.HasIndex(e => new { e.WorkFlowTemplateId, e.OfficeId, e.OfficeGroupId }, "IX_WorkFlowTemplateOfficesXref")
                    .IsUnique()
                    .IsClustered();

                entity.HasIndex(e => new { e.OfficeGroupId, e.OfficeId, e.WorkFlowTemplateId }, "IdxOfficeGRPWFTId")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.OfficeId, e.WorkFlowTemplateId }, "IdxOfficeWFTId")
                    .HasFillFactor(90);

                entity.Property(e => e.WorkFlowTemplateId).HasColumnName("WorkFlowTemplateID");
            });

            modelBuilder.Entity<WorkFlowTemplateOriginatorXref>(entity =>
            {
                entity.HasKey(e => e.WorkFlowOriginatorId)
                    .HasName("PK_WorkFlowOriginatorID");

                entity.ToTable("WorkFlowTemplateOriginatorXref");

                entity.HasIndex(e => new { e.WorkFlowTemplateId, e.OriginatorTypeCdId }, "IX_WorkFlowTemplateOriginatorXref_WorkFlowTemplateID_OriginatorTypeCdID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.WorkFlowTemplateId, "idxWorkFlowTemplateID")
                    .HasFillFactor(90);

                entity.Property(e => e.WorkFlowOriginatorId).HasColumnName("WorkFlowOriginatorID");

                entity.Property(e => e.OriginatorId).HasColumnName("OriginatorID");

                entity.Property(e => e.OriginatorTypeCdId).HasColumnName("OriginatorTypeCdID");

                entity.Property(e => e.WorkFlowTemplateId).HasColumnName("WorkFlowTemplateID");

                entity.HasOne(d => d.OriginatorTypeCd)
                    .WithMany(p => p.WorkFlowTemplateOriginatorXrefs)
                    .HasForeignKey(d => d.OriginatorTypeCdId)
                    .HasConstraintName("FK_OriginatorTypeCdID");

                entity.HasOne(d => d.WorkFlowTemplate)
                    .WithMany(p => p.WorkFlowTemplateOriginatorXrefs)
                    .HasForeignKey(d => d.WorkFlowTemplateId)
                    .HasConstraintName("FK_WorkFlowTemplateID");
            });

            modelBuilder.Entity<WorkFlowTemplateProductTypeXref>(entity =>
            {
                entity.ToTable("WorkFlowTemplateProductTypeXRef");

                entity.HasIndex(e => e.ProductTypeCdId, "idx_WFTPTXref_ProductTypeCdID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.WorkFlowTemplateId, "idx_WFTPTXref_WorkFlowTemplateId")
                    .HasFillFactor(90);

                entity.Property(e => e.WorkFlowTemplateProductTypeXrefId).HasColumnName("WorkFlowTemplateProductTypeXRefId");

                entity.Property(e => e.ProductTypeCdId).HasColumnName("ProductTypeCdID");

                entity.HasOne(d => d.ProductTypeCd)
                    .WithMany(p => p.WorkFlowTemplateProductTypeXrefs)
                    .HasForeignKey(d => d.ProductTypeCdId)
                    .HasConstraintName("FK_WorkFlowTemplateProductTypeXRef_ProductTypeCdID");

                entity.HasOne(d => d.WorkFlowTemplate)
                    .WithMany(p => p.WorkFlowTemplateProductTypeXrefs)
                    .HasForeignKey(d => d.WorkFlowTemplateId)
                    .HasConstraintName("FK_WorkFlowTemplateProductTypeXRef_WorkFlowTemplateId");
            });

            modelBuilder.Entity<WorkFlowTemplateProgramTypeXref>(entity =>
            {
                entity.ToTable("WorkFlowTemplateProgramTypeXref");

                entity.HasIndex(e => new { e.WorkFlowTemplateId, e.ProgramTypeId }, "Unq_WorkFlowTemplateProgramTypeXref")
                    .HasFillFactor(90);

                entity.Property(e => e.ProgramTypeId).HasColumnName("ProgramTypeID");

                entity.Property(e => e.WorkFlowTemplateId).HasColumnName("WorkFlowTemplateID");

                entity.HasOne(d => d.ProgramType)
                    .WithMany(p => p.WorkFlowTemplateProgramTypeXrefs)
                    .HasForeignKey(d => d.ProgramTypeId)
                    .HasConstraintName("FK_WorkFlowTemplateProgramTypeXref_ProgramTypeID");

                entity.HasOne(d => d.WorkFlowTemplate)
                    .WithMany(p => p.WorkFlowTemplateProgramTypeXrefs)
                    .HasForeignKey(d => d.WorkFlowTemplateId)
                    .HasConstraintName("FK_WorkFlowTemplateProgramTypeXref_WorkFlowTemplateID");
            });

            modelBuilder.Entity<WorkFlowTemplatePropertyTypeXref>(entity =>
            {
                entity.HasKey(e => e.WorkFlowTemplatePropertyTypeXrefId)
                    .HasName("IDXWorkFlowTemplatePropertyTypeXRefID")
                    .IsClustered(false);

                entity.ToTable("WorkFlowTemplatePropertyTypeXRef");

                entity.HasIndex(e => e.WorkFlowTemplateId, "CDXWorkFlowTemplatePropertyTypeXRef")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.WorkFlowTemplateId, e.PropertyTypeCdId }, "PKWorkFlowTemplatePropertyTypeXRef")
                    .IsUnique();

                entity.Property(e => e.WorkFlowTemplatePropertyTypeXrefId).HasColumnName("WorkFlowTemplatePropertyTypeXRefId");
            });

            modelBuilder.Entity<WorkFlowTemplateSearchTypeXref>(entity =>
            {
                entity.ToTable("WorkFlowTemplateSearchTypeXref");

                entity.HasIndex(e => new { e.WorkFlowTemplateId, e.SearchTypeCdId }, "Unq_WorkFlowTemplateSearchTypeXref")
                    .HasFillFactor(90);

                entity.Property(e => e.SearchTypeCdId).HasColumnName("SearchTypeCdID");

                entity.Property(e => e.WorkFlowTemplateId).HasColumnName("WorkFlowTemplateID");

                entity.HasOne(d => d.SearchTypeCd)
                    .WithMany(p => p.WorkFlowTemplateSearchTypeXrefs)
                    .HasForeignKey(d => d.SearchTypeCdId)
                    .HasConstraintName("FK_WorkFlowTemplateSearchTypeXref_SearchTypeCdId");

                entity.HasOne(d => d.WorkFlowTemplate)
                    .WithMany(p => p.WorkFlowTemplateSearchTypeXrefs)
                    .HasForeignKey(d => d.WorkFlowTemplateId)
                    .HasConstraintName("FK_WorkFlowTemplateSearchTypeXref_WorkFlowTemplateID");
            });

            modelBuilder.Entity<WorkFlowTemplateServiceTypeXref>(entity =>
            {
                entity.ToTable("WorkFlowTemplateServiceTypeXRef");

                entity.HasIndex(e => e.WorkFlowTemplateId, "idx_WFTPTXref_WorkFlowTemplateId")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ServiceTypeCdId, "idx_WFTSTXref_ServiceTypeCdId")
                    .HasFillFactor(90);

                entity.Property(e => e.WorkFlowTemplateServiceTypeXrefId).HasColumnName("WorkFlowTemplateServiceTypeXRefID");

                entity.HasOne(d => d.WorkFlowTemplate)
                    .WithMany(p => p.WorkFlowTemplateServiceTypeXrefs)
                    .HasForeignKey(d => d.WorkFlowTemplateId)
                    .HasConstraintName("FK_WorkFlowTemplateServiceTypeXRef_WorkFlowTemplateId");
            });

            modelBuilder.Entity<WorkFlowTemplateTransTypeXref>(entity =>
            {
                entity.HasKey(e => e.WorkFlowTemplateTransTypeXrefId)
                    .HasName("IDXWorkFlowTemplateTransTypeXRefID")
                    .IsClustered(false);

                entity.ToTable("WorkFlowTemplateTransTypeXRef");

                entity.HasIndex(e => e.WorkFlowTemplateId, "CDXWorkFlowTemplateTransTypeXRef")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.WorkFlowTemplateId, e.TransTypeCdId }, "PKWorkFlowTemplateTransTypeXRef")
                    .IsUnique();

                entity.Property(e => e.WorkFlowTemplateTransTypeXrefId).HasColumnName("WorkFlowTemplateTransTypeXRefId");
            });

            modelBuilder.Entity<WorkFlowTime>(entity =>
            {
                entity.ToTable("WorkFlowTime");

                entity.Property(e => e.WorkFlowTimeId).HasColumnName("WorkFlowTimeID");

                entity.Property(e => e.FromTime).HasColumnType("time(3)");

                entity.Property(e => e.StatusCd).HasColumnName("StatusCD");

                entity.Property(e => e.ToTime).HasColumnType("time(3)");
            });

            modelBuilder.Entity<WorkFlowTitleEscrowInfo>(entity =>
            {
                entity.HasKey(e => e.TitleEscrowInfoId)
                    .HasName("PK__WorkFlow__77CABFCE049FD7F7");

                entity.ToTable("WorkFlowTitleEscrowInfo");

                entity.Property(e => e.TitleEscrowInfoId)
                    .ValueGeneratedNever()
                    .HasColumnName("TitleEscrowInfoID");

                entity.Property(e => e.AddendumDue)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.CommitmentDue)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.OrderReceivedDate).HasColumnType("datetime");

                entity.Property(e => e.SurveyDue)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.TcexpirationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TCExpirationDate");

                entity.Property(e => e.TcissuedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TCIssuedDate");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.TitleEscrowInfo)
                    .WithOne(p => p.WorkFlowTitleEscrowInfo)
                    .HasForeignKey<WorkFlowTitleEscrowInfo>(d => d.TitleEscrowInfoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__WorkFlowT__Title__63296568");
            });

            modelBuilder.Entity<WorkGroup>(entity =>
            {
                entity.ToTable("WorkGroup");

                entity.HasIndex(e => e.Name, "IDXWorkGroup1")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.WorkgroupId).HasColumnName("WorkgroupID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.Property(e => e.DeactivationDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.ReactivationDate).HasColumnType("datetime");

                entity.Property(e => e.StatusChgComments)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.StatusChgDate).HasColumnType("datetime");

                entity.Property(e => e.StatusChgUserId).HasColumnName("StatusChgUserID");

                entity.Property(e => e.Updts)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CreationUser)
                    .WithMany(p => p.WorkGroupCreationUsers)
                    .HasForeignKey(d => d.CreationUserId)
                    .HasConstraintName("FKWorkGroup1");

                entity.HasOne(d => d.StatusChgUser)
                    .WithMany(p => p.WorkGroupStatusChgUsers)
                    .HasForeignKey(d => d.StatusChgUserId)
                    .HasConstraintName("FKWorkGroup2");
            });

            modelBuilder.Entity<WorkQueue>(entity =>
            {
                entity.ToTable("WorkQueue");

                entity.HasIndex(e => e.QueueName, "IDXWorkQueueName")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.Comments)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FolderName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdDate).HasColumnType("datetime");

                entity.Property(e => e.QueueName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ServerName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TifannotationFlag).HasColumnName("TIFAnnotationFlag");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.WorkQserver)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("WorkQServer");

                entity.HasMany(d => d.BusinessUnits)
                    .WithMany(p => p.WorkQueues)
                    .UsingEntity<Dictionary<string, object>>(
                        "WorkQueueBusUnitXref",
                        l => l.HasOne<BusinessUnit>().WithMany().HasForeignKey("BusinessUnitId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__WorkQueue__Busin__716FC523"),
                        r => r.HasOne<WorkQueue>().WithMany().HasForeignKey("WorkQueueId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__WorkQueue__WorkQ__66F9F64C"),
                        j =>
                        {
                            j.HasKey("WorkQueueId", "BusinessUnitId").HasName("PKWorkQueueBusUnit");

                            j.ToTable("WorkQueueBusUnitXRef");
                        });
            });

            modelBuilder.Entity<WorkQueueCyberArk>(entity =>
            {
                entity.ToTable("WorkQueueCyberArk");

                entity.Property(e => e.AppName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.HostName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdated).HasColumnType("datetime");

                entity.Property(e => e.RootName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.SafeName)
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WorkQueueCyberArkXref>(entity =>
            {
                entity.ToTable("WorkQueueCyberArkXref");

                entity.Property(e => e.CredContent)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EmailAddr)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdated).HasColumnType("datetime");

                entity.Property(e => e.ObjectName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ResetIntervalDay).HasDefaultValueSql("((365))");

                entity.HasOne(d => d.WorkQueueCyberArk)
                    .WithMany(p => p.WorkQueueCyberArkXrefs)
                    .HasForeignKey(d => d.WorkQueueCyberArkId)
                    .HasConstraintName("FK_WorkQueueCyberArkId_WorkQueueCyberArk");

                entity.HasOne(d => d.WorkQueueType)
                    .WithMany(p => p.WorkQueueCyberArkXrefs)
                    .HasForeignKey(d => d.WorkQueueTypeId)
                    .HasConstraintName("FK_WorkQueueTypeId_WorkQueueType");
            });

            modelBuilder.Entity<WorkQueueEmailBody>(entity =>
            {
                entity.ToTable("WorkQueueEmailBody");

                entity.Property(e => e.WorkQueueEmailBodyId).HasColumnName("WorkQueueEmailBodyID");

                entity.Property(e => e.DateTimeIn).HasColumnType("datetime");

                entity.Property(e => e.FileName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FolderName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ServerName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.UserCreatedNavigation)
                    .WithMany(p => p.WorkQueueEmailBodies)
                    .HasForeignKey(d => d.UserCreated)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__WorkQueue__UserC__2851ED06");

                entity.HasOne(d => d.WorkQueue)
                    .WithMany(p => p.WorkQueueEmailBodies)
                    .HasForeignKey(d => d.WorkQueueId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__WorkQueue__WorkQ__2946113F");
            });

            modelBuilder.Entity<WorkQueueMessage>(entity =>
            {
                entity.HasKey(e => e.WorkQueueMessageId)
                    .HasName("PKWorkQueueMessage")
                    .IsClustered(false);

                entity.ToTable("WorkQueueMessage");

                entity.HasIndex(e => new { e.DateTimeIn, e.WorkQueueId, e.StatusCd, e.WorkQueueMessageId }, "CDXWorkQueueMessage")
                    .IsClustered()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.WorkQueueId, "IDXWorkQueueMessage1")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.StatusCd, "IDXWorkQueueMessage2")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.StatusCd, e.LastUpdDate }, "IDXWorkQueueMessage3")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.LastUpdUser, e.LastUpdDate, e.WorkQueueMessageId }, "IDXWorkQueueMessage4")
                    .HasFillFactor(90);

                entity.Property(e => e.DateTimeIn).HasColumnType("datetime");

                entity.Property(e => e.FileName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FolderName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdDate).HasColumnType("datetime");

                entity.Property(e => e.MessageInfo)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ServerName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SourceInfo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.WorkQueueEmailBodyId).HasColumnName("WorkQueueEmailBodyID");

                entity.HasOne(d => d.LastUpdUserNavigation)
                    .WithMany(p => p.WorkQueueMessageLastUpdUserNavigations)
                    .HasForeignKey(d => d.LastUpdUser)
                    .HasConstraintName("FK__WorkQueue__LastU__6BBEAB69");

                entity.HasOne(d => d.UserCreatedNavigation)
                    .WithMany(p => p.WorkQueueMessageUserCreatedNavigations)
                    .HasForeignKey(d => d.UserCreated)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__WorkQueue__UserC__6CB2CFA2");

                entity.HasOne(d => d.WorkQueueEmailBody)
                    .WithMany(p => p.WorkQueueMessages)
                    .HasForeignKey(d => d.WorkQueueEmailBodyId)
                    .HasConstraintName("FK_WorkQueueMessage_WorkQueueEmailBody");

                entity.HasOne(d => d.WorkQueue)
                    .WithMany(p => p.WorkQueueMessages)
                    .HasForeignKey(d => d.WorkQueueId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__WorkQueue__WorkQ__6DA6F3DB");

                entity.HasOne(d => d.WorkQueueSourceTypeCd)
                    .WithMany(p => p.WorkQueueMessages)
                    .HasForeignKey(d => d.WorkQueueSourceTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__WorkQueue__WorkQ__6E9B1814");
            });

            modelBuilder.Entity<WorkQueueMessageHistory>(entity =>
            {
                entity.HasKey(e => e.WorkQueueMessageId)
                    .HasName("PK__WorkQueu__AF5F098FBC047E46");

                entity.ToTable("WorkQueueMessageHistory");

                entity.Property(e => e.WorkQueueMessageId).ValueGeneratedNever();

                entity.Property(e => e.DateTimeIn).HasColumnType("datetime");

                entity.Property(e => e.FileName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FolderName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdDate).HasColumnType("datetime");

                entity.Property(e => e.MessageInfo)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ServerName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SourceInfo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");
            });

            modelBuilder.Entity<WorkQueueMessageLog>(entity =>
            {
                entity.HasKey(e => new { e.WorkQueueId, e.StatusCd, e.WorkQueueMessageId, e.WorkQueueMessageLogId })
                    .HasName("PKWorkQueueMessageLog");

                entity.ToTable("WorkQueueMessageLog");

                entity.HasIndex(e => e.WorkQueueMessageId, "IDXWorkQueueMessageLog1")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.WorkQueueMessageLogId, "IDXWorkQueueMessageLog2")
                    .HasFillFactor(90);

                entity.Property(e => e.WorkQueueMessageLogId).ValueGeneratedOnAdd();

                entity.Property(e => e.Comments)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDate).HasColumnType("datetime");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.WorkQueueMessageLogs)
                    .HasForeignKey(d => d.FileId)
                    .HasConstraintName("FK__WorkQueue__FileI__70836086");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WorkQueueMessageLogs)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__WorkQueue__UserI__717784BF");

                entity.HasOne(d => d.WorkQueue)
                    .WithMany(p => p.WorkQueueMessageLogs)
                    .HasForeignKey(d => d.WorkQueueId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__WorkQueue__WorkQ__726BA8F8");
            });

            modelBuilder.Entity<WorkQueueMessageLogHistory>(entity =>
            {
                entity.HasKey(e => e.WorkQueueMessageLogId)
                    .HasName("PK__WorkQueu__9C6B6C9EDFCB477C");

                entity.ToTable("WorkQueueMessageLogHistory");

                entity.HasIndex(e => e.LogCreatedDate, "IX_WorkQueueMessageLogHistory_LogCreatedDate_Incl")
                    .HasFillFactor(90);

                entity.Property(e => e.WorkQueueMessageLogId).ValueGeneratedNever();

                entity.Property(e => e.Comments)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.LogCreatedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<WorkQueueMessageXmldatum>(entity =>
            {
                entity.HasKey(e => e.WorkQueueMessageId)
                    .HasName("PK__WorkQueueMessage1");

                entity.ToTable("WorkQueueMessageXMLData");

                entity.Property(e => e.WorkQueueMessageId).ValueGeneratedNever();

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.Xmltext)
                    .IsUnicode(false)
                    .HasColumnName("XMLText");
            });

            modelBuilder.Entity<WorkQueueRfax>(entity =>
            {
                entity.ToTable("WorkQueueRFax");

                entity.HasIndex(e => e.FaxNumber, "IX_WorkQueueRFax")
                    .IsUnique();

                entity.Property(e => e.WorkQueueRfaxId).HasColumnName("WorkQueueRFaxId");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FaxNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdDate).HasColumnType("datetime");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.WorkQueueType)
                    .WithMany(p => p.WorkQueueRfaxes)
                    .HasForeignKey(d => d.WorkQueueTypeId)
                    .HasConstraintName("FK_WorkQueueRFax_WorkQueueType");
            });

            modelBuilder.Entity<WorkQueueSummary>(entity =>
            {
                entity.HasKey(e => e.WorkQueueId)
                    .HasName("PK__WorkQueu__32155424CC78DDAF");

                entity.ToTable("WorkQueueSummary");

                entity.Property(e => e.WorkQueueId).ValueGeneratedNever();

                entity.Property(e => e.TifannotationFlag).HasColumnName("TIFAnnotationFlag");
            });

            modelBuilder.Entity<WorkQueueTrigger>(entity =>
            {
                entity.ToTable("WorkQueueTrigger");

                entity.HasIndex(e => new { e.BusinessUnitId, e.StatusCd }, "IDXWorkQueueTrigger1")
                    .HasFillFactor(90);

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.WorkQueueTriggers)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__WorkQueue__Busin__1523E10B");
            });

            modelBuilder.Entity<WorkQueueTriggerXref>(entity =>
            {
                entity.HasKey(e => new { e.WorkQueueId, e.BusinessUnitId, e.WorkQueueTriggerId })
                    .HasName("PKWorkQueueTriggerXRef");

                entity.ToTable("WorkQueueTriggerXRef");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.WorkQueueTriggerXrefs)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conWorkQueueTriggerXRef3FK");

                entity.HasOne(d => d.WorkQueue)
                    .WithMany(p => p.WorkQueueTriggerXrefs)
                    .HasForeignKey(d => d.WorkQueueId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conWorkQueueTriggerXRef1FK");

                entity.HasOne(d => d.WorkQueueTrigger)
                    .WithMany(p => p.WorkQueueTriggerXrefs)
                    .HasForeignKey(d => d.WorkQueueTriggerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conWorkQueueTriggerXRef2FK");
            });

            modelBuilder.Entity<WorkQueueType>(entity =>
            {
                entity.ToTable("WorkQueueType");

                entity.HasIndex(e => new { e.WorkQueueId, e.WorkQueueTypeCdId }, "IDXWorkQueueTypeCd")
                    .HasFillFactor(90);

                entity.Property(e => e.LastMsgDate).HasColumnType("datetime");

                entity.Property(e => e.OtherDetails)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReceiverData)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.WorkQueue)
                    .WithMany(p => p.WorkQueueTypes)
                    .HasForeignKey(d => d.WorkQueueId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__WorkQueue__WorkQ__7824824E");

                entity.HasOne(d => d.WorkQueueTypeCd)
                    .WithMany(p => p.WorkQueueTypes)
                    .HasForeignKey(d => d.WorkQueueTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__WorkQueue__WorkQ__7918A687");
            });

            modelBuilder.Entity<WorkQueueUserXref>(entity =>
            {
                entity.HasKey(e => new { e.WorkQueueId, e.UserId })
                    .HasName("PKWorkQueueUser");

                entity.ToTable("WorkQueueUserXRef");

                entity.HasIndex(e => e.UserId, "IDXWorkQueueUserXRef1")
                    .HasFillFactor(90);

                entity.Property(e => e.IsDefault).HasColumnName("isDefault");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.WorkQueueUserXrefs)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__WorkQueue__UserI__7A0CCAC0");

                entity.HasOne(d => d.WorkQueue)
                    .WithMany(p => p.WorkQueueUserXrefs)
                    .HasForeignKey(d => d.WorkQueueId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__WorkQueue__WorkQ__7B00EEF9");
            });

            modelBuilder.Entity<Workflow>(entity =>
            {
                entity.ToTable("Workflow");

                entity.HasIndex(e => new { e.BusinessUnitId, e.Name }, "indWorkflow2")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.BusinessUnitId, e.ServiceTypeCdId, e.Name }, "indWorkflow4")
                    .HasFillFactor(90);

                entity.Property(e => e.WorkflowId).HasColumnName("WorkflowID");

                entity.Property(e => e.BusinessUnitId).HasColumnName("BusinessUnitID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.Property(e => e.DeactivationDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.ReactivationDate).HasColumnType("datetime");

                entity.Property(e => e.ServiceTypeCdId).HasColumnName("ServiceTypeCdID");

                entity.Property(e => e.StatusChgComments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StatusChgDate).HasColumnType("datetime");

                entity.Property(e => e.StatusChgUserId).HasColumnName("StatusChgUserID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.Workflows)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conWorklow2Fk");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.Workflows)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conWorkflow4Fk");

                entity.HasOne(d => d.CreationUser)
                    .WithMany(p => p.WorkflowCreationUsers)
                    .HasForeignKey(d => d.CreationUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conWorkflow3Fk");

                entity.HasOne(d => d.ServiceTypeCd)
                    .WithMany(p => p.Workflows)
                    .HasForeignKey(d => d.ServiceTypeCdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conWorkflow5Fk");

                entity.HasOne(d => d.StatusChgUser)
                    .WithMany(p => p.WorkflowStatusChgUsers)
                    .HasForeignKey(d => d.StatusChgUserId)
                    .HasConstraintName("conWorkflow6Fk");
            });

            modelBuilder.Entity<Workflow2>(entity =>
            {
                entity.ToTable("workflow2");

                entity.HasIndex(e => e.UpdTs, "DW_IXN01_Workflow2_UpdTS")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.RegionId, "IDX1WorkFlow2")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FileId, "XIF37workflow2")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.WorkFlow2Id).HasColumnName("WorkFlow2ID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CreationUserId).HasColumnName("CreationUserID");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FileNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceTypeCdId).HasColumnName("ServiceTypeCdID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.WorkFlowTemplateId).HasColumnName("WorkFlowTemplateID");

                entity.HasOne(d => d.File)
                    .WithOne(p => p.Workflow2)
                    .HasForeignKey<Workflow2>(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conWorklow22Fk");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.Workflow2s)
                    .HasForeignKey(d => d.RegionId)
                    .HasConstraintName("conWorkFlow21FK");
            });

            modelBuilder.Entity<WorkflowSequence>(entity =>
            {
                entity.HasKey(e => e.WorkflowSeqId)
                    .HasName("conWorkflowSeq1Pk");

                entity.ToTable("WorkflowSequence");

                entity.HasIndex(e => new { e.ClassTypeId, e.WorkflowId, e.UnitId, e.SeqNum }, "indWorkflowSeq2")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.WorkflowId, e.UnitId }, "indWorkflowSeq3")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.WorkflowSeqId).HasColumnName("WorkflowSeqID");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassTypeID");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NextClassTypeId).HasColumnName("NextClassTypeID");

                entity.Property(e => e.NextUnitId).HasColumnName("NextUnitID");

                entity.Property(e => e.UnitId).HasColumnName("UnitID");

                entity.Property(e => e.UpdTs)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("UpdTS");

                entity.Property(e => e.WorkflowId).HasColumnName("WorkflowID");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.WorkflowSequences)
                    .HasForeignKey(d => d.ClassTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conWorkflowSeq3Fk");

                entity.HasOne(d => d.Workflow)
                    .WithMany(p => p.WorkflowSequences)
                    .HasForeignKey(d => d.WorkflowId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("conWorkflowSeq2Fk");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
